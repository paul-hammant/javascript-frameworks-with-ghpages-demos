b'<!DOCTYPE html>\n<html class="ng-scope" ng-app="demo" xmlns="http://www.w3.org/1999/xhtml">\n <head>\n  <style type="text/css">\n   @charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}\n  </style>\n  <meta charset="utf-8"/>\n  <link href="./gh-pages/css/demo.css" rel="stylesheet" type="text/css"/>\n  <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.7/angular.min.js">\n  </script>\n  <script src="./dist/ng-content-editable.min.js">\n  </script>\n  <script src="./gh-pages/app.js">\n  </script>\n  <title>\n   ng-contenteditable\n  </title>\n </head>\n <body class="ng-scope" ng-controller="Ctrl">\n  <div class="container">\n   <section class="content">\n    <h2>\n     Example 1: HTML5 validations\n    </h2>\n    <p class="explanation">\n     You can use\n     <strong>\n      ng-maxlength\n     </strong>\n     and\n     <strong>\n      ng-minlength\n     </strong>\n     to build validations, for example:\n     <br/>\n     ng-maxlength = 1000\n     <span>\n      |\n     </span>\n     ng-minlength = 3\n     <br/>\n     <i>\n      Notice that `-error` class is added in the contenteditable element for you handle it.\n     </i>\n    </p>\n    <span class="input input--hoshi">\n     <div class="input__field input__field--hoshi ng-pristine ng-untouched ng-valid ng-valid-minlength ng-valid-maxlength" contenteditable="" ng-maxlength="1000" ng-minlength="3" ng-model="model.example1">\n     </div>\n     <label class="input__label input__label--hoshi input__label--hoshi-blue" for="input-4">\n      <span class="input__label-content input__label-content--hoshi">\n       Answer\n      </span>\n     </label>\n    </span>\n    <pre class="ng-binding"></pre>\n   </section>\n   <hr/>\n   <section class="content">\n    <h2>\n     Example 2: without any optional attributes\n    </h2>\n    <p class="explanation">\n     This time the `contenteditable` will work as expected, adding html code when you breakline for example.\n    </p>\n    <span class="input input--hoshi">\n     <div class="input__field input__field--hoshi ng-pristine ng-untouched ng-valid" contenteditable="" ng-model="model.example2">\n     </div>\n     <label class="input__label input__label--hoshi input__label--hoshi-blue" for="input-4">\n      <span class="input__label-content input__label-content--hoshi">\n       Answer\n      </span>\n     </label>\n    </span>\n    <pre class="ng-binding"></pre>\n   </section>\n   <hr/>\n   <section class="content">\n    <h2>\n     Example 3: remove HTML tags\n    </h2>\n    <p class="explanation">\n     You can use the\n     <strong>\n      only-text\n     </strong>\n     attribute to make the html tags inside the contenteditable disappear.\n     <br/>\n     <i>\n      Notice even breakline will be not possible to be added.\n     </i>\n    </p>\n    <span class="input input--hoshi">\n     <div class="input__field input__field--hoshi ng-pristine ng-untouched ng-valid" contenteditable="" ng-model="model.example3" only-text="true">\n     </div>\n     <label class="input__label input__label--hoshi input__label--hoshi-blue" for="input-4">\n      <span class="input__label-content input__label-content--hoshi">\n       Answer\n      </span>\n     </label>\n    </span>\n    <pre class="ng-binding"></pre>\n   </section>\n   <hr/>\n   <section class="content">\n    <h2>\n     Example 4: turn breaklines in `/r/n`\n    </h2>\n    <p class="explanation">\n     In case you need to save in your store (ex: database), with the traditionals specials characters `/r/n`, just use the\n     <strong>\n      convert-new-lines\n     </strong>\n     attribute.\n     <br/>\n     Notice `ng-content-editable` will replace the `divs` and `brs` with `/r/n`.\n    </p>\n    <span class="input input--hoshi">\n     <div class="input__field input__field--hoshi ng-pristine ng-untouched ng-valid" contenteditable="" convert-new-lines="true" ng-model="model.example4" only-text="true">\n     </div>\n     <label class="input__label input__label--hoshi input__label--hoshi-blue" for="input-4">\n      <span class="input__label-content input__label-content--hoshi">\n       Answer\n      </span>\n     </label>\n    </span>\n    <pre class="ng-binding"></pre>\n   </section>\n  </div>\n </body>\n</html>'b'<!DOCTYPE html>\n<html class="ng-scope" ng-app="demo" xmlns="http://www.w3.org/1999/xhtml">\n <head>\n  <style type="text/css">\n   @charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}\n  </style>\n  <meta charset="utf-8"/>\n  <link href="./gh-pages/css/demo.css" rel="stylesheet" type="text/css"/>\n  <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.7/angular.min.js">\n  </script>\n  <script src="./dist/ng-content-editable.min.js">\n  </script>\n  <script src="./gh-pages/app.js">\n  </script>\n  <title>\n   ng-contenteditable\n  </title>\n </head>\n <body class="ng-scope" ng-controller="Ctrl">\n  <div class="container">\n   <section class="content">\n    <h2>\n     Example 1: HTML5 validations\n    </h2>\n    <p class="explanation">\n     You can use\n     <strong>\n      ng-maxlength\n     </strong>\n     and\n     <strong>\n      ng-minlength\n     </strong>\n     to build validations, for example:\n     <br/>\n     ng-maxlength = 1000\n     <span>\n      |\n     </span>\n     ng-minlength = 3\n     <br/>\n     <i>\n      Notice that `-error` class is added in the contenteditable element for you handle it.\n     </i>\n    </p>\n    <span class="input input--hoshi">\n     <div class="input__field input__field--hoshi ng-pristine ng-untouched ng-valid ng-valid-minlength ng-valid-maxlength" contenteditable="" ng-maxlength="1000" ng-minlength="3" ng-model="model.example1">\n     </div>\n     <label class="input__label input__label--hoshi input__label--hoshi-blue" for="input-4">\n      <span class="input__label-content input__label-content--hoshi">\n       Answer\n      </span>\n     </label>\n    </span>\n    <pre class="ng-binding"></pre>\n   </section>\n   <hr/>\n   <section class="content">\n    <h2>\n     Example 2: without any optional attributes\n    </h2>\n    <p class="explanation">\n     This time the `contenteditable` will work as expected, adding html code when you breakline for example.\n    </p>\n    <span class="input input--hoshi">\n     <div class="input__field input__field--hoshi ng-pristine ng-untouched ng-valid" contenteditable="" ng-model="model.example2">\n     </div>\n     <label class="input__label input__label--hoshi input__label--hoshi-blue" for="input-4">\n      <span class="input__label-content input__label-content--hoshi">\n       Answer\n      </span>\n     </label>\n    </span>\n    <pre class="ng-binding"></pre>\n   </section>\n   <hr/>\n   <section class="content">\n    <h2>\n     Example 3: remove HTML tags\n    </h2>\n    <p class="explanation">\n     You can use the\n     <strong>\n      only-text\n     </strong>\n     attribute to make the html tags inside the contenteditable disappear.\n     <br/>\n     <i>\n      Notice even breakline will be not possible to be added.\n     </i>\n    </p>\n    <span class="input input--hoshi">\n     <div class="input__field input__field--hoshi ng-pristine ng-untouched ng-valid" contenteditable="" ng-model="model.example3" only-text="true">\n     </div>\n     <label class="input__label input__label--hoshi input__label--hoshi-blue" for="input-4">\n      <span class="input__label-content input__label-content--hoshi">\n       Answer\n      </span>\n     </label>\n    </span>\n    <pre class="ng-binding"></pre>\n   </section>\n   <hr/>\n   <section class="content">\n    <h2>\n     Example 4: turn breaklines in `/r/n`\n    </h2>\n    <p class="explanation">\n     In case you need to save in your store (ex: database), with the traditionals specials characters `/r/n`, just use the\n     <strong>\n      convert-new-lines\n     </strong>\n     attribute.\n     <br/>\n     Notice `ng-content-editable` will replace the `divs` and `brs` with `/r/n`.\n    </p>\n    <span class="input input--hoshi">\n     <div class="input__field input__field--hoshi ng-pristine ng-untouched ng-valid" contenteditable="" convert-new-lines="true" ng-model="model.example4" only-text="true">\n     </div>\n     <label class="input__label input__label--hoshi input__label--hoshi-blue" for="input-4">\n      <span class="input__label-content input__label-content--hoshi">\n       Answer\n      </span>\n     </label>\n    </span>\n    <pre class="ng-binding"></pre>\n   </section>\n  </div>\n </body>\n</html>'