b'<!DOCTYPE html>\n<!--[if lt IE 9]>\n<html class="old-browser no-js"><![endif]-->\n<!--[if gt IE 8]><!-->\n<html class="no-js" xmlns="http://www.w3.org/1999/xhtml">\n <!--<![endif]-->\n <head>\n  <style type="text/css">\n   @charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}\n  </style>\n  <meta charset="utf-8"/>\n  <title>\n   angular-promise-buttons\n  </title>\n  <meta content="width=device-width" name="viewport"/>\n  <!-- Place favicon.ico and apple-touch-icon.png in the root directory -->\n  <!-- bower:css -->\n  <!-- endbower -->\n  <link href="//maxcdn.bootstrapcdn.com/bootstrap/3.3.1/css/bootstrap.min.css" rel="stylesheet"/>\n  <link href="//cdnjs.cloudflare.com/ajax/libs/octicons/2.1.2/octicons.css" rel="stylesheet"/>\n  <link href="style.css" rel="stylesheet"/>\n  <style>\n   .form-group {\n            position: relative;\n        }\n\n        .anchor {\n            display: none;\n        }\n\n        .main-header {\n            background:     #000;\n            padding-bottom: 15px;\n            color:          #eee;\n        }\n\n        .main-header h1 {\n            color: #eee;\n        }\n\n        p.header {\n            font-style: italic;\n        }\n\n        .motto {\n            font-size: 16px;\n        }\n\n        .help-block .list-unstyled {\n            padding: 0;\n            margin:  0;\n            display: block;\n        }\n  </style>\n </head>\n <body>\n  <header class="main-header">\n   <div class="container">\n    <h1 class="header">\n     angular-promise-buttons\n    </h1>\n    <p class="header motto">\n     Chilled Buttons for Angular\n    </p>\n    <a class="buttons btn btn-primary " href="https://github.com/johannesjo/angular-promise-buttons/zipball/master">\n     <span class="octicon octicon-cloud-download">\n     </span>\n     Download ZIP\n     <span class="octicon octicon-cloud-download">\n     </span>\n    </a>\n    <a class="buttons btn btn-primary " href="https://github.com/johannesjo/angular-promise-buttons/tarball/master">\n     <span class="octicon octicon-cloud-download">\n     </span>\n     Download TAR\n     <span class="octicon octicon-cloud-download">\n     </span>\n    </a>\n    <a class="buttons btn btn-primary github" href="https://github.com/johannesjo/angular-promise-buttons">\n     <span class="octicon octicon-mark-github">\n     </span>\n     View On\n            GitHub\n     <span class="octicon octicon-mark-github">\n     </span>\n    </a>\n    <a class="buttons btn btn-primary " href="#demo">\n     <span class="octicon octicon-squirrel">\n     </span>\n     Demo\n     <span class="octicon octicon-squirrel">\n     </span>\n    </a>\n    <a class="buttons btn btn-primary " href="#discussion">\n     <span class="octicon octicon-organization">\n     </span>\n     Discuss\n     <span class="octicon octicon-organization">\n     </span>\n    </a>\n    <p class="header">\n     <br/>\n     This project is maintained by\n     <a class="header name" href="https://github.com/johannesjo">\n      johannesjo\n     </a>\n    </p>\n    <iframe allowtransparency="true" frameborder="0" scrolling="no" src="https://buttons.github.io/buttons.html#href=https%3A%2F%2Fgithub.com%2Fjohannesjo%2Fangular-promise-buttons&amp;text=Star&amp;data-count-api=%2Frepos%2Fjohannesjo%2Fangular-promise-buttons%23stargazers_count&amp;data-count-href=%2Fjohannesjo%2Fangular-promise-buttons%2Fstargazers&amp;data-count-aria-label=&amp;data-style=&amp;data-icon=octicon-star&amp;aria-label=" style="width: 85px; height: 20px; border: none;">\n    </iframe>\n    <iframe allowtransparency="true" frameborder="0" scrolling="no" src="https://buttons.github.io/buttons.html#href=https%3A%2F%2Fgithub.com%2Fjohannesjo%2Fangular-promise-buttons&amp;text=Fork&amp;data-count-api=%2Frepos%2Fjohannesjo%2Fangular-promise-buttons%23forks_count&amp;data-count-href=%2Fjohannesjo%2Fangular-promise-buttons%2Fnetwork&amp;data-count-aria-label=&amp;data-style=&amp;data-icon=octicon-git-branch&amp;aria-label=" style="width: 78px; height: 20px; border: none;">\n    </iframe>\n    <iframe allowtransparency="true" frameborder="0" scrolling="no" src="https://buttons.github.io/buttons.html#href=https%3A%2F%2Fgithub.com%2Fjohannesjo%2Fangular-promise-buttons%2Fissues&amp;text=Issue&amp;data-count-api=%2Frepos%2Fjohannesjo%2Fangular-promise-buttons%23open_issues_count&amp;data-count-href=&amp;data-count-aria-label=&amp;data-style=&amp;data-icon=octicon-issue-opened&amp;aria-label=" style="width: 80px; height: 20px; border: none;">\n    </iframe>\n    <script async="" defer="" id="github-bjs" src="https://buttons.github.io/buttons.js">\n    </script>\n   </div>\n  </header>\n  <div class="container">\n   <p>\n    <a href="http://waffle.io/johannesjo/angular-promise-buttons">\n     <img alt="Stories in Ready" src="https://badge.waffle.io/johannesjo/angular-promise-buttons.svg?label=ready&amp;title=Ready"/>\n    </a>\n    <a href="http://waffle.io/johannesjo/angular-promise-buttons">\n     <img alt="Stories in progress" src="https://badge.waffle.io/johannesjo/angular-promise-buttons.svg?label=in%20progress&amp;title=In%20Progress"/>\n    </a>\n    <a href="https://travis-ci.org/johannesjo/angular-promise-buttons?branch=master">\n     <img alt="Build Status" src="https://travis-ci.org/johannesjo/angular-promise-buttons.svg"/>\n    </a>\n    <a href="https://coveralls.io/r/johannesjo/angular-promise-buttons?branch=master">\n     <img alt="Coverage Status" src="https://coveralls.io/repos/johannesjo/angular-promise-buttons/badge.svg?branch=master"/>\n    </a>\n   </p>\n   <h1 id="angular-promise-buttons">\n    angular-promise-buttons\n   </h1>\n   <p>\n    <em>\n     Chilled Buttons for AngularJS\n    </em>\n   </p>\n   <p>\n    There are cool loading buttons out there for angular. Only thing which annoys me, is that you (most of the times) have to manually trigger their loading state via a boolean which leads to a bit of repetition, declaring those again and again.\n    <code>\n     angular-promise-buttons\n    </code>\n    exists to take away some of that, by handling the loading state directly by passing the promise. Saves you at least two lines of code every time. Check out the\n    <a href="http://johannesjo.github.io/angular-promise-buttons/#demo">\n     DEMO\n    </a>\n    !\n   </p>\n   <p>\n    Also you can play with the code on\n    <a href="http://plnkr.co/edit/yKrlohXVL15fRjTjZHBJ?p=preview">\n     Plnkr\n    </a>\n    .\n   </p>\n   <p>\n    <a href="https://github.com/johannesjo/angular-promise-buttons/issues">\n     Bug-reports or feature request\n    </a>\n    as well as any other kind of\n    <strong>\n     feedback is highly welcome!\n    </strong>\n   </p>\n   <h2 id="getting-started">\n    getting started\n   </h2>\n   <p>\n    Install it via bower or npm\n   </p>\n   <pre><code>bower install angular-promise-buttons -S\n# or via npm\nnpm install angular-promise-buttons -S\n</code></pre>\n   <p>\n    and add\n    <code>\n     angularPromiseButtons\n    </code>\n    as dependency in your main module:\n   </p>\n   <pre><code>angular.module(\'yourApp\',[\n  \'angularPromiseButtons\'\n]);\n</code></pre>\n   <p>\n    Using the buttons is easy. Just return the promise in question in your service caller and you\'re good to go:\nYou can also directly return the promise via the function passed to\n    <code>\n     ng-click\n    </code>\n    :\n   </p>\n   <pre><code class="lang-html">&lt;button ng-click="yourServiceCaller()"\n        promise-btn&gt;Click me to spin!&lt;/button&gt;\n</code></pre>\n   <pre><code class="lang-javascript">// inside some controller\n$scope.yourServiceCaller = function ()\n{\n  return fakeFactory.method().then(...);\n};\n</code></pre>\n   <h3 id="using-it-for-forms">\n    using it for forms\n   </h3>\n   <p>\n    For using the promise buttons with\n    <code>\n     ng-submit\n    </code>\n    you need to apply them to the form directive and add `type="submit" to the buttons you want to show a loader for:\n   </p>\n   <pre><code class="lang-html">&lt;form ng-submit="yourServiceCaller()"\n      promise-btn&gt;\n  &lt;button type="submit"&gt;MyBtn&lt;/button&gt;\n&lt;/form&gt;\n</code></pre>\n   <pre><code class="lang-javascript">// inside some controller\n$scope.yourServiceCaller = function ()\n{\n  return fakeFactory.method().then(...);\n};\n</code></pre>\n   <h3 id="alternative-syntax-and-using-event">\n    alternative syntax and using $event\n   </h3>\n   <p>\n    There is also an alternative syntax, which allows you to share promises between buttons (and possibly other directives) and is especially useful, if you want to use the\n    <code>\n     $event\n    </code>\n    somehow:\n   </p>\n   <pre><code class="lang-html">&lt;button ng-click="yourServiceCaller($event)"\n        promise-btn="yourPromise"&gt;MyBtn&lt;/button&gt;\n</code></pre>\n   <p>\n    Now you just have to assign a promise to\n    <code>\n     yourPromise\n    </code>\n    :\n   </p>\n   <pre><code class="lang-javascript">// inside some controller\n$scope.yourServiceCaller = function ()\n{\n  $scope.yourPromise = fakeFactory.method().then(...);\n  // this is now also possible\n  $event.preventDefault();\n};\n</code></pre>\n   <h2 id="styling-the-button">\n    styling the button\n   </h2>\n   <p>\n    The base-styles might not be overwhelmingly sexy, but it is easy to fix that! There are lots of free css-spinners out there. Just find one of your liking and add the css.\n   </p>\n   <p>\n    <strong>\n     Ressources:\n    </strong>\n   </p>\n   <ul>\n    <li>\n     <a href="http://cssload.net/">\n      http://cssload.net/\n     </a>\n    </li>\n    <li>\n     <a href="http://projects.lukehaas.me/css-loaders/">\n      http://projects.lukehaas.me/css-loaders/\n     </a>\n    </li>\n    <li>\n     <a href="http://tobiasahlin.com/spinkit/">\n      http://tobiasahlin.com/spinkit/\n     </a>\n    </li>\n   </ul>\n   <h2 id="configuration">\n    configuration\n   </h2>\n   <p>\n    There are also some defaults for you to set, if you like. You can do this by using the\n    <code>\n     angularPromiseButtonsProvider\n    </code>\n    :\n   </p>\n   <pre><code class="lang-javascript">angular.module(\'exampleApp\', [\n  \'angularPromiseButtons\'\n])\n.config(function (angularPromiseButtonsProvider)\n{\n  angularPromiseButtonsProvider.extendConfig({\n    spinnerTpl: \'&lt;span class="btn-spinner"&gt;&lt;/span&gt;\',\n    disableBtn: true,\n    btnLoadingClass: \'is-loading\',\n    addClassToCurrentBtnOnly: false,\n    disableCurrentBtnOnly: false,\n    minDuration: false,\n    CLICK_EVENT: \'click\',\n    CLICK_ATTR: \'ngClick\',\n    SUBMIT_EVENT: \'submit\',\n    SUBMIT_ATTR: \'ngSubmit\',\n    BTN_SELECTOR: \'button\'\n  });\n});\n</code></pre>\n   <h2 id="change-options-via-promise-btn-options-">\n    change options via\n    <code>\n     promise-btn-options\n    </code>\n   </h2>\n   <p>\n    You can also change all the options (\n    <strong>\n     but not the spinner template\n    </strong>\n    ) by specifying the options via\n    <code>\n     promise-btn-options\n    </code>\n    :\n   </p>\n   <pre><code class="lang-html">&lt;button class="btn"\n        ng-click="yourServiceCaller()"\n        promise-btn-options="options"\n        promise-btn="yourPromise"&gt;MyBtn &lt;span&gt;Look I\'m nested content&lt;/span&gt;\n&lt;/button&gt;\n</code></pre>\n   <p>\n    Now you just have to assign a promise to\n    <code>\n     yourPromise\n    </code>\n    :\n   </p>\n   <pre><code class="lang-javascript">// inside some controller\n$scope.options = {\n  disableBtn: false,\n  btnLoadingClass: \'is-spinning\'\n};\n$scope.yourServiceCaller = function ()\n{\n  $scope.yourPromise = fakeFactory.method().then(...);\n};\n</code></pre>\n   <p>\n    Thats all the logic there is (for now). Adjusting the look and feel of the spinner can be done using your own styles.\n   </p>\n   <h2 id="-contribute-">\n    \xe2\x9d\xa4 contribute \xe2\x9d\xa4\n   </h2>\n   <p>\n    I\'m happy for any\n    <a href="https://github.com/johannesjo/angular-promise-buttons/issues">\n     issue or feature request\n    </a>\n    , you might encounter or want to have. Even a one liner is better, than no feedback at all. Pull requests are also highly welcome. Just fork the repository, clone it and run\n    <code>\n     grunt serve\n    </code>\n    for development. Another important factor is the number of developers using and thus testing\n    <code>\n     angular-promise-buttons\n    </code>\n    . Tell your fellow programmers,\n    <a href="http://ngmodules.org/modules/angular-promise-buttons">\n     say that you use it on ng-modules\n    </a>\n    , tweet or even blog about it.\n   </p>\n   <p>\n    <code>\n     angular-promise-buttons\n    </code>\n    is published under the\n    <a href="https://github.com/johannesjo/angular-promise-buttons/blob/master/LICENSE">\n     The GNU Lesser General Public License V2.1\n    </a>\n    .\n   </p>\n   <h2 id="-possible-promising-future-features">\n    (possible) promising future features\n   </h2>\n   <ul>\n    <li>\n     <a href="https://github.com/johannesjo/angular-promise-buttons/issues">\n      your feature request\n     </a>\n     !\n    </li>\n   </ul>\n  </div>\n  <hr/>\n  <div class="container ng-scope" ng-app="exampleApp" ng-controller="exampleCtrl">\n   <a name="demo">\n   </a>\n   <h1>\n    Demos\n   </h1>\n   <!-- ngInclude: \'example1.html\' -->\n   <div class="example ng-scope" ng-include="\'example1.html\'">\n    <button class="btn ng-scope ng-isolate-scope" ng-click="success($event)" promise-btn="successPromise">\n     Success after delay\n     <span class="btn-spinner ng-scope">\n     </span>\n    </button>\n    <button class="btn ng-scope ng-isolate-scope" ng-click="error()" promise-btn="errorPromise">\n     Error after delay\n     <span class="btn-spinner ng-scope">\n     </span>\n    </button>\n    <br class="ng-scope"/>\n    <br class="ng-scope"/>\n    <button class="btn ng-scope ng-isolate-scope" ng-click="endless()" promise-btn="endlessPromise">\n     Never resolving promise\n     <span class="btn-spinner ng-scope">\n     </span>\n    </button>\n    <button class="btn ng-scope ng-isolate-scope is-loading" disabled="disabled" ng-click="auto()" promise-btn="autoPromise">\n     Loading initially and forever\n     <span class="btn-spinner ng-scope">\n     </span>\n    </button>\n    <h3 class="ng-scope">\n     Same promise buttons\n    </h3>\n    <button class="btn ng-scope ng-isolate-scope" ng-click="success($event)" promise-btn="successPromise">\n     We\n     <span class="btn-spinner ng-scope">\n     </span>\n    </button>\n    <button class="btn ng-scope ng-isolate-scope" ng-click="success($event)" promise-btn="successPromise">\n     share\n     <span class="btn-spinner ng-scope">\n     </span>\n    </button>\n    <h3 class="ng-scope">\n     Chained promise buttons\n    </h3>\n    <button class="btn ng-binding ng-scope ng-isolate-scope" ng-click="chain()" promise-btn="chainedPromises">\n     Load promise chain 0\n     <span class="btn-spinner ng-scope">\n     </span>\n    </button>\n    <h3 class="ng-scope">\n     Inside a form\n    </h3>\n    <form class="ng-pristine ng-valid ng-scope" ng-submit="submit()">\n     <button class="btn ng-isolate-scope" promise-btn="submitPromise" type="submit">\n      Submit\n      <span class="btn-spinner ng-scope">\n      </span>\n     </button>\n    </form>\n    <h3 class="ng-scope">\n     ngClick only\n    </h3>\n    <button class="btn ng-scope ng-isolate-scope" ng-click="successDirectlyReturnedPromise()" promise-btn="">\n     Success after delay\n     <span class="btn-spinner ng-scope">\n     </span>\n    </button>\n    <button class="btn ng-scope ng-isolate-scope" ng-click="chain()" promise-btn="">\n     For promise chain\n     <span class="btn-spinner ng-scope">\n     </span>\n    </button>\n    <h3 class="ng-scope">\n     ngSubmit only inside form\n    </h3>\n    <form class="ng-pristine ng-valid ng-scope ng-isolate-scope" ng-submit="submitDirectlyReturnPromise()" promise-btn="">\n     <button class="btn" type="submit">\n      Submit promise\n      <span class="btn-spinner ng-scope">\n      </span>\n     </button>\n     <button type="button">\n      I\'m just a button\n     </button>\n    </form>\n   </div>\n  </div>\n  <!-- bower:js -->\n  <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.6.1/angular.min.js">\n  </script>\n  <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.6.1/angular-animate.min.js">\n  </script>\n  <script src="bower_components/angular-mocks/angular-mocks.js">\n  </script>\n  <!-- endbower -->\n  <script src="angular-promise-buttons.min.js">\n  </script>\n  <!-- fileblock:js example -->\n  <script src="scripts/example.js">\n  </script>\n  <!-- endfileblock -->\n </body>\n</html>'b'<!DOCTYPE html>\n<!--[if lt IE 9]>\n<html class="old-browser no-js"><![endif]-->\n<!--[if gt IE 8]><!-->\n<html class="no-js" xmlns="http://www.w3.org/1999/xhtml">\n <!--<![endif]-->\n <head>\n  <style type="text/css">\n   @charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}\n  </style>\n  <meta charset="utf-8"/>\n  <title>\n   angular-promise-buttons\n  </title>\n  <meta content="width=device-width" name="viewport"/>\n  <!-- Place favicon.ico and apple-touch-icon.png in the root directory -->\n  <!-- bower:css -->\n  <!-- endbower -->\n  <link href="//maxcdn.bootstrapcdn.com/bootstrap/3.3.1/css/bootstrap.min.css" rel="stylesheet"/>\n  <link href="//cdnjs.cloudflare.com/ajax/libs/octicons/2.1.2/octicons.css" rel="stylesheet"/>\n  <link href="style.css" rel="stylesheet"/>\n  <style>\n   .form-group {\n            position: relative;\n        }\n\n        .anchor {\n            display: none;\n        }\n\n        .main-header {\n            background:     #000;\n            padding-bottom: 15px;\n            color:          #eee;\n        }\n\n        .main-header h1 {\n            color: #eee;\n        }\n\n        p.header {\n            font-style: italic;\n        }\n\n        .motto {\n            font-size: 16px;\n        }\n\n        .help-block .list-unstyled {\n            padding: 0;\n            margin:  0;\n            display: block;\n        }\n  </style>\n </head>\n <body>\n  <header class="main-header">\n   <div class="container">\n    <h1 class="header">\n     angular-promise-buttons\n    </h1>\n    <p class="header motto">\n     Chilled Buttons for Angular\n    </p>\n    <a class="buttons btn btn-primary " href="https://github.com/johannesjo/angular-promise-buttons/zipball/master">\n     <span class="octicon octicon-cloud-download">\n     </span>\n     Download ZIP\n     <span class="octicon octicon-cloud-download">\n     </span>\n    </a>\n    <a class="buttons btn btn-primary " href="https://github.com/johannesjo/angular-promise-buttons/tarball/master">\n     <span class="octicon octicon-cloud-download">\n     </span>\n     Download TAR\n     <span class="octicon octicon-cloud-download">\n     </span>\n    </a>\n    <a class="buttons btn btn-primary github" href="https://github.com/johannesjo/angular-promise-buttons">\n     <span class="octicon octicon-mark-github">\n     </span>\n     View On\n            GitHub\n     <span class="octicon octicon-mark-github">\n     </span>\n    </a>\n    <a class="buttons btn btn-primary " href="#demo">\n     <span class="octicon octicon-squirrel">\n     </span>\n     Demo\n     <span class="octicon octicon-squirrel">\n     </span>\n    </a>\n    <a class="buttons btn btn-primary " href="#discussion">\n     <span class="octicon octicon-organization">\n     </span>\n     Discuss\n     <span class="octicon octicon-organization">\n     </span>\n    </a>\n    <p class="header">\n     <br/>\n     This project is maintained by\n     <a class="header name" href="https://github.com/johannesjo">\n      johannesjo\n     </a>\n    </p>\n    <iframe allowtransparency="true" frameborder="0" scrolling="no" src="https://buttons.github.io/buttons.html#href=https%3A%2F%2Fgithub.com%2Fjohannesjo%2Fangular-promise-buttons&amp;text=Star&amp;data-count-api=%2Frepos%2Fjohannesjo%2Fangular-promise-buttons%23stargazers_count&amp;data-count-href=%2Fjohannesjo%2Fangular-promise-buttons%2Fstargazers&amp;data-count-aria-label=&amp;data-style=&amp;data-icon=octicon-star&amp;aria-label=" style="width: 85px; height: 20px; border: none;">\n    </iframe>\n    <iframe allowtransparency="true" frameborder="0" scrolling="no" src="https://buttons.github.io/buttons.html#href=https%3A%2F%2Fgithub.com%2Fjohannesjo%2Fangular-promise-buttons&amp;text=Fork&amp;data-count-api=%2Frepos%2Fjohannesjo%2Fangular-promise-buttons%23forks_count&amp;data-count-href=%2Fjohannesjo%2Fangular-promise-buttons%2Fnetwork&amp;data-count-aria-label=&amp;data-style=&amp;data-icon=octicon-git-branch&amp;aria-label=" style="width: 78px; height: 20px; border: none;">\n    </iframe>\n    <iframe allowtransparency="true" frameborder="0" scrolling="no" src="https://buttons.github.io/buttons.html#href=https%3A%2F%2Fgithub.com%2Fjohannesjo%2Fangular-promise-buttons%2Fissues&amp;text=Issue&amp;data-count-api=%2Frepos%2Fjohannesjo%2Fangular-promise-buttons%23open_issues_count&amp;data-count-href=&amp;data-count-aria-label=&amp;data-style=&amp;data-icon=octicon-issue-opened&amp;aria-label=" style="width: 80px; height: 20px; border: none;">\n    </iframe>\n    <script async="" defer="" id="github-bjs" src="https://buttons.github.io/buttons.js">\n    </script>\n   </div>\n  </header>\n  <div class="container">\n   <p>\n    <a href="http://waffle.io/johannesjo/angular-promise-buttons">\n     <img alt="Stories in Ready" src="https://badge.waffle.io/johannesjo/angular-promise-buttons.svg?label=ready&amp;title=Ready"/>\n    </a>\n    <a href="http://waffle.io/johannesjo/angular-promise-buttons">\n     <img alt="Stories in progress" src="https://badge.waffle.io/johannesjo/angular-promise-buttons.svg?label=in%20progress&amp;title=In%20Progress"/>\n    </a>\n    <a href="https://travis-ci.org/johannesjo/angular-promise-buttons?branch=master">\n     <img alt="Build Status" src="https://travis-ci.org/johannesjo/angular-promise-buttons.svg"/>\n    </a>\n    <a href="https://coveralls.io/r/johannesjo/angular-promise-buttons?branch=master">\n     <img alt="Coverage Status" src="https://coveralls.io/repos/johannesjo/angular-promise-buttons/badge.svg?branch=master"/>\n    </a>\n   </p>\n   <h1 id="angular-promise-buttons">\n    angular-promise-buttons\n   </h1>\n   <p>\n    <em>\n     Chilled Buttons for AngularJS\n    </em>\n   </p>\n   <p>\n    There are cool loading buttons out there for angular. Only thing which annoys me, is that you (most of the times) have to manually trigger their loading state via a boolean which leads to a bit of repetition, declaring those again and again.\n    <code>\n     angular-promise-buttons\n    </code>\n    exists to take away some of that, by handling the loading state directly by passing the promise. Saves you at least two lines of code every time. Check out the\n    <a href="http://johannesjo.github.io/angular-promise-buttons/#demo">\n     DEMO\n    </a>\n    !\n   </p>\n   <p>\n    Also you can play with the code on\n    <a href="http://plnkr.co/edit/yKrlohXVL15fRjTjZHBJ?p=preview">\n     Plnkr\n    </a>\n    .\n   </p>\n   <p>\n    <a href="https://github.com/johannesjo/angular-promise-buttons/issues">\n     Bug-reports or feature request\n    </a>\n    as well as any other kind of\n    <strong>\n     feedback is highly welcome!\n    </strong>\n   </p>\n   <h2 id="getting-started">\n    getting started\n   </h2>\n   <p>\n    Install it via bower or npm\n   </p>\n   <pre><code>bower install angular-promise-buttons -S\n# or via npm\nnpm install angular-promise-buttons -S\n</code></pre>\n   <p>\n    and add\n    <code>\n     angularPromiseButtons\n    </code>\n    as dependency in your main module:\n   </p>\n   <pre><code>angular.module(\'yourApp\',[\n  \'angularPromiseButtons\'\n]);\n</code></pre>\n   <p>\n    Using the buttons is easy. Just return the promise in question in your service caller and you\'re good to go:\nYou can also directly return the promise via the function passed to\n    <code>\n     ng-click\n    </code>\n    :\n   </p>\n   <pre><code class="lang-html">&lt;button ng-click="yourServiceCaller()"\n        promise-btn&gt;Click me to spin!&lt;/button&gt;\n</code></pre>\n   <pre><code class="lang-javascript">// inside some controller\n$scope.yourServiceCaller = function ()\n{\n  return fakeFactory.method().then(...);\n};\n</code></pre>\n   <h3 id="using-it-for-forms">\n    using it for forms\n   </h3>\n   <p>\n    For using the promise buttons with\n    <code>\n     ng-submit\n    </code>\n    you need to apply them to the form directive and add `type="submit" to the buttons you want to show a loader for:\n   </p>\n   <pre><code class="lang-html">&lt;form ng-submit="yourServiceCaller()"\n      promise-btn&gt;\n  &lt;button type="submit"&gt;MyBtn&lt;/button&gt;\n&lt;/form&gt;\n</code></pre>\n   <pre><code class="lang-javascript">// inside some controller\n$scope.yourServiceCaller = function ()\n{\n  return fakeFactory.method().then(...);\n};\n</code></pre>\n   <h3 id="alternative-syntax-and-using-event">\n    alternative syntax and using $event\n   </h3>\n   <p>\n    There is also an alternative syntax, which allows you to share promises between buttons (and possibly other directives) and is especially useful, if you want to use the\n    <code>\n     $event\n    </code>\n    somehow:\n   </p>\n   <pre><code class="lang-html">&lt;button ng-click="yourServiceCaller($event)"\n        promise-btn="yourPromise"&gt;MyBtn&lt;/button&gt;\n</code></pre>\n   <p>\n    Now you just have to assign a promise to\n    <code>\n     yourPromise\n    </code>\n    :\n   </p>\n   <pre><code class="lang-javascript">// inside some controller\n$scope.yourServiceCaller = function ()\n{\n  $scope.yourPromise = fakeFactory.method().then(...);\n  // this is now also possible\n  $event.preventDefault();\n};\n</code></pre>\n   <h2 id="styling-the-button">\n    styling the button\n   </h2>\n   <p>\n    The base-styles might not be overwhelmingly sexy, but it is easy to fix that! There are lots of free css-spinners out there. Just find one of your liking and add the css.\n   </p>\n   <p>\n    <strong>\n     Ressources:\n    </strong>\n   </p>\n   <ul>\n    <li>\n     <a href="http://cssload.net/">\n      http://cssload.net/\n     </a>\n    </li>\n    <li>\n     <a href="http://projects.lukehaas.me/css-loaders/">\n      http://projects.lukehaas.me/css-loaders/\n     </a>\n    </li>\n    <li>\n     <a href="http://tobiasahlin.com/spinkit/">\n      http://tobiasahlin.com/spinkit/\n     </a>\n    </li>\n   </ul>\n   <h2 id="configuration">\n    configuration\n   </h2>\n   <p>\n    There are also some defaults for you to set, if you like. You can do this by using the\n    <code>\n     angularPromiseButtonsProvider\n    </code>\n    :\n   </p>\n   <pre><code class="lang-javascript">angular.module(\'exampleApp\', [\n  \'angularPromiseButtons\'\n])\n.config(function (angularPromiseButtonsProvider)\n{\n  angularPromiseButtonsProvider.extendConfig({\n    spinnerTpl: \'&lt;span class="btn-spinner"&gt;&lt;/span&gt;\',\n    disableBtn: true,\n    btnLoadingClass: \'is-loading\',\n    addClassToCurrentBtnOnly: false,\n    disableCurrentBtnOnly: false,\n    minDuration: false,\n    CLICK_EVENT: \'click\',\n    CLICK_ATTR: \'ngClick\',\n    SUBMIT_EVENT: \'submit\',\n    SUBMIT_ATTR: \'ngSubmit\',\n    BTN_SELECTOR: \'button\'\n  });\n});\n</code></pre>\n   <h2 id="change-options-via-promise-btn-options-">\n    change options via\n    <code>\n     promise-btn-options\n    </code>\n   </h2>\n   <p>\n    You can also change all the options (\n    <strong>\n     but not the spinner template\n    </strong>\n    ) by specifying the options via\n    <code>\n     promise-btn-options\n    </code>\n    :\n   </p>\n   <pre><code class="lang-html">&lt;button class="btn"\n        ng-click="yourServiceCaller()"\n        promise-btn-options="options"\n        promise-btn="yourPromise"&gt;MyBtn &lt;span&gt;Look I\'m nested content&lt;/span&gt;\n&lt;/button&gt;\n</code></pre>\n   <p>\n    Now you just have to assign a promise to\n    <code>\n     yourPromise\n    </code>\n    :\n   </p>\n   <pre><code class="lang-javascript">// inside some controller\n$scope.options = {\n  disableBtn: false,\n  btnLoadingClass: \'is-spinning\'\n};\n$scope.yourServiceCaller = function ()\n{\n  $scope.yourPromise = fakeFactory.method().then(...);\n};\n</code></pre>\n   <p>\n    Thats all the logic there is (for now). Adjusting the look and feel of the spinner can be done using your own styles.\n   </p>\n   <h2 id="-contribute-">\n    \xe2\x9d\xa4 contribute \xe2\x9d\xa4\n   </h2>\n   <p>\n    I\'m happy for any\n    <a href="https://github.com/johannesjo/angular-promise-buttons/issues">\n     issue or feature request\n    </a>\n    , you might encounter or want to have. Even a one liner is better, than no feedback at all. Pull requests are also highly welcome. Just fork the repository, clone it and run\n    <code>\n     grunt serve\n    </code>\n    for development. Another important factor is the number of developers using and thus testing\n    <code>\n     angular-promise-buttons\n    </code>\n    . Tell your fellow programmers,\n    <a href="http://ngmodules.org/modules/angular-promise-buttons">\n     say that you use it on ng-modules\n    </a>\n    , tweet or even blog about it.\n   </p>\n   <p>\n    <code>\n     angular-promise-buttons\n    </code>\n    is published under the\n    <a href="https://github.com/johannesjo/angular-promise-buttons/blob/master/LICENSE">\n     The GNU Lesser General Public License V2.1\n    </a>\n    .\n   </p>\n   <h2 id="-possible-promising-future-features">\n    (possible) promising future features\n   </h2>\n   <ul>\n    <li>\n     <a href="https://github.com/johannesjo/angular-promise-buttons/issues">\n      your feature request\n     </a>\n     !\n    </li>\n   </ul>\n  </div>\n  <hr/>\n  <div class="container ng-scope" ng-app="exampleApp" ng-controller="exampleCtrl">\n   <a name="demo">\n   </a>\n   <h1>\n    Demos\n   </h1>\n   <!-- ngInclude: \'example1.html\' -->\n   <div class="example ng-scope" ng-include="\'example1.html\'">\n    <button class="btn ng-scope ng-isolate-scope" ng-click="success($event)" promise-btn="successPromise">\n     Success after delay\n     <span class="btn-spinner ng-scope">\n     </span>\n    </button>\n    <button class="btn ng-scope ng-isolate-scope" ng-click="error()" promise-btn="errorPromise">\n     Error after delay\n     <span class="btn-spinner ng-scope">\n     </span>\n    </button>\n    <br class="ng-scope"/>\n    <br class="ng-scope"/>\n    <button class="btn ng-scope ng-isolate-scope" ng-click="endless()" promise-btn="endlessPromise">\n     Never resolving promise\n     <span class="btn-spinner ng-scope">\n     </span>\n    </button>\n    <button class="btn ng-scope ng-isolate-scope is-loading" disabled="disabled" ng-click="auto()" promise-btn="autoPromise">\n     Loading initially and forever\n     <span class="btn-spinner ng-scope">\n     </span>\n    </button>\n    <h3 class="ng-scope">\n     Same promise buttons\n    </h3>\n    <button class="btn ng-scope ng-isolate-scope" ng-click="success($event)" promise-btn="successPromise">\n     We\n     <span class="btn-spinner ng-scope">\n     </span>\n    </button>\n    <button class="btn ng-scope ng-isolate-scope" ng-click="success($event)" promise-btn="successPromise">\n     share\n     <span class="btn-spinner ng-scope">\n     </span>\n    </button>\n    <h3 class="ng-scope">\n     Chained promise buttons\n    </h3>\n    <button class="btn ng-binding ng-scope ng-isolate-scope" ng-click="chain()" promise-btn="chainedPromises">\n     Load promise chain 0\n     <span class="btn-spinner ng-scope">\n     </span>\n    </button>\n    <h3 class="ng-scope">\n     Inside a form\n    </h3>\n    <form class="ng-pristine ng-valid ng-scope" ng-submit="submit()">\n     <button class="btn ng-isolate-scope" promise-btn="submitPromise" type="submit">\n      Submit\n      <span class="btn-spinner ng-scope">\n      </span>\n     </button>\n    </form>\n    <h3 class="ng-scope">\n     ngClick only\n    </h3>\n    <button class="btn ng-scope ng-isolate-scope" ng-click="successDirectlyReturnedPromise()" promise-btn="">\n     Success after delay\n     <span class="btn-spinner ng-scope">\n     </span>\n    </button>\n    <button class="btn ng-scope ng-isolate-scope" ng-click="chain()" promise-btn="">\n     For promise chain\n     <span class="btn-spinner ng-scope">\n     </span>\n    </button>\n    <h3 class="ng-scope">\n     ngSubmit only inside form\n    </h3>\n    <form class="ng-pristine ng-valid ng-scope ng-isolate-scope" ng-submit="submitDirectlyReturnPromise()" promise-btn="">\n     <button class="btn" type="submit">\n      Submit promise\n      <span class="btn-spinner ng-scope">\n      </span>\n     </button>\n     <button type="button">\n      I\'m just a button\n     </button>\n    </form>\n   </div>\n  </div>\n  <!-- bower:js -->\n  <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.6.1/angular.min.js">\n  </script>\n  <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.6.1/angular-animate.min.js">\n  </script>\n  <script src="bower_components/angular-mocks/angular-mocks.js">\n  </script>\n  <!-- endbower -->\n  <script src="angular-promise-buttons.min.js">\n  </script>\n  <!-- fileblock:js example -->\n  <script src="scripts/example.js">\n  </script>\n  <!-- endfileblock -->\n </body>\n</html>'