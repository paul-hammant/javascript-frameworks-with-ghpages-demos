b'<html lang="en">\n <head>\n  <meta charset="utf-8"/>\n  <title>\n   React extensions for Elmish apps\n  </title>\n  <meta content="width=device-width, initial-scale=1.0" name="viewport"/>\n  <meta content="Elmish React extensions" name="description"/>\n  <meta content="Eugene Tolmachev" name="author"/>\n  <script src="https://code.jquery.com/jquery-1.8.0.js">\n  </script>\n  <script src="https://code.jquery.com/ui/1.8.23/jquery-ui.js">\n  </script>\n  <script src="https://netdna.bootstrapcdn.com/twitter-bootstrap/2.2.1/js/bootstrap.min.js">\n  </script>\n  <link href="https://netdna.bootstrapcdn.com/twitter-bootstrap/2.2.1/css/bootstrap-combined.min.css" rel="stylesheet"/>\n  <link href="https://elmish.github.io/react/content/style_light.css" rel="stylesheet" type="text/css"/>\n  <script src="https://elmish.github.io/react/content/tips.js" type="text/javascript">\n  </script>\n  <style>\n   span.l { display: none }\n  </style>\n </head>\n <body>\n  <div class="container">\n   <div class="masthead">\n    <ul class="nav nav-pills pull-right">\n     <li>\n      <a href="https://elmish.github.io">\n       elmish\n      </a>\n     </li>\n     <li>\n      <a href="http://fable.io">\n       fable\n      </a>\n     </li>\n     <li>\n      <a href="http://fsharp.org">\n       fsharp.org\n      </a>\n     </li>\n    </ul>\n    <h3 class="muted">\n     <a href="https://elmish.github.io/react/index.html">\n      elmish-react\n     </a>\n    </h3>\n   </div>\n   <hr/>\n   <div class="row">\n    <div class="span9" id="main">\n     <h1>\n      <a class="anchor" href="#React-extensions-for-Elmish-apps" name="React-extensions-for-Elmish-apps">\n       React extensions for Elmish apps\n      </a>\n     </h1>\n     <p>\n      Elmish-React implements boilerplate to wire up the rendering of React and React Native components and several rendering optimization functions.\n     </p>\n     <h2>\n      <a class="anchor" href="#Installation" name="Installation">\n       Installation\n      </a>\n     </h2>\n     <table class="pre">\n      <tbody>\n       <tr>\n        <td class="lines">\n         <pre class="fssnip"><span class="l">1: </span>\n</pre>\n        </td>\n        <td class="snippet">\n         <pre class="fssnip"><code lang="shell">paket add nuget Fable.Elmish.React\n</code></pre>\n        </td>\n       </tr>\n      </tbody>\n     </table>\n     <p>\n      You also need to install React:\n     </p>\n     <table class="pre">\n      <tbody>\n       <tr>\n        <td class="lines">\n         <pre class="fssnip"><span class="l">1: </span>\n</pre>\n        </td>\n        <td class="snippet">\n         <pre class="fssnip"><code lang="shell">yarn add react react-dom\n</code></pre>\n        </td>\n       </tr>\n      </tbody>\n     </table>\n     <h2>\n      <a class="anchor" href="#Program-module-extensions" name="Program-module-extensions">\n       Program module extensions\n      </a>\n     </h2>\n     <p>\n      Both React and React Native applications need a root component to be rendered at the specified placeholder, see\n      <a href="./browser.html">\n       browser\n      </a>\n      and\n      <a href="./native.html">\n       native\n      </a>\n      tutorials for details.\n     </p>\n     <h2>\n      <a class="anchor" href="#Lazy-views" name="Lazy-views">\n       Lazy views\n      </a>\n     </h2>\n     <p>\n      By default, every time the main update function is called (upon receiving and processing a message), the entire DOM is constructed anew and passed to React for\n      <a href="https://reactjs.org/docs/reconciliation.html">\n       reconciliation\n      </a>\n      .\nIf there are no changes in the model of some component, its view function will under normal circumstances not return a different result. React will then still perform reconciliation and realize that there is no need to update the component\'s UI.\nConsequently, when the DOM is sufficiently large or its construction extremely time-consuming, this unnecessary work may have noticeable repercussions in terms of application performance.\nThanks to lazy views however, the update process can be optimized by avoiding DOM reconciliation and construction steps, but only if the model remains unchanged.\n     </p>\n     <p>\n      <code>\n       lazyView\n      </code>\n      can be used with equatable models (most F# core types: records, tuples, etc).\n     </p>\n     <p>\n      <code>\n       lazyViewWith\n      </code>\n      can be used with types that don\'t implement the\n      <code>\n       equality\n      </code>\n      constraint (such as types/instances coming from JS libraries) by passing the custom\n      <code>\n       equal\n      </code>\n      function that compares the previous and the new model.\n     </p>\n     <p>\n      These functions work for both React and React Native views. They are used in the following way.\n     </p>\n     <p>\n      Given a view function of one argument:\n     </p>\n     <table class="pre">\n      <tbody>\n       <tr>\n        <td class="lines">\n         <pre class="fssnip"><span class="l">1: </span>\n<span class="l">2: </span>\n<span class="l">3: </span>\n<span class="l">4: </span>\n<span class="l">5: </span>\n<span class="l">6: </span>\n<span class="l">7: </span>\n<span class="l">8: </span>\n</pre>\n        </td>\n        <td class="snippet">\n         <pre class="fssnip highlighted"><code lang="fsharp"><span class="k">open</span> <span class="i">Elmish</span><span class="o">.</span><span class="i">React</span>\n\n<span class="c">// val view : \'a -&gt; ReactElement</span>\n<span class="i">lazyView</span> <span class="i" onmouseout="hideTip(event, \'fs1\', 22)" onmouseover="showTip(event, \'fs1\', 22)">view1</span> <span class="i" onmouseout="hideTip(event, \'fs10\', 23)" onmouseover="showTip(event, \'fs10\', 23)">model</span>\n\n<span class="c">// or given a typical view function, defined like this:</span>\n<span class="c">// val view : \'a -&gt; Dispatch&lt;\'msg&gt; -&gt; ReactElement</span>\n<span class="i">lazyView2</span> <span class="i" onmouseout="hideTip(event, \'fs4\', 24)" onmouseover="showTip(event, \'fs4\', 24)">view2</span> <span class="i" onmouseout="hideTip(event, \'fs10\', 25)" onmouseover="showTip(event, \'fs10\', 25)">model</span> <span class="i" onmouseout="hideTip(event, \'fs14\', 26)" onmouseover="showTip(event, \'fs14\', 26)">dispatch</span>\n</code></pre>\n        </td>\n       </tr>\n      </tbody>\n     </table>\n     <p>\n      the rendered view will be cached for as long as\n      <code>\n       model\n      </code>\n      remains the same.\n     </p>\n     <p>\n      Given a view function of three arguments:\n     </p>\n     <table class="pre">\n      <tbody>\n       <tr>\n        <td class="lines">\n         <pre class="fssnip"><span class="l">1: </span>\n<span class="l">2: </span>\n</pre>\n        </td>\n        <td class="snippet">\n         <pre class="fssnip highlighted"><code lang="fsharp"><span class="c">// val view : \'a -&gt; \'b -&gt; Dispatch&lt;\'msg&gt; -&gt; ReactElement</span>\n<span class="i">lazyView3</span> <span class="i" onmouseout="hideTip(event, \'fs6\', 27)" onmouseover="showTip(event, \'fs6\', 27)">view3</span> <span class="i" onmouseout="hideTip(event, \'fs12\', 28)" onmouseover="showTip(event, \'fs12\', 28)">model1</span> <span class="i" onmouseout="hideTip(event, \'fs13\', 29)" onmouseover="showTip(event, \'fs13\', 29)">model2</span> <span class="i" onmouseout="hideTip(event, \'fs14\', 30)" onmouseover="showTip(event, \'fs14\', 30)">dispatch</span>\n</code></pre>\n        </td>\n       </tr>\n      </tbody>\n     </table>\n     <p>\n      Elmish-React will skip calling the\n      <code>\n       view3\n      </code>\n      for as long as both\n      <code>\n       model1\n      </code>\n      and\n      <code>\n       model2\n      </code>\n      remain unmodified.\n     </p>\n     <div class="tip" id="fs1">\n      val view1 : model:\'a -&gt; \'b\n      <br/>\n      <br/>\n      Full name: Index.view1\n     </div>\n     <div class="tip" id="fs2">\n      val model : \'a\n     </div>\n     <div class="tip" id="fs3">\n      val failwith : message:string -&gt; \'T\n      <br/>\n      <br/>\n      Full name: Microsoft.FSharp.Core.Operators.failwith\n     </div>\n     <div class="tip" id="fs4">\n      val view2 : model:\'a -&gt; dispatch:\'b -&gt; \'c\n      <br/>\n      <br/>\n      Full name: Index.view2\n     </div>\n     <div class="tip" id="fs5">\n      val dispatch : \'b\n     </div>\n     <div class="tip" id="fs6">\n      val view3 : model1:\'a -&gt; model2:\'b -&gt; dispatch:\'c -&gt; \'d\n      <br/>\n      <br/>\n      Full name: Index.view3\n     </div>\n     <div class="tip" id="fs7">\n      val model1 : \'a\n     </div>\n     <div class="tip" id="fs8">\n      val model2 : \'b\n     </div>\n     <div class="tip" id="fs9">\n      val dispatch : \'c\n     </div>\n     <div class="tip" id="fs10">\n      val model : string option\n      <br/>\n      <br/>\n      Full name: Index.model\n     </div>\n     <div class="tip" id="fs11">\n      union case Option.Some: Value: \'T -&gt; Option&lt;\'T&gt;\n     </div>\n     <div class="tip" id="fs12">\n      val model1 : int option\n      <br/>\n      <br/>\n      Full name: Index.model1\n     </div>\n     <div class="tip" id="fs13">\n      val model2 : float option\n      <br/>\n      <br/>\n      Full name: Index.model2\n     </div>\n     <div class="tip" id="fs14">\n      val dispatch : obj\n      <br/>\n      <br/>\n      Full name: Index.dispatch\n     </div>\n     <div class="tip" id="fs15">\n      type unit = Unit\n      <br/>\n      <br/>\n      Full name: Microsoft.FSharp.Core.unit\n     </div>\n    </div>\n    <div class="span3">\n     <img alt="F# Project" src="https://elmish.github.io/react/img/logo.png" style="width:150px;margin:10px"/>\n     <ul class="nav nav-list" id="menu" style="margin-top: 20px;">\n      <li class="nav-header">\n       elmish-react\n      </li>\n      <li>\n       <a href="https://github.com/elmish/react">\n        Source Code on GitHub\n       </a>\n      </li>\n      <li class="nav-header">\n       Quick start\n      </li>\n      <li>\n       <a href="https://elmish.github.io/react/browser.html">\n        Browser SPA\n       </a>\n      </li>\n      <li>\n       <a href="https://elmish.github.io/react/native.html">\n        Native App\n       </a>\n      </li>\n      <li class="nav-header">\n       Modules\n      </li>\n      <li>\n       <a href="https://elmish.github.io/react/common.html">\n        Common\n       </a>\n      </li>\n      <li>\n       <a href="https://elmish.github.io/react/react.html">\n        React\n       </a>\n      </li>\n      <li>\n       <a href="https://elmish.github.io/react/react-native.html">\n        ReactNative\n       </a>\n      </li>\n     </ul>\n    </div>\n   </div>\n  </div>\n </body>\n</html>'