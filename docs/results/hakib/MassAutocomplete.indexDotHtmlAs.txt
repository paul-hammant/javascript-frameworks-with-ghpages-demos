b'<!DOCTYPE html>\n<html xmlns="http://www.w3.org/1999/xhtml">\n <head>\n  <style type="text/css">\n   @charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide{display:none !important;}ng\\:form{display:block;}.ng-animate-block-transitions{transition:0s all!important;-webkit-transition:0s all!important;}\n  </style>\n  <link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css" rel="stylesheet" type="text/css"/>\n  <link href="https://rawgithub.com/isagalaev/highlight.js/master/src/styles/hybrid.css" rel="stylesheet"/>\n  <link href="https://netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.min.css" rel="stylesheet" type="text/css"/>\n  <link href="index.css" rel="stylesheet"/>\n  <link href="massautocomplete.theme.css" rel="stylesheet"/>\n  <meta charset="utf-8"/>\n  <meta content="width=device-width,user-scalable=no" name="viewport"/>\n  <title>\n   MassAutocomplete | Autocomplete for Angular.js applications with a lot to complete\n  </title>\n  <script async="" charset="utf-8" src="https://platform.twitter.com/js/button.80ba267f37d7093ec36703643939b173.js" type="text/javascript">\n  </script>\n </head>\n <body class="ng-scope" ng-app="app">\n  <div class="container main slim ng-scope" ng-controller="mainCtrl">\n   <div class="jumbotron row">\n    <h2>\n     MassAutocomplete\n    </h2>\n    <div>\n     Autocomplete for Angular.js applications with a lot to complete\n    </div>\n   </div>\n   <nav class="navbar navbar-default navbar-inverse row" role="navigation">\n    <div class="container-fluid">\n     <ul class="nav navbar-nav navbar-left">\n      <li>\n       <a href="#usage">\n        Usage\n       </a>\n      </li>\n      <li>\n       <a href="#motivation">\n        Motivation\n       </a>\n      </li>\n      <li>\n       <a href="#examples">\n        Examples\n       </a>\n      </li>\n      <li>\n       <a href="#options">\n        Options\n       </a>\n      </li>\n      <li>\n       <a href="benchmark.html">\n        Performance\n       </a>\n      </li>\n      <li>\n       <a href="#Accessibility">\n        Accessibility\n       </a>\n      </li>\n     </ul>\n     <ul class="nav navbar-nav navbar-right">\n      <li>\n       <a href="https://github.com/hakib/MassAutocomplete">\n        <i class="fa fa-github text-muted fa-2x">\n        </i>\n       </a>\n      </li>\n      <li>\n       <a href="https://angularjs.org/" rel="nofollow">\n        <img alt="Angular.js homepage" height="25px" src="AngularJS-Shield-small.png"/>\n       </a>\n      </li>\n      <li>\n       <iframe allowtransparency="true" class="twitter-share-button twitter-share-button-rendered twitter-tweet-button" frameborder="0" id="twitter-widget-0" scrolling="no" src="http://platform.twitter.com/widgets/tweet_button.4ca9f1d9cb5a373a2f7d0969f5b40084.en.html#dnt=false&amp;hashtags=AngularJS&amp;id=twitter-widget-0&amp;lang=en&amp;original_referer=http%3A%2F%2Fhakib.github.io%2FMassAutocomplete%2Findex.html&amp;size=m&amp;text=MassAutocomplete%20%7C%20Autocomplete%20for%20Angular.js%20applications%20with%20a%20lot%20to%20complete&amp;time=1492311968332&amp;type=share&amp;url=http%3A%2F%2Fhakib.github.io%2FMassAutocomplete%2Findex.html&amp;via=be_haki" style="position: static; visibility: visible; width: 61px; height: 20px;" title="Twitter Tweet Button">\n       </iframe>\n      </li>\n     </ul>\n    </div>\n   </nav>\n   <div class="ng-isolate-scope" mass-autocomplete="ac_container_options">\n    <span ng-transclude="">\n     <h3 class="ng-scope">\n      Details\n     </h3>\n     <table class="table table-bordered ng-scope">\n      <tbody>\n       <tr>\n        <th>\n         Dependencies\n        </th>\n        <td>\n         Angular, Angular-Sanitize\n        </td>\n       </tr>\n       <tr>\n        <th>\n         Size\n        </th>\n        <td>\n         12.2kb, 4kb minified\n        </td>\n       </tr>\n       <tr>\n        <th>\n         Bower\n        </th>\n        <td>\n         <code>\n          bower install angular-mass-autocomplete\n         </code>\n        </td>\n       </tr>\n       <tr>\n        <th>\n         <a href="https://www.npmjs.com/package/angular-mass-autocomplete">\n          NPM\n         </a>\n        </th>\n        <td>\n         <code>\n          npm install angular-mass-autocomplete\n         </code>\n        </td>\n       </tr>\n      </tbody>\n     </table>\n     <h4 class="ng-scope">\n      Directive\n     </h4>\n     <p class="ng-scope">\n      <code>\n       mass-autocomplete\n      </code>\n      - Auto complete container. Maintains the suggestion box.\n     </p>\n     <p class="ng-scope">\n      <code>\n       mass-autocomplete-item\n      </code>\n      - Attached to an input. Requires ng-model and mass-autocomplete.\n     </p>\n     <h3 class="ng-scope" id="usage">\n      Usage\n     </h3>\n     <div class="row ng-scope">\n      <div class="col-sm-4">\n       <input autocomplete="off" class="form-control ng-isolate-scope ng-pristine ng-valid" mass-autocomplete-item="ac_options" ng-model="dirty.state_simple" placeholder="Select a state" type="text"/>\n      </div>\n      <div class="col-sm-8">\n       <ul class="list-unstyled">\n        <!-- ngRepeat: cb in callbacks track by $index -->\n       </ul>\n      </div>\n     </div>\n     <h4 class="ng-scope">\n      HTML\n     </h4>\n     <pre class="ng-scope"><code class="hljs xml" lang="html"><span class="hljs-tag">&lt;<span class="hljs-title">html</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-title">head</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"//ajax.googleapis.com/ajax/libs/angularjs/1.2.16/angular.js"</span>&gt;</span><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"//ajax.googleapis.com/ajax/libs/angularjs/1.2.16/angular-sanitize.js"</span>&gt;</span><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"massautocomplete.js"</span>&gt;</span><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>\n    <span class="hljs-comment">&lt;!-- Optional --&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-title">link</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"massautocomplete.theme.css"</span> <span class="hljs-attribute">rel</span>=<span class="hljs-value">"stylesheet"</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text/css"</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-title">head</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-title">body</span> <span class="hljs-attribute">ng-app</span>=<span class="hljs-value">app</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">ng-controller</span>=<span class="hljs-value">mainCtrl</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">mass-autocomplete</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">ng-model</span>=<span class="hljs-value">"dirty.value"</span>\n               <span class="hljs-attribute">mass-autocomplete-item</span>=<span class="hljs-value">"autocomplete_options"</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-title">body</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-title">html</span>&gt;</span></code></pre>\n     <h4 class="ng-scope">\n      Javascript\n     </h4>\n     <pre class="ng-scope"><code class="hljs php" lang="js"><span class="hljs-keyword">var</span> app = angular.module(<span class="hljs-string">\'app\'</span>, [<span class="hljs-string">\'ngSanitize\'</span>, <span class="hljs-string">\'MassAutoComplete\'</span>]);\napp.controller(<span class="hljs-string">\'mainCtrl\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(<span class="hljs-variable">$scope</span>, <span class="hljs-variable">$sce</span>, <span class="hljs-variable">$q</span>)</span> </span>{\n  <span class="hljs-variable">$scope</span>.dirty = {};\n\n  <span class="hljs-keyword">var</span> states = [<span class="hljs-string">\'Alabama\'</span>, <span class="hljs-string">\'Alaska\'</span>, <span class="hljs-string">\'California\'</span>, <span class="hljs-comment">/* ... */</span> ];\n\n  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">suggest_state</span><span class="hljs-params">(term)</span> </span>{\n    <span class="hljs-keyword">var</span> q = term.toLowerCase().trim();\n    <span class="hljs-keyword">var</span> results = [];\n\n    <span class="hljs-comment">// Find first 10 states that start with `term`.</span>\n    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; states.length &amp;&amp; results.length &lt; <span class="hljs-number">10</span>; i++) {\n      <span class="hljs-keyword">var</span> state = states[i];\n      <span class="hljs-keyword">if</span> (state.toLowerCase().indexOf(q) === <span class="hljs-number">0</span>)\n        results.push({ label: state, value: state });\n    }\n\n    <span class="hljs-keyword">return</span> results;\n  }\n\n  <span class="hljs-variable">$scope</span>.autocomplete_options = {\n    suggest: suggest_state\n  };\n});</code></pre>\n     <hr class="ng-scope"/>\n     <h3 class="ng-scope" id="motivation">\n      Motivation\n     </h3>\n     <p class="ng-scope">\n      MassAutocomplete was created as part of a new project that required auto\n      completing a lot of input fields.\n     </p>\n     <p class="ng-scope">\n      Most existing auto complete implementations\n      (\n      <a href="http://bower.io/search/?q=auto%20complete%20angular" rel="nofollow">\n       1\n      </a>\n      ,\n      <a href="http://ngmodules.org/tags/autocomplete" rel="nofollow">\n       2\n      </a>\n      ) are\n      wrapping the input field and appending a suggestion box along with several\n      watches. This is fine as long as you want to auto-complete only one or two\n      inputs. But, when there are several dozen inputs, the memory, DOM and watch\n      count will start to bloat and that might impact performance.\n     </p>\n     <h4 class="ng-scope">\n      A different approach\n     </h4>\n     <p class="ng-scope">\n      MassAutocomplete was implemented with a different approach in mind.\n      Instead of attaching the suggestion box to each input field, we use\n      transclusion to maintain only one box for the entire document. This\n      approach guarantees that additional input fields will not require\n      additional DOM or watches for the purpose of the auto complete.\n     </p>\n     <p class="ng-scope">\n      MassAutocomplete does not provide filtering, linking, ranking or sorting.\n      Generating the suggestions is left to the application.\n     </p>\n     <h4 class="ng-scope">\n      Comparing implementations\n     </h4>\n     <p class="ng-scope">\n      We performed a comparison between mass-autocomplete and the popular ui-typehead.\n     </p>\n     <p class="ng-scope">\n      <a href="benchmark.html">\n       <strong>\n        The results are  here.\n       </strong>\n      </a>\n     </p>\n     <hr class="ng-scope"/>\n     <h3 class="ng-scope" id="examples">\n      Examples\n     </h3>\n     <p class="ng-scope">\n      All examples in this section are using just one\n      <code>\n       mass-autocomplete\n      </code>\n      container.\n     </p>\n     <h4 class="ng-scope">\n      Kitchen Sink\n     </h4>\n     <h5 class="ng-scope">\n      Complete example including\n      <strong>\n       highlighting\n      </strong>\n      and\n      <strong>\n       fuzzy matching\n      </strong>\n      .\n      <strong>\n       Searching\n      </strong>\n      and\n      <strong>\n       ranking\n      </strong>\n      using\n      <a href="http://kiro.me/projects/fuse.html" rel="nofollow">\n       Fuse.js\n      </a>\n      .\n     </h5>\n     <p class="ng-scope">\n      Try inserting\n      <i>\n       sauth\n      </i>\n      or\n      <i>\n       rod iland\n      </i>\n      or\n      <i>\n       gorgia\n      </i>\n      .\n     </p>\n     <div class="row ng-scope">\n      <div class="col-sm-4">\n       <input autocomplete="off" class="form-control ng-isolate-scope ng-pristine ng-valid" mass-autocomplete-item="ac_fuse_options" ng-model="dirty.fuse_selection" placeholder="Select State" type="text"/>\n      </div>\n      <div class="col-sm-8">\n       <pre><code class="hljs php" lang="js">\n<span class="hljs-keyword">var</span> fuzzySearch = <span class="hljs-keyword">new</span> Fuse(states, {\n  shouldSort: <span class="hljs-keyword">true</span>,\n  caseSensitive: <span class="hljs-keyword">false</span>,\n  threshold: <span class="hljs-number">0.4</span>,\n});\n\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fuzzy_suggest</span><span class="hljs-params">(term)</span> </span>{\n  <span class="hljs-keyword">if</span> (!term)\n    <span class="hljs-keyword">return</span> [];\n\n  <span class="hljs-keyword">return</span> fuzzySearch\n    .search(term)\n    .slice(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>)\n    .map(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(i)</span> </span>{\n      <span class="hljs-keyword">var</span> val = states[i];\n      <span class="hljs-keyword">return</span> {\n        value: val,\n        label: <span class="hljs-variable">$sce</span>.trustAsHtml(highlight(val, term))\n      };\n    });\n}\n\n<span class="hljs-variable">$scope</span>.ac_fuse_options = {\n  suggest: fuzzy_suggest\n};\n</code></pre>\n      </div>\n     </div>\n     <hr class="ng-scope"/>\n     <h4 class="ng-scope">\n      Highlighting\n     </h4>\n     <div class="row ng-scope">\n      <div class="col-sm-4">\n       <input autocomplete="off" class="form-control ng-isolate-scope ng-pristine ng-valid" mass-autocomplete-item="ac_option_highlight" ng-model="dirty.country_highlight" placeholder="Select a state (2 letters)" type="text"/>\n      </div>\n      <div class="col-sm-8">\n       <pre><code class="hljs php" lang="js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">highlight</span><span class="hljs-params">(str, term)</span> </span>{\n  <span class="hljs-keyword">var</span> highlight_regex = <span class="hljs-keyword">new</span> RegExp(<span class="hljs-string">\'(\'</span> + term + <span class="hljs-string">\')\'</span>, <span class="hljs-string">\'gi\'</span>);\n  <span class="hljs-keyword">return</span> str.replace(highlight_regex,\n    <span class="hljs-string">\'&lt;span class="highlight"&gt;$1&lt;/span&gt;\'</span>);\n};\n\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">suggest_state_with_highlight</span><span class="hljs-params">(term)</span> </span>{\n  <span class="hljs-keyword">if</span> (term.length &lt; <span class="hljs-number">2</span>)\n    <span class="hljs-keyword">return</span>;\n\n  <span class="hljs-keyword">var</span> suggestions = suggest_state(term);\n  suggestions.<span class="hljs-keyword">forEach</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(s)</span> </span>{\n    <span class="hljs-comment">// In real life you should reuse the regexp object.</span>\n    s.label = <span class="hljs-variable">$sce</span>.trustAsHtml(highlight(s.label, term));\n  });\n\n  <span class="hljs-keyword">return</span> suggestions;\n};\n\n<span class="hljs-variable">$scope</span>.ac_option_highlight = {\n  suggest: suggest_state_with_highlight\n};</code></pre>\n      </div>\n     </div>\n     <hr class="ng-scope"/>\n     <h4 class="ng-scope">\n      Delimited\n     </h4>\n     <div class="row ng-scope">\n      <div class="col-sm-4">\n       <input autocomplete="off" class="form-control ng-isolate-scope ng-pristine ng-valid" mass-autocomplete-item="ac_option_delimited" ng-model="dirty.country_delimited" placeholder="Select states (seperated by commas)" type="text"/>\n      </div>\n      <div class="col-sm-8">\n       <pre><code class="hljs php" lang="js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">suggest_state_delimited</span><span class="hljs-params">(term)</span> </span>{\n  <span class="hljs-keyword">var</span> ix = term.lastIndexOf(<span class="hljs-string">\',\'</span>),\n      lhs = term.substring(<span class="hljs-number">0</span>, ix + <span class="hljs-number">1</span>),\n      rhs = term.substring(ix + <span class="hljs-number">1</span>),\n      suggestions = suggest_state(rhs);\n\n  suggestions.<span class="hljs-keyword">forEach</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(s)</span> </span>{\n    s.value = lhs + s.value;\n  });\n\n  <span class="hljs-keyword">return</span> suggestions;\n};\n\n<span class="hljs-variable">$scope</span>.ac_option_delimited = {\n  suggest: suggest_state_delimited\n};</code></pre>\n      </div>\n     </div>\n     <hr class="ng-scope"/>\n     <h4 class="ng-scope">\n      Custom formatting\n     </h4>\n     <div class="row ng-scope">\n      <div class="col-sm-4">\n       <input autocomplete="off" class="form-control ng-isolate-scope ng-pristine ng-valid" mass-autocomplete-item="ac_option_tag" ng-model="dirty.country_tag" placeholder="States as tags" type="text"/>\n      </div>\n      <div class="col-sm-8">\n       <pre><code class="hljs php" lang="js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">suggest_state_as_tag</span><span class="hljs-params">(term)</span> </span>{\n  <span class="hljs-keyword">var</span> suggestions = suggest_state_delimited(term);\n  suggestions.<span class="hljs-keyword">forEach</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(s)</span> </span>{\n    s.label = <span class="hljs-variable">$sce</span>.trustAsHtml(\n      <span class="hljs-string">\'&lt;span class="badge"&gt;\'</span> + s.label + <span class="hljs-string">\'&lt;/span&gt;\'</span>\n    );\n  });\n  <span class="hljs-keyword">return</span> suggestions;\n};\n\n<span class="hljs-variable">$scope</span>.ac_option_tag = {\n  suggest: suggest_state_as_tag\n};</code></pre>\n      </div>\n     </div>\n     <hr class="ng-scope"/>\n     <h4 class="ng-scope">\n      Using the selected object\n     </h4>\n     <div class="row ng-scope">\n      <div class="col-sm-4">\n       <input autocomplete="off" class="form-control ng-isolate-scope ng-pristine ng-valid" mass-autocomplete-item="ac_option_tag_select" ng-model="dirty.selected_tag" placeholder="Select State" type="text"/>\n       <br/>\n       <!-- ngIf: tags.length === 0 -->\n       <span class="text-muted ng-scope" ng-if="tags.length === 0">\n        No tags selected.\n        <br/>\n        <br/>\n        Select a tag from the auto complete menu using the keyboard or mouse.\n       </span>\n       <!-- end ngIf: tags.length === 0 -->\n       <ul class="list-unstyled">\n        <!-- ngRepeat: tag in tags track by $index -->\n       </ul>\n      </div>\n      <div class="col-sm-8">\n       <pre><code class="hljs php" lang="js"><span class="hljs-variable">$scope</span>.tags = [];\n\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add_tag</span><span class="hljs-params">(selected)</span> </span>{\n  <span class="hljs-variable">$scope</span>.tags.push(selected.value);\n  <span class="hljs-comment">// Clear model</span>\n  <span class="hljs-variable">$scope</span>.dirty.selected_tag = undefined;\n};\n\n<span class="hljs-variable">$scope</span>.ac_option_tag_select = {\n  suggest: suggest_state_as_tag,\n  on_select: add_tag\n};</code></pre>\n      </div>\n     </div>\n     <hr class="ng-scope"/>\n     <h4 class="ng-scope">\n      Remote source\n     </h4>\n     <div class="row ng-scope">\n      <div class="col-sm-4">\n       <input autocomplete="off" class="form-control ng-isolate-scope ng-pristine ng-valid" mass-autocomplete-item="ac_option_remote" ng-model="dirty.remote_selection" placeholder="Select State" type="text"/>\n      </div>\n      <div class="col-sm-8">\n       <pre><code class="hljs php" lang="js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">suggest_state_remote</span><span class="hljs-params">(term)</span> </span>{\n  <span class="hljs-keyword">var</span> deferred = <span class="hljs-variable">$q</span>.defer();\n  <span class="hljs-comment">// Fake remote source using timeout</span>\n  <span class="hljs-variable">$timeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    deferred.resolve(suggest_state(term));\n  }, <span class="hljs-number">500</span>);\n  <span class="hljs-keyword">return</span> deferred.promise;\n}\n\n<span class="hljs-variable">$scope</span>.ac_option_remote = {\n  suggest: suggest_state_remote,\n  on_error: console.log\n};</code></pre>\n      </div>\n     </div>\n     <hr class="ng-scope"/>\n     <h4 class="ng-scope">\n      Passing objects\n     </h4>\n     <div class="row ng-scope">\n      <div class="col-sm-4">\n       <input autocomplete="off" class="form-control ng-isolate-scope ng-pristine ng-valid" mass-autocomplete-item="ac_options_users" ng-model="dirty.continent" placeholder="Name or Mail" type="text"/>\n       <h5>\n        Selected Object\n       </h5>\n       <pre class="ng-binding">\n          </pre>\n      </div>\n      <div class="col-sm-8">\n       <pre><code class="hljs php" lang="js"><span class="hljs-keyword">var</span> users = [\n  {name: <span class="hljs-string">\'Haki\'</span>, joined: <span class="hljs-string">\'2 month ago\'</span>, email: <span class="hljs-string">\'Haki@email.com\'</span>},\n  {name: <span class="hljs-string">\'Ran\'</span>, joined: <span class="hljs-string">\'2 days ago\'</span>, email: <span class="hljs-string">\'Ran123@ac.org\'</span>},\n  {name: <span class="hljs-string">\'John\'</span>, joined: <span class="hljs-string">\'a week ago\'</span>, email: <span class="hljs-string">\'JJ@gmail.com\'</span>},\n  {name: <span class="hljs-string">\'Mary\'</span>, joined: <span class="hljs-string">\'Yesterday\'</span>, email: <span class="hljs-string">\'Mary@yahoo.com\'</span>},\n  {name: <span class="hljs-string">\'Charlie\'</span>, joined: <span class="hljs-string">\'Just now\'</span>, email: <span class="hljs-string">\'Charlie@msn.com\'</span>},\n  {name: <span class="hljs-string">\'Rebecca\'</span>, joined: <span class="hljs-string">\'Yesterday\'</span>, email: <span class="hljs-string">\'Becky@mail.com\'</span>},\n  {name: <span class="hljs-string">\'James\'</span>, joined: <span class="hljs-string">\'3 month ago\'</span>, email: <span class="hljs-string">\'James@inbox.com\'</span>}\n];\n\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">suggest_users</span><span class="hljs-params">(term)</span> </span>{\n   <span class="hljs-keyword">var</span> q = term.toLowerCase().trim(),\n       results = [];\n\n   <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; users.length; i++) {\n     <span class="hljs-keyword">var</span> user = users[i];\n     <span class="hljs-keyword">if</span> (user.name.toLowerCase().indexOf(q) !== -<span class="hljs-number">1</span> ||\n         user.email.toLowerCase().indexOf(q) !== -<span class="hljs-number">1</span>)\n       results.push({\n         value: user.name,\n         <span class="hljs-comment">// Pass the object as well. Can be any property name.</span>\n         obj: user,\n         label: <span class="hljs-variable">$sce</span>.trustAsHtml(\n           <span class="hljs-string">\'&lt;div class="row"&gt;\'</span> +\n           <span class="hljs-string">\' &lt;div class="col-xs-5"&gt;\'</span> +\n           <span class="hljs-string">\'  &lt;i class="fa fa-user"&gt;&lt;/i&gt;\'</span> +\n           <span class="hljs-string">\'  &lt;strong&gt;\'</span> + highlight(user.name,term) + <span class="hljs-string">\'&lt;/strong&gt;\'</span>+\n           <span class="hljs-string">\' &lt;/div&gt;\'</span> +\n           <span class="hljs-string">\' &lt;div class="col-xs-7 text-right text-muted"&gt;\'</span> +\n           <span class="hljs-string">\'  &lt;small&gt;\'</span> + highlight(user.email,term) + <span class="hljs-string">\'&lt;/small&gt;\'</span> +\n           <span class="hljs-string">\' &lt;/div&gt;\'</span> +\n           <span class="hljs-string">\' &lt;div class="col-xs-12"&gt;\'</span> +\n           <span class="hljs-string">\'  &lt;span class="text-muted"&gt;Joined&lt;/span&gt;\'</span> +\n              user.joined +\n           <span class="hljs-string">\' &lt;/div&gt;\'</span> +\n           <span class="hljs-string">\'&lt;/div&gt;\'</span>\n         )\n       });\n   }\n   <span class="hljs-keyword">return</span> results;\n};\n\n<span class="hljs-variable">$scope</span>.ac_options_users = {\n  suggest: suggest_users,\n  on_select: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(selected)</span> </span>{\n    <span class="hljs-variable">$scope</span>.selected_user = selected.obj;\n  }\n};</code></pre>\n      </div>\n     </div>\n     <hr class="ng-scope"/>\n     <h4 class="ng-scope">\n      Reusing options\n     </h4>\n     <div class="row ng-scope">\n      <div class="col-sm-4">\n       <input class="form-control ng-pristine ng-valid ng-valid-number" ng-model="n" placeholder="How many inputs?" type="number"/>\n       <div class="text-muted">\n        <br/>\n        Enter states:\n       </div>\n       <!-- ngRepeat: i in n_array(n) track by $index -->\n       <div class="ng-scope" ng-repeat="i in n_array(n) track by $index">\n        <input autocomplete="off" class="form-control input-sm ng-isolate-scope ng-pristine ng-valid" mass-autocomplete-item="ac_option_highlight" ng-model="dirty.country[$index]" placeholder="Select State" type="text"/>\n        <br/>\n       </div>\n       <!-- end ngRepeat: i in n_array(n) track by $index -->\n      </div>\n      <div class="col-sm-8">\n       <pre><code class="hljs bash" lang="html">&lt;div ng-repeat=<span class="hljs-string">"i in n_array(n) track by <span class="hljs-variable">$index</span>"</span>/&gt;\n  &lt;input <span class="hljs-built_in">type</span>=<span class="hljs-string">"text"</span>\n         placeholder=<span class="hljs-string">"Select State"</span>\n         ng-model=<span class="hljs-string">"dirty.state[<span class="hljs-variable">$index</span>]"</span>\n         calc-autocomplete-item=<span class="hljs-string">"ac_option_highlight"</span>&gt;\n&lt;/div&gt;</code></pre>\n      </div>\n     </div>\n     <h3 class="ng-scope" id="options">\n      Options\n     </h3>\n     <table class="table table-bordered ng-scope">\n      <tbody>\n       <tr>\n        <th class="text-center" colspan="2">\n         mass-autocomplete=options\n        </th>\n       </tr>\n       <tr>\n        <th>\n         debounce_position(150)\n        </th>\n        <td>\n         Debounce in ms for repositioning suggestion box on window resize.\n        </td>\n       </tr>\n       <tr>\n        <th>\n         debounce_attach(300)\n        </th>\n        <td>\n         Debounce in ms for attaching input after focus.\n         <br/>\n         Prevents unnecessary positioning when quickly jumping between inputs\n          using\n         <kbd>\n          tab\n         </kbd>\n         .\n        </td>\n       </tr>\n       <tr>\n        <th>\n         debounce_suggest(200)\n        </th>\n        <td>\n         Debounce in ms for calling suggest.\n         <br/>\n         Useful for remote sources and to suspend suggestions while user is typing.\n        </td>\n       </tr>\n       <tr>\n        <th>\n         debounce_blur(150)\n        </th>\n        <td>\n         Debounce in ms for detach on blur.\n         <br/>\n         Determines the amount of time in milliseconds before losing focus\n          as a result of selecting from the menu until detach is invoked.\n        </td>\n       </tr>\n       <tr>\n       </tr>\n       <tr>\n        <th class="text-center" colspan="2">\n         mass-autocomplete-item=options_name\n        </th>\n       </tr>\n       <tr>\n        <th>\n         suggest(term)\n        </th>\n        <td>\n         <p>\n          Receive a string and return an array of suggestions.\n         </p>\n         <p>\n          Each suggestion must contain\n         </p>\n         <ul class="list-unstyled">\n          <li>\n           <code>\n            value\n           </code>\n           - Text to display in the textbox.\n          </li>\n          <li>\n           <code>\n            label\n           </code>\n           - String or trusted HTML to display in the suggestion box.\n          </li>\n         </ul>\n         <p>\n         </p>\n         <p>\n          The label is bound using\n          <code>\n           ng-bind-html\n          </code>\n          -\n            to bind raw html use\n          <code>\n           $sce.trustAsHtml()\n          </code>\n          .\n         </p>\n         <p>\n          The return value is an array of objects or a promise that resolves\n            to an array of objects.\n         </p>\n         <p>\n          The object is passed to the\n          <code>\n           on_select\n          </code>\n          callback so\n            additional properties can be used.\n         </p>\n        </td>\n       </tr>\n       <tr>\n        <th>\n         on_attach()\n        </th>\n        <td>\n         Callback fired when the user focus a field.\n        </td>\n       </tr>\n       <tr>\n        <th>\n         on_select(selected_item)\n        </th>\n        <td>\n         Callback fired when the user select an item from the suggestion box.\n        </td>\n       </tr>\n       <tr>\n        <th>\n         on_detach(current_value)\n        </th>\n        <td>\n         Callback fired when the input field is blurred. Useful for purging caches.\n        </td>\n       </tr>\n       <tr>\n        <th>\n         on_error()\n        </th>\n        <td>\n         Callback fired in case\n         <code>\n          suggest()\n         </code>\n         fails.\n        </td>\n       </tr>\n       <tr>\n        <th>\n         auto_select_first (false)\n        </th>\n        <td>\n         Auto select the first option in the suggestion box.\n        </td>\n       </tr>\n       <tr>\n        <th class="text-center" colspan="2">\n         massAutoCompleteConfigProvider\n        </th>\n       </tr>\n       <tr>\n        <th>\n         position_autocomplete(container, target)\n        </th>\n        <td>\n         Called on attach to position the ac container relative to the target input. Some use common use cases when a custom positioning function might be desired:\n         <ol>\n          <li>\n           The AC container should be fixed positioned.\n          </li>\n          <li>\n           You wish to use external libraries to position the element (such as jquery).\n          </li>\n          <li>\n           The default positioning function is not sufficient and adjustments cannot be made using only css.\n          </li>\n         </ol>\n        </td>\n       </tr>\n       <tr>\n        <th>\n         generate_random_id(prefix)\n        </th>\n        <td>\n         Used to generate random Id\'s starting at `prefix`. Id\'s are generated mostly for accessibility needs.\n         <br/>\n         It\'s very unlikely you will need to change this function.\n        </td>\n       </tr>\n       <tr>\n        <th>\n         DEBOUNCE\n        </th>\n        <td>\n         Set default debounce globally.\n         <br/>\n         Default values are:\n         <ul>\n          <li>\n           <code>\n            position\n           </code>\n           = 150\n          </li>\n          <li>\n           <code>\n            attach\n           </code>\n           = 300\n          </li>\n          <li>\n           <code>\n            suggest\n           </code>\n           = 200\n          </li>\n          <li>\n           <code>\n            blur\n           </code>\n           = 150\n          </li>\n         </ul>\n        </td>\n       </tr>\n      </tbody>\n     </table>\n     <h4 class="ng-scope">\n      CSS\n     </h4>\n     <p class="ng-scope">\n      The suggestion box template\n     </p>\n     <pre class="ng-scope"><code class="hljs cs" lang="html">&lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">"ac-container"</span> ng-show=<span class="hljs-string">"show_autocomplete &amp;&amp; results.length"</span> style=<span class="hljs-string">"position:absolute;"</span>&gt;\n  &lt;ul <span class="hljs-keyword">class</span>=<span class="hljs-string">"ac-menu"</span>&gt;\n    &lt;li ng-repeat=<span class="hljs-string">"result in results"</span>\n      ng-<span class="hljs-keyword">if</span>=<span class="hljs-string">"$index &gt; 0"</span>\n      <span class="hljs-keyword">class</span>=<span class="hljs-string">"ac-menu-item"</span>\n      ng-<span class="hljs-keyword">class</span>=<span class="hljs-string">"$index == selected_index ? \'ac-state-focus\' : \'\'"</span>&gt;\n      &lt;a href ng-click=<span class="hljs-string">"apply_selection($index, $event)"</span> ng-bind-html=result.label&gt; &lt;/a&gt;\n    &lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/div&gt;</code></pre>\n     <p class="ng-scope">\n      We recommend adding\n      <code>\n       backface-visibility: hidden;\n      </code>\n      and\n      <code>\n       transform: translate3d(0, 0, 0);\n      </code>\n      to\n      <code>\n       .ac-container\n      </code>\n      to limit the paint\n       area to that of the suggestion box. See\n      <code>\n       massautocomplete.theme.css\n      </code>\n      for the complete CSS.\n     </p>\n     <h3 class="ng-scope" id="Accessibility">\n      Accessibility\n     </h3>\n     <p class="ng-scope">\n      The implementation was inspired by the\n      <a href="http://archive.dojotoolkit.org/nightly/dojotoolkit/dijit/tests/form/_autoComplete.html">\n       dojo project implementation of autocomplete\n      </a>\n      . It is also recommended to include\n      <a href="https://docs.angularjs.org/api/ngAria">\n       ngAria\n      </a>\n      for the built-in aria support (mainly for ng-show/ng-hide).\n     </p>\n     <p class="ng-scope">\n      The following markup is used to accompany assisting technology:\n     </p>\n     <pre class="ng-scope"><code class="hljs http" lang="html">\n\n<span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-title">input</span>\n          </span></span><mark><span class="xml"><span class="hljs-tag"><span class="hljs-attribute">id</span>=<span class="hljs-value">"ac_element_XXXXXX"</span></span></span></mark><span class="xml"><span class="hljs-tag">\n          <span class="hljs-attribute">ng-model</span>=<span class="hljs-value">"dirty.value"</span>\n          <span class="hljs-attribute">mass-autocomplete-item</span> /&gt;</span>\n\n      ....\n\n      <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"ac-container"</span>\n           </span></span><mark><span class="xml"><span class="hljs-tag"><span class="hljs-attribute">aria-autocomplete</span>=<span class="hljs-value">"list"</span></span></span></mark><span class="xml"><span class="hljs-tag">\n           </span></span><mark><span class="xml"><span class="hljs-tag"><span class="hljs-attribute">role</span>=<span class="hljs-value">"listbox"</span></span></span></mark><span class="xml"><span class="hljs-tag">\n           </span></span><mark><span class="xml"><span class="hljs-tag"><span class="hljs-attribute">aria-labelledby</span>=<span class="hljs-value">"ac_element_XXXXXX"</span></span></span></mark><span class="xml"><span class="hljs-tag">\n           </span></span><mark><span class="xml"><span class="hljs-tag"><span class="hljs-attribute">aria-activedescendant</span>=<span class="hljs-value">"ac_item_XXXXX"</span></span></span></mark><span class="xml"><span class="hljs-tag">\n           <span class="hljs-attribute">ng-show</span>=<span class="hljs-value">"show_autocomplete"</span>&gt;</span>\n\n        <span class="hljs-tag">&lt;<span class="hljs-title">ul</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"ac-menu"</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-title">li</span> <span class="hljs-attribute">ng-repeat</span>=<span class="hljs-value">"result in results"</span>\n              <span class="hljs-attribute">class</span>=<span class="hljs-value">"ac-menu-item"</span>\n              </span></span><mark><span class="xml"><span class="hljs-tag"><span class="hljs-attribute">role</span>=<span class="hljs-value">"option"</span></span></span></mark><span class="xml"><span class="hljs-tag">\n              </span></span><mark><span class="xml"><span class="hljs-tag"><span class="hljs-attribute">id</span>=<span class="hljs-value">"ac_item_XXXXX"</span></span></span></mark><span class="xml"><span class="hljs-tag">\n              <span class="hljs-attribute">ng-class</span>=<span class="hljs-value">"..."</span>&gt;</span>\n              <span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span> <span class="hljs-attribute">ng-click</span>=<span class="hljs-value">"..."</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-title">ul</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\n\n    </span></code></pre>\n     <h4 class="ng-scope">\n      Keyboard\n     </h4>\n     <table class="table table-bordered table-condensed ng-scope">\n      <tbody>\n       <tr>\n        <th>\n         <kbd>\n          up\n         </kbd>\n         <kbd>\n          down\n         </kbd>\n        </th>\n        <td>\n         Previous/Next suggestion\n        </td>\n       </tr>\n       <tr>\n        <th>\n         <kbd>\n          tab\n         </kbd>\n        </th>\n        <td>\n         When suggestion box is open - next suggestion\n        </td>\n       </tr>\n       <tr>\n        <th>\n         <kbd>\n          esc\n         </kbd>\n        </th>\n        <td>\n         When suggestion box is open - close\n         <br/>\n         When suggestion box is closed - revert to initial value.\n        </td>\n       </tr>\n      </tbody>\n     </table>\n    </span>\n    <div aria-autocomplete="list" class="ac-container ng-hide" ng-show="show_autocomplete" role="listbox" style="position: absolute;">\n     <ul class="ac-menu">\n      <!-- ngRepeat: result in results -->\n     </ul>\n    </div>\n   </div>\n  </div>\n  <a href="https://github.com/hakib/MassAutocomplete">\n   <img alt="Fork me on GitHub" data-canonical-src="https://s3.amazonaws.com/github/ribbons/forkme_right_red_aa0000.png" src="https://camo.githubusercontent.com/365986a132ccd6a44c23a9169022c0b5c890c387/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f7265645f6161303030302e706e67" style="position: absolute; top: 0; right: 0; border: 0; width: 120px;"/>\n  </a>\n  <script async="" src="//www.google-analytics.com/analytics.js">\n  </script>\n  <script id="twitter-wjs" src="http://platform.twitter.com/widgets.js">\n  </script>\n  <script src="https://code.jquery.com/jquery.min.js">\n  </script>\n  <script src="https://rawgithub.com/krisk/Fuse/master/src/fuse.js">\n  </script>\n  <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.2.16/angular.js">\n  </script>\n  <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.2.16/angular-sanitize.js">\n  </script>\n  <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.3/highlight.min.js">\n  </script>\n  <!-- APP -->\n  <script src="massautocomplete.js">\n  </script>\n  <script src="index.js">\n  </script>\n  <script>\n   !function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?\'http\':\'https\';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+\'://platform.twitter.com/widgets.js\';fjs.parentNode.insertBefore(js,fjs);}}(document, \'script\', \'twitter-wjs\');\n  </script>\n  <script>\n   $(function () {\n      hljs.initHighlightingOnLoad();\n      $(\'[mass-autocomplete-item]\').each(function (i, elm) {\n        $(elm).one(\'focus\', function (e) {\n          ga(\'send\', \'event\', \'autocomplete-item\', \'focus\', $(e.target).attr(\'mass-autocomplete-item\'), 1);\n        });\n      });\n      $(window).scroll(function () {\n        if($(window).scrollTop() + $(window).height() == $(document).height()) {\n          ga(\'send\', \'event\', \'window\', \'scroll\', \'bottom\', 1);\n          $(window).unbind(\'scroll\');\n        }\n      });\n    });\n  </script>\n  <script>\n   (function(i,s,o,g,r,a,m){i[\'GoogleAnalyticsObject\']=r;i[r]=i[r]||function(){\n    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n    })(window,document,\'script\',\'//www.google-analytics.com/analytics.js\',\'ga\');\n    ga(\'create\', \'UA-55665057-1\', \'auto\');\n    ga(\'send\', \'pageview\');\n  </script>\n </body>\n</html>'b'<!DOCTYPE html>\n<html xmlns="http://www.w3.org/1999/xhtml">\n <head>\n  <style type="text/css">\n   @charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide{display:none !important;}ng\\:form{display:block;}.ng-animate-block-transitions{transition:0s all!important;-webkit-transition:0s all!important;}\n  </style>\n  <link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css" rel="stylesheet" type="text/css"/>\n  <link href="https://rawgithub.com/isagalaev/highlight.js/master/src/styles/hybrid.css" rel="stylesheet"/>\n  <link href="https://netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.min.css" rel="stylesheet" type="text/css"/>\n  <link href="index.css" rel="stylesheet"/>\n  <link href="massautocomplete.theme.css" rel="stylesheet"/>\n  <meta charset="utf-8"/>\n  <meta content="width=device-width,user-scalable=no" name="viewport"/>\n  <title>\n   MassAutocomplete | Autocomplete for Angular.js applications with a lot to complete\n  </title>\n  <script async="" charset="utf-8" src="https://platform.twitter.com/js/button.80ba267f37d7093ec36703643939b173.js" type="text/javascript">\n  </script>\n </head>\n <body class="ng-scope" ng-app="app">\n  <div class="container main slim ng-scope" ng-controller="mainCtrl">\n   <div class="jumbotron row">\n    <h2>\n     MassAutocomplete\n    </h2>\n    <div>\n     Autocomplete for Angular.js applications with a lot to complete\n    </div>\n   </div>\n   <nav class="navbar navbar-default navbar-inverse row" role="navigation">\n    <div class="container-fluid">\n     <ul class="nav navbar-nav navbar-left">\n      <li>\n       <a href="#usage">\n        Usage\n       </a>\n      </li>\n      <li>\n       <a href="#motivation">\n        Motivation\n       </a>\n      </li>\n      <li>\n       <a href="#examples">\n        Examples\n       </a>\n      </li>\n      <li>\n       <a href="#options">\n        Options\n       </a>\n      </li>\n      <li>\n       <a href="benchmark.html">\n        Performance\n       </a>\n      </li>\n      <li>\n       <a href="#Accessibility">\n        Accessibility\n       </a>\n      </li>\n     </ul>\n     <ul class="nav navbar-nav navbar-right">\n      <li>\n       <a href="https://github.com/hakib/MassAutocomplete">\n        <i class="fa fa-github text-muted fa-2x">\n        </i>\n       </a>\n      </li>\n      <li>\n       <a href="https://angularjs.org/" rel="nofollow">\n        <img alt="Angular.js homepage" height="25px" src="AngularJS-Shield-small.png"/>\n       </a>\n      </li>\n      <li>\n       <iframe allowtransparency="true" class="twitter-share-button twitter-share-button-rendered twitter-tweet-button" frameborder="0" id="twitter-widget-0" scrolling="no" src="http://platform.twitter.com/widgets/tweet_button.4ca9f1d9cb5a373a2f7d0969f5b40084.en.html#dnt=false&amp;hashtags=AngularJS&amp;id=twitter-widget-0&amp;lang=en&amp;original_referer=http%3A%2F%2Fhakib.github.io%2FMassAutocomplete%2Findex.html&amp;size=m&amp;text=MassAutocomplete%20%7C%20Autocomplete%20for%20Angular.js%20applications%20with%20a%20lot%20to%20complete&amp;time=1492570178700&amp;type=share&amp;url=http%3A%2F%2Fhakib.github.io%2FMassAutocomplete%2Findex.html&amp;via=be_haki" style="position: static; visibility: visible; width: 61px; height: 20px;" title="Twitter Tweet Button">\n       </iframe>\n      </li>\n     </ul>\n    </div>\n   </nav>\n   <div class="ng-isolate-scope" mass-autocomplete="ac_container_options">\n    <span ng-transclude="">\n     <h3 class="ng-scope">\n      Details\n     </h3>\n     <table class="table table-bordered ng-scope">\n      <tbody>\n       <tr>\n        <th>\n         Dependencies\n        </th>\n        <td>\n         Angular, Angular-Sanitize\n        </td>\n       </tr>\n       <tr>\n        <th>\n         Size\n        </th>\n        <td>\n         12.2kb, 4kb minified\n        </td>\n       </tr>\n       <tr>\n        <th>\n         Bower\n        </th>\n        <td>\n         <code>\n          bower install angular-mass-autocomplete\n         </code>\n        </td>\n       </tr>\n       <tr>\n        <th>\n         <a href="https://www.npmjs.com/package/angular-mass-autocomplete">\n          NPM\n         </a>\n        </th>\n        <td>\n         <code>\n          npm install angular-mass-autocomplete\n         </code>\n        </td>\n       </tr>\n      </tbody>\n     </table>\n     <h4 class="ng-scope">\n      Directive\n     </h4>\n     <p class="ng-scope">\n      <code>\n       mass-autocomplete\n      </code>\n      - Auto complete container. Maintains the suggestion box.\n     </p>\n     <p class="ng-scope">\n      <code>\n       mass-autocomplete-item\n      </code>\n      - Attached to an input. Requires ng-model and mass-autocomplete.\n     </p>\n     <h3 class="ng-scope" id="usage">\n      Usage\n     </h3>\n     <div class="row ng-scope">\n      <div class="col-sm-4">\n       <input autocomplete="off" class="form-control ng-isolate-scope ng-pristine ng-valid" mass-autocomplete-item="ac_options" ng-model="dirty.state_simple" placeholder="Select a state" type="text"/>\n      </div>\n      <div class="col-sm-8">\n       <ul class="list-unstyled">\n        <!-- ngRepeat: cb in callbacks track by $index -->\n       </ul>\n      </div>\n     </div>\n     <h4 class="ng-scope">\n      HTML\n     </h4>\n     <pre class="ng-scope"><code class="hljs xml" lang="html"><span class="hljs-tag">&lt;<span class="hljs-title">html</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-title">head</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"//ajax.googleapis.com/ajax/libs/angularjs/1.2.16/angular.js"</span>&gt;</span><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"//ajax.googleapis.com/ajax/libs/angularjs/1.2.16/angular-sanitize.js"</span>&gt;</span><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"massautocomplete.js"</span>&gt;</span><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>\n    <span class="hljs-comment">&lt;!-- Optional --&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-title">link</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"massautocomplete.theme.css"</span> <span class="hljs-attribute">rel</span>=<span class="hljs-value">"stylesheet"</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text/css"</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-title">head</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-title">body</span> <span class="hljs-attribute">ng-app</span>=<span class="hljs-value">app</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">ng-controller</span>=<span class="hljs-value">mainCtrl</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">mass-autocomplete</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">ng-model</span>=<span class="hljs-value">"dirty.value"</span>\n               <span class="hljs-attribute">mass-autocomplete-item</span>=<span class="hljs-value">"autocomplete_options"</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-title">body</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-title">html</span>&gt;</span></code></pre>\n     <h4 class="ng-scope">\n      Javascript\n     </h4>\n     <pre class="ng-scope"><code class="hljs php" lang="js"><span class="hljs-keyword">var</span> app = angular.module(<span class="hljs-string">\'app\'</span>, [<span class="hljs-string">\'ngSanitize\'</span>, <span class="hljs-string">\'MassAutoComplete\'</span>]);\napp.controller(<span class="hljs-string">\'mainCtrl\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(<span class="hljs-variable">$scope</span>, <span class="hljs-variable">$sce</span>, <span class="hljs-variable">$q</span>)</span> </span>{\n  <span class="hljs-variable">$scope</span>.dirty = {};\n\n  <span class="hljs-keyword">var</span> states = [<span class="hljs-string">\'Alabama\'</span>, <span class="hljs-string">\'Alaska\'</span>, <span class="hljs-string">\'California\'</span>, <span class="hljs-comment">/* ... */</span> ];\n\n  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">suggest_state</span><span class="hljs-params">(term)</span> </span>{\n    <span class="hljs-keyword">var</span> q = term.toLowerCase().trim();\n    <span class="hljs-keyword">var</span> results = [];\n\n    <span class="hljs-comment">// Find first 10 states that start with `term`.</span>\n    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; states.length &amp;&amp; results.length &lt; <span class="hljs-number">10</span>; i++) {\n      <span class="hljs-keyword">var</span> state = states[i];\n      <span class="hljs-keyword">if</span> (state.toLowerCase().indexOf(q) === <span class="hljs-number">0</span>)\n        results.push({ label: state, value: state });\n    }\n\n    <span class="hljs-keyword">return</span> results;\n  }\n\n  <span class="hljs-variable">$scope</span>.autocomplete_options = {\n    suggest: suggest_state\n  };\n});</code></pre>\n     <hr class="ng-scope"/>\n     <h3 class="ng-scope" id="motivation">\n      Motivation\n     </h3>\n     <p class="ng-scope">\n      MassAutocomplete was created as part of a new project that required auto\n      completing a lot of input fields.\n     </p>\n     <p class="ng-scope">\n      Most existing auto complete implementations\n      (\n      <a href="http://bower.io/search/?q=auto%20complete%20angular" rel="nofollow">\n       1\n      </a>\n      ,\n      <a href="http://ngmodules.org/tags/autocomplete" rel="nofollow">\n       2\n      </a>\n      ) are\n      wrapping the input field and appending a suggestion box along with several\n      watches. This is fine as long as you want to auto-complete only one or two\n      inputs. But, when there are several dozen inputs, the memory, DOM and watch\n      count will start to bloat and that might impact performance.\n     </p>\n     <h4 class="ng-scope">\n      A different approach\n     </h4>\n     <p class="ng-scope">\n      MassAutocomplete was implemented with a different approach in mind.\n      Instead of attaching the suggestion box to each input field, we use\n      transclusion to maintain only one box for the entire document. This\n      approach guarantees that additional input fields will not require\n      additional DOM or watches for the purpose of the auto complete.\n     </p>\n     <p class="ng-scope">\n      MassAutocomplete does not provide filtering, linking, ranking or sorting.\n      Generating the suggestions is left to the application.\n     </p>\n     <h4 class="ng-scope">\n      Comparing implementations\n     </h4>\n     <p class="ng-scope">\n      We performed a comparison between mass-autocomplete and the popular ui-typehead.\n     </p>\n     <p class="ng-scope">\n      <a href="benchmark.html">\n       <strong>\n        The results are  here.\n       </strong>\n      </a>\n     </p>\n     <hr class="ng-scope"/>\n     <h3 class="ng-scope" id="examples">\n      Examples\n     </h3>\n     <p class="ng-scope">\n      All examples in this section are using just one\n      <code>\n       mass-autocomplete\n      </code>\n      container.\n     </p>\n     <h4 class="ng-scope">\n      Kitchen Sink\n     </h4>\n     <h5 class="ng-scope">\n      Complete example including\n      <strong>\n       highlighting\n      </strong>\n      and\n      <strong>\n       fuzzy matching\n      </strong>\n      .\n      <strong>\n       Searching\n      </strong>\n      and\n      <strong>\n       ranking\n      </strong>\n      using\n      <a href="http://kiro.me/projects/fuse.html" rel="nofollow">\n       Fuse.js\n      </a>\n      .\n     </h5>\n     <p class="ng-scope">\n      Try inserting\n      <i>\n       sauth\n      </i>\n      or\n      <i>\n       rod iland\n      </i>\n      or\n      <i>\n       gorgia\n      </i>\n      .\n     </p>\n     <div class="row ng-scope">\n      <div class="col-sm-4">\n       <input autocomplete="off" class="form-control ng-isolate-scope ng-pristine ng-valid" mass-autocomplete-item="ac_fuse_options" ng-model="dirty.fuse_selection" placeholder="Select State" type="text"/>\n      </div>\n      <div class="col-sm-8">\n       <pre><code class="hljs php" lang="js">\n<span class="hljs-keyword">var</span> fuzzySearch = <span class="hljs-keyword">new</span> Fuse(states, {\n  shouldSort: <span class="hljs-keyword">true</span>,\n  caseSensitive: <span class="hljs-keyword">false</span>,\n  threshold: <span class="hljs-number">0.4</span>,\n});\n\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fuzzy_suggest</span><span class="hljs-params">(term)</span> </span>{\n  <span class="hljs-keyword">if</span> (!term)\n    <span class="hljs-keyword">return</span> [];\n\n  <span class="hljs-keyword">return</span> fuzzySearch\n    .search(term)\n    .slice(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>)\n    .map(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(i)</span> </span>{\n      <span class="hljs-keyword">var</span> val = states[i];\n      <span class="hljs-keyword">return</span> {\n        value: val,\n        label: <span class="hljs-variable">$sce</span>.trustAsHtml(highlight(val, term))\n      };\n    });\n}\n\n<span class="hljs-variable">$scope</span>.ac_fuse_options = {\n  suggest: fuzzy_suggest\n};\n</code></pre>\n      </div>\n     </div>\n     <hr class="ng-scope"/>\n     <h4 class="ng-scope">\n      Highlighting\n     </h4>\n     <div class="row ng-scope">\n      <div class="col-sm-4">\n       <input autocomplete="off" class="form-control ng-isolate-scope ng-pristine ng-valid" mass-autocomplete-item="ac_option_highlight" ng-model="dirty.country_highlight" placeholder="Select a state (2 letters)" type="text"/>\n      </div>\n      <div class="col-sm-8">\n       <pre><code class="hljs php" lang="js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">highlight</span><span class="hljs-params">(str, term)</span> </span>{\n  <span class="hljs-keyword">var</span> highlight_regex = <span class="hljs-keyword">new</span> RegExp(<span class="hljs-string">\'(\'</span> + term + <span class="hljs-string">\')\'</span>, <span class="hljs-string">\'gi\'</span>);\n  <span class="hljs-keyword">return</span> str.replace(highlight_regex,\n    <span class="hljs-string">\'&lt;span class="highlight"&gt;$1&lt;/span&gt;\'</span>);\n};\n\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">suggest_state_with_highlight</span><span class="hljs-params">(term)</span> </span>{\n  <span class="hljs-keyword">if</span> (term.length &lt; <span class="hljs-number">2</span>)\n    <span class="hljs-keyword">return</span>;\n\n  <span class="hljs-keyword">var</span> suggestions = suggest_state(term);\n  suggestions.<span class="hljs-keyword">forEach</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(s)</span> </span>{\n    <span class="hljs-comment">// In real life you should reuse the regexp object.</span>\n    s.label = <span class="hljs-variable">$sce</span>.trustAsHtml(highlight(s.label, term));\n  });\n\n  <span class="hljs-keyword">return</span> suggestions;\n};\n\n<span class="hljs-variable">$scope</span>.ac_option_highlight = {\n  suggest: suggest_state_with_highlight\n};</code></pre>\n      </div>\n     </div>\n     <hr class="ng-scope"/>\n     <h4 class="ng-scope">\n      Delimited\n     </h4>\n     <div class="row ng-scope">\n      <div class="col-sm-4">\n       <input autocomplete="off" class="form-control ng-isolate-scope ng-pristine ng-valid" mass-autocomplete-item="ac_option_delimited" ng-model="dirty.country_delimited" placeholder="Select states (seperated by commas)" type="text"/>\n      </div>\n      <div class="col-sm-8">\n       <pre><code class="hljs php" lang="js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">suggest_state_delimited</span><span class="hljs-params">(term)</span> </span>{\n  <span class="hljs-keyword">var</span> ix = term.lastIndexOf(<span class="hljs-string">\',\'</span>),\n      lhs = term.substring(<span class="hljs-number">0</span>, ix + <span class="hljs-number">1</span>),\n      rhs = term.substring(ix + <span class="hljs-number">1</span>),\n      suggestions = suggest_state(rhs);\n\n  suggestions.<span class="hljs-keyword">forEach</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(s)</span> </span>{\n    s.value = lhs + s.value;\n  });\n\n  <span class="hljs-keyword">return</span> suggestions;\n};\n\n<span class="hljs-variable">$scope</span>.ac_option_delimited = {\n  suggest: suggest_state_delimited\n};</code></pre>\n      </div>\n     </div>\n     <hr class="ng-scope"/>\n     <h4 class="ng-scope">\n      Custom formatting\n     </h4>\n     <div class="row ng-scope">\n      <div class="col-sm-4">\n       <input autocomplete="off" class="form-control ng-isolate-scope ng-pristine ng-valid" mass-autocomplete-item="ac_option_tag" ng-model="dirty.country_tag" placeholder="States as tags" type="text"/>\n      </div>\n      <div class="col-sm-8">\n       <pre><code class="hljs php" lang="js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">suggest_state_as_tag</span><span class="hljs-params">(term)</span> </span>{\n  <span class="hljs-keyword">var</span> suggestions = suggest_state_delimited(term);\n  suggestions.<span class="hljs-keyword">forEach</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(s)</span> </span>{\n    s.label = <span class="hljs-variable">$sce</span>.trustAsHtml(\n      <span class="hljs-string">\'&lt;span class="badge"&gt;\'</span> + s.label + <span class="hljs-string">\'&lt;/span&gt;\'</span>\n    );\n  });\n  <span class="hljs-keyword">return</span> suggestions;\n};\n\n<span class="hljs-variable">$scope</span>.ac_option_tag = {\n  suggest: suggest_state_as_tag\n};</code></pre>\n      </div>\n     </div>\n     <hr class="ng-scope"/>\n     <h4 class="ng-scope">\n      Using the selected object\n     </h4>\n     <div class="row ng-scope">\n      <div class="col-sm-4">\n       <input autocomplete="off" class="form-control ng-isolate-scope ng-pristine ng-valid" mass-autocomplete-item="ac_option_tag_select" ng-model="dirty.selected_tag" placeholder="Select State" type="text"/>\n       <br/>\n       <!-- ngIf: tags.length === 0 -->\n       <span class="text-muted ng-scope" ng-if="tags.length === 0">\n        No tags selected.\n        <br/>\n        <br/>\n        Select a tag from the auto complete menu using the keyboard or mouse.\n       </span>\n       <!-- end ngIf: tags.length === 0 -->\n       <ul class="list-unstyled">\n        <!-- ngRepeat: tag in tags track by $index -->\n       </ul>\n      </div>\n      <div class="col-sm-8">\n       <pre><code class="hljs php" lang="js"><span class="hljs-variable">$scope</span>.tags = [];\n\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add_tag</span><span class="hljs-params">(selected)</span> </span>{\n  <span class="hljs-variable">$scope</span>.tags.push(selected.value);\n  <span class="hljs-comment">// Clear model</span>\n  <span class="hljs-variable">$scope</span>.dirty.selected_tag = undefined;\n};\n\n<span class="hljs-variable">$scope</span>.ac_option_tag_select = {\n  suggest: suggest_state_as_tag,\n  on_select: add_tag\n};</code></pre>\n      </div>\n     </div>\n     <hr class="ng-scope"/>\n     <h4 class="ng-scope">\n      Remote source\n     </h4>\n     <div class="row ng-scope">\n      <div class="col-sm-4">\n       <input autocomplete="off" class="form-control ng-isolate-scope ng-pristine ng-valid" mass-autocomplete-item="ac_option_remote" ng-model="dirty.remote_selection" placeholder="Select State" type="text"/>\n      </div>\n      <div class="col-sm-8">\n       <pre><code class="hljs php" lang="js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">suggest_state_remote</span><span class="hljs-params">(term)</span> </span>{\n  <span class="hljs-keyword">var</span> deferred = <span class="hljs-variable">$q</span>.defer();\n  <span class="hljs-comment">// Fake remote source using timeout</span>\n  <span class="hljs-variable">$timeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n    deferred.resolve(suggest_state(term));\n  }, <span class="hljs-number">500</span>);\n  <span class="hljs-keyword">return</span> deferred.promise;\n}\n\n<span class="hljs-variable">$scope</span>.ac_option_remote = {\n  suggest: suggest_state_remote,\n  on_error: console.log\n};</code></pre>\n      </div>\n     </div>\n     <hr class="ng-scope"/>\n     <h4 class="ng-scope">\n      Passing objects\n     </h4>\n     <div class="row ng-scope">\n      <div class="col-sm-4">\n       <input autocomplete="off" class="form-control ng-isolate-scope ng-pristine ng-valid" mass-autocomplete-item="ac_options_users" ng-model="dirty.continent" placeholder="Name or Mail" type="text"/>\n       <h5>\n        Selected Object\n       </h5>\n       <pre class="ng-binding">\n          </pre>\n      </div>\n      <div class="col-sm-8">\n       <pre><code class="hljs php" lang="js"><span class="hljs-keyword">var</span> users = [\n  {name: <span class="hljs-string">\'Haki\'</span>, joined: <span class="hljs-string">\'2 month ago\'</span>, email: <span class="hljs-string">\'Haki@email.com\'</span>},\n  {name: <span class="hljs-string">\'Ran\'</span>, joined: <span class="hljs-string">\'2 days ago\'</span>, email: <span class="hljs-string">\'Ran123@ac.org\'</span>},\n  {name: <span class="hljs-string">\'John\'</span>, joined: <span class="hljs-string">\'a week ago\'</span>, email: <span class="hljs-string">\'JJ@gmail.com\'</span>},\n  {name: <span class="hljs-string">\'Mary\'</span>, joined: <span class="hljs-string">\'Yesterday\'</span>, email: <span class="hljs-string">\'Mary@yahoo.com\'</span>},\n  {name: <span class="hljs-string">\'Charlie\'</span>, joined: <span class="hljs-string">\'Just now\'</span>, email: <span class="hljs-string">\'Charlie@msn.com\'</span>},\n  {name: <span class="hljs-string">\'Rebecca\'</span>, joined: <span class="hljs-string">\'Yesterday\'</span>, email: <span class="hljs-string">\'Becky@mail.com\'</span>},\n  {name: <span class="hljs-string">\'James\'</span>, joined: <span class="hljs-string">\'3 month ago\'</span>, email: <span class="hljs-string">\'James@inbox.com\'</span>}\n];\n\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">suggest_users</span><span class="hljs-params">(term)</span> </span>{\n   <span class="hljs-keyword">var</span> q = term.toLowerCase().trim(),\n       results = [];\n\n   <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; users.length; i++) {\n     <span class="hljs-keyword">var</span> user = users[i];\n     <span class="hljs-keyword">if</span> (user.name.toLowerCase().indexOf(q) !== -<span class="hljs-number">1</span> ||\n         user.email.toLowerCase().indexOf(q) !== -<span class="hljs-number">1</span>)\n       results.push({\n         value: user.name,\n         <span class="hljs-comment">// Pass the object as well. Can be any property name.</span>\n         obj: user,\n         label: <span class="hljs-variable">$sce</span>.trustAsHtml(\n           <span class="hljs-string">\'&lt;div class="row"&gt;\'</span> +\n           <span class="hljs-string">\' &lt;div class="col-xs-5"&gt;\'</span> +\n           <span class="hljs-string">\'  &lt;i class="fa fa-user"&gt;&lt;/i&gt;\'</span> +\n           <span class="hljs-string">\'  &lt;strong&gt;\'</span> + highlight(user.name,term) + <span class="hljs-string">\'&lt;/strong&gt;\'</span>+\n           <span class="hljs-string">\' &lt;/div&gt;\'</span> +\n           <span class="hljs-string">\' &lt;div class="col-xs-7 text-right text-muted"&gt;\'</span> +\n           <span class="hljs-string">\'  &lt;small&gt;\'</span> + highlight(user.email,term) + <span class="hljs-string">\'&lt;/small&gt;\'</span> +\n           <span class="hljs-string">\' &lt;/div&gt;\'</span> +\n           <span class="hljs-string">\' &lt;div class="col-xs-12"&gt;\'</span> +\n           <span class="hljs-string">\'  &lt;span class="text-muted"&gt;Joined&lt;/span&gt;\'</span> +\n              user.joined +\n           <span class="hljs-string">\' &lt;/div&gt;\'</span> +\n           <span class="hljs-string">\'&lt;/div&gt;\'</span>\n         )\n       });\n   }\n   <span class="hljs-keyword">return</span> results;\n};\n\n<span class="hljs-variable">$scope</span>.ac_options_users = {\n  suggest: suggest_users,\n  on_select: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(selected)</span> </span>{\n    <span class="hljs-variable">$scope</span>.selected_user = selected.obj;\n  }\n};</code></pre>\n      </div>\n     </div>\n     <hr class="ng-scope"/>\n     <h4 class="ng-scope">\n      Reusing options\n     </h4>\n     <div class="row ng-scope">\n      <div class="col-sm-4">\n       <input class="form-control ng-pristine ng-valid ng-valid-number" ng-model="n" placeholder="How many inputs?" type="number"/>\n       <div class="text-muted">\n        <br/>\n        Enter states:\n       </div>\n       <!-- ngRepeat: i in n_array(n) track by $index -->\n       <div class="ng-scope" ng-repeat="i in n_array(n) track by $index">\n        <input autocomplete="off" class="form-control input-sm ng-isolate-scope ng-pristine ng-valid" mass-autocomplete-item="ac_option_highlight" ng-model="dirty.country[$index]" placeholder="Select State" type="text"/>\n        <br/>\n       </div>\n       <!-- end ngRepeat: i in n_array(n) track by $index -->\n      </div>\n      <div class="col-sm-8">\n       <pre><code class="hljs bash" lang="html">&lt;div ng-repeat=<span class="hljs-string">"i in n_array(n) track by <span class="hljs-variable">$index</span>"</span>/&gt;\n  &lt;input <span class="hljs-built_in">type</span>=<span class="hljs-string">"text"</span>\n         placeholder=<span class="hljs-string">"Select State"</span>\n         ng-model=<span class="hljs-string">"dirty.state[<span class="hljs-variable">$index</span>]"</span>\n         calc-autocomplete-item=<span class="hljs-string">"ac_option_highlight"</span>&gt;\n&lt;/div&gt;</code></pre>\n      </div>\n     </div>\n     <h3 class="ng-scope" id="options">\n      Options\n     </h3>\n     <table class="table table-bordered ng-scope">\n      <tbody>\n       <tr>\n        <th class="text-center" colspan="2">\n         mass-autocomplete=options\n        </th>\n       </tr>\n       <tr>\n        <th>\n         debounce_position(150)\n        </th>\n        <td>\n         Debounce in ms for repositioning suggestion box on window resize.\n        </td>\n       </tr>\n       <tr>\n        <th>\n         debounce_attach(300)\n        </th>\n        <td>\n         Debounce in ms for attaching input after focus.\n         <br/>\n         Prevents unnecessary positioning when quickly jumping between inputs\n          using\n         <kbd>\n          tab\n         </kbd>\n         .\n        </td>\n       </tr>\n       <tr>\n        <th>\n         debounce_suggest(200)\n        </th>\n        <td>\n         Debounce in ms for calling suggest.\n         <br/>\n         Useful for remote sources and to suspend suggestions while user is typing.\n        </td>\n       </tr>\n       <tr>\n        <th>\n         debounce_blur(150)\n        </th>\n        <td>\n         Debounce in ms for detach on blur.\n         <br/>\n         Determines the amount of time in milliseconds before losing focus\n          as a result of selecting from the menu until detach is invoked.\n        </td>\n       </tr>\n       <tr>\n       </tr>\n       <tr>\n        <th class="text-center" colspan="2">\n         mass-autocomplete-item=options_name\n        </th>\n       </tr>\n       <tr>\n        <th>\n         suggest(term)\n        </th>\n        <td>\n         <p>\n          Receive a string and return an array of suggestions.\n         </p>\n         <p>\n          Each suggestion must contain\n         </p>\n         <ul class="list-unstyled">\n          <li>\n           <code>\n            value\n           </code>\n           - Text to display in the textbox.\n          </li>\n          <li>\n           <code>\n            label\n           </code>\n           - String or trusted HTML to display in the suggestion box.\n          </li>\n         </ul>\n         <p>\n         </p>\n         <p>\n          The label is bound using\n          <code>\n           ng-bind-html\n          </code>\n          -\n            to bind raw html use\n          <code>\n           $sce.trustAsHtml()\n          </code>\n          .\n         </p>\n         <p>\n          The return value is an array of objects or a promise that resolves\n            to an array of objects.\n         </p>\n         <p>\n          The object is passed to the\n          <code>\n           on_select\n          </code>\n          callback so\n            additional properties can be used.\n         </p>\n        </td>\n       </tr>\n       <tr>\n        <th>\n         on_attach()\n        </th>\n        <td>\n         Callback fired when the user focus a field.\n        </td>\n       </tr>\n       <tr>\n        <th>\n         on_select(selected_item)\n        </th>\n        <td>\n         Callback fired when the user select an item from the suggestion box.\n        </td>\n       </tr>\n       <tr>\n        <th>\n         on_detach(current_value)\n        </th>\n        <td>\n         Callback fired when the input field is blurred. Useful for purging caches.\n        </td>\n       </tr>\n       <tr>\n        <th>\n         on_error()\n        </th>\n        <td>\n         Callback fired in case\n         <code>\n          suggest()\n         </code>\n         fails.\n        </td>\n       </tr>\n       <tr>\n        <th>\n         auto_select_first (false)\n        </th>\n        <td>\n         Auto select the first option in the suggestion box.\n        </td>\n       </tr>\n       <tr>\n        <th class="text-center" colspan="2">\n         massAutoCompleteConfigProvider\n        </th>\n       </tr>\n       <tr>\n        <th>\n         position_autocomplete(container, target)\n        </th>\n        <td>\n         Called on attach to position the ac container relative to the target input. Some use common use cases when a custom positioning function might be desired:\n         <ol>\n          <li>\n           The AC container should be fixed positioned.\n          </li>\n          <li>\n           You wish to use external libraries to position the element (such as jquery).\n          </li>\n          <li>\n           The default positioning function is not sufficient and adjustments cannot be made using only css.\n          </li>\n         </ol>\n        </td>\n       </tr>\n       <tr>\n        <th>\n         generate_random_id(prefix)\n        </th>\n        <td>\n         Used to generate random Id\'s starting at `prefix`. Id\'s are generated mostly for accessibility needs.\n         <br/>\n         It\'s very unlikely you will need to change this function.\n        </td>\n       </tr>\n       <tr>\n        <th>\n         DEBOUNCE\n        </th>\n        <td>\n         Set default debounce globally.\n         <br/>\n         Default values are:\n         <ul>\n          <li>\n           <code>\n            position\n           </code>\n           = 150\n          </li>\n          <li>\n           <code>\n            attach\n           </code>\n           = 300\n          </li>\n          <li>\n           <code>\n            suggest\n           </code>\n           = 200\n          </li>\n          <li>\n           <code>\n            blur\n           </code>\n           = 150\n          </li>\n         </ul>\n        </td>\n       </tr>\n      </tbody>\n     </table>\n     <h4 class="ng-scope">\n      CSS\n     </h4>\n     <p class="ng-scope">\n      The suggestion box template\n     </p>\n     <pre class="ng-scope"><code class="hljs cs" lang="html">&lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">"ac-container"</span> ng-show=<span class="hljs-string">"show_autocomplete &amp;&amp; results.length"</span> style=<span class="hljs-string">"position:absolute;"</span>&gt;\n  &lt;ul <span class="hljs-keyword">class</span>=<span class="hljs-string">"ac-menu"</span>&gt;\n    &lt;li ng-repeat=<span class="hljs-string">"result in results"</span>\n      ng-<span class="hljs-keyword">if</span>=<span class="hljs-string">"$index &gt; 0"</span>\n      <span class="hljs-keyword">class</span>=<span class="hljs-string">"ac-menu-item"</span>\n      ng-<span class="hljs-keyword">class</span>=<span class="hljs-string">"$index == selected_index ? \'ac-state-focus\' : \'\'"</span>&gt;\n      &lt;a href ng-click=<span class="hljs-string">"apply_selection($index, $event)"</span> ng-bind-html=result.label&gt; &lt;/a&gt;\n    &lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/div&gt;</code></pre>\n     <p class="ng-scope">\n      We recommend adding\n      <code>\n       backface-visibility: hidden;\n      </code>\n      and\n      <code>\n       transform: translate3d(0, 0, 0);\n      </code>\n      to\n      <code>\n       .ac-container\n      </code>\n      to limit the paint\n       area to that of the suggestion box. See\n      <code>\n       massautocomplete.theme.css\n      </code>\n      for the complete CSS.\n     </p>\n     <h3 class="ng-scope" id="Accessibility">\n      Accessibility\n     </h3>\n     <p class="ng-scope">\n      The implementation was inspired by the\n      <a href="http://archive.dojotoolkit.org/nightly/dojotoolkit/dijit/tests/form/_autoComplete.html">\n       dojo project implementation of autocomplete\n      </a>\n      . It is also recommended to include\n      <a href="https://docs.angularjs.org/api/ngAria">\n       ngAria\n      </a>\n      for the built-in aria support (mainly for ng-show/ng-hide).\n     </p>\n     <p class="ng-scope">\n      The following markup is used to accompany assisting technology:\n     </p>\n     <pre class="ng-scope"><code class="hljs http" lang="html">\n\n<span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-title">input</span>\n          </span></span><mark><span class="xml"><span class="hljs-tag"><span class="hljs-attribute">id</span>=<span class="hljs-value">"ac_element_XXXXXX"</span></span></span></mark><span class="xml"><span class="hljs-tag">\n          <span class="hljs-attribute">ng-model</span>=<span class="hljs-value">"dirty.value"</span>\n          <span class="hljs-attribute">mass-autocomplete-item</span> /&gt;</span>\n\n      ....\n\n      <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"ac-container"</span>\n           </span></span><mark><span class="xml"><span class="hljs-tag"><span class="hljs-attribute">aria-autocomplete</span>=<span class="hljs-value">"list"</span></span></span></mark><span class="xml"><span class="hljs-tag">\n           </span></span><mark><span class="xml"><span class="hljs-tag"><span class="hljs-attribute">role</span>=<span class="hljs-value">"listbox"</span></span></span></mark><span class="xml"><span class="hljs-tag">\n           </span></span><mark><span class="xml"><span class="hljs-tag"><span class="hljs-attribute">aria-labelledby</span>=<span class="hljs-value">"ac_element_XXXXXX"</span></span></span></mark><span class="xml"><span class="hljs-tag">\n           </span></span><mark><span class="xml"><span class="hljs-tag"><span class="hljs-attribute">aria-activedescendant</span>=<span class="hljs-value">"ac_item_XXXXX"</span></span></span></mark><span class="xml"><span class="hljs-tag">\n           <span class="hljs-attribute">ng-show</span>=<span class="hljs-value">"show_autocomplete"</span>&gt;</span>\n\n        <span class="hljs-tag">&lt;<span class="hljs-title">ul</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"ac-menu"</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-title">li</span> <span class="hljs-attribute">ng-repeat</span>=<span class="hljs-value">"result in results"</span>\n              <span class="hljs-attribute">class</span>=<span class="hljs-value">"ac-menu-item"</span>\n              </span></span><mark><span class="xml"><span class="hljs-tag"><span class="hljs-attribute">role</span>=<span class="hljs-value">"option"</span></span></span></mark><span class="xml"><span class="hljs-tag">\n              </span></span><mark><span class="xml"><span class="hljs-tag"><span class="hljs-attribute">id</span>=<span class="hljs-value">"ac_item_XXXXX"</span></span></span></mark><span class="xml"><span class="hljs-tag">\n              <span class="hljs-attribute">ng-class</span>=<span class="hljs-value">"..."</span>&gt;</span>\n              <span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">href</span> <span class="hljs-attribute">ng-click</span>=<span class="hljs-value">"..."</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-title">ul</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\n\n    </span></code></pre>\n     <h4 class="ng-scope">\n      Keyboard\n     </h4>\n     <table class="table table-bordered table-condensed ng-scope">\n      <tbody>\n       <tr>\n        <th>\n         <kbd>\n          up\n         </kbd>\n         <kbd>\n          down\n         </kbd>\n        </th>\n        <td>\n         Previous/Next suggestion\n        </td>\n       </tr>\n       <tr>\n        <th>\n         <kbd>\n          tab\n         </kbd>\n        </th>\n        <td>\n         When suggestion box is open - next suggestion\n        </td>\n       </tr>\n       <tr>\n        <th>\n         <kbd>\n          esc\n         </kbd>\n        </th>\n        <td>\n         When suggestion box is open - close\n         <br/>\n         When suggestion box is closed - revert to initial value.\n        </td>\n       </tr>\n      </tbody>\n     </table>\n    </span>\n    <div aria-autocomplete="list" class="ac-container ng-hide" ng-show="show_autocomplete" role="listbox" style="position: absolute;">\n     <ul class="ac-menu">\n      <!-- ngRepeat: result in results -->\n     </ul>\n    </div>\n   </div>\n  </div>\n  <a href="https://github.com/hakib/MassAutocomplete">\n   <img alt="Fork me on GitHub" data-canonical-src="https://s3.amazonaws.com/github/ribbons/forkme_right_red_aa0000.png" src="https://camo.githubusercontent.com/365986a132ccd6a44c23a9169022c0b5c890c387/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f7265645f6161303030302e706e67" style="position: absolute; top: 0; right: 0; border: 0; width: 120px;"/>\n  </a>\n  <script async="" src="//www.google-analytics.com/analytics.js">\n  </script>\n  <script id="twitter-wjs" src="http://platform.twitter.com/widgets.js">\n  </script>\n  <script src="https://code.jquery.com/jquery.min.js">\n  </script>\n  <script src="https://rawgithub.com/krisk/Fuse/master/src/fuse.js">\n  </script>\n  <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.2.16/angular.js">\n  </script>\n  <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.2.16/angular-sanitize.js">\n  </script>\n  <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.3/highlight.min.js">\n  </script>\n  <!-- APP -->\n  <script src="massautocomplete.js">\n  </script>\n  <script src="index.js">\n  </script>\n  <script>\n   !function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?\'http\':\'https\';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+\'://platform.twitter.com/widgets.js\';fjs.parentNode.insertBefore(js,fjs);}}(document, \'script\', \'twitter-wjs\');\n  </script>\n  <script>\n   $(function () {\n      hljs.initHighlightingOnLoad();\n      $(\'[mass-autocomplete-item]\').each(function (i, elm) {\n        $(elm).one(\'focus\', function (e) {\n          ga(\'send\', \'event\', \'autocomplete-item\', \'focus\', $(e.target).attr(\'mass-autocomplete-item\'), 1);\n        });\n      });\n      $(window).scroll(function () {\n        if($(window).scrollTop() + $(window).height() == $(document).height()) {\n          ga(\'send\', \'event\', \'window\', \'scroll\', \'bottom\', 1);\n          $(window).unbind(\'scroll\');\n        }\n      });\n    });\n  </script>\n  <script>\n   (function(i,s,o,g,r,a,m){i[\'GoogleAnalyticsObject\']=r;i[r]=i[r]||function(){\n    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n    })(window,document,\'script\',\'//www.google-analytics.com/analytics.js\',\'ga\');\n    ga(\'create\', \'UA-55665057-1\', \'auto\');\n    ga(\'send\', \'pageview\');\n  </script>\n </body>\n</html>'