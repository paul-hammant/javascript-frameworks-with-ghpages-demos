b'<!DOCTYPE html>\n<html lang="en" xmlns="http://www.w3.org/1999/xhtml">\n <head>\n  <meta charset="utf-8"/>\n  <meta content="ie=edge, chrome=1" http-equiv="x-ua-compatible"/>\n  <meta content="width=device-width, initial-scale=1" name="viewport"/>\n  <link href="http://fonts.googleapis.com/css?family=PT+Sans:400,700" rel="stylesheet" type="text/css"/>\n  <link href="stylesheets/backbone.modal.css" rel="stylesheet"/>\n  <link href="stylesheets/backbone.modal.theme.css" rel="stylesheet"/>\n  <link href="stylesheets/s.css?1377531995" rel="stylesheet"/>\n  <script async="" src="http://www.google-analytics.com/analytics.js" type="text/javascript">\n  </script>\n  <script id="twitter-wjs" src="https://platform.twitter.com/widgets.js">\n  </script>\n  <script async="" src="http://d2dq2ahtl5zl1z.cloudfront.net/analytics.js/v1/4of96dwo0g/analytics.min.js" type="text/javascript">\n  </script>\n  <script src="//cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.min.js">\n  </script>\n  <script src="//cdnjs.cloudflare.com/ajax/libs/underscore.js/1.5.1/underscore-min.js">\n  </script>\n  <script src="//cdnjs.cloudflare.com/ajax/libs/backbone.js/1.0.0/backbone-min.js">\n  </script>\n  <script src="//cdnjs.cloudflare.com/ajax/libs/backbone.marionette/1.0.4-bundled/backbone.marionette.js">\n  </script>\n  <script src="scripts/gists.js">\n  </script>\n  <script src="scripts/backbone.modal-bundled-min.js">\n  </script>\n  <script src="scripts/main.js">\n  </script>\n  <script type="text/javascript">\n   var analytics=analytics||[];(function(){var e=["identify","track","trackLink","trackForm","trackClick","trackSubmit","page","pageview","ab","alias","ready","group"],t=function(e){return function(){analytics.push([e].concat(Array.prototype.slice.call(arguments,0)))}};for(var n=0;n&lt;e.length;n++)analytics[e[n]]=t(e[n])})(),analytics.load=function(e){var t=document.createElement("script");t.type="text/javascript",t.async=!0,t.src=("https:"===document.location.protocol?"https://":"http://")+"d2dq2ahtl5zl1z.cloudfront.net/analytics.js/v1/"+e+"/analytics.min.js";var n=document.getElementsByTagName("script")[0];n.parentNode.insertBefore(t,n)};\n    analytics.load("4of96dwo0g");\n  </script>\n  <title>\n   Backbone.Modal\n  </title>\n  <script async="" charset="utf-8" src="https://platform.twitter.com/js/button.80ba267f37d7093ec36703643939b173.js" type="text/javascript">\n  </script>\n </head>\n <body>\n  <div class="app">\n   <div>\n    <div class="modals-container">\n     <div class="bbm-wrapper" style="display: block;">\n      <div class="bbm-modal bbm-modal--open" style="opacity: 1;">\n       <div class="bbm-modal__topbar">\n        <h3 class="bbm-modal__title">\n         Backbone.Modal\n        </h3>\n       </div>\n       <div class="bbm-modal__section">\n        <p>\n         Backbone.Modal can help you to quickly build modals like this. With minimal effort you can create all kinds of modals. For example:\n        </p>\n        <ul>\n         <li>\n          You can\n          <strong>\n           stack\n          </strong>\n          modals and use multiple views:\n          <a class="open-tab" href="#">\n           show example\n          </a>\n         </li>\n         <li>\n          Amazingly\n          <strong>\n           flexible\n          </strong>\n          , you can create anything, for example this wizard:\n          <a class="open-wizard" href="#">\n           show example\n          </a>\n         </li>\n         <li>\n          Nice animations, default behavior and interactions\n         </li>\n        </ul>\n       </div>\n       <div class="bbm-modal__bottombar">\n        <a class="bbm-button" href="#">\n         Close\n        </a>\n       </div>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n  <div class="container">\n   <section class="intro">\n    <div class="introduction">\n     <h1>\n      backbone.modal.js\n     </h1>\n     <a class="awkward" href="http://www.madeawkward.com">\n      Awkward\n     </a>\n     <h2>\n      A plugin for Backbone.js that simplifies creating modals for your application.\n     </h2>\n     <p class="intro">\n      Backbone.Modal.js removes boilerplate code and adds default behaviors and interactions. You can create a simple dialog modal or complex wizards with stacked modals on top of each other in a few lines of code.\n     </p>\n    </div>\n    <div class="source">\n     <a class="download" href="https://github.com/awkward/backbone.modal/archive/1.1.5.zip">\n      Download\n      <b>\n       v1.1.5\n      </b>\n     </a>\n     <a class="github" href="https://github.com/awkward/backbone.modal">\n      <b>\n       Source on\n      </b>\n      Github\n     </a>\n    </div>\n   </section>\n   <section class="getting-started">\n    <h3>\n     Getting Started\n    </h3>\n    <p>\n     Backbone.modal.js is built on top of\n     <a href="http://backbonejs.org/">\n      Backbone.js\n     </a>\n     . Make sure you include everything that\'s needed for Backbone and add Backbone.Modal.js and the CSS files to start playing with it. You can also start out with the\n     <a href="#examples">\n      examples\n     </a>\n     .\n    </p>\n    <p>\n     If you\'d like to create a stacked modal (multiple modals on top of each other), you\'ll need to use Backbone.Marionette.js and\n     <a href="#marionette">\n      Backbone.Marionette.Modals.js\n     </a>\n     .\n    </p>\n    <h3>\n     Backbone.Modal\n    </h3>\n    <p>\n     Options can be added when extending from Backbone.Modal like:\n     <code>\n      prefix\n     </code>\n     (for classnames),\n     <code>\n      animate\n     </code>\n     and\n     <code>\n      keyControl\n     </code>\n     (disable enter/esc events).\n    </p>\n    <h4>\n     views\n     <code>\n      modal.views\n     </code>\n    </h4>\n    <code data-gist="https://gist.github.com/6219705.json">\n     <div class="gist" id="gist6219705">\n      <div class="gist-file">\n       <div class="gist-data">\n        <div class="js-gist-file-update-container js-task-list-container file-box">\n         <div class="file" id="file-gistfile1-js">\n          <div class="blob-wrapper data type-javascript" itemprop="text">\n           <table class="highlight tab-size js-file-line-container" data-tab-size="8">\n            <tbody>\n             <tr>\n              <td class="blob-num js-line-number" data-line-number="1" id="file-gistfile1-js-L1">\n              </td>\n              <td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-js-LC1">\n               views\n               <span class="pl-k">\n                :\n               </span>\n               {\n              </td>\n             </tr>\n             <tr>\n              <td class="blob-num js-line-number" data-line-number="2" id="file-gistfile1-js-L2">\n              </td>\n              <td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-js-LC2">\n               <span class="pl-s">\n                <span class="pl-pds">\n                 \'\n                </span>\n                click #tab\n                <span class="pl-pds">\n                 \'\n                </span>\n               </span>\n               <span class="pl-k">\n                :\n               </span>\n               {\n              </td>\n             </tr>\n             <tr>\n              <td class="blob-num js-line-number" data-line-number="3" id="file-gistfile1-js-L3">\n              </td>\n              <td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-js-LC3">\n               myActiveTabClass\n               <span class="pl-k">\n                :\n               </span>\n               <span class="pl-s">\n                <span class="pl-pds">\n                 \'\n                </span>\n                .my-tab\n                <span class="pl-pds">\n                 \'\n                </span>\n               </span>\n              </td>\n             </tr>\n             <tr>\n              <td class="blob-num js-line-number" data-line-number="4" id="file-gistfile1-js-L4">\n              </td>\n              <td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-js-LC4">\n               view\n               <span class="pl-k">\n                :\n               </span>\n               <span class="pl-smi">\n                _\n               </span>\n               .\n               <span class="pl-en">\n                template\n               </span>\n               (\n               <span class="pl-en">\n                $\n               </span>\n               (\n               <span class="pl-s">\n                <span class="pl-pds">\n                 \'\n                </span>\n                #tab-view\n                <span class="pl-pds">\n                 \'\n                </span>\n               </span>\n               ).\n               <span class="pl-en">\n                html\n               </span>\n               ()),\n              </td>\n             </tr>\n             <tr>\n              <td class="blob-num js-line-number" data-line-number="5" id="file-gistfile1-js-L5">\n              </td>\n              <td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-js-LC5">\n               onActive\n               <span class="pl-k">\n                :\n               </span>\n               <span class="pl-s">\n                <span class="pl-pds">\n                 \'\n                </span>\n                setActive\n                <span class="pl-pds">\n                 \'\n                </span>\n               </span>\n              </td>\n             </tr>\n             <tr>\n              <td class="blob-num js-line-number" data-line-number="6" id="file-gistfile1-js-L6">\n              </td>\n              <td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-js-LC6">\n               }\n              </td>\n             </tr>\n             <tr>\n              <td class="blob-num js-line-number" data-line-number="7" id="file-gistfile1-js-L7">\n              </td>\n              <td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-js-LC7">\n               },\n              </td>\n             </tr>\n             <tr>\n              <td class="blob-num js-line-number" data-line-number="8" id="file-gistfile1-js-L8">\n              </td>\n              <td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-js-LC8">\n               <span class="pl-en">\n                setActive\n               </span>\n               <span class="pl-k">\n                :\n               </span>\n               <span class="pl-k">\n                function\n               </span>\n               (\n               <span class="pl-smi">\n                options\n               </span>\n               ) {\n              </td>\n             </tr>\n             <tr>\n              <td class="blob-num js-line-number" data-line-number="9" id="file-gistfile1-js-L9">\n              </td>\n              <td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-js-LC9">\n               <span class="pl-c1">\n                this\n               </span>\n               .\n               <span class="pl-en">\n                $\n               </span>\n               (\n               <span class="pl-smi">\n                options\n               </span>\n               .\n               <span class="pl-smi">\n                myActiveTabClass\n               </span>\n               ).\n               <span class="pl-en">\n                addClass\n               </span>\n               (\n               <span class="pl-s">\n                <span class="pl-pds">\n                 \'\n                </span>\n                active\n                <span class="pl-pds">\n                 \'\n                </span>\n               </span>\n               )\n              </td>\n             </tr>\n             <tr>\n              <td class="blob-num js-line-number" data-line-number="10" id="file-gistfile1-js-L10">\n              </td>\n              <td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-js-LC10">\n               }\n              </td>\n             </tr>\n            </tbody>\n           </table>\n          </div>\n         </div>\n        </div>\n       </div>\n       <div class="gist-meta">\n        <a href="https://gist.github.com/davidvanleeuwen/6219705/raw/09a05c2fdc3c302ca41d72c6045197af653eda28/gistfile1.js" style="float:right">\n         view raw\n        </a>\n        <a href="https://gist.github.com/davidvanleeuwen/6219705#file-gistfile1-js">\n         gistfile1.js\n        </a>\n        hosted with \xe2\x9d\xa4 by\n        <a href="https://github.com">\n         GitHub\n        </a>\n       </div>\n      </div>\n     </div>\n    </code>\n    <p>\n     You can bind your views by adding an event handler, just like you would define events in a Backbone.View. You can add additional options to pass along:\n     <code>\n      view\n     </code>\n     (as Backbone.View, function or template which is required),\n     <code>\n      viewOptions\n     </code>\n     (for specific options for that view). By using the\n     <code>\n      onActive\n     </code>\n     callback, you can see whenever a view is active.\n    </p>\n    <h4>\n     views.length\n     <code>\n      modal.views.length\n     </code>\n    </h4>\n    <p>\n     Get the amount of views in a modal.\n    </p>\n    <h4>\n     template\n     <code>\n      modal.template\n     </code>\n    </h4>\n    <p>\n     You don\'t need the\n     <code>\n      views\n     </code>\n     to create a modal, you can simply use a template if you just want to show one view. But if you want to create a complex modal, you can combine the\n     <code>\n      template\n     </code>\n     and\n     <code>\n      views\n     </code>\n     , but you\'ll have to define a\n     <code>\n      viewContainer\n     </code>\n     .\n    </p>\n    <h4>\n     viewContainer\n     <code>\n      modal.viewContainer\n     </code>\n    </h4>\n    <p>\n     All views will be rendered within the viewContainer. Select a container from your template by doing:\n     <code>\n      viewContainer: \'.container\'\n     </code>\n    </p>\n    <h4>\n     submitEl\n     <code>\n      modal.submitEl\n     </code>\n    </h4>\n    <p>\n     You can define an element that will trigger all submit events. This will result in calling\n     <code>\n      beforeSubmit\n     </code>\n     ,\n     <code>\n      submit\n     </code>\n     and closing the modal.\n    </p>\n    <h4>\n     cancelEl\n     <code>\n      modal.cancelEl\n     </code>\n    </h4>\n    <p>\n     Similar to\n     <code>\n      submitEl\n     </code>\n     you can define an element that will cancel the modal. This will result in calling\n     <code>\n      beforeCancel\n     </code>\n     ,\n     <code>\n      cancel\n     </code>\n     and closing the modal.\n    </p>\n    <h4>\n     openAt\n     <code>\n      modal.openAt([index])\n     </code>\n    </h4>\n    <p>\n     Open the modal at a specific index from\n     <code>\n      views\n     </code>\n     .\n    </p>\n    <h4>\n     next\n     <code>\n      modal.next()\n     </code>\n    </h4>\n    <p>\n     Open the next view from\n     <code>\n      views\n     </code>\n     . Useful when creating a wizard like modal.\n    </p>\n    <h4>\n     previous\n     <code>\n      modal.previous()\n     </code>\n    </h4>\n    <p>\n     Similar to\n     <code>\n      next()\n     </code>\n     , but will open the previous view from\n     <code>\n      views\n     </code>\n     .\n    </p>\n    <h4>\n     onRender\n     <code>\n      modal.onRender()\n     </code>\n     (callback)\n    </h4>\n    <p>\n     Useful when you want to do some custom work while it\'s rendering the modal.\n    </p>\n    <h4>\n     onShow\n     <code>\n      modal.onShow()\n     </code>\n    </h4>\n    <p>\n     Triggered whenever the animation has ended and the modal is displayed.\n    </p>\n    <h4>\n     beforeCancel\n     <code>\n      modal.beforeCancel()\n     </code>\n     (callback)\n    </h4>\n    <p>\n     This will be called when the user hits ESC, clicking on the\n     <code>\n      cancelEl\n     </code>\n     or clicking outside the modal and before\n     <code>\n      cancel\n     </code>\n     is called. It expects\n     <code>\n      true\n     </code>\n     or\n     <code>\n      false\n     </code>\n     .\n    </p>\n    <h4>\n     cancel\n     <code>\n      modal.cancel()\n     </code>\n    </h4>\n    <p>\n     This method is called when the user canceled the modal.\n    </p>\n    <h4>\n     beforeSubmit\n     <code>\n      modal.beforeSubmit()\n     </code>\n     (callback)\n    </h4>\n    <p>\n     This will be called when the user hits ENTER or clicking on the\n     <code>\n      submitEl\n     </code>\n     . It expects\n     <code>\n      true\n     </code>\n     or\n     <code>\n      false\n     </code>\n     , so you can do any validation for example.\n    </p>\n    <h4>\n     submit\n     <code>\n      modal.submit()\n     </code>\n     (callback)\n    </h4>\n    <p>\n     This method is called when the user submitted the modal.\n    </p>\n    <h4>\n     currentIndex\n     <code>\n      modal.currentIndex\n     </code>\n    </h4>\n    <p>\n     Returns the index of the current view that is visible.\n    </p>\n    <h4>\n     destroy\n     <code>\n      modal.destroy()\n     </code>\n    </h4>\n    <p>\n     Call this method to remove all events listerners, modal and internal views.\n    </p>\n    <h4>\n     onDestroy\n     <code>\n      modal.onDestroy()\n     </code>\n     (callback)\n    </h4>\n    <p>\n     This method is called when the modal view is destroyed.\n    </p>\n   </section>\n   <section class="marionette" id="marionette">\n    <h3>\n     Backbone.Marionette.Modals\n    </h3>\n    <p>\n     When you\'re using\n     <a href="http://marionettejs.com">\n      Marionette\n     </a>\n     , you can set a Marionette.Region class as modal region:\n     <code>\n      Backbone.Marionette.Modals\n     </code>\n     . When showing views in this region, it will behave like you would expect. Adding multiple modals, will result in stacked modals. You can close them individually, or all at once.\n    </p>\n    <code data-gist="https://gist.github.com/6291339.json">\n     <div class="gist" id="gist6291339">\n      <div class="gist-file">\n       <div class="gist-data">\n        <div class="js-gist-file-update-container js-task-list-container file-box">\n         <div class="file" id="file-gistfile1-js">\n          <div class="blob-wrapper data type-javascript" itemprop="text">\n           <table class="highlight tab-size js-file-line-container" data-tab-size="8">\n            <tbody>\n             <tr>\n              <td class="blob-num js-line-number" data-line-number="1" id="file-gistfile1-js-L1">\n              </td>\n              <td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-js-LC1">\n               <span class="pl-k">\n                var\n               </span>\n               Layout\n               <span class="pl-k">\n                =\n               </span>\n               <span class="pl-smi">\n                Backbone\n               </span>\n               .\n               <span class="pl-smi">\n                Marionette\n               </span>\n               .\n               <span class="pl-smi">\n                Layout\n               </span>\n               .\n               <span class="pl-en">\n                extend\n               </span>\n               ({\n              </td>\n             </tr>\n             <tr>\n              <td class="blob-num js-line-number" data-line-number="2" id="file-gistfile1-js-L2">\n              </td>\n              <td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-js-LC2">\n               template\n               <span class="pl-k">\n                :\n               </span>\n               <span class="pl-smi">\n                _\n               </span>\n               .\n               <span class="pl-en">\n                template\n               </span>\n               (\n               <span class="pl-en">\n                $\n               </span>\n               (\n               <span class="pl-s">\n                <span class="pl-pds">\n                 \'\n                </span>\n                #template\n                <span class="pl-pds">\n                 \'\n                </span>\n               </span>\n               ).\n               <span class="pl-en">\n                html\n               </span>\n               ()),\n              </td>\n             </tr>\n             <tr>\n              <td class="blob-num js-line-number" data-line-number="3" id="file-gistfile1-js-L3">\n              </td>\n              <td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-js-LC3">\n               regions\n               <span class="pl-k">\n                :\n               </span>\n               {\n              </td>\n             </tr>\n             <tr>\n              <td class="blob-num js-line-number" data-line-number="4" id="file-gistfile1-js-L4">\n              </td>\n              <td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-js-LC4">\n               modals\n               <span class="pl-k">\n                :\n               </span>\n               {\n              </td>\n             </tr>\n             <tr>\n              <td class="blob-num js-line-number" data-line-number="5" id="file-gistfile1-js-L5">\n              </td>\n              <td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-js-LC5">\n               selector\n               <span class="pl-k">\n                :\n               </span>\n               <span class="pl-s">\n                <span class="pl-pds">\n                 \'\n                </span>\n                .your-modals-container\n                <span class="pl-pds">\n                 \'\n                </span>\n               </span>\n               ,\n              </td>\n             </tr>\n             <tr>\n              <td class="blob-num js-line-number" data-line-number="6" id="file-gistfile1-js-L6">\n              </td>\n              <td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-js-LC6">\n               regionClass\n               <span class="pl-k">\n                :\n               </span>\n               <span class="pl-smi">\n                Backbone\n               </span>\n               .\n               <span class="pl-smi">\n                Marionette\n               </span>\n               .\n               <span class="pl-smi">\n                Modals\n               </span>\n              </td>\n             </tr>\n             <tr>\n              <td class="blob-num js-line-number" data-line-number="7" id="file-gistfile1-js-L7">\n              </td>\n              <td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-js-LC7">\n               }\n              </td>\n             </tr>\n             <tr>\n              <td class="blob-num js-line-number" data-line-number="8" id="file-gistfile1-js-L8">\n              </td>\n              <td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-js-LC8">\n               }\n              </td>\n             </tr>\n             <tr>\n              <td class="blob-num js-line-number" data-line-number="9" id="file-gistfile1-js-L9">\n              </td>\n              <td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-js-LC9">\n               });\n              </td>\n             </tr>\n            </tbody>\n           </table>\n          </div>\n         </div>\n        </div>\n       </div>\n       <div class="gist-meta">\n        <a href="https://gist.github.com/davidvanleeuwen/6291339/raw/70fb860d917568d38de428cfa49fbcf46a55f078/gistfile1.js" style="float:right">\n         view raw\n        </a>\n        <a href="https://gist.github.com/davidvanleeuwen/6291339#file-gistfile1-js">\n         gistfile1.js\n        </a>\n        hosted with \xe2\x9d\xa4 by\n        <a href="https://github.com">\n         GitHub\n        </a>\n       </div>\n      </div>\n     </div>\n    </code>\n    <h4>\n     show\n     <code>\n      modals.show(modal)\n     </code>\n    </h4>\n    <p>\n     Like you\'d expect from a region, to render a view. When you already have a modal in there, it will animate differently and stack the modal.\n    </p>\n    <h4>\n     destroy\n     <code>\n      modals.destroy()\n     </code>\n    </h4>\n    <p>\n     This will destroy the last modal you have in the region.\n    </p>\n    <h4>\n     destroyAll\n     <code>\n      modals.destroyAll()\n     </code>\n    </h4>\n    <p>\n     Useful when you want to destroy all modals at once in this region.\n    </p>\n    <h4>\n     zIndex\n     <code>\n      modals.zIndex\n     </code>\n    </h4>\n    <p>\n     This will let you know how many modals are stacked.\n    </p>\n   </section>\n   <section class="examples" id="examples">\n    <h3>\n     Examples\n    </h3>\n    <p>\n     <a href="https://github.com/awkward/backbone.modal/blob/master/examples/1_single_view.html">\n      Single view/template\n     </a>\n     <br/>\n     <a href="https://github.com/awkward/backbone.modal/blob/master/examples/1_single_view_amd.html">\n      Single view/template (AMD)\n     </a>\n     <br/>\n     <a href="https://github.com/awkward/backbone.modal/blob/master/examples/2_tab_based.html">\n      Tab based\n     </a>\n     <br/>\n     <a href="https://github.com/awkward/backbone.modal/blob/master/examples/3_stacked_modal_with_marionette.html">\n      Stacked modal with Marionette\n     </a>\n     <br/>\n     <a href="https://github.com/awkward/backbone.modal/blob/master/examples/3_stacked_modal_with_marionette_amd.html">\n      Stacked modal with Marionette (AMD)\n     </a>\n     <br/>\n     <a href="https://github.com/awkward/backbone.modal/blob/master/examples/4_wizard.html">\n      Wizard\n     </a>\n     <br/>\n    </p>\n   </section>\n   <section class="changelog">\n    <h3>\n     Changelog\n    </h3>\n    <h4>\n     1.1.5\n    </h4>\n    <ul>\n     <li>\n      Fixes for iPad compatibly\n     </li>\n     <li>\n      Fix:\n      <code>\n       onShow\n      </code>\n      with Marionette was being called twice\n     </li>\n     <li>\n      Pass along jQuery events\n     </li>\n    </ul>\n    <h4>\n     1.1.4\n    </h4>\n    <ul>\n     <li>\n      Improved close handler\n     </li>\n     <li>\n      Fix for enter event in textarea\n     </li>\n    </ul>\n    <h4>\n     1.1.3\n    </h4>\n    <ul>\n     <li>\n      You can use a string for\n      <code>\n       template\n      </code>\n      now\n     </li>\n     <li>\n      Several bug fixes\n     </li>\n    </ul>\n    <h4>\n     1.1.2\n    </h4>\n    <ul>\n     <li>\n      Fixed Zepto support with\n      <code>\n       animate: false\n      </code>\n      in\n      <code>\n       animateToView\n      </code>\n     </li>\n     <li>\n      Fixed overflow issue\n     </li>\n     <li>\n      Fixed\n      <code>\n       modal:destroy\n      </code>\n      event on region\n     </li>\n     <li>\n      Added\n      <code>\n       showViewOnRender\n      </code>\n      : when set to\n      <code>\n       false\n      </code>\n      it won\'t open the first view from\n      <code>\n       render()\n      </code>\n     </li>\n    </ul>\n    <h4>\n     1.1.1\n    </h4>\n    <ul>\n     <li>\n      Fix AMD support and add it to\n      <code>\n       Backbone\n      </code>\n      and\n      <code>\n       Backbone.Marionette\n      </code>\n     </li>\n     <li>\n      Add examples of how to use AMD with Backbone.Modal\n     </li>\n    </ul>\n    <h4>\n     1.1.0\n    </h4>\n    <ul>\n     <li>\n      <em>\n       Breaking change\n      </em>\n      : Changed handlers to comply with all Marionette (2.x.x) changes (changes\n      <code>\n       close\n      </code>\n      to\n      <code>\n       destroy\n      </code>\n      )\n     </li>\n     <li>\n      Add\n      <code>\n       viewOptions\n      </code>\n      for\n      <code>\n       views\n      </code>\n     </li>\n     <li>\n      Zepto support\n     </li>\n     <li>\n      Possibility to disable animations and keyboard events\n     </li>\n     <li>\n      CommonJS and AMD support\n     </li>\n     <li>\n      Bugfixes\n     </li>\n    </ul>\n    <h4>\n     1.0.0\n    </h4>\n    <ul>\n     <li>\n      First release supporting Backbone and Backbone.Marionette.\n     </li>\n    </ul>\n   </section>\n  </div>\n  <script id="modals-template" type="text/template">\n   &lt;div class="modals-container"&gt;&lt;/div&gt;\n  </script>\n  <!-- Single view modal -->\n  <script id="info-modal-template" type="text/template">\n   &lt;div class="bbm-modal__topbar"&gt;\n     &lt;h3 class="bbm-modal__title"&gt;Backbone.Modal&lt;/h3&gt;\n    &lt;/div&gt;\n    &lt;div class="bbm-modal__section"&gt;\n     &lt;p&gt;Backbone.Modal can help you to quickly build modals like this. With minimal effort you can create all kinds of modals. For example:&lt;/p&gt;\n     &lt;ul&gt;\n       &lt;li&gt;You can &lt;strong&gt;stack&lt;/strong&gt; modals and use multiple views: &lt;a href="#" class="open-tab"&gt;show example&lt;/a&gt;&lt;/li&gt;\n       &lt;li&gt;Amazingly &lt;strong&gt;flexible&lt;/strong&gt;, you can create anything, for example this wizard: &lt;a href="#" class="open-wizard"&gt;show example&lt;/a&gt;&lt;/li&gt;\n       &lt;li&gt;Nice animations, default behavior and interactions&lt;/li&gt;\n     &lt;/ul&gt;\n    &lt;/div&gt;\n    &lt;div class="bbm-modal__bottombar"&gt;\n     &lt;a href="#" class="bbm-button"&gt;Close&lt;/a&gt;\n    &lt;/div&gt;\n  </script>\n  <!-- MODALS -->\n  <!-- Tab based modal -->\n  <!-- The modal structure, with a container element that will contain all tabs -->\n  <script id="tab-modal-template" type="text/template">\n   &lt;div class="bbm-modal__topbar"&gt;\n      &lt;ul&gt;\n        &lt;li class="bbm-modal__tab"&gt;&lt;a href="#" id="tab1" class="active"&gt;General&lt;/a&gt;&lt;/li&gt;\n        &lt;li class="bbm-modal__tab"&gt;&lt;a href="#" id="tab2"&gt;Account&lt;/a&gt;&lt;/li&gt;\n      &lt;/ul&gt;\n    &lt;/div&gt;\n\n    &lt;div class="my-container"&gt;&lt;/div&gt;\n    &lt;div class="bbm-modal__bottombar"&gt;\n      &lt;a href="#" class="bbm-button"&gt;Done&lt;/a&gt;\n    &lt;/div&gt;\n  </script>\n  <!-- Tab 1 -->\n  <script id="modal-view1-template" type="text/template">\n   &lt;div class="bbm-modal__section"&gt;\n      &lt;h3&gt;Backbone.Modal: tab based&lt;/h3&gt;\n      &lt;p&gt;It\'s also really easy to create a modal, with seperate views that you can control using tabs.&lt;/p&gt;\n      &lt;p&gt;We\'re also using a default style, but you can overwrite anything you want.&lt;/p&gt;\n    &lt;/div&gt;\n  </script>\n  <!-- Tab 2 -->\n  <script id="modal-view2-template" type="text/template">\n   &lt;div class="bbm-modal__section"&gt;\n      &lt;p&gt;Some account details&lt;/p&gt;\n    &lt;/div&gt;\n  </script>\n  <!-- Wizard based modal -->\n  <script id="wizard-modal-template" type="text/template">\n   &lt;div class="my-container"&gt;&lt;/div&gt;\n\n    &lt;div class="bbm-modal__bottombar"&gt;\n      &lt;a href="#" class="bbm-button previous"&gt;Previous&lt;/a&gt;\n      &lt;a href="#" class="bbm-button next"&gt;Next&lt;/a&gt;\n    &lt;/div&gt;\n  </script>\n  <!-- Step 1 -->\n  <script id="modal-step1-template" type="text/template">\n   &lt;div class="bbm-modal__topbar"&gt;\n      &lt;h3 class="bbm-modal__title"&gt;Wizard example - step 1&lt;/h3&gt;\n    &lt;/div&gt;\n    &lt;div class="bbm-modal__section"&gt;\n      &lt;p&gt;You can create all kinds of modals, like this wizard. It\'s pretty basic, but you can do anything you\'d like.&lt;/p&gt;\n      &lt;a href="#" id="step3"&gt;Directly go to the last step&lt;/a&gt;\n    &lt;/div&gt;\n  </script>\n  <!-- Step 2 -->\n  <script id="modal-step2-template" type="text/template">\n   &lt;div class="bbm-modal__topbar"&gt;\n      &lt;h3 class="bbm-modal__title"&gt;Wizard example - step 2&lt;/h3&gt;\n    &lt;/div&gt;\n    &lt;div class="bbm-modal__section"&gt;\n      &lt;p&gt;This is the second step of the wizard.&lt;/p&gt;\n      &lt;p&gt;&lt;img src="stylesheets/img/lama.gif" width="224" height="200" /&gt;&lt;/p&gt;\n    &lt;/div&gt;\n  </script>\n  <!-- Step 3 -->\n  <script id="modal-step3-template" type="text/template">\n   &lt;div class="bbm-modal__topbar"&gt;\n      &lt;h3 class="bbm-modal__title"&gt;Wizard example - step 3&lt;/h3&gt;\n    &lt;/div&gt;\n    &lt;div class="bbm-modal__section"&gt;\n      &lt;p&gt;And finally, the last step!&lt;/p&gt;\n    &lt;/div&gt;\n  </script>\n  <iframe allowtransparency="true" class="twitter-share-button twitter-share-button-rendered twitter-tweet-button" frameborder="0" id="twitter-widget-0" scrolling="no" src="http://platform.twitter.com/widgets/tweet_button.4ca9f1d9cb5a373a2f7d0969f5b40084.en.html#dnt=false&amp;id=twitter-widget-0&amp;lang=en&amp;original_referer=http%3A%2F%2Fawkward.github.io%2Fbackbone.modal%2Findex.html&amp;size=m&amp;text=Looking%20for%20nice%20modals%20for%20your%20Backbone.js%20project%3F%20Here%20you%20go%3A&amp;time=1492362289922&amp;type=share&amp;url=http%3A%2F%2Fawkward.github.io%2Fbackbone.modal%2Findex.html" style="position: static; visibility: visible; width: 61px; height: 20px;" title="Twitter Tweet Button">\n  </iframe>\n  <script>\n   !function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="https://platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");\n  </script>\n </body>\n</html>'b'<!DOCTYPE html>\n<html lang="en" xmlns="http://www.w3.org/1999/xhtml">\n <head>\n  <meta charset="utf-8"/>\n  <meta content="ie=edge, chrome=1" http-equiv="x-ua-compatible"/>\n  <meta content="width=device-width, initial-scale=1" name="viewport"/>\n  <link href="http://fonts.googleapis.com/css?family=PT+Sans:400,700" rel="stylesheet" type="text/css"/>\n  <link href="stylesheets/backbone.modal.css" rel="stylesheet"/>\n  <link href="stylesheets/backbone.modal.theme.css" rel="stylesheet"/>\n  <link href="stylesheets/s.css?1377531995" rel="stylesheet"/>\n  <script async="" src="http://www.google-analytics.com/analytics.js" type="text/javascript">\n  </script>\n  <script id="twitter-wjs" src="https://platform.twitter.com/widgets.js">\n  </script>\n  <script async="" src="http://d2dq2ahtl5zl1z.cloudfront.net/analytics.js/v1/4of96dwo0g/analytics.min.js" type="text/javascript">\n  </script>\n  <script src="//cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.min.js">\n  </script>\n  <script src="//cdnjs.cloudflare.com/ajax/libs/underscore.js/1.5.1/underscore-min.js">\n  </script>\n  <script src="//cdnjs.cloudflare.com/ajax/libs/backbone.js/1.0.0/backbone-min.js">\n  </script>\n  <script src="//cdnjs.cloudflare.com/ajax/libs/backbone.marionette/1.0.4-bundled/backbone.marionette.js">\n  </script>\n  <script src="scripts/gists.js">\n  </script>\n  <script src="scripts/backbone.modal-bundled-min.js">\n  </script>\n  <script src="scripts/main.js">\n  </script>\n  <script type="text/javascript">\n   var analytics=analytics||[];(function(){var e=["identify","track","trackLink","trackForm","trackClick","trackSubmit","page","pageview","ab","alias","ready","group"],t=function(e){return function(){analytics.push([e].concat(Array.prototype.slice.call(arguments,0)))}};for(var n=0;n&lt;e.length;n++)analytics[e[n]]=t(e[n])})(),analytics.load=function(e){var t=document.createElement("script");t.type="text/javascript",t.async=!0,t.src=("https:"===document.location.protocol?"https://":"http://")+"d2dq2ahtl5zl1z.cloudfront.net/analytics.js/v1/"+e+"/analytics.min.js";var n=document.getElementsByTagName("script")[0];n.parentNode.insertBefore(t,n)};\n    analytics.load("4of96dwo0g");\n  </script>\n  <title>\n   Backbone.Modal\n  </title>\n  <script async="" charset="utf-8" src="https://platform.twitter.com/js/button.80ba267f37d7093ec36703643939b173.js" type="text/javascript">\n  </script>\n </head>\n <body>\n  <div class="app">\n   <div>\n    <div class="modals-container">\n     <div class="bbm-wrapper" style="display: block;">\n      <div class="bbm-modal bbm-modal--open" style="opacity: 1;">\n       <div class="bbm-modal__topbar">\n        <h3 class="bbm-modal__title">\n         Backbone.Modal\n        </h3>\n       </div>\n       <div class="bbm-modal__section">\n        <p>\n         Backbone.Modal can help you to quickly build modals like this. With minimal effort you can create all kinds of modals. For example:\n        </p>\n        <ul>\n         <li>\n          You can\n          <strong>\n           stack\n          </strong>\n          modals and use multiple views:\n          <a class="open-tab" href="#">\n           show example\n          </a>\n         </li>\n         <li>\n          Amazingly\n          <strong>\n           flexible\n          </strong>\n          , you can create anything, for example this wizard:\n          <a class="open-wizard" href="#">\n           show example\n          </a>\n         </li>\n         <li>\n          Nice animations, default behavior and interactions\n         </li>\n        </ul>\n       </div>\n       <div class="bbm-modal__bottombar">\n        <a class="bbm-button" href="#">\n         Close\n        </a>\n       </div>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n  <div class="container">\n   <section class="intro">\n    <div class="introduction">\n     <h1>\n      backbone.modal.js\n     </h1>\n     <a class="awkward" href="http://www.madeawkward.com">\n      Awkward\n     </a>\n     <h2>\n      A plugin for Backbone.js that simplifies creating modals for your application.\n     </h2>\n     <p class="intro">\n      Backbone.Modal.js removes boilerplate code and adds default behaviors and interactions. You can create a simple dialog modal or complex wizards with stacked modals on top of each other in a few lines of code.\n     </p>\n    </div>\n    <div class="source">\n     <a class="download" href="https://github.com/awkward/backbone.modal/archive/1.1.5.zip">\n      Download\n      <b>\n       v1.1.5\n      </b>\n     </a>\n     <a class="github" href="https://github.com/awkward/backbone.modal">\n      <b>\n       Source on\n      </b>\n      Github\n     </a>\n    </div>\n   </section>\n   <section class="getting-started">\n    <h3>\n     Getting Started\n    </h3>\n    <p>\n     Backbone.modal.js is built on top of\n     <a href="http://backbonejs.org/">\n      Backbone.js\n     </a>\n     . Make sure you include everything that\'s needed for Backbone and add Backbone.Modal.js and the CSS files to start playing with it. You can also start out with the\n     <a href="#examples">\n      examples\n     </a>\n     .\n    </p>\n    <p>\n     If you\'d like to create a stacked modal (multiple modals on top of each other), you\'ll need to use Backbone.Marionette.js and\n     <a href="#marionette">\n      Backbone.Marionette.Modals.js\n     </a>\n     .\n    </p>\n    <h3>\n     Backbone.Modal\n    </h3>\n    <p>\n     Options can be added when extending from Backbone.Modal like:\n     <code>\n      prefix\n     </code>\n     (for classnames),\n     <code>\n      animate\n     </code>\n     and\n     <code>\n      keyControl\n     </code>\n     (disable enter/esc events).\n    </p>\n    <h4>\n     views\n     <code>\n      modal.views\n     </code>\n    </h4>\n    <code data-gist="https://gist.github.com/6219705.json">\n     <div class="gist" id="gist6219705">\n      <div class="gist-file">\n       <div class="gist-data">\n        <div class="js-gist-file-update-container js-task-list-container file-box">\n         <div class="file" id="file-gistfile1-js">\n          <div class="blob-wrapper data type-javascript" itemprop="text">\n           <table class="highlight tab-size js-file-line-container" data-tab-size="8">\n            <tbody>\n             <tr>\n              <td class="blob-num js-line-number" data-line-number="1" id="file-gistfile1-js-L1">\n              </td>\n              <td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-js-LC1">\n               views\n               <span class="pl-k">\n                :\n               </span>\n               {\n              </td>\n             </tr>\n             <tr>\n              <td class="blob-num js-line-number" data-line-number="2" id="file-gistfile1-js-L2">\n              </td>\n              <td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-js-LC2">\n               <span class="pl-s">\n                <span class="pl-pds">\n                 \'\n                </span>\n                click #tab\n                <span class="pl-pds">\n                 \'\n                </span>\n               </span>\n               <span class="pl-k">\n                :\n               </span>\n               {\n              </td>\n             </tr>\n             <tr>\n              <td class="blob-num js-line-number" data-line-number="3" id="file-gistfile1-js-L3">\n              </td>\n              <td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-js-LC3">\n               myActiveTabClass\n               <span class="pl-k">\n                :\n               </span>\n               <span class="pl-s">\n                <span class="pl-pds">\n                 \'\n                </span>\n                .my-tab\n                <span class="pl-pds">\n                 \'\n                </span>\n               </span>\n              </td>\n             </tr>\n             <tr>\n              <td class="blob-num js-line-number" data-line-number="4" id="file-gistfile1-js-L4">\n              </td>\n              <td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-js-LC4">\n               view\n               <span class="pl-k">\n                :\n               </span>\n               <span class="pl-smi">\n                _\n               </span>\n               .\n               <span class="pl-en">\n                template\n               </span>\n               (\n               <span class="pl-en">\n                $\n               </span>\n               (\n               <span class="pl-s">\n                <span class="pl-pds">\n                 \'\n                </span>\n                #tab-view\n                <span class="pl-pds">\n                 \'\n                </span>\n               </span>\n               ).\n               <span class="pl-en">\n                html\n               </span>\n               ()),\n              </td>\n             </tr>\n             <tr>\n              <td class="blob-num js-line-number" data-line-number="5" id="file-gistfile1-js-L5">\n              </td>\n              <td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-js-LC5">\n               onActive\n               <span class="pl-k">\n                :\n               </span>\n               <span class="pl-s">\n                <span class="pl-pds">\n                 \'\n                </span>\n                setActive\n                <span class="pl-pds">\n                 \'\n                </span>\n               </span>\n              </td>\n             </tr>\n             <tr>\n              <td class="blob-num js-line-number" data-line-number="6" id="file-gistfile1-js-L6">\n              </td>\n              <td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-js-LC6">\n               }\n              </td>\n             </tr>\n             <tr>\n              <td class="blob-num js-line-number" data-line-number="7" id="file-gistfile1-js-L7">\n              </td>\n              <td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-js-LC7">\n               },\n              </td>\n             </tr>\n             <tr>\n              <td class="blob-num js-line-number" data-line-number="8" id="file-gistfile1-js-L8">\n              </td>\n              <td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-js-LC8">\n               <span class="pl-en">\n                setActive\n               </span>\n               <span class="pl-k">\n                :\n               </span>\n               <span class="pl-k">\n                function\n               </span>\n               (\n               <span class="pl-smi">\n                options\n               </span>\n               ) {\n              </td>\n             </tr>\n             <tr>\n              <td class="blob-num js-line-number" data-line-number="9" id="file-gistfile1-js-L9">\n              </td>\n              <td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-js-LC9">\n               <span class="pl-c1">\n                this\n               </span>\n               .\n               <span class="pl-en">\n                $\n               </span>\n               (\n               <span class="pl-smi">\n                options\n               </span>\n               .\n               <span class="pl-smi">\n                myActiveTabClass\n               </span>\n               ).\n               <span class="pl-en">\n                addClass\n               </span>\n               (\n               <span class="pl-s">\n                <span class="pl-pds">\n                 \'\n                </span>\n                active\n                <span class="pl-pds">\n                 \'\n                </span>\n               </span>\n               )\n              </td>\n             </tr>\n             <tr>\n              <td class="blob-num js-line-number" data-line-number="10" id="file-gistfile1-js-L10">\n              </td>\n              <td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-js-LC10">\n               }\n              </td>\n             </tr>\n            </tbody>\n           </table>\n          </div>\n         </div>\n        </div>\n       </div>\n       <div class="gist-meta">\n        <a href="https://gist.github.com/davidvanleeuwen/6219705/raw/09a05c2fdc3c302ca41d72c6045197af653eda28/gistfile1.js" style="float:right">\n         view raw\n        </a>\n        <a href="https://gist.github.com/davidvanleeuwen/6219705#file-gistfile1-js">\n         gistfile1.js\n        </a>\n        hosted with \xe2\x9d\xa4 by\n        <a href="https://github.com">\n         GitHub\n        </a>\n       </div>\n      </div>\n     </div>\n    </code>\n    <p>\n     You can bind your views by adding an event handler, just like you would define events in a Backbone.View. You can add additional options to pass along:\n     <code>\n      view\n     </code>\n     (as Backbone.View, function or template which is required),\n     <code>\n      viewOptions\n     </code>\n     (for specific options for that view). By using the\n     <code>\n      onActive\n     </code>\n     callback, you can see whenever a view is active.\n    </p>\n    <h4>\n     views.length\n     <code>\n      modal.views.length\n     </code>\n    </h4>\n    <p>\n     Get the amount of views in a modal.\n    </p>\n    <h4>\n     template\n     <code>\n      modal.template\n     </code>\n    </h4>\n    <p>\n     You don\'t need the\n     <code>\n      views\n     </code>\n     to create a modal, you can simply use a template if you just want to show one view. But if you want to create a complex modal, you can combine the\n     <code>\n      template\n     </code>\n     and\n     <code>\n      views\n     </code>\n     , but you\'ll have to define a\n     <code>\n      viewContainer\n     </code>\n     .\n    </p>\n    <h4>\n     viewContainer\n     <code>\n      modal.viewContainer\n     </code>\n    </h4>\n    <p>\n     All views will be rendered within the viewContainer. Select a container from your template by doing:\n     <code>\n      viewContainer: \'.container\'\n     </code>\n    </p>\n    <h4>\n     submitEl\n     <code>\n      modal.submitEl\n     </code>\n    </h4>\n    <p>\n     You can define an element that will trigger all submit events. This will result in calling\n     <code>\n      beforeSubmit\n     </code>\n     ,\n     <code>\n      submit\n     </code>\n     and closing the modal.\n    </p>\n    <h4>\n     cancelEl\n     <code>\n      modal.cancelEl\n     </code>\n    </h4>\n    <p>\n     Similar to\n     <code>\n      submitEl\n     </code>\n     you can define an element that will cancel the modal. This will result in calling\n     <code>\n      beforeCancel\n     </code>\n     ,\n     <code>\n      cancel\n     </code>\n     and closing the modal.\n    </p>\n    <h4>\n     openAt\n     <code>\n      modal.openAt([index])\n     </code>\n    </h4>\n    <p>\n     Open the modal at a specific index from\n     <code>\n      views\n     </code>\n     .\n    </p>\n    <h4>\n     next\n     <code>\n      modal.next()\n     </code>\n    </h4>\n    <p>\n     Open the next view from\n     <code>\n      views\n     </code>\n     . Useful when creating a wizard like modal.\n    </p>\n    <h4>\n     previous\n     <code>\n      modal.previous()\n     </code>\n    </h4>\n    <p>\n     Similar to\n     <code>\n      next()\n     </code>\n     , but will open the previous view from\n     <code>\n      views\n     </code>\n     .\n    </p>\n    <h4>\n     onRender\n     <code>\n      modal.onRender()\n     </code>\n     (callback)\n    </h4>\n    <p>\n     Useful when you want to do some custom work while it\'s rendering the modal.\n    </p>\n    <h4>\n     onShow\n     <code>\n      modal.onShow()\n     </code>\n    </h4>\n    <p>\n     Triggered whenever the animation has ended and the modal is displayed.\n    </p>\n    <h4>\n     beforeCancel\n     <code>\n      modal.beforeCancel()\n     </code>\n     (callback)\n    </h4>\n    <p>\n     This will be called when the user hits ESC, clicking on the\n     <code>\n      cancelEl\n     </code>\n     or clicking outside the modal and before\n     <code>\n      cancel\n     </code>\n     is called. It expects\n     <code>\n      true\n     </code>\n     or\n     <code>\n      false\n     </code>\n     .\n    </p>\n    <h4>\n     cancel\n     <code>\n      modal.cancel()\n     </code>\n    </h4>\n    <p>\n     This method is called when the user canceled the modal.\n    </p>\n    <h4>\n     beforeSubmit\n     <code>\n      modal.beforeSubmit()\n     </code>\n     (callback)\n    </h4>\n    <p>\n     This will be called when the user hits ENTER or clicking on the\n     <code>\n      submitEl\n     </code>\n     . It expects\n     <code>\n      true\n     </code>\n     or\n     <code>\n      false\n     </code>\n     , so you can do any validation for example.\n    </p>\n    <h4>\n     submit\n     <code>\n      modal.submit()\n     </code>\n     (callback)\n    </h4>\n    <p>\n     This method is called when the user submitted the modal.\n    </p>\n    <h4>\n     currentIndex\n     <code>\n      modal.currentIndex\n     </code>\n    </h4>\n    <p>\n     Returns the index of the current view that is visible.\n    </p>\n    <h4>\n     destroy\n     <code>\n      modal.destroy()\n     </code>\n    </h4>\n    <p>\n     Call this method to remove all events listerners, modal and internal views.\n    </p>\n    <h4>\n     onDestroy\n     <code>\n      modal.onDestroy()\n     </code>\n     (callback)\n    </h4>\n    <p>\n     This method is called when the modal view is destroyed.\n    </p>\n   </section>\n   <section class="marionette" id="marionette">\n    <h3>\n     Backbone.Marionette.Modals\n    </h3>\n    <p>\n     When you\'re using\n     <a href="http://marionettejs.com">\n      Marionette\n     </a>\n     , you can set a Marionette.Region class as modal region:\n     <code>\n      Backbone.Marionette.Modals\n     </code>\n     . When showing views in this region, it will behave like you would expect. Adding multiple modals, will result in stacked modals. You can close them individually, or all at once.\n    </p>\n    <code data-gist="https://gist.github.com/6291339.json">\n     <div class="gist" id="gist6291339">\n      <div class="gist-file">\n       <div class="gist-data">\n        <div class="js-gist-file-update-container js-task-list-container file-box">\n         <div class="file" id="file-gistfile1-js">\n          <div class="blob-wrapper data type-javascript" itemprop="text">\n           <table class="highlight tab-size js-file-line-container" data-tab-size="8">\n            <tbody>\n             <tr>\n              <td class="blob-num js-line-number" data-line-number="1" id="file-gistfile1-js-L1">\n              </td>\n              <td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-js-LC1">\n               <span class="pl-k">\n                var\n               </span>\n               Layout\n               <span class="pl-k">\n                =\n               </span>\n               <span class="pl-smi">\n                Backbone\n               </span>\n               .\n               <span class="pl-smi">\n                Marionette\n               </span>\n               .\n               <span class="pl-smi">\n                Layout\n               </span>\n               .\n               <span class="pl-en">\n                extend\n               </span>\n               ({\n              </td>\n             </tr>\n             <tr>\n              <td class="blob-num js-line-number" data-line-number="2" id="file-gistfile1-js-L2">\n              </td>\n              <td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-js-LC2">\n               template\n               <span class="pl-k">\n                :\n               </span>\n               <span class="pl-smi">\n                _\n               </span>\n               .\n               <span class="pl-en">\n                template\n               </span>\n               (\n               <span class="pl-en">\n                $\n               </span>\n               (\n               <span class="pl-s">\n                <span class="pl-pds">\n                 \'\n                </span>\n                #template\n                <span class="pl-pds">\n                 \'\n                </span>\n               </span>\n               ).\n               <span class="pl-en">\n                html\n               </span>\n               ()),\n              </td>\n             </tr>\n             <tr>\n              <td class="blob-num js-line-number" data-line-number="3" id="file-gistfile1-js-L3">\n              </td>\n              <td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-js-LC3">\n               regions\n               <span class="pl-k">\n                :\n               </span>\n               {\n              </td>\n             </tr>\n             <tr>\n              <td class="blob-num js-line-number" data-line-number="4" id="file-gistfile1-js-L4">\n              </td>\n              <td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-js-LC4">\n               modals\n               <span class="pl-k">\n                :\n               </span>\n               {\n              </td>\n             </tr>\n             <tr>\n              <td class="blob-num js-line-number" data-line-number="5" id="file-gistfile1-js-L5">\n              </td>\n              <td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-js-LC5">\n               selector\n               <span class="pl-k">\n                :\n               </span>\n               <span class="pl-s">\n                <span class="pl-pds">\n                 \'\n                </span>\n                .your-modals-container\n                <span class="pl-pds">\n                 \'\n                </span>\n               </span>\n               ,\n              </td>\n             </tr>\n             <tr>\n              <td class="blob-num js-line-number" data-line-number="6" id="file-gistfile1-js-L6">\n              </td>\n              <td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-js-LC6">\n               regionClass\n               <span class="pl-k">\n                :\n               </span>\n               <span class="pl-smi">\n                Backbone\n               </span>\n               .\n               <span class="pl-smi">\n                Marionette\n               </span>\n               .\n               <span class="pl-smi">\n                Modals\n               </span>\n              </td>\n             </tr>\n             <tr>\n              <td class="blob-num js-line-number" data-line-number="7" id="file-gistfile1-js-L7">\n              </td>\n              <td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-js-LC7">\n               }\n              </td>\n             </tr>\n             <tr>\n              <td class="blob-num js-line-number" data-line-number="8" id="file-gistfile1-js-L8">\n              </td>\n              <td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-js-LC8">\n               }\n              </td>\n             </tr>\n             <tr>\n              <td class="blob-num js-line-number" data-line-number="9" id="file-gistfile1-js-L9">\n              </td>\n              <td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-js-LC9">\n               });\n              </td>\n             </tr>\n            </tbody>\n           </table>\n          </div>\n         </div>\n        </div>\n       </div>\n       <div class="gist-meta">\n        <a href="https://gist.github.com/davidvanleeuwen/6291339/raw/70fb860d917568d38de428cfa49fbcf46a55f078/gistfile1.js" style="float:right">\n         view raw\n        </a>\n        <a href="https://gist.github.com/davidvanleeuwen/6291339#file-gistfile1-js">\n         gistfile1.js\n        </a>\n        hosted with \xe2\x9d\xa4 by\n        <a href="https://github.com">\n         GitHub\n        </a>\n       </div>\n      </div>\n     </div>\n    </code>\n    <h4>\n     show\n     <code>\n      modals.show(modal)\n     </code>\n    </h4>\n    <p>\n     Like you\'d expect from a region, to render a view. When you already have a modal in there, it will animate differently and stack the modal.\n    </p>\n    <h4>\n     destroy\n     <code>\n      modals.destroy()\n     </code>\n    </h4>\n    <p>\n     This will destroy the last modal you have in the region.\n    </p>\n    <h4>\n     destroyAll\n     <code>\n      modals.destroyAll()\n     </code>\n    </h4>\n    <p>\n     Useful when you want to destroy all modals at once in this region.\n    </p>\n    <h4>\n     zIndex\n     <code>\n      modals.zIndex\n     </code>\n    </h4>\n    <p>\n     This will let you know how many modals are stacked.\n    </p>\n   </section>\n   <section class="examples" id="examples">\n    <h3>\n     Examples\n    </h3>\n    <p>\n     <a href="https://github.com/awkward/backbone.modal/blob/master/examples/1_single_view.html">\n      Single view/template\n     </a>\n     <br/>\n     <a href="https://github.com/awkward/backbone.modal/blob/master/examples/1_single_view_amd.html">\n      Single view/template (AMD)\n     </a>\n     <br/>\n     <a href="https://github.com/awkward/backbone.modal/blob/master/examples/2_tab_based.html">\n      Tab based\n     </a>\n     <br/>\n     <a href="https://github.com/awkward/backbone.modal/blob/master/examples/3_stacked_modal_with_marionette.html">\n      Stacked modal with Marionette\n     </a>\n     <br/>\n     <a href="https://github.com/awkward/backbone.modal/blob/master/examples/3_stacked_modal_with_marionette_amd.html">\n      Stacked modal with Marionette (AMD)\n     </a>\n     <br/>\n     <a href="https://github.com/awkward/backbone.modal/blob/master/examples/4_wizard.html">\n      Wizard\n     </a>\n     <br/>\n    </p>\n   </section>\n   <section class="changelog">\n    <h3>\n     Changelog\n    </h3>\n    <h4>\n     1.1.5\n    </h4>\n    <ul>\n     <li>\n      Fixes for iPad compatibly\n     </li>\n     <li>\n      Fix:\n      <code>\n       onShow\n      </code>\n      with Marionette was being called twice\n     </li>\n     <li>\n      Pass along jQuery events\n     </li>\n    </ul>\n    <h4>\n     1.1.4\n    </h4>\n    <ul>\n     <li>\n      Improved close handler\n     </li>\n     <li>\n      Fix for enter event in textarea\n     </li>\n    </ul>\n    <h4>\n     1.1.3\n    </h4>\n    <ul>\n     <li>\n      You can use a string for\n      <code>\n       template\n      </code>\n      now\n     </li>\n     <li>\n      Several bug fixes\n     </li>\n    </ul>\n    <h4>\n     1.1.2\n    </h4>\n    <ul>\n     <li>\n      Fixed Zepto support with\n      <code>\n       animate: false\n      </code>\n      in\n      <code>\n       animateToView\n      </code>\n     </li>\n     <li>\n      Fixed overflow issue\n     </li>\n     <li>\n      Fixed\n      <code>\n       modal:destroy\n      </code>\n      event on region\n     </li>\n     <li>\n      Added\n      <code>\n       showViewOnRender\n      </code>\n      : when set to\n      <code>\n       false\n      </code>\n      it won\'t open the first view from\n      <code>\n       render()\n      </code>\n     </li>\n    </ul>\n    <h4>\n     1.1.1\n    </h4>\n    <ul>\n     <li>\n      Fix AMD support and add it to\n      <code>\n       Backbone\n      </code>\n      and\n      <code>\n       Backbone.Marionette\n      </code>\n     </li>\n     <li>\n      Add examples of how to use AMD with Backbone.Modal\n     </li>\n    </ul>\n    <h4>\n     1.1.0\n    </h4>\n    <ul>\n     <li>\n      <em>\n       Breaking change\n      </em>\n      : Changed handlers to comply with all Marionette (2.x.x) changes (changes\n      <code>\n       close\n      </code>\n      to\n      <code>\n       destroy\n      </code>\n      )\n     </li>\n     <li>\n      Add\n      <code>\n       viewOptions\n      </code>\n      for\n      <code>\n       views\n      </code>\n     </li>\n     <li>\n      Zepto support\n     </li>\n     <li>\n      Possibility to disable animations and keyboard events\n     </li>\n     <li>\n      CommonJS and AMD support\n     </li>\n     <li>\n      Bugfixes\n     </li>\n    </ul>\n    <h4>\n     1.0.0\n    </h4>\n    <ul>\n     <li>\n      First release supporting Backbone and Backbone.Marionette.\n     </li>\n    </ul>\n   </section>\n  </div>\n  <script id="modals-template" type="text/template">\n   &lt;div class="modals-container"&gt;&lt;/div&gt;\n  </script>\n  <!-- Single view modal -->\n  <script id="info-modal-template" type="text/template">\n   &lt;div class="bbm-modal__topbar"&gt;\n     &lt;h3 class="bbm-modal__title"&gt;Backbone.Modal&lt;/h3&gt;\n    &lt;/div&gt;\n    &lt;div class="bbm-modal__section"&gt;\n     &lt;p&gt;Backbone.Modal can help you to quickly build modals like this. With minimal effort you can create all kinds of modals. For example:&lt;/p&gt;\n     &lt;ul&gt;\n       &lt;li&gt;You can &lt;strong&gt;stack&lt;/strong&gt; modals and use multiple views: &lt;a href="#" class="open-tab"&gt;show example&lt;/a&gt;&lt;/li&gt;\n       &lt;li&gt;Amazingly &lt;strong&gt;flexible&lt;/strong&gt;, you can create anything, for example this wizard: &lt;a href="#" class="open-wizard"&gt;show example&lt;/a&gt;&lt;/li&gt;\n       &lt;li&gt;Nice animations, default behavior and interactions&lt;/li&gt;\n     &lt;/ul&gt;\n    &lt;/div&gt;\n    &lt;div class="bbm-modal__bottombar"&gt;\n     &lt;a href="#" class="bbm-button"&gt;Close&lt;/a&gt;\n    &lt;/div&gt;\n  </script>\n  <!-- MODALS -->\n  <!-- Tab based modal -->\n  <!-- The modal structure, with a container element that will contain all tabs -->\n  <script id="tab-modal-template" type="text/template">\n   &lt;div class="bbm-modal__topbar"&gt;\n      &lt;ul&gt;\n        &lt;li class="bbm-modal__tab"&gt;&lt;a href="#" id="tab1" class="active"&gt;General&lt;/a&gt;&lt;/li&gt;\n        &lt;li class="bbm-modal__tab"&gt;&lt;a href="#" id="tab2"&gt;Account&lt;/a&gt;&lt;/li&gt;\n      &lt;/ul&gt;\n    &lt;/div&gt;\n\n    &lt;div class="my-container"&gt;&lt;/div&gt;\n    &lt;div class="bbm-modal__bottombar"&gt;\n      &lt;a href="#" class="bbm-button"&gt;Done&lt;/a&gt;\n    &lt;/div&gt;\n  </script>\n  <!-- Tab 1 -->\n  <script id="modal-view1-template" type="text/template">\n   &lt;div class="bbm-modal__section"&gt;\n      &lt;h3&gt;Backbone.Modal: tab based&lt;/h3&gt;\n      &lt;p&gt;It\'s also really easy to create a modal, with seperate views that you can control using tabs.&lt;/p&gt;\n      &lt;p&gt;We\'re also using a default style, but you can overwrite anything you want.&lt;/p&gt;\n    &lt;/div&gt;\n  </script>\n  <!-- Tab 2 -->\n  <script id="modal-view2-template" type="text/template">\n   &lt;div class="bbm-modal__section"&gt;\n      &lt;p&gt;Some account details&lt;/p&gt;\n    &lt;/div&gt;\n  </script>\n  <!-- Wizard based modal -->\n  <script id="wizard-modal-template" type="text/template">\n   &lt;div class="my-container"&gt;&lt;/div&gt;\n\n    &lt;div class="bbm-modal__bottombar"&gt;\n      &lt;a href="#" class="bbm-button previous"&gt;Previous&lt;/a&gt;\n      &lt;a href="#" class="bbm-button next"&gt;Next&lt;/a&gt;\n    &lt;/div&gt;\n  </script>\n  <!-- Step 1 -->\n  <script id="modal-step1-template" type="text/template">\n   &lt;div class="bbm-modal__topbar"&gt;\n      &lt;h3 class="bbm-modal__title"&gt;Wizard example - step 1&lt;/h3&gt;\n    &lt;/div&gt;\n    &lt;div class="bbm-modal__section"&gt;\n      &lt;p&gt;You can create all kinds of modals, like this wizard. It\'s pretty basic, but you can do anything you\'d like.&lt;/p&gt;\n      &lt;a href="#" id="step3"&gt;Directly go to the last step&lt;/a&gt;\n    &lt;/div&gt;\n  </script>\n  <!-- Step 2 -->\n  <script id="modal-step2-template" type="text/template">\n   &lt;div class="bbm-modal__topbar"&gt;\n      &lt;h3 class="bbm-modal__title"&gt;Wizard example - step 2&lt;/h3&gt;\n    &lt;/div&gt;\n    &lt;div class="bbm-modal__section"&gt;\n      &lt;p&gt;This is the second step of the wizard.&lt;/p&gt;\n      &lt;p&gt;&lt;img src="stylesheets/img/lama.gif" width="224" height="200" /&gt;&lt;/p&gt;\n    &lt;/div&gt;\n  </script>\n  <!-- Step 3 -->\n  <script id="modal-step3-template" type="text/template">\n   &lt;div class="bbm-modal__topbar"&gt;\n      &lt;h3 class="bbm-modal__title"&gt;Wizard example - step 3&lt;/h3&gt;\n    &lt;/div&gt;\n    &lt;div class="bbm-modal__section"&gt;\n      &lt;p&gt;And finally, the last step!&lt;/p&gt;\n    &lt;/div&gt;\n  </script>\n  <iframe allowtransparency="true" class="twitter-share-button twitter-share-button-rendered twitter-tweet-button" frameborder="0" id="twitter-widget-0" scrolling="no" src="http://platform.twitter.com/widgets/tweet_button.4ca9f1d9cb5a373a2f7d0969f5b40084.en.html#dnt=false&amp;id=twitter-widget-0&amp;lang=en&amp;original_referer=http%3A%2F%2Fawkward.github.io%2Fbackbone.modal%2Findex.html&amp;size=m&amp;text=Looking%20for%20nice%20modals%20for%20your%20Backbone.js%20project%3F%20Here%20you%20go%3A&amp;time=1492571060012&amp;type=share&amp;url=http%3A%2F%2Fawkward.github.io%2Fbackbone.modal%2Findex.html" style="position: static; visibility: visible; width: 61px; height: 20px;" title="Twitter Tweet Button">\n  </iframe>\n  <script>\n   !function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="https://platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");\n  </script>\n </body>\n</html>'