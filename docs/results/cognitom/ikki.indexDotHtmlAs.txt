b'<!DOCTYPE html>\n<html xmlns="http://www.w3.org/1999/xhtml">\n <head>\n  <meta charset="utf-8"/>\n  <title>\n   ikki - an extention toolkit for Riot.js\n  </title>\n  <meta content="width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no" name="viewport"/>\n  <link href="//cdn.jsdelivr.net/normalize/3.0.3/normalize.css" rel="stylesheet"/>\n  <link href="//cdn.jsdelivr.net/highlight.js/8.5/styles/github.min.css" rel="stylesheet"/>\n  <style>\n   app-section2 navi ol , [riot-tag="app-section2"] navi ol { border: 1px solid #a7b5c1; border-radius: .3em; margin: 1em 3em; padding: 0; color: #a7b5c1; } app-section2 navi ol li , [riot-tag="app-section2"] navi ol li { display: block; border-top: 1px solid #a7b5c1; padding: .2em 0 .2em 1em; text-align: left; overflow: hidden; white-space: nowrap; } app-section2 navi ol li:first-child , [riot-tag="app-section2"] navi ol li:first-child { border-top: none; } app-section2 navi ol li a , [riot-tag="app-section2"] navi ol li a { margin-right: .2em; padding-right: .4em; border-right: 1px dotted #a7b5c1; } app-section2 navi ol li span , [riot-tag="app-section2"] navi ol li span { background-color: #a7b5c1; color: white; border-radius: .3em; padding: .1em .3em; margin: 0 .1em; font-size: 80%; }app , [riot-tag="app"] { display: block; text-align: center; } app &gt; header , [riot-tag="app"] &gt; header { padding: 8em 0; background: #8A97A1; color: white; text-shadow: 0 0 2px rgba(0,0,0,.5); } app &gt; header h1 , [riot-tag="app"] &gt; header h1 { margin: 0; font-size: 340%; } app &gt; header p , [riot-tag="app"] &gt; header p { margin: 0; } app section &gt; p , [riot-tag="app"] section &gt; p { line-height: 1.4em; padding: 0 .5em; } app section &gt; h2 , [riot-tag="app"] section &gt; h2 { margin: 3em 0 .5em; color: #8A97A1; } app section &gt; h3 , [riot-tag="app"] section &gt; h3 { margin: 3em 0 .5em; } app &gt; footer , [riot-tag="app"] &gt; footer { border-top: 1px solid #ccc; margin: 3em 0 0; padding: 2em 0; background: #f7f7f7; } app navi ul , [riot-tag="app"] navi ul { list-style: none; padding: .5em; } app navi ul li , [riot-tag="app"] navi ul li { display: inline-block; } app navi ul li:after , [riot-tag="app"] navi ul li:after { content: "-"; margin: 0 1em; } app navi ul li:last-child:after , [riot-tag="app"] navi ul li:last-child:after { content: none; } app navi a , [riot-tag="app"] navi a { } app a , [riot-tag="app"] a { color: #2887D7; text-decoration: none; } app .billboard , [riot-tag="app"] .billboard { background: #ffd700; color: #8A97A1; padding: 2em; } app .billboard &gt; h2 , [riot-tag="app"] .billboard &gt; h2 { margin: 1em .5em .5em; } app .billboard a , [riot-tag="app"] .billboard a { color: inherit; font-weight: bold; }highlight , [riot-tag="highlight"] { display: block; font-family: monospace; border-top: 1px solid #ddd; border-bottom: 1px solid #ddd; padding: 1em 8% !important; text-align: left; }my-dialog , [riot-tag="my-dialog"] { display: block; border: 1px solid #a7b5c1; border-radius: .3em; margin: 1em 3em; background: #a7b5c1; color: white; } my-dialog p , [riot-tag="my-dialog"] p { line-height: 1.2em; margin: 0; padding: .8em; font-size: 150%; } my-dialog footer , [riot-tag="my-dialog"] footer { font-size: 90%; color: #a7b5c1; padding: .8em; background: #fff; border-bottom-left-radius: .3em; border-bottom-right-radius: .3em; } my-dialog button , [riot-tag="my-dialog"] button { margin: 0 .2em }my-tag , [riot-tag="my-tag"] { display: block; border: 1px solid #a7b5c1; border-radius: .3em; margin: 1em 3em; background: #a7b5c1; color: white; } my-tag p , [riot-tag="my-tag"] p { line-height: 1.2em; margin: 0; padding: .8em; font-size: 150%; } my-tag footer , [riot-tag="my-tag"] footer { font-size: 90%; color: #a7b5c1; padding: .8em; background: #fff; border-bottom-left-radius: .3em; border-bottom-right-radius: .3em; }\n  </style>\n </head>\n <body>\n  <app>\n   <header>\n    <h1>\n     ikki\n    </h1>\n    <p>\n     ikki is not flux\n    </p>\n   </header>\n   <section class="billboard">\n    <h2>\n     deadly simple &amp; html-centric\n    </h2>\n    <p>\n     The extention toolkit for\n     <a href="https://muut.com/riotjs/">\n      Riot.js\n     </a>\n    </p>\n    <img src="demo/one-way.png"/>\n    <img src="demo/routing.png"/>\n   </section>\n   <section riot-tag="app-section1">\n    <h2>\n     pass a promise/generator, just like an object\n    </h2>\n    <h3>\n     1. objects\n    </h3>\n    <p>\n     At the first, see the traditional way to give the value.\n    </p>\n    <highlight class="hljs xml">\n     <span class="hljs-tag">\n      &lt;\n      <span class="hljs-title">\n       my-tag\n      </span>\n      <span class="hljs-attribute">\n       message\n      </span>\n      =\n      <span class="hljs-value">\n       "Hi!"\n      </span>\n      /&gt;\n     </span>\n     <br/>\n    </highlight>\n    <p>\n     Then, see the ikki\'s way. You can give the data as an object.\n     <br/>\n     Great, but boring? OK, go ahead.\n    </p>\n    <highlight class="hljs xml">\n     <span class="hljs-tag">\n      &lt;\n      <span class="hljs-title">\n       my-tag\n      </span>\n      <span class="hljs-attribute">\n       opts\n      </span>\n      =\n      <span class="hljs-value">\n       {\n      </span>\n      <span class="hljs-attribute">\n       object\n      </span>\n      } /&gt;\n     </span>\n     <br/>\n     <span class="hljs-tag">\n      &lt;\n      <span class="hljs-title">\n       script\n      </span>\n      &gt;\n     </span>\n     <br/>\n     <span class="cs">\n      <span class="hljs-keyword">\n       this\n      </span>\n      .\n      <span class="hljs-keyword">\n       object\n      </span>\n      = { message:\n      <span class="hljs-string">\n       \'Hi!\'\n      </span>\n      }\n     </span>\n     <br/>\n     <span class="cs">\n     </span>\n     <span class="hljs-tag">\n      &lt;/\n      <span class="hljs-title">\n       script\n      </span>\n      &gt;\n     </span>\n    </highlight>\n    <my-tag>\n     <p>\n      Hi!\n     </p>\n     <footer>\n      This is just an object.\n     </footer>\n    </my-tag>\n    <h3>\n     2. functions\n    </h3>\n    <p>\n     If you pass the function, the component will get the result of the function. It\'s useful when you want to handle the routing information or do something each time.\n    </p>\n    <highlight class="hljs xml">\n     <span class="hljs-tag">\n      &lt;\n      <span class="hljs-title">\n       my-tag\n      </span>\n      <span class="hljs-attribute">\n       opts\n      </span>\n      =\n      <span class="hljs-value">\n       {\n      </span>\n      <span class="hljs-attribute">\n       func\n      </span>\n      } /&gt;\n     </span>\n     <br/>\n     <span class="hljs-tag">\n      &lt;\n      <span class="hljs-title">\n       script\n      </span>\n      &gt;\n     </span>\n     <br/>\n     <span class="javascript">\n      <span class="hljs-keyword">\n       this\n      </span>\n      .func =\n      <span class="hljs-function">\n       <span class="hljs-keyword">\n        function\n       </span>\n       <span class="hljs-params">\n        (route)\n       </span>\n      </span>\n      {\n     </span>\n     <br/>\n     <span class="javascript">\n      <span class="hljs-keyword">\n       return\n      </span>\n      { message:\n      <span class="hljs-string">\n       "It\'s "\n      </span>\n      + now +\n      <span class="hljs-string">\n       "."\n      </span>\n      }\n     </span>\n     <br/>\n     <span class="javascript">\n      }\n     </span>\n     <br/>\n     <span class="javascript">\n     </span>\n     <span class="hljs-tag">\n      &lt;/\n      <span class="hljs-title">\n       script\n      </span>\n      &gt;\n     </span>\n    </highlight>\n    <my-tag>\n     <p>\n      It\'s 6:20pm.\n     </p>\n     <footer>\n      This is a function.\n     </footer>\n    </my-tag>\n    <h3>\n     3. promises\n    </h3>\n    <p>\n     We can give a promise to the tag. It\'ll make really easy to do any async process.\n    </p>\n    <highlight class="hljs xml">\n     <span class="hljs-tag">\n      &lt;\n      <span class="hljs-title">\n       my-tag\n      </span>\n      <span class="hljs-attribute">\n       opts\n      </span>\n      =\n      <span class="hljs-value">\n       {\n      </span>\n      <span class="hljs-attribute">\n       promise\n      </span>\n      } /&gt;\n     </span>\n     <br/>\n     <span class="hljs-tag">\n      &lt;\n      <span class="hljs-title">\n       script\n      </span>\n      &gt;\n     </span>\n     <br/>\n     <span class="javascript">\n      <span class="hljs-keyword">\n       this\n      </span>\n      .promise =\n      <span class="hljs-keyword">\n       new\n      </span>\n      <span class="hljs-built_in">\n       Promise\n      </span>\n      (\n      <span class="hljs-function">\n       <span class="hljs-keyword">\n        function\n       </span>\n       <span class="hljs-params">\n        (resolve, reject)\n       </span>\n      </span>\n      {\n     </span>\n     <br/>\n     <span class="javascript">\n      setTimeout(\n      <span class="hljs-function">\n       <span class="hljs-keyword">\n        function\n       </span>\n       <span class="hljs-params">\n        ()\n       </span>\n      </span>\n      {\n     </span>\n     <br/>\n     <span class="javascript">\n      resolve({ message:\n      <span class="hljs-string">\n       \'Hello!\'\n      </span>\n      })\n     </span>\n     <br/>\n     <span class="javascript">\n      },\n      <span class="hljs-number">\n       10000\n      </span>\n      )\n     </span>\n     <br/>\n     <span class="javascript">\n      })\n     </span>\n     <br/>\n     <span class="javascript">\n     </span>\n     <span class="hljs-tag">\n      &lt;/\n      <span class="hljs-title">\n       script\n      </span>\n      &gt;\n     </span>\n    </highlight>\n    <my-tag>\n     <p>\n      Well...\n     </p>\n     <footer>\n      Loading...\n     </footer>\n    </my-tag>\n    <h3>\n     4. generators\n    </h3>\n    <p>\n     The last stuff is the generator. Think it as serial promises.\n     <br/>\n     That\'s awesome!\n    </p>\n    <highlight class="hljs xml">\n     <span class="hljs-tag">\n      &lt;\n      <span class="hljs-title">\n       my-tag\n      </span>\n      <span class="hljs-attribute">\n       opts\n      </span>\n      =\n      <span class="hljs-value">\n       {\n      </span>\n      <span class="hljs-attribute">\n       generator\n      </span>\n      } /&gt;\n     </span>\n     <br/>\n     <span class="hljs-tag">\n      &lt;\n      <span class="hljs-title">\n       script\n      </span>\n      &gt;\n     </span>\n     <br/>\n     <span class="javascript">\n      <span class="hljs-keyword">\n       this\n      </span>\n      .generator =\n      <span class="hljs-function">\n       <span class="hljs-keyword">\n        function\n       </span>\n       *\n       <span class="hljs-params">\n        ()\n       </span>\n      </span>\n      {\n      <span class="hljs-keyword">\n       while\n      </span>\n      (\n      <span class="hljs-literal">\n       true\n      </span>\n      ) {\n     </span>\n     <br/>\n     <span class="javascript">\n      <span class="hljs-keyword">\n       yield\n      </span>\n      <span class="hljs-keyword">\n       new\n      </span>\n      <span class="hljs-built_in">\n       Promise\n      </span>\n      (\n      <span class="hljs-function">\n       <span class="hljs-keyword">\n        function\n       </span>\n       <span class="hljs-params">\n        (resolve, reject)\n       </span>\n      </span>\n      {\n     </span>\n     <br/>\n     <span class="javascript">\n      setTimeout(\n      <span class="hljs-function">\n       <span class="hljs-keyword">\n        function\n       </span>\n       <span class="hljs-params">\n        ()\n       </span>\n      </span>\n      {\n     </span>\n     <br/>\n     <span class="javascript">\n      resolve({ message: hello() })\n     </span>\n     <br/>\n     <span class="javascript">\n      },\n      <span class="hljs-number">\n       1000\n      </span>\n      )\n     </span>\n     <br/>\n     <span class="javascript">\n      })\n     </span>\n     <br/>\n     <span class="javascript">\n      }}\n     </span>\n     <br/>\n     <span class="javascript">\n     </span>\n     <span class="hljs-tag">\n      &lt;/\n      <span class="hljs-title">\n       script\n      </span>\n      &gt;\n     </span>\n    </highlight>\n    <my-tag>\n     <p>\n      Hello\n     </p>\n     <footer>\n      Generator is awesome!\n     </footer>\n    </my-tag>\n   </section>\n   <section riot-tag="app-section2">\n    <h2>\n     routings in html\n    </h2>\n    <p>\n     Nowaday, routing with the entire page is impractical.\n     <br/>\n     The routing is needed to be more frexible.\n     <br/>\n     You wanna change just the part of HTML instead of the entire page, doesn\'t you?\n     <br/>\n     Here is what you wanted to do.\n    </p>\n    <h3>\n     1. basic routings\n    </h3>\n    <highlight class="hljs xml">\n     <span class="hljs-tag">\n      &lt;\n      <span class="hljs-title">\n       router\n      </span>\n      &gt;\n     </span>\n     <br/>\n     <span class="hljs-tag">\n      &lt;\n      <span class="hljs-title">\n       route\n      </span>\n      <span class="hljs-attribute">\n       path\n      </span>\n      =\n      <span class="hljs-value">\n       "/"\n      </span>\n      &gt;\n     </span>\n     <span class="hljs-tag">\n      &lt;\n      <span class="hljs-title">\n       my-tag\n      </span>\n      <span class="hljs-attribute">\n       message\n      </span>\n      =\n      <span class="hljs-value">\n       "hello world"\n      </span>\n      /&gt;\n     </span>\n     <span class="hljs-tag">\n      &lt;/\n      <span class="hljs-title">\n       route\n      </span>\n      &gt;\n     </span>\n     <br/>\n     <span class="hljs-tag">\n      &lt;\n      <span class="hljs-title">\n       route\n      </span>\n      <span class="hljs-attribute">\n       path\n      </span>\n      =\n      <span class="hljs-value">\n       "lorem"\n      </span>\n      &gt;\n     </span>\n     <span class="hljs-tag">\n      &lt;\n      <span class="hljs-title">\n       my-tag\n      </span>\n      <span class="hljs-attribute">\n       message\n      </span>\n      =\n      <span class="hljs-value">\n       "Lorem Ipsum is..."\n      </span>\n      /&gt;\n     </span>\n     <span class="hljs-tag">\n      &lt;/\n      <span class="hljs-title">\n       route\n      </span>\n      &gt;\n     </span>\n     <br/>\n     <span class="hljs-tag">\n      &lt;\n      <span class="hljs-title">\n       route\n      </span>\n      <span class="hljs-attribute">\n       path\n      </span>\n      =\n      <span class="hljs-value">\n       "member/:person"\n      </span>\n      &gt;\n     </span>\n     <span class="hljs-tag">\n      &lt;\n      <span class="hljs-title">\n       my-tag\n      </span>\n      <span class="hljs-attribute">\n       message\n      </span>\n      =\n      <span class="hljs-value">\n       "$person"\n      </span>\n      /&gt;\n     </span>\n     <span class="hljs-tag">\n      &lt;/\n      <span class="hljs-title">\n       route\n      </span>\n      &gt;\n     </span>\n     <br/>\n     <span class="hljs-tag">\n      &lt;\n      <span class="hljs-title">\n       route\n      </span>\n      <span class="hljs-attribute">\n       path\n      </span>\n      =\n      <span class="hljs-value">\n       "merol"\n      </span>\n      <span class="hljs-attribute">\n       redirect\n      </span>\n      =\n      <span class="hljs-value">\n       "lorem"\n      </span>\n      /&gt;\n     </span>\n     <br/>\n     <span class="hljs-tag">\n      &lt;\n      <span class="hljs-title">\n       route\n      </span>\n      <span class="hljs-attribute">\n       path\n      </span>\n      =\n      <span class="hljs-value">\n       "*"\n      </span>\n      &gt;\n     </span>\n     <span class="hljs-tag">\n      &lt;\n      <span class="hljs-title">\n       my-tag\n      </span>\n      <span class="hljs-attribute">\n       message\n      </span>\n      =\n      <span class="hljs-value">\n       "not found."\n      </span>\n      /&gt;\n     </span>\n     <span class="hljs-tag">\n      &lt;/\n      <span class="hljs-title">\n       route\n      </span>\n      &gt;\n     </span>\n     <br/>\n     <span class="hljs-tag">\n      &lt;/\n      <span class="hljs-title">\n       router\n      </span>\n      &gt;\n     </span>\n     <br/>\n    </highlight>\n    <navi>\n     <ul>\n      <li>\n       <a href="#lorem">\n        #lorem\n       </a>\n      </li>\n      <li>\n       <a href="#member/Tom">\n        #member/Tom\n       </a>\n      </li>\n      <li>\n       <a href="#merol">\n        #merol\n       </a>\n      </li>\n      <li>\n       <a href="#not/found">\n        #not/found\n       </a>\n      </li>\n     </ul>\n    </navi>\n    <router>\n     <route path="/">\n      <section>\n       <my-tag desc="slash(/) matchs url without hash" message="hello world">\n        <p>\n         hello world\n        </p>\n        <footer>\n         slash(/) matchs url without hash\n        </footer>\n       </my-tag>\n      </section>\n     </route>\n     <route path="lorem">\n     </route>\n     <route path="member/:person">\n     </route>\n     <route path="merol" redirect="lorem">\n     </route>\n     <route path="*">\n     </route>\n    </router>\n    <h3>\n     2. pass the routing info to functions/generators\n    </h3>\n    <p>\n     Of cause, the routing info can be passed to functions/generators via the argument.\n    </p>\n    <highlight class="hljs xml">\n     <span class="hljs-tag">\n      &lt;\n      <span class="hljs-title">\n       router\n      </span>\n      &gt;\n     </span>\n     <br/>\n     <span class="hljs-tag">\n      &lt;\n      <span class="hljs-title">\n       route\n      </span>\n      <span class="hljs-attribute">\n       path\n      </span>\n      =\n      <span class="hljs-value">\n       "hour/:hour"\n      </span>\n      &gt;\n     </span>\n     <span class="hljs-tag">\n      &lt;\n      <span class="hljs-title">\n       my-tag\n      </span>\n      <span class="hljs-attribute">\n       opts\n      </span>\n      =\n      <span class="hljs-value">\n       {\n      </span>\n      <span class="hljs-attribute">\n       generator\n      </span>\n      } /&gt;\n     </span>\n     <span class="hljs-tag">\n      &lt;/\n      <span class="hljs-title">\n       route\n      </span>\n      &gt;\n     </span>\n     <br/>\n     <span class="hljs-tag">\n      &lt;/\n      <span class="hljs-title">\n       router\n      </span>\n      &gt;\n     </span>\n     <br/>\n     <span class="hljs-tag">\n      &lt;\n      <span class="hljs-title">\n       script\n      </span>\n      &gt;\n     </span>\n     <br/>\n     <span class="javascript">\n      <span class="hljs-keyword">\n       this\n      </span>\n      .generator =\n      <span class="hljs-function">\n       <span class="hljs-keyword">\n        function\n       </span>\n       *\n       <span class="hljs-params">\n        (route)\n       </span>\n      </span>\n      {\n     </span>\n     <br/>\n     <span class="javascript">\n      <span class="hljs-comment">\n       // route.path: hour/10\n      </span>\n     </span>\n     <br/>\n     <span class="javascript">\n      <span class="hljs-comment">\n       // route.query: {}\n      </span>\n     </span>\n     <br/>\n     <span class="javascript">\n      <span class="hljs-comment">\n       // route.param: { hour: 10 }\n      </span>\n     </span>\n     <br/>\n     <span class="javascript">\n      <span class="hljs-comment">\n       }\n      </span>\n     </span>\n     <br/>\n     <span class="javascript">\n      <span class="hljs-comment">\n      </span>\n     </span>\n     <span class="hljs-tag">\n      &lt;/\n      <span class="hljs-title">\n       script\n      </span>\n      &gt;\n     </span>\n    </highlight>\n    <p>\n     Click the links below to try it.\n    </p>\n    <navi>\n     <ol>\n      <li>\n       <a href="#hour/10">\n        #hour/10\n       </a>\n       <span>\n        Good morning\n       </span>\n       <span>\n        \xe3\x81\x8a\xe3\x81\xaf\xe3\x82\x88\xe3\x81\x86\n       </span>\n       <span>\n        \xe6\x97\xa9\xe4\xb8\x8a\xe5\xa5\xbd\n       </span>\n       <span>\n        Bonjour\n       </span>\n       <span>\n        Buon giorno\n       </span>\n      </li>\n      <li>\n       <a href="#hour/14">\n        #hour/14\n       </a>\n       <span>\n        Hello\n       </span>\n       <span>\n        \xe3\x81\x93\xe3\x82\x93\xe3\x81\xab\xe3\x81\xa1\xe3\x81\xaf\n       </span>\n       <span>\n        \xe4\xbd\xa0\xe5\xa5\xbd\n       </span>\n       <span>\n        Salut\n       </span>\n       <span>\n        Ciao\n       </span>\n      </li>\n      <li>\n       <a href="#hour/18">\n        #hour/18\n       </a>\n       <span>\n        Good evening\n       </span>\n       <span>\n        \xe3\x81\x93\xe3\x82\x93\xe3\x81\xb0\xe3\x82\x93\xe3\x81\xaf\n       </span>\n       <span>\n        \xe6\x99\xa9\xe4\xb8\x8a\xe5\xa5\xbd\n       </span>\n       <span>\n        Bonsoir\n       </span>\n       <span>\n        Buona sera\n       </span>\n      </li>\n     </ol>\n    </navi>\n    <router>\n     <route path="hour/:hour">\n     </route>\n     <route path="*">\n      <section>\n       <my-tag desc="..." message="Click the links above.">\n        <p>\n         Click the links above.\n        </p>\n        <footer>\n         ...\n        </footer>\n       </my-tag>\n      </section>\n     </route>\n    </router>\n   </section>\n   <section riot-tag="app-section3">\n    <h2>\n     listen to events on components\n    </h2>\n    <p>\n     In short, yield an array of listeners like this:\n    </p>\n    <highlight class="hljs javascript">\n     <span class="hljs-keyword">\n      var\n     </span>\n     evts = [{\n     <br/>\n     key:\n     <span class="hljs-string">\n      \'click\'\n     </span>\n     ,\n     <br/>\n     callback:\n     <span class="hljs-function">\n      <span class="hljs-keyword">\n       function\n      </span>\n      <span class="hljs-params">\n       (e)\n      </span>\n     </span>\n     {\n     <span class="hljs-comment">\n      /* do something cool */\n     </span>\n     }\n     <br/>\n     }]\n     <br/>\n     <span class="hljs-keyword">\n      yield\n     </span>\n     { listeners: evts }\n    </highlight>\n    <p>\n     Basically, ikki provide no way to communicate with component and controllers directly, for the sake of separation. But this `listeners` is only an exception.\n    </p>\n    <p>\n     If you\'re familier with deferred concept, you can resolve the promise inside the listener.\n    </p>\n    <highlight class="hljs javascript">\n     <span class="hljs-keyword">\n      var\n     </span>\n     deferred =\n     <span class="hljs-keyword">\n      new\n     </span>\n     Deferred()\n     <br/>\n     <span class="hljs-keyword">\n      var\n     </span>\n     evts = [{\n     <br/>\n     key:\n     <span class="hljs-string">\n      \'click\'\n     </span>\n     ,\n     <br/>\n     callback:\n     <span class="hljs-function">\n      <span class="hljs-keyword">\n       function\n      </span>\n      <span class="hljs-params">\n       (e)\n      </span>\n     </span>\n     { deferred.resolve({ message: hello() }) }\n     <br/>\n     }]\n     <br/>\n     <span class="hljs-keyword">\n      yield\n     </span>\n     { listeners: evts }\n     <br/>\n     <span class="hljs-keyword">\n      yield\n     </span>\n     deferred.promise\n    </highlight>\n    <my-dialog>\n     <p>\n      Click me!\n     </p>\n     <footer>\n      <button>\n       Next\n      </button>\n     </footer>\n    </my-dialog>\n   </section>\n   <section riot-tag="app-section4">\n    <h2>\n     making generators with helpers\n    </h2>\n    <p>\n     ikki has several built-in helpers. (named after Japanese historical cities\x08)\n    </p>\n    <p>\n     These helpers wrap generators and event subscriptions to handle them with ease.\n    </p>\n    <h3>\n     1. Kyoto\n    </h3>\n    <p>\n     <code>\n      Kyoto\n     </code>\n     takes event-driven approach. And you don\'t have to care about the generator which is relatively new in JavaScript.\n    </p>\n    <highlight class="hljs coffeescript">\n     <span class="hljs-reserved">\n      var\n     </span>\n     kyoto =\n     <span class="hljs-built_in">\n      require\n     </span>\n     (\n     <span class="hljs-string">\n      \'ikki/lib/kyoto.es\'\n     </span>\n     )\n     <br/>\n     <span class="hljs-reserved">\n      var\n     </span>\n     HELLO = [\n     <span class="hljs-string">\n      \'Hello\'\n     </span>\n     ,\n     <span class="hljs-string">\n      \'\xe3\x81\x93\xe3\x82\x93\xe3\x81\xab\xe3\x81\xa1\xe3\x81\xaf\'\n     </span>\n     ,\n     <span class="hljs-string">\n      \'\xe4\xbd\xa0\xe5\xa5\xbd\'\n     </span>\n     ,\n     <span class="hljs-string">\n      \'Salut\'\n     </span>\n     ,\n     <span class="hljs-string">\n      \'Hallo\'\n     </span>\n     ]\n     <br/>\n     <br/>\n     <span class="hljs-keyword">\n      this\n     </span>\n     .hello = kyoto(\n     <span class="hljs-reserved">\n      function\n     </span>\n     (push, path, query, param) {\n     <br/>\n     push({\n     <span class="hljs-attribute">\n      message\n     </span>\n     :\n     <span class="hljs-string">\n      \'Click me!\'\n     </span>\n     ,\n     <span class="hljs-attribute">\n      btns\n     </span>\n     : [\n     <span class="hljs-string">\n      \'Next\'\n     </span>\n     ] })\n     <br/>\n     }, {\n     <br/>\n     <span class="hljs-string">\n      \'click\'\n     </span>\n     :\n     <span class="hljs-function">\n      <span class="hljs-params">\n       (push, data)\n      </span>\n      =&gt;\n     </span>\n     {\n     <br/>\n     push({\n     <span class="hljs-attribute">\n      message\n     </span>\n     : HELLO[n = ++n % HELLO.length] +\n     <span class="hljs-string">\n      \'!\'\n     </span>\n     })\n     <br/>\n     }\n     <br/>\n     })\n    </highlight>\n    <my-dialog>\n     <p>\n      Click me!\n     </p>\n     <footer>\n      <button>\n       Next\n      </button>\n     </footer>\n    </my-dialog>\n    <h3>\n     2. Edo\n    </h3>\n    <p>\n     On the other hand,\n     <code>\n      edo\n     </code>\n     is the generator based flow-controler. If you need serial/branching interactions with user\'s input, this will be a perfect solution.\n    </p>\n    <highlight class="hljs javascript">\n     <span class="hljs-keyword">\n      var\n     </span>\n     edo =\n     <span class="hljs-built_in">\n      require\n     </span>\n     (\n     <span class="hljs-string">\n      \'ikki/lib/edo.es\'\n     </span>\n     )\n     <br/>\n     <br/>\n     <span class="hljs-keyword">\n      this\n     </span>\n     .dialog = edo(\n     <span class="hljs-string">\n      \'click\'\n     </span>\n     ,\n     <span class="hljs-function">\n      <span class="hljs-keyword">\n       function\n      </span>\n      *\n      <span class="hljs-title">\n       direction\n      </span>\n      <span class="hljs-params">\n       (path, query, param)\n      </span>\n     </span>\n     {\n     <br/>\n     <span class="hljs-keyword">\n      yield\n     </span>\n     { message:\n     <span class="hljs-string">\n      \'Good morning!\'\n     </span>\n     , btns: [\n     <span class="hljs-string">\n      \'Hi\'\n     </span>\n     ] }\n     <br/>\n     <span class="hljs-keyword">\n      let\n     </span>\n     fruit =\n     <span class="hljs-keyword">\n      yield\n     </span>\n     { message:\n     <span class="hljs-string">\n      \'Which do you like?\'\n     </span>\n     , btns: [\n     <span class="hljs-string">\n      \'apple\'\n     </span>\n     ,\n     <span class="hljs-string">\n      \'banana\'\n     </span>\n     ] }\n     <br/>\n     <span class="hljs-keyword">\n      yield\n     </span>\n     { message:\n     <span class="hljs-string">\n      "OK, I\'ll give you this "\n     </span>\n     + fruit +\n     <span class="hljs-string">\n      \'.\'\n     </span>\n     , btns: [\n     <span class="hljs-string">\n      \'Thanks\'\n     </span>\n     ] }\n     <br/>\n     <span class="hljs-keyword">\n      yield\n     </span>\n     { message:\n     <span class="hljs-string">\n      \'See you!\'\n     </span>\n     , btns: [\n     <span class="hljs-string">\n      \'Bye\'\n     </span>\n     ] }\n     <br/>\n     })\n    </highlight>\n    <my-dialog>\n     <p>\n      Good morning!\n     </p>\n     <footer>\n      <button>\n       Hi\n      </button>\n     </footer>\n    </my-dialog>\n   </section>\n   <footer>\n    <p>\n     <a href="https://github.com/cognitom/ikki">\n      GitHub\n     </a>\n    </p>\n   </footer>\n  </app>\n  <script src="//cdn.jsdelivr.net/highlight.js/8.5/highlight.min.js">\n  </script>\n  <script src="dist/riot-dev.js">\n  </script>\n  <script src="dist/ikki.js">\n  </script>\n  <script src="demo/app.js">\n  </script>\n  <script>\n   riot.mount(\'app\')\n  </script>\n </body>\n</html>'b'<!DOCTYPE html>\n<html xmlns="http://www.w3.org/1999/xhtml">\n <head>\n  <meta charset="utf-8"/>\n  <title>\n   ikki - an extention toolkit for Riot.js\n  </title>\n  <meta content="width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no" name="viewport"/>\n  <link href="//cdn.jsdelivr.net/normalize/3.0.3/normalize.css" rel="stylesheet"/>\n  <link href="//cdn.jsdelivr.net/highlight.js/8.5/styles/github.min.css" rel="stylesheet"/>\n  <style>\n   app-section2 navi ol , [riot-tag="app-section2"] navi ol { border: 1px solid #a7b5c1; border-radius: .3em; margin: 1em 3em; padding: 0; color: #a7b5c1; } app-section2 navi ol li , [riot-tag="app-section2"] navi ol li { display: block; border-top: 1px solid #a7b5c1; padding: .2em 0 .2em 1em; text-align: left; overflow: hidden; white-space: nowrap; } app-section2 navi ol li:first-child , [riot-tag="app-section2"] navi ol li:first-child { border-top: none; } app-section2 navi ol li a , [riot-tag="app-section2"] navi ol li a { margin-right: .2em; padding-right: .4em; border-right: 1px dotted #a7b5c1; } app-section2 navi ol li span , [riot-tag="app-section2"] navi ol li span { background-color: #a7b5c1; color: white; border-radius: .3em; padding: .1em .3em; margin: 0 .1em; font-size: 80%; }app , [riot-tag="app"] { display: block; text-align: center; } app &gt; header , [riot-tag="app"] &gt; header { padding: 8em 0; background: #8A97A1; color: white; text-shadow: 0 0 2px rgba(0,0,0,.5); } app &gt; header h1 , [riot-tag="app"] &gt; header h1 { margin: 0; font-size: 340%; } app &gt; header p , [riot-tag="app"] &gt; header p { margin: 0; } app section &gt; p , [riot-tag="app"] section &gt; p { line-height: 1.4em; padding: 0 .5em; } app section &gt; h2 , [riot-tag="app"] section &gt; h2 { margin: 3em 0 .5em; color: #8A97A1; } app section &gt; h3 , [riot-tag="app"] section &gt; h3 { margin: 3em 0 .5em; } app &gt; footer , [riot-tag="app"] &gt; footer { border-top: 1px solid #ccc; margin: 3em 0 0; padding: 2em 0; background: #f7f7f7; } app navi ul , [riot-tag="app"] navi ul { list-style: none; padding: .5em; } app navi ul li , [riot-tag="app"] navi ul li { display: inline-block; } app navi ul li:after , [riot-tag="app"] navi ul li:after { content: "-"; margin: 0 1em; } app navi ul li:last-child:after , [riot-tag="app"] navi ul li:last-child:after { content: none; } app navi a , [riot-tag="app"] navi a { } app a , [riot-tag="app"] a { color: #2887D7; text-decoration: none; } app .billboard , [riot-tag="app"] .billboard { background: #ffd700; color: #8A97A1; padding: 2em; } app .billboard &gt; h2 , [riot-tag="app"] .billboard &gt; h2 { margin: 1em .5em .5em; } app .billboard a , [riot-tag="app"] .billboard a { color: inherit; font-weight: bold; }highlight , [riot-tag="highlight"] { display: block; font-family: monospace; border-top: 1px solid #ddd; border-bottom: 1px solid #ddd; padding: 1em 8% !important; text-align: left; }my-dialog , [riot-tag="my-dialog"] { display: block; border: 1px solid #a7b5c1; border-radius: .3em; margin: 1em 3em; background: #a7b5c1; color: white; } my-dialog p , [riot-tag="my-dialog"] p { line-height: 1.2em; margin: 0; padding: .8em; font-size: 150%; } my-dialog footer , [riot-tag="my-dialog"] footer { font-size: 90%; color: #a7b5c1; padding: .8em; background: #fff; border-bottom-left-radius: .3em; border-bottom-right-radius: .3em; } my-dialog button , [riot-tag="my-dialog"] button { margin: 0 .2em }my-tag , [riot-tag="my-tag"] { display: block; border: 1px solid #a7b5c1; border-radius: .3em; margin: 1em 3em; background: #a7b5c1; color: white; } my-tag p , [riot-tag="my-tag"] p { line-height: 1.2em; margin: 0; padding: .8em; font-size: 150%; } my-tag footer , [riot-tag="my-tag"] footer { font-size: 90%; color: #a7b5c1; padding: .8em; background: #fff; border-bottom-left-radius: .3em; border-bottom-right-radius: .3em; }\n  </style>\n </head>\n <body>\n  <app>\n   <header>\n    <h1>\n     ikki\n    </h1>\n    <p>\n     ikki is not flux\n    </p>\n   </header>\n   <section class="billboard">\n    <h2>\n     deadly simple &amp; html-centric\n    </h2>\n    <p>\n     The extention toolkit for\n     <a href="https://muut.com/riotjs/">\n      Riot.js\n     </a>\n    </p>\n    <img src="demo/one-way.png"/>\n    <img src="demo/routing.png"/>\n   </section>\n   <section riot-tag="app-section1">\n    <h2>\n     pass a promise/generator, just like an object\n    </h2>\n    <h3>\n     1. objects\n    </h3>\n    <p>\n     At the first, see the traditional way to give the value.\n    </p>\n    <highlight class="hljs xml">\n     <span class="hljs-tag">\n      &lt;\n      <span class="hljs-title">\n       my-tag\n      </span>\n      <span class="hljs-attribute">\n       message\n      </span>\n      =\n      <span class="hljs-value">\n       "Hi!"\n      </span>\n      /&gt;\n     </span>\n     <br/>\n    </highlight>\n    <p>\n     Then, see the ikki\'s way. You can give the data as an object.\n     <br/>\n     Great, but boring? OK, go ahead.\n    </p>\n    <highlight class="hljs xml">\n     <span class="hljs-tag">\n      &lt;\n      <span class="hljs-title">\n       my-tag\n      </span>\n      <span class="hljs-attribute">\n       opts\n      </span>\n      =\n      <span class="hljs-value">\n       {\n      </span>\n      <span class="hljs-attribute">\n       object\n      </span>\n      } /&gt;\n     </span>\n     <br/>\n     <span class="hljs-tag">\n      &lt;\n      <span class="hljs-title">\n       script\n      </span>\n      &gt;\n     </span>\n     <br/>\n     <span class="cs">\n      <span class="hljs-keyword">\n       this\n      </span>\n      .\n      <span class="hljs-keyword">\n       object\n      </span>\n      = { message:\n      <span class="hljs-string">\n       \'Hi!\'\n      </span>\n      }\n     </span>\n     <br/>\n     <span class="cs">\n     </span>\n     <span class="hljs-tag">\n      &lt;/\n      <span class="hljs-title">\n       script\n      </span>\n      &gt;\n     </span>\n    </highlight>\n    <my-tag>\n     <p>\n      Hi!\n     </p>\n     <footer>\n      This is just an object.\n     </footer>\n    </my-tag>\n    <h3>\n     2. functions\n    </h3>\n    <p>\n     If you pass the function, the component will get the result of the function. It\'s useful when you want to handle the routing information or do something each time.\n    </p>\n    <highlight class="hljs xml">\n     <span class="hljs-tag">\n      &lt;\n      <span class="hljs-title">\n       my-tag\n      </span>\n      <span class="hljs-attribute">\n       opts\n      </span>\n      =\n      <span class="hljs-value">\n       {\n      </span>\n      <span class="hljs-attribute">\n       func\n      </span>\n      } /&gt;\n     </span>\n     <br/>\n     <span class="hljs-tag">\n      &lt;\n      <span class="hljs-title">\n       script\n      </span>\n      &gt;\n     </span>\n     <br/>\n     <span class="javascript">\n      <span class="hljs-keyword">\n       this\n      </span>\n      .func =\n      <span class="hljs-function">\n       <span class="hljs-keyword">\n        function\n       </span>\n       <span class="hljs-params">\n        (route)\n       </span>\n      </span>\n      {\n     </span>\n     <br/>\n     <span class="javascript">\n      <span class="hljs-keyword">\n       return\n      </span>\n      { message:\n      <span class="hljs-string">\n       "It\'s "\n      </span>\n      + now +\n      <span class="hljs-string">\n       "."\n      </span>\n      }\n     </span>\n     <br/>\n     <span class="javascript">\n      }\n     </span>\n     <br/>\n     <span class="javascript">\n     </span>\n     <span class="hljs-tag">\n      &lt;/\n      <span class="hljs-title">\n       script\n      </span>\n      &gt;\n     </span>\n    </highlight>\n    <my-tag>\n     <p>\n      It\'s 0:25am.\n     </p>\n     <footer>\n      This is a function.\n     </footer>\n    </my-tag>\n    <h3>\n     3. promises\n    </h3>\n    <p>\n     We can give a promise to the tag. It\'ll make really easy to do any async process.\n    </p>\n    <highlight class="hljs xml">\n     <span class="hljs-tag">\n      &lt;\n      <span class="hljs-title">\n       my-tag\n      </span>\n      <span class="hljs-attribute">\n       opts\n      </span>\n      =\n      <span class="hljs-value">\n       {\n      </span>\n      <span class="hljs-attribute">\n       promise\n      </span>\n      } /&gt;\n     </span>\n     <br/>\n     <span class="hljs-tag">\n      &lt;\n      <span class="hljs-title">\n       script\n      </span>\n      &gt;\n     </span>\n     <br/>\n     <span class="javascript">\n      <span class="hljs-keyword">\n       this\n      </span>\n      .promise =\n      <span class="hljs-keyword">\n       new\n      </span>\n      <span class="hljs-built_in">\n       Promise\n      </span>\n      (\n      <span class="hljs-function">\n       <span class="hljs-keyword">\n        function\n       </span>\n       <span class="hljs-params">\n        (resolve, reject)\n       </span>\n      </span>\n      {\n     </span>\n     <br/>\n     <span class="javascript">\n      setTimeout(\n      <span class="hljs-function">\n       <span class="hljs-keyword">\n        function\n       </span>\n       <span class="hljs-params">\n        ()\n       </span>\n      </span>\n      {\n     </span>\n     <br/>\n     <span class="javascript">\n      resolve({ message:\n      <span class="hljs-string">\n       \'Hello!\'\n      </span>\n      })\n     </span>\n     <br/>\n     <span class="javascript">\n      },\n      <span class="hljs-number">\n       10000\n      </span>\n      )\n     </span>\n     <br/>\n     <span class="javascript">\n      })\n     </span>\n     <br/>\n     <span class="javascript">\n     </span>\n     <span class="hljs-tag">\n      &lt;/\n      <span class="hljs-title">\n       script\n      </span>\n      &gt;\n     </span>\n    </highlight>\n    <my-tag>\n     <p>\n      Well...\n     </p>\n     <footer>\n      Loading...\n     </footer>\n    </my-tag>\n    <h3>\n     4. generators\n    </h3>\n    <p>\n     The last stuff is the generator. Think it as serial promises.\n     <br/>\n     That\'s awesome!\n    </p>\n    <highlight class="hljs xml">\n     <span class="hljs-tag">\n      &lt;\n      <span class="hljs-title">\n       my-tag\n      </span>\n      <span class="hljs-attribute">\n       opts\n      </span>\n      =\n      <span class="hljs-value">\n       {\n      </span>\n      <span class="hljs-attribute">\n       generator\n      </span>\n      } /&gt;\n     </span>\n     <br/>\n     <span class="hljs-tag">\n      &lt;\n      <span class="hljs-title">\n       script\n      </span>\n      &gt;\n     </span>\n     <br/>\n     <span class="javascript">\n      <span class="hljs-keyword">\n       this\n      </span>\n      .generator =\n      <span class="hljs-function">\n       <span class="hljs-keyword">\n        function\n       </span>\n       *\n       <span class="hljs-params">\n        ()\n       </span>\n      </span>\n      {\n      <span class="hljs-keyword">\n       while\n      </span>\n      (\n      <span class="hljs-literal">\n       true\n      </span>\n      ) {\n     </span>\n     <br/>\n     <span class="javascript">\n      <span class="hljs-keyword">\n       yield\n      </span>\n      <span class="hljs-keyword">\n       new\n      </span>\n      <span class="hljs-built_in">\n       Promise\n      </span>\n      (\n      <span class="hljs-function">\n       <span class="hljs-keyword">\n        function\n       </span>\n       <span class="hljs-params">\n        (resolve, reject)\n       </span>\n      </span>\n      {\n     </span>\n     <br/>\n     <span class="javascript">\n      setTimeout(\n      <span class="hljs-function">\n       <span class="hljs-keyword">\n        function\n       </span>\n       <span class="hljs-params">\n        ()\n       </span>\n      </span>\n      {\n     </span>\n     <br/>\n     <span class="javascript">\n      resolve({ message: hello() })\n     </span>\n     <br/>\n     <span class="javascript">\n      },\n      <span class="hljs-number">\n       1000\n      </span>\n      )\n     </span>\n     <br/>\n     <span class="javascript">\n      })\n     </span>\n     <br/>\n     <span class="javascript">\n      }}\n     </span>\n     <br/>\n     <span class="javascript">\n     </span>\n     <span class="hljs-tag">\n      &lt;/\n      <span class="hljs-title">\n       script\n      </span>\n      &gt;\n     </span>\n    </highlight>\n    <my-tag>\n     <p>\n      \xe4\xbd\xa0\xe5\xa5\xbd\n     </p>\n     <footer>\n      Generator is awesome!\n     </footer>\n    </my-tag>\n   </section>\n   <section riot-tag="app-section2">\n    <h2>\n     routings in html\n    </h2>\n    <p>\n     Nowaday, routing with the entire page is impractical.\n     <br/>\n     The routing is needed to be more frexible.\n     <br/>\n     You wanna change just the part of HTML instead of the entire page, doesn\'t you?\n     <br/>\n     Here is what you wanted to do.\n    </p>\n    <h3>\n     1. basic routings\n    </h3>\n    <highlight class="hljs xml">\n     <span class="hljs-tag">\n      &lt;\n      <span class="hljs-title">\n       router\n      </span>\n      &gt;\n     </span>\n     <br/>\n     <span class="hljs-tag">\n      &lt;\n      <span class="hljs-title">\n       route\n      </span>\n      <span class="hljs-attribute">\n       path\n      </span>\n      =\n      <span class="hljs-value">\n       "/"\n      </span>\n      &gt;\n     </span>\n     <span class="hljs-tag">\n      &lt;\n      <span class="hljs-title">\n       my-tag\n      </span>\n      <span class="hljs-attribute">\n       message\n      </span>\n      =\n      <span class="hljs-value">\n       "hello world"\n      </span>\n      /&gt;\n     </span>\n     <span class="hljs-tag">\n      &lt;/\n      <span class="hljs-title">\n       route\n      </span>\n      &gt;\n     </span>\n     <br/>\n     <span class="hljs-tag">\n      &lt;\n      <span class="hljs-title">\n       route\n      </span>\n      <span class="hljs-attribute">\n       path\n      </span>\n      =\n      <span class="hljs-value">\n       "lorem"\n      </span>\n      &gt;\n     </span>\n     <span class="hljs-tag">\n      &lt;\n      <span class="hljs-title">\n       my-tag\n      </span>\n      <span class="hljs-attribute">\n       message\n      </span>\n      =\n      <span class="hljs-value">\n       "Lorem Ipsum is..."\n      </span>\n      /&gt;\n     </span>\n     <span class="hljs-tag">\n      &lt;/\n      <span class="hljs-title">\n       route\n      </span>\n      &gt;\n     </span>\n     <br/>\n     <span class="hljs-tag">\n      &lt;\n      <span class="hljs-title">\n       route\n      </span>\n      <span class="hljs-attribute">\n       path\n      </span>\n      =\n      <span class="hljs-value">\n       "member/:person"\n      </span>\n      &gt;\n     </span>\n     <span class="hljs-tag">\n      &lt;\n      <span class="hljs-title">\n       my-tag\n      </span>\n      <span class="hljs-attribute">\n       message\n      </span>\n      =\n      <span class="hljs-value">\n       "$person"\n      </span>\n      /&gt;\n     </span>\n     <span class="hljs-tag">\n      &lt;/\n      <span class="hljs-title">\n       route\n      </span>\n      &gt;\n     </span>\n     <br/>\n     <span class="hljs-tag">\n      &lt;\n      <span class="hljs-title">\n       route\n      </span>\n      <span class="hljs-attribute">\n       path\n      </span>\n      =\n      <span class="hljs-value">\n       "merol"\n      </span>\n      <span class="hljs-attribute">\n       redirect\n      </span>\n      =\n      <span class="hljs-value">\n       "lorem"\n      </span>\n      /&gt;\n     </span>\n     <br/>\n     <span class="hljs-tag">\n      &lt;\n      <span class="hljs-title">\n       route\n      </span>\n      <span class="hljs-attribute">\n       path\n      </span>\n      =\n      <span class="hljs-value">\n       "*"\n      </span>\n      &gt;\n     </span>\n     <span class="hljs-tag">\n      &lt;\n      <span class="hljs-title">\n       my-tag\n      </span>\n      <span class="hljs-attribute">\n       message\n      </span>\n      =\n      <span class="hljs-value">\n       "not found."\n      </span>\n      /&gt;\n     </span>\n     <span class="hljs-tag">\n      &lt;/\n      <span class="hljs-title">\n       route\n      </span>\n      &gt;\n     </span>\n     <br/>\n     <span class="hljs-tag">\n      &lt;/\n      <span class="hljs-title">\n       router\n      </span>\n      &gt;\n     </span>\n     <br/>\n    </highlight>\n    <navi>\n     <ul>\n      <li>\n       <a href="#lorem">\n        #lorem\n       </a>\n      </li>\n      <li>\n       <a href="#member/Tom">\n        #member/Tom\n       </a>\n      </li>\n      <li>\n       <a href="#merol">\n        #merol\n       </a>\n      </li>\n      <li>\n       <a href="#not/found">\n        #not/found\n       </a>\n      </li>\n     </ul>\n    </navi>\n    <router>\n     <route path="/">\n      <section>\n       <my-tag desc="slash(/) matchs url without hash" message="hello world">\n        <p>\n         hello world\n        </p>\n        <footer>\n         slash(/) matchs url without hash\n        </footer>\n       </my-tag>\n      </section>\n     </route>\n     <route path="lorem">\n     </route>\n     <route path="member/:person">\n     </route>\n     <route path="merol" redirect="lorem">\n     </route>\n     <route path="*">\n     </route>\n    </router>\n    <h3>\n     2. pass the routing info to functions/generators\n    </h3>\n    <p>\n     Of cause, the routing info can be passed to functions/generators via the argument.\n    </p>\n    <highlight class="hljs xml">\n     <span class="hljs-tag">\n      &lt;\n      <span class="hljs-title">\n       router\n      </span>\n      &gt;\n     </span>\n     <br/>\n     <span class="hljs-tag">\n      &lt;\n      <span class="hljs-title">\n       route\n      </span>\n      <span class="hljs-attribute">\n       path\n      </span>\n      =\n      <span class="hljs-value">\n       "hour/:hour"\n      </span>\n      &gt;\n     </span>\n     <span class="hljs-tag">\n      &lt;\n      <span class="hljs-title">\n       my-tag\n      </span>\n      <span class="hljs-attribute">\n       opts\n      </span>\n      =\n      <span class="hljs-value">\n       {\n      </span>\n      <span class="hljs-attribute">\n       generator\n      </span>\n      } /&gt;\n     </span>\n     <span class="hljs-tag">\n      &lt;/\n      <span class="hljs-title">\n       route\n      </span>\n      &gt;\n     </span>\n     <br/>\n     <span class="hljs-tag">\n      &lt;/\n      <span class="hljs-title">\n       router\n      </span>\n      &gt;\n     </span>\n     <br/>\n     <span class="hljs-tag">\n      &lt;\n      <span class="hljs-title">\n       script\n      </span>\n      &gt;\n     </span>\n     <br/>\n     <span class="javascript">\n      <span class="hljs-keyword">\n       this\n      </span>\n      .generator =\n      <span class="hljs-function">\n       <span class="hljs-keyword">\n        function\n       </span>\n       *\n       <span class="hljs-params">\n        (route)\n       </span>\n      </span>\n      {\n     </span>\n     <br/>\n     <span class="javascript">\n      <span class="hljs-comment">\n       // route.path: hour/10\n      </span>\n     </span>\n     <br/>\n     <span class="javascript">\n      <span class="hljs-comment">\n       // route.query: {}\n      </span>\n     </span>\n     <br/>\n     <span class="javascript">\n      <span class="hljs-comment">\n       // route.param: { hour: 10 }\n      </span>\n     </span>\n     <br/>\n     <span class="javascript">\n      <span class="hljs-comment">\n       }\n      </span>\n     </span>\n     <br/>\n     <span class="javascript">\n      <span class="hljs-comment">\n      </span>\n     </span>\n     <span class="hljs-tag">\n      &lt;/\n      <span class="hljs-title">\n       script\n      </span>\n      &gt;\n     </span>\n    </highlight>\n    <p>\n     Click the links below to try it.\n    </p>\n    <navi>\n     <ol>\n      <li>\n       <a href="#hour/10">\n        #hour/10\n       </a>\n       <span>\n        Good morning\n       </span>\n       <span>\n        \xe3\x81\x8a\xe3\x81\xaf\xe3\x82\x88\xe3\x81\x86\n       </span>\n       <span>\n        \xe6\x97\xa9\xe4\xb8\x8a\xe5\xa5\xbd\n       </span>\n       <span>\n        Bonjour\n       </span>\n       <span>\n        Buon giorno\n       </span>\n      </li>\n      <li>\n       <a href="#hour/14">\n        #hour/14\n       </a>\n       <span>\n        Hello\n       </span>\n       <span>\n        \xe3\x81\x93\xe3\x82\x93\xe3\x81\xab\xe3\x81\xa1\xe3\x81\xaf\n       </span>\n       <span>\n        \xe4\xbd\xa0\xe5\xa5\xbd\n       </span>\n       <span>\n        Salut\n       </span>\n       <span>\n        Ciao\n       </span>\n      </li>\n      <li>\n       <a href="#hour/18">\n        #hour/18\n       </a>\n       <span>\n        Good evening\n       </span>\n       <span>\n        \xe3\x81\x93\xe3\x82\x93\xe3\x81\xb0\xe3\x82\x93\xe3\x81\xaf\n       </span>\n       <span>\n        \xe6\x99\xa9\xe4\xb8\x8a\xe5\xa5\xbd\n       </span>\n       <span>\n        Bonsoir\n       </span>\n       <span>\n        Buona sera\n       </span>\n      </li>\n     </ol>\n    </navi>\n    <router>\n     <route path="hour/:hour">\n     </route>\n     <route path="*">\n      <section>\n       <my-tag desc="..." message="Click the links above.">\n        <p>\n         Click the links above.\n        </p>\n        <footer>\n         ...\n        </footer>\n       </my-tag>\n      </section>\n     </route>\n    </router>\n   </section>\n   <section riot-tag="app-section3">\n    <h2>\n     listen to events on components\n    </h2>\n    <p>\n     In short, yield an array of listeners like this:\n    </p>\n    <highlight class="hljs javascript">\n     <span class="hljs-keyword">\n      var\n     </span>\n     evts = [{\n     <br/>\n     key:\n     <span class="hljs-string">\n      \'click\'\n     </span>\n     ,\n     <br/>\n     callback:\n     <span class="hljs-function">\n      <span class="hljs-keyword">\n       function\n      </span>\n      <span class="hljs-params">\n       (e)\n      </span>\n     </span>\n     {\n     <span class="hljs-comment">\n      /* do something cool */\n     </span>\n     }\n     <br/>\n     }]\n     <br/>\n     <span class="hljs-keyword">\n      yield\n     </span>\n     { listeners: evts }\n    </highlight>\n    <p>\n     Basically, ikki provide no way to communicate with component and controllers directly, for the sake of separation. But this `listeners` is only an exception.\n    </p>\n    <p>\n     If you\'re familier with deferred concept, you can resolve the promise inside the listener.\n    </p>\n    <highlight class="hljs javascript">\n     <span class="hljs-keyword">\n      var\n     </span>\n     deferred =\n     <span class="hljs-keyword">\n      new\n     </span>\n     Deferred()\n     <br/>\n     <span class="hljs-keyword">\n      var\n     </span>\n     evts = [{\n     <br/>\n     key:\n     <span class="hljs-string">\n      \'click\'\n     </span>\n     ,\n     <br/>\n     callback:\n     <span class="hljs-function">\n      <span class="hljs-keyword">\n       function\n      </span>\n      <span class="hljs-params">\n       (e)\n      </span>\n     </span>\n     { deferred.resolve({ message: hello() }) }\n     <br/>\n     }]\n     <br/>\n     <span class="hljs-keyword">\n      yield\n     </span>\n     { listeners: evts }\n     <br/>\n     <span class="hljs-keyword">\n      yield\n     </span>\n     deferred.promise\n    </highlight>\n    <my-dialog>\n     <p>\n      Click me!\n     </p>\n     <footer>\n      <button>\n       Next\n      </button>\n     </footer>\n    </my-dialog>\n   </section>\n   <section riot-tag="app-section4">\n    <h2>\n     making generators with helpers\n    </h2>\n    <p>\n     ikki has several built-in helpers. (named after Japanese historical cities\x08)\n    </p>\n    <p>\n     These helpers wrap generators and event subscriptions to handle them with ease.\n    </p>\n    <h3>\n     1. Kyoto\n    </h3>\n    <p>\n     <code>\n      Kyoto\n     </code>\n     takes event-driven approach. And you don\'t have to care about the generator which is relatively new in JavaScript.\n    </p>\n    <highlight class="hljs coffeescript">\n     <span class="hljs-reserved">\n      var\n     </span>\n     kyoto =\n     <span class="hljs-built_in">\n      require\n     </span>\n     (\n     <span class="hljs-string">\n      \'ikki/lib/kyoto.es\'\n     </span>\n     )\n     <br/>\n     <span class="hljs-reserved">\n      var\n     </span>\n     HELLO = [\n     <span class="hljs-string">\n      \'Hello\'\n     </span>\n     ,\n     <span class="hljs-string">\n      \'\xe3\x81\x93\xe3\x82\x93\xe3\x81\xab\xe3\x81\xa1\xe3\x81\xaf\'\n     </span>\n     ,\n     <span class="hljs-string">\n      \'\xe4\xbd\xa0\xe5\xa5\xbd\'\n     </span>\n     ,\n     <span class="hljs-string">\n      \'Salut\'\n     </span>\n     ,\n     <span class="hljs-string">\n      \'Hallo\'\n     </span>\n     ]\n     <br/>\n     <br/>\n     <span class="hljs-keyword">\n      this\n     </span>\n     .hello = kyoto(\n     <span class="hljs-reserved">\n      function\n     </span>\n     (push, path, query, param) {\n     <br/>\n     push({\n     <span class="hljs-attribute">\n      message\n     </span>\n     :\n     <span class="hljs-string">\n      \'Click me!\'\n     </span>\n     ,\n     <span class="hljs-attribute">\n      btns\n     </span>\n     : [\n     <span class="hljs-string">\n      \'Next\'\n     </span>\n     ] })\n     <br/>\n     }, {\n     <br/>\n     <span class="hljs-string">\n      \'click\'\n     </span>\n     :\n     <span class="hljs-function">\n      <span class="hljs-params">\n       (push, data)\n      </span>\n      =&gt;\n     </span>\n     {\n     <br/>\n     push({\n     <span class="hljs-attribute">\n      message\n     </span>\n     : HELLO[n = ++n % HELLO.length] +\n     <span class="hljs-string">\n      \'!\'\n     </span>\n     })\n     <br/>\n     }\n     <br/>\n     })\n    </highlight>\n    <my-dialog>\n     <p>\n      Click me!\n     </p>\n     <footer>\n      <button>\n       Next\n      </button>\n     </footer>\n    </my-dialog>\n    <h3>\n     2. Edo\n    </h3>\n    <p>\n     On the other hand,\n     <code>\n      edo\n     </code>\n     is the generator based flow-controler. If you need serial/branching interactions with user\'s input, this will be a perfect solution.\n    </p>\n    <highlight class="hljs javascript">\n     <span class="hljs-keyword">\n      var\n     </span>\n     edo =\n     <span class="hljs-built_in">\n      require\n     </span>\n     (\n     <span class="hljs-string">\n      \'ikki/lib/edo.es\'\n     </span>\n     )\n     <br/>\n     <br/>\n     <span class="hljs-keyword">\n      this\n     </span>\n     .dialog = edo(\n     <span class="hljs-string">\n      \'click\'\n     </span>\n     ,\n     <span class="hljs-function">\n      <span class="hljs-keyword">\n       function\n      </span>\n      *\n      <span class="hljs-title">\n       direction\n      </span>\n      <span class="hljs-params">\n       (path, query, param)\n      </span>\n     </span>\n     {\n     <br/>\n     <span class="hljs-keyword">\n      yield\n     </span>\n     { message:\n     <span class="hljs-string">\n      \'Good morning!\'\n     </span>\n     , btns: [\n     <span class="hljs-string">\n      \'Hi\'\n     </span>\n     ] }\n     <br/>\n     <span class="hljs-keyword">\n      let\n     </span>\n     fruit =\n     <span class="hljs-keyword">\n      yield\n     </span>\n     { message:\n     <span class="hljs-string">\n      \'Which do you like?\'\n     </span>\n     , btns: [\n     <span class="hljs-string">\n      \'apple\'\n     </span>\n     ,\n     <span class="hljs-string">\n      \'banana\'\n     </span>\n     ] }\n     <br/>\n     <span class="hljs-keyword">\n      yield\n     </span>\n     { message:\n     <span class="hljs-string">\n      "OK, I\'ll give you this "\n     </span>\n     + fruit +\n     <span class="hljs-string">\n      \'.\'\n     </span>\n     , btns: [\n     <span class="hljs-string">\n      \'Thanks\'\n     </span>\n     ] }\n     <br/>\n     <span class="hljs-keyword">\n      yield\n     </span>\n     { message:\n     <span class="hljs-string">\n      \'See you!\'\n     </span>\n     , btns: [\n     <span class="hljs-string">\n      \'Bye\'\n     </span>\n     ] }\n     <br/>\n     })\n    </highlight>\n    <my-dialog>\n     <p>\n      Good morning!\n     </p>\n     <footer>\n      <button>\n       Hi\n      </button>\n     </footer>\n    </my-dialog>\n   </section>\n   <footer>\n    <p>\n     <a href="https://github.com/cognitom/ikki">\n      GitHub\n     </a>\n    </p>\n   </footer>\n  </app>\n  <script src="//cdn.jsdelivr.net/highlight.js/8.5/highlight.min.js">\n  </script>\n  <script src="dist/riot-dev.js">\n  </script>\n  <script src="dist/ikki.js">\n  </script>\n  <script src="demo/app.js">\n  </script>\n  <script>\n   riot.mount(\'app\')\n  </script>\n </body>\n</html>'