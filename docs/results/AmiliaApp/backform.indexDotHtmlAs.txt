b'<html lang="en">\n <head>\n  <title>\n   Backform.js - A Model-View approach to HTML forms with Backbone.js\n  </title>\n  <meta charset="utf-8"/>\n  <meta content="IE=edge" http-equiv="X-UA-Compatible"/>\n  <link href="favicon.ico" rel="shortcut icon" type="image/x-icon"/>\n  <script src="3rd/jquery.min.js" type="text/javascript">\n  </script>\n  <script src="3rd/bootstrap.min.js" type="text/javascript">\n  </script>\n  <link charset="utf-8" href="3rd/bootstrap.min.css" rel="stylesheet" type="text/css"/>\n  <script src="3rd/bootstrap-datepicker.js" type="text/javascript">\n  </script>\n  <link charset="utf-8" href="3rd/bootstrap-datepicker.css" rel="stylesheet" type="text/css"/>\n  <script src="3rd/underscore.js" type="text/javascript">\n  </script>\n  <script src="3rd/backbone.js" type="text/javascript">\n  </script>\n  <script src="src/backform.js" type="text/javascript">\n  </script>\n  <script src="example.js" type="text/javascript">\n  </script>\n  <style>\n   header.navbar-inverse {border-radius: 0;}\n      footer.navbar-default {border-radius: 0; margin-bottom: 0;}\n      .shiftable-collection-item {padding: 10px; text-align: center; height: 160px; border: 1px solid #999; margin-right: 10px;}\n      .shiftable-collection-item:hover, .shiftable-collection-item.selected {background-color: #ddd;}\n      .shiftable-collection img {max-width: 100%; max-height: 100px;}\n      .bs-sidebar .nav > .active > ul {display: block; margin-bottom: 4px;}\n      .bs-sidebar .nav > li > a {padding: 2px 4px;}\n      .bs-sidebar .nav > li.active {background-color: #428bca; border-radius: 0;}\n      .bs-sidebar .nav > li.active > a {color: white;}\n      .bs-sidebar .nav > li.active > a:hover {background-color: #428bca;}\n      .bs-sidebar .nav > li.active, .bs-sidebar .nav > li.active > a:hover {background-color: #428bca;}\n  </style>\n  <script type="text/javascript">\n   $(document).ready(function() {\n        $("button.show-code").click(function(e) {\n          e.preventDefault();\n          var $btn = $(this),\n              $pre = $($btn.attr("for"));\n          if ($pre.css("display") == "none") {\n            $pre.slideDown();\n            $btn.html("&lt;/&gt; Hide code");\n          } else {\n            $pre.slideUp();\n            $btn.html("&lt;/&gt; Show code");\n          }\n        });\n      });\n  </script>\n </head>\n <body data-offset="100" data-spy="scroll" data-target="#sidebar" style="">\n  <header class="navbar navbar-inverse">\n   <div class="navbar-header">\n    <button class="navbar-toggle" data-target="#navbar-collapse" data-toggle="collapse" type="button">\n     <span class="sr-only">\n      Toggle navigation\n     </span>\n     <span class="icon-bar">\n     </span>\n     <span class="icon-bar">\n     </span>\n     <span class="icon-bar">\n     </span>\n    </button>\n    <a class="navbar-brand" href="index.html">\n     Backform.js\n    </a>\n   </div>\n   <div class="collapse navbar-collapse" id="navbar-collapse">\n    <ul class="nav navbar-nav">\n     <li>\n      <a href="#Introduction">\n       Introduction\n      </a>\n     </li>\n     <li>\n      <a href="#Documentation">\n       Documentation\n      </a>\n     </li>\n     <li>\n      <a href="#Markup">\n       HTML Markup\n      </a>\n     </li>\n     <li>\n      <a href="bootstrap2.html">\n       Bootstrap 2.3\n      </a>\n     </li>\n     <li>\n      <a href="https://github.com/AmiliaApp/backform/blob/gh-pages/src/backform.js" target="_blank">\n       &lt;/&gt; View source\n      </a>\n     </li>\n    </ul>\n   </div>\n  </header>\n  <div class="container">\n   <div class="row">\n    <div class="col-md-10">\n     <div class="row">\n      <div class="col-md-12">\n       <h1 id="Introduction">\n        Introduction\n       </h1>\n       <p>\n        Backform.js allows you to generate, render and capture user input with an HTML form in Javascript.\n            The data is retrieved and stored in a Backbone model. The form is rendered with a Backbone view.\n            Any changes to the form are reflected back to the model and vice versa.\n            To POST (or PUT) the form to the server, simply call the Backbone model\'s\n        <code>\n         save\n        </code>\n        method.\n       </p>\n       <p>\n        Backform comes with built-in controls for input, select, radio buttons, checkbox, etc.\n            Backform controls are Backbone views and extensible.\n            Backform even supports nested objects.\n            Backform is built with Bootstrap 3 markup. Supports Bootstrap 2.3. Adaptable to any markup framework.\n       </p>\n       <h2>\n        Example\n       </h2>\n       <p>\n        A Backform to edit a person. The address is a nested object. Change to see the Backbone model updated (right).\n       </p>\n      </div>\n     </div>\n     <div class="row">\n      <div class="col-md-6">\n       <form class="form-horizontal" id="form">\n        <div class="form-group id">\n         <label class="control-label col-sm-4">\n          Id\n         </label>\n         <div class="col-sm-8">\n          <span class="form-control uneditable-input">\n           101\n          </span>\n         </div>\n        </div>\n        <div class="form-group firstName">\n         <label class="control-label col-sm-4">\n          First Name\n         </label>\n         <div class="col-sm-8">\n          <input class="form-control" maxlength="255" name="firstName" placeholder="" type="text" value="Andre"/>\n         </div>\n        </div>\n        <div class="form-group lastName">\n         <label class="control-label col-sm-4">\n          Last Name\n         </label>\n         <div class="col-sm-8">\n          <input class="form-control" maxlength="255" name="lastName" placeholder="" type="text" value="Jones"/>\n         </div>\n        </div>\n        <div class="form-group adult">\n         <label class="control-label col-sm-4">\n         </label>\n         <div class="col-sm-8">\n          <div class="checkbox">\n           <label>\n            <input checked="checked" class="" name="adult" type="checkbox"/>\n            Adult\n           </label>\n          </div>\n         </div>\n        </div>\n        <div class="form-group salutation">\n         <label class="control-label col-sm-4">\n          Salutation\n         </label>\n         <div class="col-sm-8">\n          <label class="radio-inline">\n           <input checked="checked" class="" name="salutation" type="radio" value=\'"Mr"\'/>\n           Mr.\n          </label>\n          <label class="radio-inline">\n           <input class="" name="salutation" type="radio" value=\'"Mrs"\'/>\n           Mrs.\n          </label>\n          <label class="radio-inline">\n           <input class="" name="salutation" type="radio" value=\'"Mme"\'/>\n           Mme.\n          </label>\n         </div>\n        </div>\n        <div class="form-group">\n         <label class="control-label col-sm-4">\n         </label>\n         <div class="col-sm-8">\n         </div>\n        </div>\n        <div class="form-group address.address1">\n         <label class="control-label col-sm-4">\n          Address1\n         </label>\n         <div class="col-sm-8">\n          <input class="form-control" maxlength="255" name="address.address1" placeholder="" type="text" value="1751 rue Richardson"/>\n         </div>\n        </div>\n        <div class="form-group address.address2">\n         <label class="control-label col-sm-4">\n          Address2\n         </label>\n         <div class="col-sm-8">\n          <input class="form-control" maxlength="255" name="address.address2" placeholder="" type="text" value="Suite 3.105"/>\n         </div>\n        </div>\n        <div class="form-group address.city">\n         <label class="control-label col-sm-4">\n          City\n         </label>\n         <div class="col-sm-8">\n          <input class="form-control" maxlength="255" name="address.city" placeholder="" type="text" value="Montr\xc3\xa9al"/>\n         </div>\n        </div>\n        <div class="form-group address.postalCode">\n         <label class="control-label col-sm-4">\n          Postal Code\n         </label>\n         <div class="col-sm-8">\n          <input class="form-control" maxlength="255" name="address.postalCode" placeholder="" type="text" value="H3K 1G6"/>\n         </div>\n        </div>\n        <div class="form-group address.province">\n         <label class="control-label col-sm-4">\n          Province\n         </label>\n         <div class="col-sm-8">\n          <select class="form-control" name="address.province" value=\'"QC"\'>\n           <option value=\'"AB"\'>\n            Alberta\n           </option>\n           <option value=\'"BC"\'>\n            British Columbia\n           </option>\n           <option value=\'"MB"\'>\n            Manitoba\n           </option>\n           <option value=\'"NB"\'>\n            New Brunswick\n           </option>\n           <option value=\'"NL"\'>\n            Newfoundland and Labrador\n           </option>\n           <option value=\'"NT"\'>\n            Northwest Territories\n           </option>\n           <option value=\'"NS"\'>\n            Nova Scotia\n           </option>\n           <option value=\'"NU"\'>\n            Nunavut\n           </option>\n           <option value=\'"ON"\'>\n            Ontario\n           </option>\n           <option value=\'"PE"\'>\n            Prince Edward Island\n           </option>\n           <option selected="selected" value=\'"QC"\'>\n            Qu\xc3\xa9bec\n           </option>\n           <option value=\'"SK"\'>\n            Saskatchewan\n           </option>\n           <option value=\'"YT"\'>\n            Yukon\n           </option>\n          </select>\n         </div>\n        </div>\n        <div class="form-group dateOfBirth">\n         <label class="control-label col-sm-4">\n          Date of birth\n         </label>\n         <div class="col-sm-8">\n          <input class="form-control" maxlength="255" name="dateOfBirth" placeholder="" type="text" value="1990-10-10"/>\n         </div>\n        </div>\n        <div class="form-group lifeGoal">\n         <label class="control-label col-sm-4">\n          Life goal\n         </label>\n         <div class="col-sm-8">\n          <textarea class="form-control fancy" maxlength="4000" name="lifeGoal" placeholder="" rows="3">To become the best basketball player there is. I want to dunk!</textarea>\n          <span class="help-block">\n           Be creative!\n          </span>\n         </div>\n        </div>\n        <div class="form-group favoriteNumber">\n         <label class="control-label col-sm-4">\n          Favorite Number\n         </label>\n         <div class="col-sm-8">\n          <input class="form-control" maxlength="255" name="favoriteNumber" placeholder="" type="number" value="4"/>\n         </div>\n        </div>\n        <div class="form-group jsonValue">\n         <label class="control-label col-sm-4">\n          JSON value\n         </label>\n         <div class="col-sm-8">\n          <select class="form-control" name="jsonValue" value="null">\n           <option selected="selected" value="null">\n            null\n           </option>\n           <option value="true">\n            true\n           </option>\n           <option value="false">\n            false\n           </option>\n           <option value="0">\n            0\n           </option>\n           <option value="1">\n            1\n           </option>\n           <option value="99">\n            99\n           </option>\n           <option value=\'"a string"\'>\n            a string\n           </option>\n          </select>\n         </div>\n        </div>\n        <div class="form-group">\n         <label class="control-label col-sm-4">\n         </label>\n         <div class="col-sm-8">\n          <button class="btn" name="" type="submit">\n           Save to server\n          </button>\n          <span class="status">\n          </span>\n         </div>\n        </div>\n       </form>\n      </div>\n      <div class="col-md-6">\n       <pre id="object">{\n  "id": 101,\n  "salutation": "Mr",\n  "firstName": "Andre",\n  "lastName": "Jones",\n  "adult": true,\n  "address": {\n    "address1": "1751 rue Richardson",\n    "address2": "Suite 3.105",\n    "city": "Montr\xc3\xa9al",\n    "postalCode": "H3K 1G6",\n    "province": "QC"\n  },\n  "dateOfBirth": "1990-10-10",\n  "lifeGoal": "To become the best basketball player there is. I want to dunk!",\n  "favoriteNumber": 4,\n  "jsonValue": null\n}</pre>\n      </div>\n     </div>\n     <div class="row">\n      <div class="col-md-12">\n       <p>\n        <button class="btn btn-primary show-code" for="#form-code">\n         &lt;/&gt; Show Code\n        </button>\n       </p>\n       <pre id="form-code" style="display:none;">var person = new Backbone.Model({\n  id: 101,\n  salutation: "Mr",\n  firstName: "Andre",\n  lastName: "Jones",\n  adult: true,\n  address: {\n    address1: "1751 rue Richardson",\n    address2: "Suite 3.105",\n    city: "Montr\xc3\xa9al",\n    postalCode: "H3K 1G6",\n    province: "QC"\n  },\n  dateOfBirth: "1990-10-10",\n  lifeGoal: "To become the best basketball player there is. I want to dunk!",\n  favoriteNumber: 4,\n  jsonValue: null\n});\n\nnew Backform.Form({\n  el: "#form",\n  model: person,\n  fields: [\n    {name: "id", label: "Id", control: "uneditable-input"},\n    {name: "firstName", label: "First Name", control: "input"},\n    {name: "lastName", label: "Last Name", control: "input"},\n    {name: "adult", label: "Adult", control: "checkbox"},\n    {\n      name: "salutation",\n      label: "Salutation",\n      control: "radio",\n      options: [\n        {label: "Mr.", value: "Mr"},\n        {label: "Mrs.", value: "Mrs"},\n        {label: "Mme.", value: "Mme"}\n      ]\n    },\n    {control: "spacer"},\n    {name: "address.address1", label: "Address1", control: "input"},\n    {name: "address.address2", label: "Address2", control: "input"},\n    {name: "address.city", label: "City", control: "input"},\n    {name: "address.postalCode", label: "Postal Code", control: "input"},\n    {\n      name: "address.province",\n      label: "Province",\n      control: "select",\n      options: [\n        {label: "Alberta", value: "AB"},\n        {label: "British Columbia", value: "BC"},\n        {label: "Manitoba", value: "MB"},\n        {label: "New Brunswick", value: "NB"},\n        {label: "Newfoundland and Labrador", value: "NL"},\n        {label: "Northwest Territories", value: "NT"},\n        {label: "Nova Scotia", value: "NS"},\n        {label: "Nunavut", value: "NU"},\n        {label: "Ontario", value: "ON"},\n        {label: "Prince Edward Island", value: "PE"},\n        {label: "Qu\xc3\xa9bec", value: "QC"},\n        {label: "Saskatchewan", value: "SK"},\n        {label: "Yukon", value: "YT"}\n      ]\n    },\n    {name: "dateOfBirth", label: "Date of birth", control: "datepicker", options: {format: "yyyy-mm-dd"}},\n    {name: "lifeGoal", label: "Life goal", control: "textarea", extraClasses: ["fancy"], helpMessage: "Be creative!"},\n    {name: "favoriteNumber", label: "Favorite Number", control: "input", type: "number"},\n    {\n      name: "jsonValue",\n      label: "JSON value",\n      control: "select",\n      options: [\n        {label: "null", value: null},\n        {label: "true", value: true},\n        {label: "false", value: false},\n        {label: "0", value: 0},\n        {label: "1", value: 1},\n        {label: "99", value: 99},\n        {label: "a string", value: "a string"}\n      ]\n    },\n    {control: "button", label: "Save to server"}\n    ],\n  events: {\n    "submit": function(e) {\n      e.preventDefault();\n      this.model.save().done(function(result) {\n        alert("Form saved to server!");\n      });\n      return false;\n    }\n  }\n}).render();\n\nperson.on("change", function() {\n  $("#object").text(JSON.stringify(person.toJSON(), null, 2));\n}).trigger("change");\n</pre>\n       <h2>\n        Installation\n       </h2>\n       <p>\n        Backform is one single file which creates a new global\n        <code>\n         Backform\n        </code>\n        . Include it after you load Underscore and Backbone.\n       </p>\n       <pre>&lt;script src="underscore.js" type="text/javascript"&gt;&lt;/script&gt;\n&lt;script src="backbone.js" type="text/javascript"&gt;&lt;/script&gt;\n&lt;script src="backform.js" type="text/javascript"&gt;&lt;/script&gt;\n</pre>\n       <p>\n        Or, if you use\n        <a href="http://bower.io/" target="_blank">\n         Bower\n        </a>\n        :\n       </p>\n       <pre>$ bower install backform\n</pre>\n       <p>\n        Or, if you use\n        <a href="https://www.npmjs.org/" target="_blank">\n         npm\n        </a>\n        :\n       </p>\n       <pre>$ npm install backform\n</pre>\n      </div>\n     </div>\n     <br/>\n     <div class="row">\n      <div class="col-md-12">\n       <h1 id="Documentation">\n        Documentation\n       </h1>\n       <p>\n        Backform consists of Backbone views. A form is a view which contains control groups which are also views. A control group is a view which renders a model attribute and captures user input. It also ensures the model and DOM are always in sync. The philosophy is very similar to\n        <a href="http://backgridjs.com/" target="_blank">\n         Backgrid\n        </a>\n        .\n       </p>\n       <p>\n        These are the important Backform classes:\n       </p>\n       <ul>\n        <li>\n         <code>\n          Backform.Form\n         </code>\n         : A Backbone view which represents the FORM element.\n        </li>\n        <li>\n         <code>\n          Backform.Field, Backform.Fields\n         </code>\n         : A Form contains a collection of Field models, which define the mapping of a model attribute to a form control.\n        </li>\n        <li>\n         <code>\n          Backform.Control\n         </code>\n         : The base class of Backform controls. A Backbone view which represents a control group (\n         <code>\n          .form-group\n         </code>\n         element in Bootstrap). It implements the\n         <code>\n          render\n         </code>\n         and\n         <code>\n          onChange\n         </code>\n         methods required to keep the DOM and model in sync.\n        </li>\n        <li>\n         <code>\n          Backform.ControlFormatter\n         </code>\n         : Converts to/from raw JSON value to/from humanized form. Exactly like\n         <a href="http://backgridjs.com/ref/formatter.html" target="_blank">\n          Backgrid\'s CellFormatter\n         </a>\n         .\n        </li>\n        <li>\n         <code>\n          Backform.InputControl, Backform.SelectControl, ...\n         </code>\n         : The controls themselves inheriting from Backform.Control. They can be extended or you can create your own from scratch.\n        </li>\n       </ul>\n       <h2 id="Usage">\n        Basic Usage\n       </h2>\n       <p>\n        Backform is a signle Javascript file that you load after Backbone is loaded.\n       </p>\n       <pre>&lt;script type="text/javascript" src="backform.js"&gt;&lt;/script&gt;\n</pre>\n       <p>\n        To create a form, you instantiate a Backform.Form view. You pass it a definition of fields.\n            A field maps a model attribute to a form control. For example:\n       </p>\n       <pre>var person = new Backbone.Model({\n  id: 101,\n  firstName: "Martin",\n  lastName: "Drapeau"\n});\n\nvar fields = [{\n    name: "id", // The key of the model attribute\n    label: "ID", // The label to display next to the control\n    control: "input", // This will be converted to InputControl and instantiated from the proper class under the Backform namespace\n    disabled: true // By default controls are editable. Here we disabled it.\n  }, {\n    name: "firstName",\n    label: "First name",\n    control: "input"\n  }, {\n    name: "lastName",\n    label: "Last name",\n    control: "input",\n    extraClasses: ["fancy"],\n    helpMessage: "Be creative!"\n  }, {\n    control: "button",\n    label: "Save to server"\n  }];\n\nvar form = new Backform.Form({\n  el: $("#form"),\n  model: person,\n  fields: fields, // Will get converted to a collection of Backbone.Field models\n  events: {\n    "submit": function(e) {\n      e.preventDefault();\n      this.model.save()\n        .done(function(result) {\n          alert("Successful!");\n        })\n        .fail(function(error) {\n          alert(error);\n        });\n      return false;\n    }\n  }\n});\nform.render(); // Backform.*Control views are created for each field and rendered on screen\n</pre>\n       <p>\n        To save to the server, trap the\n        <code>\n         submit\n        </code>\n        event and call the model\'s\n        <code>\n         save\n        </code>\n        method.\n       </p>\n       <h4 id="AMD">\n        Backform now supports\n        <a href="https://en.wikipedia.org/wiki/Asynchronous_module_definition" target="new">\n         AMD\n        </a>\n       </h4>\n       <p>\n        In the below example - the module returns a function for creating the generic form as per your requirement (this example eloberates the usage of backform.js with the require.js):\n       </p>\n       <pre>define([\'backbone\', \'backform\'], function(Backbone, Backform){\n\n    var generate_my_form = function(model, fields, el) {\n        return new Backform.Form({\n            el: $(el),\n            model: model,\n            fields: fields, // Will get converted to a collection of Backbone.Field models\n            events: {\n                "submit": function(e) {\n                    e.preventDefault();\n                    this.model.save()\n                    .done(function(result) {\n                        alert("Successful!");\n                    })\n                    .fail(function(error) {\n                        alert(error);\n                    });\n                    return false;\n                }\n            }\n        });\n    };\n\n    return generate_my_form;\n\n});\n\n</pre>\n       <p>\n       </p>\n      </div>\n     </div>\n     <div class="row">\n      <div class="col-md-12">\n       <h2 id="Fields">\n        Fields\n       </h2>\n       <p>\n        Fields define the mapping between a model attribute and a control used to render and capture user input.\n            When you create your Form, you can pass a list of field definitions, or a collection of Backbone.Field models.\n            Either way, they get converted to a collection of models.\n       </p>\n       <p>\n        A Backform.Field can contain these options which get translated to model attributes.\n       </p>\n       <ul>\n        <li>\n         <code>\n          name\n         </code>\n         : Key of the model attribute to reference. If the model attribute contains nested values, these may be accessed via\n         <i>\n          x.y.z\n         </i>\n         syntax, where\n         <i>\n          x\n         </i>\n         is the model attribute and\n         <i>\n          y, z\n         </i>\n         are nested objects.\n        </li>\n        <li>\n         <code>\n          nested\n         </code>\n         :\n         <i>\n          Deprecated\n         </i>\n         . Nested values are now specified in the\n         <code>\n          name\n         </code>\n         option.\n        </li>\n        <li>\n         <code>\n          label\n         </code>\n         : Optional. Control label.\n        </li>\n        <li>\n         <code>\n          helpMessage\n         </code>\n         : Optional. When specified, will display a help message next to or below the control.\n        </li>\n        <li>\n         <code>\n          placeholder\n         </code>\n         : Optional. Control placeholder.\n        </li>\n        <li>\n         <code>\n          disabled\n         </code>\n         : Whether the control can be edited. Defaults to false.\n        </li>\n        <li>\n         <code>\n          required\n         </code>\n         : Whether the control is required. Defaults to false.\n        </li>\n        <li>\n         <code>\n          value\n         </code>\n         : Optional. Default value when model is empty.\n        </li>\n        <li>\n         <code>\n          control\n         </code>\n         : Control name or class\n        </li>\n       </ul>\n       <p>\n        When you define a field, you can pass the name of the control, or the control class.\n            You can even inline-extend a control.\n       </p>\n       <pre>control: "input"\n...\ncontrol: Backform.InputControl\n...\ncontrol: Backform.InputControl.extend({\n    defaults: {\n      type: "email"\n    }\n  })\n</pre>\n       <p>\n       </p>\n       <p>\n        When the control is created, it will be passed the field model as back-reference. As such, controls can support extra options. These can directly be passed in the field definition.\n            For example, the input control has an extra option\n        <code>\n         type\n        </code>\n        which defaults to\n        <code>\n         text\n        </code>\n        .\n            You can override this in this way:\n       </p>\n       <pre>fields = [{\n  control: "input",\n  type: "email"\n},\n...];\n</pre>\n      </div>\n     </div>\n     <h3>\n      Nested Objects\n     </h3>\n     <p>\n      Backform supports nested object attributes, including complex nested objects.\n     </p>\n     <div class="row">\n      <div class="col-md-6">\n       <form class="form-horizontal" id="form-nested">\n        <div class="form-group firstName">\n         <label class="control-label col-sm-4">\n          First Name\n         </label>\n         <div class="col-sm-8">\n          <input class="form-control" maxlength="255" name="firstName" placeholder="" type="text" value="Andre"/>\n         </div>\n        </div>\n        <div class="form-group lastName">\n         <label class="control-label col-sm-4">\n          Last Name\n         </label>\n         <div class="col-sm-8">\n          <input class="form-control" maxlength="255" name="lastName" placeholder="" type="text" value="Jones"/>\n         </div>\n        </div>\n        <div class="form-group relatives.mother.firstName">\n         <label class="control-label col-sm-4">\n          Mother\'s First Name\n         </label>\n         <div class="col-sm-8">\n          <input class="form-control" maxlength="255" name="relatives.mother.firstName" placeholder="" type="text" value="Elizabeth"/>\n         </div>\n        </div>\n        <div class="form-group relatives.mother.lastName">\n         <label class="control-label col-sm-4">\n          Mother\'s Last Name\n         </label>\n         <div class="col-sm-8">\n          <input class="form-control" maxlength="255" name="relatives.mother.lastName" placeholder="" type="text" value="Jones"/>\n         </div>\n        </div>\n        <div class="form-group relatives.father.firstName">\n         <label class="control-label col-sm-4">\n          Father\'s First Name\n         </label>\n         <div class="col-sm-8">\n          <input class="form-control" maxlength="255" name="relatives.father.firstName" placeholder="" type="text" value="Douglas"/>\n         </div>\n        </div>\n        <div class="form-group relatives.father.lastName">\n         <label class="control-label col-sm-4">\n          Father\'s Last Name\n         </label>\n         <div class="col-sm-8">\n          <input class="form-control" maxlength="255" name="relatives.father.lastName" placeholder="" type="text" value="Jones"/>\n         </div>\n        </div>\n       </form>\n      </div>\n      <div class="col-md-6">\n       <pre id="nested-object">{\n  "firstName": "Andre",\n  "lastName": "Jones",\n  "relatives": {\n    "mother": {\n      "firstName": "Elizabeth",\n      "lastName": "Jones"\n    },\n    "father": {\n      "firstName": "Douglas",\n      "lastName": "Jones"\n    }\n  }\n}</pre>\n      </div>\n     </div>\n     <div class="row">\n      <div class="col-md-12">\n       <p>\n        <button class="btn btn-primary show-code" for="#form-code-nested">\n         &lt;/&gt; Show Code\n        </button>\n       </p>\n       <pre id="form-code-nested" style="display:none;">var personAndFamily = new Backbone.Model({\n    "firstName": "Andre",\n    "lastName": "Jones",\n    "relatives": {\n      "mother": {\n        "firstName": "Elizabeth",\n        "lastName": "Jones"\n      },\n      "father": {\n        "firstName": "Douglas",\n        "lastName": "Jones"\n      }\n    }\n  });\n\nnew Backform.Form({\n  el: "#form-nested",\n  model: personAndFamily,\n  fields: [\n    {name: "firstName", label: "First Name", control: "input"},\n    {name: "lastName", label: "Last Name", control: "input"},\n    {\n      name: "relatives.mother.firstName",\n      label: "Mother\'s First Name",\n      control: "input",\n    }, {\n      name: "relatives.mother.lastName",\n      label: "Mother\'s Last Name",\n      control: "input",\n    }, {\n      name: "relatives.father.firstName",\n      label: "Father\'s First Name",\n      control: "input",\n    }, {\n      name: "relatives.father.lastName",\n      label: "Father\'s Last Name",\n      control: "input",\n    }\n  ]\n}).render();\n\npersonAndFamily.on("change", function() {\n  $("#nested-object").text(JSON.stringify(personAndFamily.toJSON(), null, 2));\n}).trigger("change");\n</pre>\n      </div>\n     </div>\n     <div class="row">\n      <div class="col-md-12">\n       <h2 id="Controls">\n        Controls\n       </h2>\n       <p>\n        Backform comes with many built-in controls. A control is a Backbone view which inherits from Backform.Control.\n            A control is created when the form is rendered.\n            It contains a back-reference to the Backbone.Field model allowing you access to the attribute name, and other options.\n            Built-in controls are:\n       </p>\n       <ul>\n        <li>\n         <code>\n          Backform.InputControl\n         </code>\n         (\n         <code>\n          input\n         </code>\n         ): A text input. Pass\n         <code>\n          type\n         </code>\n         to change type.\n        </li>\n        <li>\n         <code>\n          Backform.TextateaControl\n         </code>\n         (\n         <code>\n          textarea\n         </code>\n         ): A textarea.\n        </li>\n        <li>\n         <code>\n          Backform.CheckboxControl\n         </code>\n         (\n         <code>\n          checkbox\n         </code>\n         ): A single checkbox input with true|false value.\n        </li>\n        <li>\n         <code>\n          Backform.BooleanControl\n         </code>\n         (\n         <code>\n          boolean\n         </code>\n         ): Alias to Backform.CheckboxControl.\n        </li>\n        <li>\n         <code>\n          Backform.SelectControl\n         </code>\n         (\n         <code>\n          select\n         </code>\n         ): Select drop-down. Pass\n         <code>\n          options\n         </code>\n         to specify a list of options as\n         <code>\n          [{label:&lt;label&gt;, value:&lt;value&gt;}, ...]\n         </code>\n         .\n        </li>\n        <li>\n         <code>\n          Backform.RadioControl\n         </code>\n         (\n         <code>\n          radio\n         </code>\n         ): Radio button inputs. Pass\n         <code>\n          options\n         </code>\n         to specify a list of options as\n         <code>\n          [{label:&lt;label&gt;, value:&lt;value&gt;}, ...]\n         </code>\n         .\n        </li>\n        <li>\n         <code>\n          Backform.DatepickerControl\n         </code>\n         (\n         <code>\n          datepicker\n         </code>\n         ): An input with the\n         <a href="http://www.eyecon.ro/bootstrap-datepicker" target="_blank">\n          Boostrap Datepicker plugin\n         </a>\n         . Pass\n         <code>\n          options\n         </code>\n         to specify the datepicker options. Don\'t forget to include the datepicker JS file.\n        </li>\n        <li>\n         <code>\n          Backform.ButtonControl\n         </code>\n         (\n         <code>\n          button\n         </code>\n         ): A button of type submit by default. Pass\n         <code>\n          type\n         </code>\n         to change button type. Can display a status message. Pass option\n         <code>\n          message\n         </code>\n         to display a message to the right of the button. Pass option\n         <code>\n          status\n         </code>\n         with value\n         <code>\n          success\n         </code>\n         or\n         <code>\n          error\n         </code>\n         to color-code the message.\n        </li>\n        <li>\n         <code>\n          Backform.UneditaleInputControl\n         </code>\n         (\n         <code>\n          uneditale-input\n         </code>\n         ): Displays an input-like span.\n        </li>\n        <li>\n         <code>\n          Backform.HelpControl\n         </code>\n         (\n         <code>\n          help\n         </code>\n         ): A help block where\n         <code>\n          label\n         </code>\n         contains the text to place.\n        </li>\n        <li>\n         <code>\n          Backform.SpacerControl\n         </code>\n         (\n         <code>\n          spacer\n         </code>\n         ): An empty row.\n        </li>\n       </ul>\n       <h3>\n        Anatomy of a Control\n       </h3>\n       <p>\n        A control is a Backbone view which leverages methods\n        <code>\n         initialize\n        </code>\n        and\n        <code>\n         render\n        </code>\n        , and properties\n        <code>\n         className\n        </code>\n        and\n        <code>\n         events\n        </code>\n        . In addition, Backform.Control adds these:\n       </p>\n       <ul>\n        <li>\n         <code>\n          defaults\n         </code>\n         : Extra options that can be passed in the field definition, with their default values.\n        </li>\n        <li>\n         <code>\n          template\n         </code>\n         : An\n         <a href="http://underscorejs.org/#template" target="_blank">\n          underscore template\n         </a>\n         to render the control.\n        </li>\n        <li>\n         <code>\n          getValueFromDOM\n         </code>\n         : A method to retrieve the value from the DOM and translate it to a model value.\n        </li>\n        <li>\n         <code>\n          formatter\n         </code>\n         : A control formatter to translate model values to/from human values. By default uses the\n         <code>\n          Backform.ControlFormatter\n         </code>\n         (described further below).\n        </li>\n       </ul>\n       As an example this is the anatomy of the\n       <code>\n        Backform.InputControl\n       </code>\n       view:\n       <p>\n       </p>\n       <pre>var InputControl = Backform.InputControl = Control.extend({\n  defaults: { // Extra options that can be passed in the field defition.\n    type: "text"\n  },\n  template: ..., // An underscore template containing the markup\n  events: {\n    "change input": "onChange", // Transfer value from the DOM to the model\n    "focus input": "clearInvalid" // Clear any errors when the user clicks inside the input (see invalid markup section)\n  },\n  getValueFromDOM: function() { // How the value is fetched from the DOM\n    return this.formatter.toRaw(this.$el.find("input").val(), this.model);\n  }\n});\n</pre>\n       <h3>\n        Rendering\n       </h3>\n       <p>\n        The Control\n        <code>\n         render\n        </code>\n        method will use the\n        <a href="http://underscorejs.org/#template" target="_blank">\n         underscore\n         <code>\n          template\n         </code>\n        </a>\n        to render itself.\n            The template is passed the back-reference serialized field model, along with\n        <code>\n         attributes\n        </code>\n        (serialized form model),\n        <code>\n         rawValue\n        </code>\n        (the form model\'s attribute for this control as defined by\n        <code>\n         name\n        </code>\n        in the field), and\n        <code>\n         value\n        </code>\n        (the humanized value converted using\n        <code>\n         formatter\n        </code>\n        \'s\n        <code>\n         toRaw\n        </code>\n        function).\n            For example, this is the\n        <code>\n         InputControl\n        </code>\n        \'s template:\n       </p>\n       <pre>&lt;label class="&lt;%=Backform.controlLabelClassName%&gt;"&gt;&lt;%-label%&gt;&lt;/label&gt;\n&lt;div class="&lt;%=Backform.controlsClassName%&gt;"&gt;\n  &lt;input type="&lt;%=type%&gt;" class="&lt;%=Backform.controlClassName%&gt;" name="&lt;%=name%&gt;" value="&lt;%-value%&gt;" placeholder="&lt;%-placeholder%&gt;" &lt;%=disabled ? "disabled" : ""%&gt; &lt;%=required ? "required" : ""%&gt; /&gt;\n&lt;/div&gt;\n</pre>\n       <p>\n        See the\n        <a href="#Markup">\n         HTML Markup\n        </a>\n        section for more information on HTML elements.\n       </p>\n       <h3>\n        Keeping the model in sync with the DOM\n       </h3>\n       <p>\n        Controls keep the form model in sync with the DOM by listening to\n        <code>\n         change\n        </code>\n        events, and then calling method\n        <code>\n         getValueFromDOM\n        </code>\n        .\n            For an input, this consists in using jQuery\'s\n        <code>\n         val\n        </code>\n        method to retrieve the value.\n            Method\n        <code>\n         getValueFromDOM\n        </code>\n        must then call the\n        <code>\n         formatter\n        </code>\n        \'s\n        <code>\n         toRaw\n        </code>\n        function. For example:\n       </p>\n       <pre>getValueFromDOM: function() {\n  return this.formatter.toRaw(this.$el.find("input").val(), this.model);\n},\n</pre>\n       <p>\n        You can override this method to retrieve the value from the DOM differently.\n            For example look at\n        <code>\n         RadioControl\n        </code>\n        :\n       </p>\n       <pre>getValueFromDOM: function() {\n  return this.formatter.toRaw(this.$el.find("input:checked").val(), this.model);\n},\n</pre>\n       <h3>\n        Control Formatters\n       </h3>\n       <p>\n        Control formatters are used to convert raw model values to a human format so it can be rendered in the DOM.\n            They also convert back from human to raw JSON format.\n            A class formatter must have two functions:\n        <code>\n         fromRaw\n        </code>\n        (model value to human value) and\n        <code>\n         toRaw\n        </code>\n        (from human value to model value).\n            The default class\n        <code>\n         Backform.ControlFormatter\n        </code>\n        does no conversion:\n       </p>\n       <pre>fromRaw: function (rawData, model) {\n  return rawData;\n},\ntoRaw: function (formattedData, model) {\n  return formattedData;\n}\n</pre>\n       <p>\n        You create your own formatters to store values differently in the DOM.\n            For example the\n        <code>\n         SelectControl\n        </code>\n        stores stringified JSON in the\n        <code>\n         SELECT\n        </code>\n        element\'s\n        <code>\n         value\n        </code>\n        attribute.\n            This allows you to use numerical values and even\n        <code>\n         null\n        </code>\n        ,\n        <code>\n         true\n        </code>\n        or\n        <code>\n         false\n        </code>\n        (otherwise they would be converted to strings when storing in the DOM).\n            It uses the\n        <code>\n         Backform.JSONFormatter\n        </code>\n        :\n       </p>\n       <pre>var JSONFormatter = Backform.JSONFormatter = function() {};\n_.extend(JSONFormatter.prototype, {\n  fromRaw: function(rawData, model) {\n    return JSON.stringify(rawData);\n  },\n  toRaw: function(formattedData, model) {\n    return JSON.parse(formattedData);\n  }\n});\n...\nvar SelectControl = Backform.SelectControl = Control.extend({\n  ...\n  formatter: JSONFormatter,\n  ...\n</pre>\n       <p class="alert alert-info">\n        Formatters work exactly like those in Backgrid. Consult\n        <a href="http://backgridjs.com/ref/formatter.html" target="_blank">\n         Backgrid\'s Formatters documentation\n        </a>\n        for backgorund and philosophy.\n       </p>\n       <h3>\n        Extending Controls\n       </h3>\n       <p>\n        You can conditionally show a control by extending it. Since it is a Backbone view, you can extend the render function. For example:\n       </p>\n       <form class="form-horizontal" id="form-question">\n        <div class="form-group toggle">\n         <label class="control-label col-sm-4">\n          Are you a programmer?\n         </label>\n         <div class="col-sm-8">\n          <label class="radio-inline">\n           <input class="" name="toggle" type="radio" value="true"/>\n           Yes\n          </label>\n          <label class="radio-inline">\n           <input checked="checked" class="" name="toggle" type="radio" value="false"/>\n           No\n          </label>\n         </div>\n        </div>\n        <div class="form-group years">\n         <label class="control-label col-sm-4">\n          For how many years?\n         </label>\n         <div class="col-sm-8">\n          <input class="form-control" maxlength="255" name="years" placeholder="" type="text" value="0"/>\n         </div>\n        </div>\n       </form>\n       <p>\n        <button class="btn btn-primary show-code" for="#form-question-code">\n         &lt;/&gt; Show Code\n        </button>\n       </p>\n       <pre id="form-question-code" style="display:none;">new Backform.Form({\n  el: $("#form-question"),\n  model: new Backbone.Model({toggle: true, years: 0}),\n  fields: [{\n    name: "toggle",\n    label: "Are you a programmer?",\n    control: "checkbox"\n  }, {\n    name: "years",\n    label: "For how many years?",\n    disabled: function(model) { return !model.get("toggle"); }\n    control: Backform.InputControl.extend({\n      initialize: function() {\n        Backform.InputControl.prototype.initialize.apply(this, arguments);\n        this.listenTo(this.model, "change:toggle", this.render);\n      }\n    })\n  }]\n}).render();\n</pre>\n       <br/>\n       <h3>\n        Visible Attribute as a function in Field\n       </h3>\n       <p>\n        You can conditionally show a control by providing a function, which takes model as input, and returns a boolean value. For example:\n       </p>\n       <form class="form-horizontal" id="form-visible">\n        <div class="form-group toggle">\n         <label class="control-label col-sm-4">\n          Are you a programmer?\n         </label>\n         <div class="col-sm-8">\n          <label class="radio-inline">\n           <input class="" name="toggle" type="radio" value="true"/>\n           Yes\n          </label>\n          <label class="radio-inline">\n           <input checked="checked" class="" name="toggle" type="radio" value="false"/>\n           No\n          </label>\n         </div>\n        </div>\n        <div class="form-group hidden years">\n         <label class="control-label col-sm-4">\n          For how many years?\n         </label>\n         <div class="col-sm-8">\n          <input class="form-control" maxlength="255" name="years" placeholder="" type="text" value="0"/>\n         </div>\n        </div>\n       </form>\n       <p>\n        <button class="btn btn-primary show-code" for="#form-visible-code">\n         &lt;/&gt; Show Code\n        </button>\n       </p>\n       <pre id="form-visible-code" style="display:none;">// Example with question (visible attribute)\nnew Backform.Form({\n  el: $("#form-visible"),\n  model: new Backbone.Model({toggle: false, years: 0}),\n  fields: [{\n    name: "toggle",\n    label: "Are you a programmer?",\n    control: "radio",\n    options: [{label: "Yes", value: true}, {label: "No", value: false}]\n  }, {\n    name: "years",\n    label: "For how many years?",\n    deps: ["toggle"],\n    visible: function(model) { return model.get("toggle");},\n    control: Backform.InputControl.extend({\n      initialize: function() {\n        Backform.InputControl.prototype.initialize.apply(this, arguments);\n        this.listenTo(this.model, "change:toggle", this.render);\n      }\n    })\n  }]\n}).render();\n</pre>\n       <br/>\n      </div>\n     </div>\n     <div class="row">\n      <div class="col-md-12">\n       <h2 id="Validation">\n        Validation\n       </h2>\n       <p>\n        Backform can render error validation markup \xc3\xa0 la Bootstrap.\n            It does so by attaching a companion error model on the form data model.\n            When the Backform.Form view is constructed, it adds a new property\n        <code>\n         errorModel\n        </code>\n        onto the model (alternatively you can pass your own\n        <code>\n         errorModel\n        </code>\n        when you create the Backform.Form view).\n            The error model is simply a Backbone model which contains the same attribute names as the original model, but with error messages as values.\n            The form will automatically listen for changes on the\n        <code>\n         errorModel\n        </code>\n        to display the errors.\n            You need only set the invalid attribute with an appropriate error message and for it to be displayed.\n       </p>\n       <p>\n        You can then use Backbone model\'s validate method to set the errors. For example:\n       </p>\n       <pre>  validate: function(attributes, options) {\n    this.errorModel.clear();\n\n    var number = this.get("a");\n    if (isNaN(number))\n      this.errorModel.set({a: "Not a number!"});\n    else if (number &lt;= 10 || number &gt;= 20)\n      this.errorModel.set({a: "Must be between 10 and 20"});\n\n    if (!_.isEmpty(_.compact(this.errorModel.toJSON())))\n      return "Validation errors. Please fix.";\n  }\n</pre>\n      </div>\n     </div>\n     <div class="row">\n      <div class="col-md-12">\n       <h3>\n        Client-Side Validation Example\n       </h3>\n       <p>\n        In this example, validation is performed client-side when the form is submitted.\n       </p>\n       <form class="form-horizontal" id="form-validation">\n        <div class="form-group a">\n         <label class="control-label col-sm-4">\n          Type in a number between 10 and 20. Submit the form to validate.\n         </label>\n         <div class="col-sm-8">\n          <input class="form-control" maxlength="255" name="a" placeholder="" type="number" value="null"/>\n         </div>\n        </div>\n        <div class="form-group">\n         <label class="control-label col-sm-4">\n         </label>\n         <div class="col-sm-8">\n          <button class="btn" name="" type="submit">\n          </button>\n          <span class="status">\n          </span>\n         </div>\n        </div>\n       </form>\n       <p>\n        <button class="btn btn-primary show-code" for="#form-validation-code">\n         &lt;/&gt; Show Code\n        </button>\n       </p>\n       <pre id="form-validation-code" style="display:none;">var MyModel = Backbone.Model.extend({\n  defaults: {\n    a: null\n  },\n  validate: function(attributes, options) {\n    this.errorModel.clear();\n\n    var number = this.get("a");\n    if (isNaN(number))\n      this.errorModel.set({a: "Not a number!"});\n    else if (number &lt;= 10 || number &gt;= 20)\n      this.errorModel.set({a: "Must be between 10 and 20"});\n\n    if (!_.isEmpty(_.compact(this.errorModel.toJSON())))\n      return "Validation errors. Please fix.";\n  }\n});\n\nvar form = new Backform.Form({\n  el: "#form-validation",\n  model: new MyModel(),\n  fields: [{\n    name: "a",\n    label: "Type in a number between 10 and 20. Submit the form to validate.",\n    control: "input",\n    type: "number"\n  }, {\n    id: "submit",\n    control: "button"\n  }]\n}).render();\n\nform.$el.on("submit", function(e) {\n  e.preventDefault();\n  var submit = form.fields.get("submit");\n\n  if (form.model.isValid())\n    submit.set({status:"success", message: "Success!"});\n  else\n    submit.set({status:"error", message: form.model.validationError});\n\n  return false;\n});\n</pre>\n       <br/>\n       <h3>\n        Browser Validation\n       </h3>\n       <p>\n        Noways, with\n        <a href="https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Forms/Data_form_validation" target="_blank">\n         browser-supplied form validation\n        </a>\n        modern browsers can validate inputs for you. You can leverage that with Backform.\n       </p>\n       <p>\n        For example, you can define inputs of type\n        <code>\n         email\n        </code>\n        and\n        <code>\n         number\n        </code>\n        . The browser will perform validation for you (if validation is supported by the browser).\n       </p>\n       <form class="form-horizontal" id="form-email">\n        <div class="form-group email">\n         <label class="control-label col-sm-4">\n          Email\n         </label>\n         <div class="col-sm-8">\n          <input class="form-control" maxlength="255" name="email" placeholder="" required="" type="email" value="jonsnow@castlebla.ck"/>\n         </div>\n        </div>\n        <div class="form-group age">\n         <label class="control-label col-sm-4">\n          Age\n         </label>\n         <div class="col-sm-8">\n          <input class="form-control" maxlength="255" name="age" placeholder="" required="" type="number" value="20"/>\n         </div>\n        </div>\n        <div class="form-group">\n         <label class="control-label col-sm-4">\n         </label>\n         <div class="col-sm-8">\n          <button class="btn" name="" type="submit">\n          </button>\n          <span class="status">\n          </span>\n         </div>\n        </div>\n       </form>\n       <p>\n        <button class="btn btn-primary show-code" for="#form-email-code">\n         &lt;/&gt; Show Code\n        </button>\n       </p>\n       <pre id="form-email-code" style="display:none;">new Backform.Form({\n  el: $("#form-email"),\n  model: new Backbone.Model({email: "jonsnow@castlebla.ck", age:20}),\n  fields: [{\n    name: "email",\n    label: "Email",\n    control: "input",\n    type: "email",\n    required: true\n  }, {\n    name: "age",\n    label: "Age",\n    control: "input",\n    type: "number",\n    required: true\n  }, {\n    control: "button"\n  }]\n}).render();\n\n$("#form-email").on("submit", function(e) {\n  alert("Browser validation passed");\n  return false;\n});\n</pre>\n      </div>\n     </div>\n     <br/>\n     <div class="row">\n      <div class="col-md-12">\n       <h1 id="Markup">\n        HTML Markup\n       </h1>\n       <p>\n        Backform comes setup for Bootstrap 3 horizontal forms with a 4-column width for labels, and 8-column width for controls.\n       </p>\n       <pre>&lt;form class="form-horizontal"&gt; &lt;!-- form --&gt;\n  &lt;div class="form-group"&gt; &lt;!-- form group --&gt;\n    &lt;label class="col-sm-4 control-label"&gt;First Name&lt;/label&gt; &lt;!-- label --&gt;\n    &lt;div class="col-sm-8"&gt; &lt;!-- controls --&gt;\n      &lt;input type="text" class="form-control" name="firstName" value="Andre" placeholder="" /&gt; &lt;!-- control --&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  ...\n&lt;/div&gt;\n</pre>\n       <p>\n        You can however change the layout via global class names in\n        <code>\n         Backform.*ClassName\n        </code>\n        options.\n            For example, this switches to a 6-6 column layout:\n       </p>\n       <pre>_.extend(Backform, {\n  controlLabelClassName: "control-label col-sm-6",\n  controlsClassName: "col-sm-6",\n});\n</pre>\n       <p>\n        Backform can be adapted to other markup frameworks by changing the HTML templates of individual controls, and the global class names. See how Backform adapts to Bootstrap 2 as an example by looking at\n        <a href="https://github.com/AmiliaApp/backform/blob/gh-pages/src/backform.js" target="_blank">\n         backform.js\n        </a>\n        .\n       </p>\n      </div>\n     </div>\n     <div class="row">\n      <div class="col-md-12">\n       <h1 id="Boostrap2">\n        Boostrap 2.3\n       </h1>\n       <p>\n        In addition, you can switch to Bootstrap 2.3 by calling the\n        <code>\n         Backform.bootstrap2\n        </code>\n        function.\n            It will change the class names automatically for you and call\n        <code>\n         bootstrap2\n        </code>\n        functions on any control under the Backform namespace, as some have to change their HTML markup.\n       </p>\n       <p>\n        <a class="btn btn-primary" href="bootstrap2.html">\n         View Examples with Bootstrap 2.3\n        </a>\n       </p>\n      </div>\n     </div>\n    </div>\n    <div class="col-md-2">\n     <div class="bs-sidebar affix" id="sidebar">\n      <ul class="nav bs-sidenav">\n       <li class="active">\n        <a href="#Introduction">\n         Introduction\n        </a>\n       </li>\n       <li>\n        <a href="#Documentation">\n         Documentation\n        </a>\n       </li>\n       <li>\n        <a href="#Usage">\n         Basic Usage\n        </a>\n       </li>\n       <li>\n        <a href="#Fields">\n         Fields\n        </a>\n       </li>\n       <li>\n        <a href="#Controls">\n         Controls\n        </a>\n       </li>\n       <li>\n        <a href="#Validation">\n         Validation\n        </a>\n       </li>\n       <li>\n        <a href="#Markup">\n         HTML Markup\n        </a>\n       </li>\n       <li>\n        <a href="#Bootstrap2">\n         Bootstrap 2.3\n        </a>\n       </li>\n       <li>\n        <a href="https://github.com/AmiliaApp/backform/blob/gh-pages/src/backform.js" target="_blank">\n         &lt;/&gt; View source\n        </a>\n       </li>\n      </ul>\n     </div>\n    </div>\n   </div>\n  </div>\n  <br/>\n  <footer class="navbar navbar-default">\n   <p class="navbar-text navbar-left">\n    \xc2\xa9 2014\n    <a href="http://www.amilia.com/en">\n     Amilia Inc.\n    </a>\n    <a href="https://github.com/AmiliaApp/backform/blob/gh-pages/LICENSE">\n     Licensed under MIT.\n    </a>\n   </p>\n   <p class="navbar-text navbar-right">\n    Written by\n    <a href="http://martindrapeau.tumblr.com/">\n     Martin Drapeau\n    </a>\n   </p>\n   <p class="navbar-text navbar-right">\n   </p>\n  </footer>\n  <a href="https://github.com/AmiliaApp/backform">\n   <img alt="Fork me on GitHub" src="https://s3.amazonaws.com/github/ribbons/forkme_right_gray_6d6d6d.png" style="position: absolute; top: 0; right: 0; border: 0;"/>\n  </a>\n  <div class="datepicker dropdown-menu">\n   <div class="datepicker-days" style="display: block;">\n    <table class="table-condensed">\n     <thead>\n      <tr>\n       <th class="prev">\n        \xe2\x80\xb9\n       </th>\n       <th class="switch" colspan="5">\n        October 1990\n       </th>\n       <th class="next">\n        \xe2\x80\xba\n       </th>\n      </tr>\n      <tr>\n       <th class="dow">\n        Su\n       </th>\n       <th class="dow">\n        Mo\n       </th>\n       <th class="dow">\n        Tu\n       </th>\n       <th class="dow">\n        We\n       </th>\n       <th class="dow">\n        Th\n       </th>\n       <th class="dow">\n        Fr\n       </th>\n       <th class="dow">\n        Sa\n       </th>\n      </tr>\n     </thead>\n     <tbody>\n      <tr>\n       <td class="day old">\n        30\n       </td>\n       <td class="day">\n        1\n       </td>\n       <td class="day">\n        2\n       </td>\n       <td class="day">\n        3\n       </td>\n       <td class="day">\n        4\n       </td>\n       <td class="day">\n        5\n       </td>\n       <td class="day">\n        6\n       </td>\n      </tr>\n      <tr>\n       <td class="day">\n        7\n       </td>\n       <td class="day">\n        8\n       </td>\n       <td class="day">\n        9\n       </td>\n       <td class="day active">\n        10\n       </td>\n       <td class="day">\n        11\n       </td>\n       <td class="day">\n        12\n       </td>\n       <td class="day">\n        13\n       </td>\n      </tr>\n      <tr>\n       <td class="day">\n        14\n       </td>\n       <td class="day">\n        15\n       </td>\n       <td class="day">\n        16\n       </td>\n       <td class="day">\n        17\n       </td>\n       <td class="day">\n        18\n       </td>\n       <td class="day">\n        19\n       </td>\n       <td class="day">\n        20\n       </td>\n      </tr>\n      <tr>\n       <td class="day">\n        21\n       </td>\n       <td class="day">\n        22\n       </td>\n       <td class="day">\n        23\n       </td>\n       <td class="day">\n        24\n       </td>\n       <td class="day">\n        25\n       </td>\n       <td class="day">\n        26\n       </td>\n       <td class="day">\n        27\n       </td>\n      </tr>\n      <tr>\n       <td class="day">\n        28\n       </td>\n       <td class="day">\n        29\n       </td>\n       <td class="day">\n        30\n       </td>\n       <td class="day">\n        31\n       </td>\n       <td class="day new">\n        1\n       </td>\n       <td class="day new">\n        2\n       </td>\n       <td class="day new">\n        3\n       </td>\n      </tr>\n      <tr>\n       <td class="day new">\n        4\n       </td>\n       <td class="day new">\n        5\n       </td>\n       <td class="day new">\n        6\n       </td>\n       <td class="day new">\n        7\n       </td>\n       <td class="day new">\n        8\n       </td>\n       <td class="day new">\n        9\n       </td>\n       <td class="day new">\n        10\n       </td>\n      </tr>\n     </tbody>\n    </table>\n   </div>\n   <div class="datepicker-months" style="display: none;">\n    <table class="table-condensed">\n     <thead>\n      <tr>\n       <th class="prev">\n        \xe2\x80\xb9\n       </th>\n       <th class="switch" colspan="5">\n        1990\n       </th>\n       <th class="next">\n        \xe2\x80\xba\n       </th>\n      </tr>\n     </thead>\n     <tbody>\n      <tr>\n       <td colspan="7">\n        <span class="month">\n         Jan\n        </span>\n        <span class="month">\n         Feb\n        </span>\n        <span class="month">\n         Mar\n        </span>\n        <span class="month">\n         Apr\n        </span>\n        <span class="month">\n         May\n        </span>\n        <span class="month">\n         Jun\n        </span>\n        <span class="month">\n         Jul\n        </span>\n        <span class="month">\n         Aug\n        </span>\n        <span class="month">\n         Sep\n        </span>\n        <span class="month active">\n         Oct\n        </span>\n        <span class="month">\n         Nov\n        </span>\n        <span class="month">\n         Dec\n        </span>\n       </td>\n      </tr>\n     </tbody>\n    </table>\n   </div>\n   <div class="datepicker-years" style="display: none;">\n    <table class="table-condensed">\n     <thead>\n      <tr>\n       <th class="prev">\n        \xe2\x80\xb9\n       </th>\n       <th class="switch" colspan="5">\n        1990-1999\n       </th>\n       <th class="next">\n        \xe2\x80\xba\n       </th>\n      </tr>\n     </thead>\n     <tbody>\n      <tr>\n       <td colspan="7">\n        <span class="year old">\n         1989\n        </span>\n        <span class="year active">\n         1990\n        </span>\n        <span class="year">\n         1991\n        </span>\n        <span class="year">\n         1992\n        </span>\n        <span class="year">\n         1993\n        </span>\n        <span class="year">\n         1994\n        </span>\n        <span class="year">\n         1995\n        </span>\n        <span class="year">\n         1996\n        </span>\n        <span class="year">\n         1997\n        </span>\n        <span class="year">\n         1998\n        </span>\n        <span class="year">\n         1999\n        </span>\n        <span class="year old">\n         2000\n        </span>\n       </td>\n      </tr>\n     </tbody>\n    </table>\n   </div>\n  </div>\n </body>\n</html>'