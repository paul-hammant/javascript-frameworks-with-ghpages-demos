b'<!DOCTYPE html>\n<html xmlns="http://www.w3.org/1999/xhtml">\n <head>\n  <meta charset="utf-8"/>\n  <title>\n   React.js Todos\n  </title>\n  <meta content="Backbone\'s example TODO app with React JS\n      Components for views in place of Backbone.View" name="description"/>\n  <link href="favicon.ico" rel="icon" type="image/x-icon"/>\n  <link href="css/reacttodos.css" rel="stylesheet"/>\n  <script>\n   // Todo Model\n// ----------\n\n// Our basic **Todo** model has `title` and `done` attributes.\nvar Todo = Backbone.Model.extend({\n\n  // Default attributes for the Todo item.\n  defaults: function() {\n    return {\n      title: "",\n      done: false\n    };\n  }\n\n});\n\n// Todo Collection\n// ---------------\n\n// The collection of Todos is backed by *localStorage* instead of a remote\n// server.\nvar TodoList = Backbone.Collection.extend({\n\n  // Reference to this collection\'s model.\n  model: Todo,\n\n  // Save all of the todo items under the `"todos-react"` namespace.\n  localStorage: new Backbone.LocalStorage("todos-react"),\n\n  // Filter down the list of all todo items that are finished.\n  done: function() {\n    return this.where({done: true});\n  },\n\n  // Filter down the list to only todo items that are still not finished.\n  remaining: function() {\n    return this.where({done: false});\n  }\n\n});\n\n// Backbone/React Integration\n// --------------------------\n\n// Updates React components when their Backbone resources change. Expects the\n// component to implement a method called `getResource` that returns an object\n// that extends `Backbone.Events`.\nvar BackboneMixin = {\n\n  // Listen to all events on this component\'s collection or model and force an\n  // update when they fire. Let React decide whether the DOM should change.\n  componentDidMount: function() {\n    this._boundForceUpdate = this.forceUpdate.bind(this, null);\n    this.getResource().on("all", this._boundForceUpdate, this);\n  },\n\n  // Clean up the listener when the component will be removed.\n  componentWillUnmount: function() {\n    this.getResource().off("all", this._boundForceUpdate);\n  }\n\n};\n\n// Todo List Item Component\n// ------------------------\n\n// The DOM for a todo item...\nvar TodoListItemComponent = React.createClass({displayName: \'TodoListItemComponent\',\n\n  // If the component updates and is in edit mode, send focus to the `&lt;input&gt;`.\n  componentDidUpdate: function(prevProps) {\n    if (this.props.editing &amp;&amp; !prevProps.editing) {\n      this.refs.editInput.getDOMNode().focus();\n    }\n  },\n\n  // Destroying the model fires a `remove` event on the model\'s collection,\n  // which forces an update and removes this **TodoListItemComponent** from the\n  // DOM. We don\'t have to do any other cleanup!\n  destroy: function() {\n    this.props.model.destroy();\n  },\n\n  // Stop editing if the input gets an "Enter" keypress.\n  handleEditKeyPress: function(event) {\n    if (13 === event.keyCode) {\n      this.stopEditing();\n    }\n  },\n\n  render: function() {\n    var inputStyles = {};\n    var viewStyles = {};\n\n    // Hide the `.view` when editing\n    if (this.props.editing) {\n      viewStyles.display = "none";\n\n    // ... and hide the `&lt;input&gt;` when not editing\n    } else {\n      inputStyles.display = "none";\n    }\n\n    return (\n      React.createElement("li", {className: this.props.model.get("done") ? "done" : ""}, \n        React.createElement("div", {className: "view", onDoubleClick: this.startEditing, style: viewStyles}, \n          React.createElement("input", {className: "toggle", type: "checkbox", \n            checked: this.props.model.get("done"), \n            onChange: this.toggleDone}), \n          React.createElement("label", null, this.props.model.get("title")), \n          React.createElement("a", {className: "destroy", onClick: this.destroy})\n        ), \n        React.createElement("input", {className: "edit", ref: "editInput", type: "text", \n          onBlur: this.stopEditing, \n          onChange: this.setTitle, \n          onKeyPress: this.handleEditKeyPress, \n          style: inputStyles, \n          value: this.props.model.get("title")})\n      )\n    );\n  },\n\n  // Set the title of this item\'s model when the value of the `&lt;input&gt;` changes.\n  setTitle: function(event) {\n    this.props.model.set("title", event.target.value);\n  },\n\n  // Tell the parent component this list item is entering edit mode.\n  startEditing: function() {\n    this.props.onStartEditing(this.props.model.id);\n  },\n\n  // Exit edit mode.\n  stopEditing: function() {\n    this.props.onStopEditing(this.props.model.id);\n  },\n\n  toggleDone: function(event) {\n    this.props.model.set("done", event.target.checked);\n  }\n\n});\n\n// Todo List Component\n// -------------------\n\n// Renders a list of todos.\nvar TodoListComponent = React.createClass({displayName: \'TodoListComponent\',\n\n  // Start with no list item in edit mode.\n  getInitialState: function() {\n    return {\n      editingModelId: null\n    };\n  },\n\n  // When a `TodoListItemComponent` starts editing, it passes its model\'s ID to\n  // this callback. Setting the state triggers this component to re-render and\n  // render that `TodoListItemComponent` in edit mode.\n  setEditingModelId: function(modelId) {\n    this.setState({editingModelId: modelId});\n  },\n\n  unsetEditingModelId: function(modelId) {\n    if (modelId === this.state.editingModelId) {\n      this.setState({editingModelId: null});\n    }\n  },\n\n  render: function() {\n    return (\n      React.createElement("ul", {id: "todo-list"}, \n        this.props.collection.map(function(model) {\n          // Pass the `key` attribute[1] a unique ID so React can track the\n          // elements properly.\n          //\n          // [1] http://facebook.github.io/react/docs/multiple-components.html#dynamic-children\n          return (\n            React.createElement(TodoListItemComponent, {\n              editing: this.state.editingModelId === model.id, \n              key: model.id, \n              model: model, \n              onStartEditing: this.setEditingModelId, \n              onStopEditing: this.unsetEditingModelId})\n          );\n        }, this)\n      )\n    );\n  }\n\n});\n\n// Footer Component\n// ----------------\n\n// The footer shows the total number of todos and how many are completed.\nvar FooterComponent = React.createClass({displayName: \'FooterComponent\',\n\n  render: function() {\n    var clearCompletedStyles = {};\n\n    // Hide the "Clear X completed items" button if there are no completed\n    // items.\n    if (0 === this.props.itemsDoneCount) {\n      clearCompletedStyles.display = "none";\n    }\n\n    // Clicking the "Clear X completed items" button calls the\n    // "clearCompletedItems" function passed in on `props`.\n    return (\n      React.createElement("footer", null, \n        React.createElement("a", {id: "clear-completed", style: clearCompletedStyles, \n            onClick: this.props.clearCompletedItems}, \n          "Clear ", this.props.itemsDoneCount, " completed", \n          1 === this.props.itemsDoneCount ? " item" : " items"\n        ), \n        React.createElement("div", {className: "todo-count"}, \n          React.createElement("b", null, this.props.itemsRemainingCount), \n          1 === this.props.itemsRemainingCount ? " item" : " items", " left"\n        )\n      )\n    );\n  }\n\n});\n\n// Main Component\n// --------------\n\n// The main component contains the list of todos and the footer.\nvar MainComponent = React.createClass({displayName: \'MainComponent\',\n\n  // Tell the **App** to toggle the *done* state of all **Todo** items.\n  toggleAllItemsCompleted: function(event) {\n    this.props.toggleAllItemsCompleted(event.target.checked);\n  },\n\n  render: function() {\n    var style = {};\n\n    // Hide the "Mark all as complete" button and the footer if there are no\n    // **Todo** items.\n    if (0 === this.props.collection.length) {\n      style.display = "none";\n    }\n\n    return (\n      React.createElement("section", {id: "main", style: style}, \n        React.createElement("input", {id: "toggle-all", type: "checkbox", \n          checked: 0 === this.props.collection.remaining().length, \n          onChange: this.toggleAllItemsCompleted}), \n        React.createElement("label", {htmlFor: "toggle-all"}, \n          "Mark all as complete"\n        ), \n        React.createElement(TodoListComponent, {collection: this.props.collection}), \n        React.createElement(FooterComponent, {\n          clearCompletedItems: this.props.clearCompletedItems, \n          itemsRemainingCount: this.props.collection.remaining().length, \n          itemsDoneCount: this.props.collection.done().length})\n      )\n    );\n  }\n\n});\n\nvar AppComponent = React.createClass({displayName: \'AppComponent\',\n\n  // Clear all done todo items, destroying their models.\n  clearCompletedItems: function() {\n    _.invoke(this.props.collection.done(), "destroy");\n  },\n\n  // Fetch Todos before the App is rendered to the DOM.\n  componentWillMount: function() {\n    this.props.collection.fetch();\n  },\n\n  // Start the app with a blank `&lt;input&gt;`.\n  getInitialState: function() {\n    return {\n      title: ""\n    };\n  },\n\n  // Used by the **BackboneMixin** to watch for changes on this component\'s\n  // resource.\n  getResource: function() {\n    return this.props.collection;\n  },\n\n  // Set the state of the title when the `&lt;input&gt;` is changed.\n  handleTitleChange: function(event) {\n    this.setState({title: event.target.value});\n  },\n\n  // If "Enter" is pressed in the main input field, it will submit the form.\n  // Create a new **Todo** in *localStorage* and reset the title.\n  handleTitleFormSubmit: function(event) {\n    event.preventDefault();\n\n    if ("" === this.state.title) return;\n\n    this.props.collection.create({title: this.state.title});\n    this.setState({title: ""});\n  },\n\n  toggleAllItemsCompleted: function(completed) {\n    this.props.collection.each(function(todo) {\n      todo.save({"done": completed});\n    });\n  },\n\n  // Force updates whenever this **App**\'s collection receives events.\n  mixins: [BackboneMixin],\n\n  render: function() {\n    return (\n      React.createElement("div", null, \n        React.createElement("header", null, \n          React.createElement("h1", null, "Todos"), \n          React.createElement("form", {onSubmit: this.handleTitleFormSubmit}, \n            React.createElement("input", {placeholder: "What needs to be done?", type: "text", name: "title", \n              onChange: this.handleTitleChange, \n              value: this.state.title})\n          )\n        ), \n        React.createElement(MainComponent, {\n          clearCompletedItems: this.clearCompletedItems, \n          collection: this.props.collection, \n          toggleAllItemsCompleted: this.toggleAllItemsCompleted})\n      )\n    );\n  }\n})\n\n// Create a new Todo collection and render the **App** into `#todoapp`.\nReact.render(\n  React.createElement(AppComponent, {collection: new TodoList()}),\n  document.getElementById("todoapp")\n);\n\n//# sourceMappingURL=data:application/json;base64,\n  </script>\n </head>\n <body>\n  <div id="todoapp">\n   <div data-reactid=".0">\n    <header data-reactid=".0.0">\n     <h1 data-reactid=".0.0.0">\n      Todos\n     </h1>\n     <form data-reactid=".0.0.1">\n      <input data-reactid=".0.0.1.0" name="title" placeholder="What needs to be done?" type="text" value=""/>\n     </form>\n    </header>\n    <section data-reactid=".0.1" id="main" style="display:none;">\n     <input checked="" data-reactid=".0.1.0" id="toggle-all" type="checkbox"/>\n     <label data-reactid=".0.1.1" for="toggle-all">\n      Mark all as complete\n     </label>\n     <ul data-reactid=".0.1.2" id="todo-list">\n     </ul>\n     <footer data-reactid=".0.1.3">\n      <a data-reactid=".0.1.3.0" id="clear-completed" style="display:none;">\n       <span data-reactid=".0.1.3.0.0">\n        Clear\n       </span>\n       <span data-reactid=".0.1.3.0.1">\n        0\n       </span>\n       <span data-reactid=".0.1.3.0.2">\n        completed\n       </span>\n       <span data-reactid=".0.1.3.0.3">\n        items\n       </span>\n      </a>\n      <div class="todo-count" data-reactid=".0.1.3.1">\n       <b data-reactid=".0.1.3.1.0">\n        0\n       </b>\n       <span data-reactid=".0.1.3.1.1">\n        items\n       </span>\n       <span data-reactid=".0.1.3.1.2">\n        left\n       </span>\n      </div>\n     </footer>\n    </section>\n   </div>\n  </div>\n  <div id="instructions">\n   Double-click to edit a todo.\n  </div>\n  <div id="credits">\n   Created by:\n   <a href="https://twitter.com/ssorallen?rel=author">\n    Ross Allen\n   </a>\n   <br/>\n   The source:\n   <a href="https://github.com/ssorallen/reacttodos">\n    ssorallen/reacttodos\n   </a>\n   <br/>\n   Adapted from:\n   <a href="http://localtodos.com/">\n    Backbone.js Todos\n   </a>\n  </div>\n  <script src="bower_components/underscore/underscore-min.js">\n  </script>\n  <script src="bower_components/backbone/backbone.js">\n  </script>\n  <script src="bower_components/backbone.localStorage/backbone.localStorage-min.js">\n  </script>\n  <script src="bower_components/react/JSXTransformer.js">\n  </script>\n  <script src="bower_components/react/react.min.js">\n  </script>\n  <!-- Use type="text/jsx" so "todos.js" will be compiled by the JSXTransformer\n         as JSX syntax -->\n  <script src="todos.js" type="text/jsx">\n  </script>\n </body>\n</html>'b'<!DOCTYPE html>\n<html xmlns="http://www.w3.org/1999/xhtml">\n <head>\n  <meta charset="utf-8"/>\n  <title>\n   React.js Todos\n  </title>\n  <meta content="Backbone\'s example TODO app with React JS\n      Components for views in place of Backbone.View" name="description"/>\n  <link href="favicon.ico" rel="icon" type="image/x-icon"/>\n  <link href="css/reacttodos.css" rel="stylesheet"/>\n  <script>\n   // Todo Model\n// ----------\n\n// Our basic **Todo** model has `title` and `done` attributes.\nvar Todo = Backbone.Model.extend({\n\n  // Default attributes for the Todo item.\n  defaults: function() {\n    return {\n      title: "",\n      done: false\n    };\n  }\n\n});\n\n// Todo Collection\n// ---------------\n\n// The collection of Todos is backed by *localStorage* instead of a remote\n// server.\nvar TodoList = Backbone.Collection.extend({\n\n  // Reference to this collection\'s model.\n  model: Todo,\n\n  // Save all of the todo items under the `"todos-react"` namespace.\n  localStorage: new Backbone.LocalStorage("todos-react"),\n\n  // Filter down the list of all todo items that are finished.\n  done: function() {\n    return this.where({done: true});\n  },\n\n  // Filter down the list to only todo items that are still not finished.\n  remaining: function() {\n    return this.where({done: false});\n  }\n\n});\n\n// Backbone/React Integration\n// --------------------------\n\n// Updates React components when their Backbone resources change. Expects the\n// component to implement a method called `getResource` that returns an object\n// that extends `Backbone.Events`.\nvar BackboneMixin = {\n\n  // Listen to all events on this component\'s collection or model and force an\n  // update when they fire. Let React decide whether the DOM should change.\n  componentDidMount: function() {\n    this._boundForceUpdate = this.forceUpdate.bind(this, null);\n    this.getResource().on("all", this._boundForceUpdate, this);\n  },\n\n  // Clean up the listener when the component will be removed.\n  componentWillUnmount: function() {\n    this.getResource().off("all", this._boundForceUpdate);\n  }\n\n};\n\n// Todo List Item Component\n// ------------------------\n\n// The DOM for a todo item...\nvar TodoListItemComponent = React.createClass({displayName: \'TodoListItemComponent\',\n\n  // If the component updates and is in edit mode, send focus to the `&lt;input&gt;`.\n  componentDidUpdate: function(prevProps) {\n    if (this.props.editing &amp;&amp; !prevProps.editing) {\n      this.refs.editInput.getDOMNode().focus();\n    }\n  },\n\n  // Destroying the model fires a `remove` event on the model\'s collection,\n  // which forces an update and removes this **TodoListItemComponent** from the\n  // DOM. We don\'t have to do any other cleanup!\n  destroy: function() {\n    this.props.model.destroy();\n  },\n\n  // Stop editing if the input gets an "Enter" keypress.\n  handleEditKeyPress: function(event) {\n    if (13 === event.keyCode) {\n      this.stopEditing();\n    }\n  },\n\n  render: function() {\n    var inputStyles = {};\n    var viewStyles = {};\n\n    // Hide the `.view` when editing\n    if (this.props.editing) {\n      viewStyles.display = "none";\n\n    // ... and hide the `&lt;input&gt;` when not editing\n    } else {\n      inputStyles.display = "none";\n    }\n\n    return (\n      React.createElement("li", {className: this.props.model.get("done") ? "done" : ""}, \n        React.createElement("div", {className: "view", onDoubleClick: this.startEditing, style: viewStyles}, \n          React.createElement("input", {className: "toggle", type: "checkbox", \n            checked: this.props.model.get("done"), \n            onChange: this.toggleDone}), \n          React.createElement("label", null, this.props.model.get("title")), \n          React.createElement("a", {className: "destroy", onClick: this.destroy})\n        ), \n        React.createElement("input", {className: "edit", ref: "editInput", type: "text", \n          onBlur: this.stopEditing, \n          onChange: this.setTitle, \n          onKeyPress: this.handleEditKeyPress, \n          style: inputStyles, \n          value: this.props.model.get("title")})\n      )\n    );\n  },\n\n  // Set the title of this item\'s model when the value of the `&lt;input&gt;` changes.\n  setTitle: function(event) {\n    this.props.model.set("title", event.target.value);\n  },\n\n  // Tell the parent component this list item is entering edit mode.\n  startEditing: function() {\n    this.props.onStartEditing(this.props.model.id);\n  },\n\n  // Exit edit mode.\n  stopEditing: function() {\n    this.props.onStopEditing(this.props.model.id);\n  },\n\n  toggleDone: function(event) {\n    this.props.model.set("done", event.target.checked);\n  }\n\n});\n\n// Todo List Component\n// -------------------\n\n// Renders a list of todos.\nvar TodoListComponent = React.createClass({displayName: \'TodoListComponent\',\n\n  // Start with no list item in edit mode.\n  getInitialState: function() {\n    return {\n      editingModelId: null\n    };\n  },\n\n  // When a `TodoListItemComponent` starts editing, it passes its model\'s ID to\n  // this callback. Setting the state triggers this component to re-render and\n  // render that `TodoListItemComponent` in edit mode.\n  setEditingModelId: function(modelId) {\n    this.setState({editingModelId: modelId});\n  },\n\n  unsetEditingModelId: function(modelId) {\n    if (modelId === this.state.editingModelId) {\n      this.setState({editingModelId: null});\n    }\n  },\n\n  render: function() {\n    return (\n      React.createElement("ul", {id: "todo-list"}, \n        this.props.collection.map(function(model) {\n          // Pass the `key` attribute[1] a unique ID so React can track the\n          // elements properly.\n          //\n          // [1] http://facebook.github.io/react/docs/multiple-components.html#dynamic-children\n          return (\n            React.createElement(TodoListItemComponent, {\n              editing: this.state.editingModelId === model.id, \n              key: model.id, \n              model: model, \n              onStartEditing: this.setEditingModelId, \n              onStopEditing: this.unsetEditingModelId})\n          );\n        }, this)\n      )\n    );\n  }\n\n});\n\n// Footer Component\n// ----------------\n\n// The footer shows the total number of todos and how many are completed.\nvar FooterComponent = React.createClass({displayName: \'FooterComponent\',\n\n  render: function() {\n    var clearCompletedStyles = {};\n\n    // Hide the "Clear X completed items" button if there are no completed\n    // items.\n    if (0 === this.props.itemsDoneCount) {\n      clearCompletedStyles.display = "none";\n    }\n\n    // Clicking the "Clear X completed items" button calls the\n    // "clearCompletedItems" function passed in on `props`.\n    return (\n      React.createElement("footer", null, \n        React.createElement("a", {id: "clear-completed", style: clearCompletedStyles, \n            onClick: this.props.clearCompletedItems}, \n          "Clear ", this.props.itemsDoneCount, " completed", \n          1 === this.props.itemsDoneCount ? " item" : " items"\n        ), \n        React.createElement("div", {className: "todo-count"}, \n          React.createElement("b", null, this.props.itemsRemainingCount), \n          1 === this.props.itemsRemainingCount ? " item" : " items", " left"\n        )\n      )\n    );\n  }\n\n});\n\n// Main Component\n// --------------\n\n// The main component contains the list of todos and the footer.\nvar MainComponent = React.createClass({displayName: \'MainComponent\',\n\n  // Tell the **App** to toggle the *done* state of all **Todo** items.\n  toggleAllItemsCompleted: function(event) {\n    this.props.toggleAllItemsCompleted(event.target.checked);\n  },\n\n  render: function() {\n    var style = {};\n\n    // Hide the "Mark all as complete" button and the footer if there are no\n    // **Todo** items.\n    if (0 === this.props.collection.length) {\n      style.display = "none";\n    }\n\n    return (\n      React.createElement("section", {id: "main", style: style}, \n        React.createElement("input", {id: "toggle-all", type: "checkbox", \n          checked: 0 === this.props.collection.remaining().length, \n          onChange: this.toggleAllItemsCompleted}), \n        React.createElement("label", {htmlFor: "toggle-all"}, \n          "Mark all as complete"\n        ), \n        React.createElement(TodoListComponent, {collection: this.props.collection}), \n        React.createElement(FooterComponent, {\n          clearCompletedItems: this.props.clearCompletedItems, \n          itemsRemainingCount: this.props.collection.remaining().length, \n          itemsDoneCount: this.props.collection.done().length})\n      )\n    );\n  }\n\n});\n\nvar AppComponent = React.createClass({displayName: \'AppComponent\',\n\n  // Clear all done todo items, destroying their models.\n  clearCompletedItems: function() {\n    _.invoke(this.props.collection.done(), "destroy");\n  },\n\n  // Fetch Todos before the App is rendered to the DOM.\n  componentWillMount: function() {\n    this.props.collection.fetch();\n  },\n\n  // Start the app with a blank `&lt;input&gt;`.\n  getInitialState: function() {\n    return {\n      title: ""\n    };\n  },\n\n  // Used by the **BackboneMixin** to watch for changes on this component\'s\n  // resource.\n  getResource: function() {\n    return this.props.collection;\n  },\n\n  // Set the state of the title when the `&lt;input&gt;` is changed.\n  handleTitleChange: function(event) {\n    this.setState({title: event.target.value});\n  },\n\n  // If "Enter" is pressed in the main input field, it will submit the form.\n  // Create a new **Todo** in *localStorage* and reset the title.\n  handleTitleFormSubmit: function(event) {\n    event.preventDefault();\n\n    if ("" === this.state.title) return;\n\n    this.props.collection.create({title: this.state.title});\n    this.setState({title: ""});\n  },\n\n  toggleAllItemsCompleted: function(completed) {\n    this.props.collection.each(function(todo) {\n      todo.save({"done": completed});\n    });\n  },\n\n  // Force updates whenever this **App**\'s collection receives events.\n  mixins: [BackboneMixin],\n\n  render: function() {\n    return (\n      React.createElement("div", null, \n        React.createElement("header", null, \n          React.createElement("h1", null, "Todos"), \n          React.createElement("form", {onSubmit: this.handleTitleFormSubmit}, \n            React.createElement("input", {placeholder: "What needs to be done?", type: "text", name: "title", \n              onChange: this.handleTitleChange, \n              value: this.state.title})\n          )\n        ), \n        React.createElement(MainComponent, {\n          clearCompletedItems: this.clearCompletedItems, \n          collection: this.props.collection, \n          toggleAllItemsCompleted: this.toggleAllItemsCompleted})\n      )\n    );\n  }\n})\n\n// Create a new Todo collection and render the **App** into `#todoapp`.\nReact.render(\n  React.createElement(AppComponent, {collection: new TodoList()}),\n  document.getElementById("todoapp")\n);\n\n//# sourceMappingURL=data:application/json;base64,\n  </script>\n </head>\n <body>\n  <div id="todoapp">\n   <div data-reactid=".0">\n    <header data-reactid=".0.0">\n     <h1 data-reactid=".0.0.0">\n      Todos\n     </h1>\n     <form data-reactid=".0.0.1">\n      <input data-reactid=".0.0.1.0" name="title" placeholder="What needs to be done?" type="text" value=""/>\n     </form>\n    </header>\n    <section data-reactid=".0.1" id="main" style="display:none;">\n     <input checked="" data-reactid=".0.1.0" id="toggle-all" type="checkbox"/>\n     <label data-reactid=".0.1.1" for="toggle-all">\n      Mark all as complete\n     </label>\n     <ul data-reactid=".0.1.2" id="todo-list">\n     </ul>\n     <footer data-reactid=".0.1.3">\n      <a data-reactid=".0.1.3.0" id="clear-completed" style="display:none;">\n       <span data-reactid=".0.1.3.0.0">\n        Clear\n       </span>\n       <span data-reactid=".0.1.3.0.1">\n        0\n       </span>\n       <span data-reactid=".0.1.3.0.2">\n        completed\n       </span>\n       <span data-reactid=".0.1.3.0.3">\n        items\n       </span>\n      </a>\n      <div class="todo-count" data-reactid=".0.1.3.1">\n       <b data-reactid=".0.1.3.1.0">\n        0\n       </b>\n       <span data-reactid=".0.1.3.1.1">\n        items\n       </span>\n       <span data-reactid=".0.1.3.1.2">\n        left\n       </span>\n      </div>\n     </footer>\n    </section>\n   </div>\n  </div>\n  <div id="instructions">\n   Double-click to edit a todo.\n  </div>\n  <div id="credits">\n   Created by:\n   <a href="https://twitter.com/ssorallen?rel=author">\n    Ross Allen\n   </a>\n   <br/>\n   The source:\n   <a href="https://github.com/ssorallen/reacttodos">\n    ssorallen/reacttodos\n   </a>\n   <br/>\n   Adapted from:\n   <a href="http://localtodos.com/">\n    Backbone.js Todos\n   </a>\n  </div>\n  <script src="bower_components/underscore/underscore-min.js">\n  </script>\n  <script src="bower_components/backbone/backbone.js">\n  </script>\n  <script src="bower_components/backbone.localStorage/backbone.localStorage-min.js">\n  </script>\n  <script src="bower_components/react/JSXTransformer.js">\n  </script>\n  <script src="bower_components/react/react.min.js">\n  </script>\n  <!-- Use type="text/jsx" so "todos.js" will be compiled by the JSXTransformer\n         as JSX syntax -->\n  <script src="todos.js" type="text/jsx">\n  </script>\n </body>\n</html>'