b'<html class="ng-scope" ng-app="docs">\n <head>\n  <style type="text/css">\n   @charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide{display:none !important;}ng\\:form{display:block;}.ng-animate-block-transitions{transition:0s all!important;-webkit-transition:0s all!important;}\n  </style>\n  <meta charset="utf-8"/>\n  <meta content="IE=edge" http-equiv="X-UA-Compatible"/>\n  <title>\n   mediaPlayer: Getting Started\n  </title>\n  <!-- BootstrapCDN -->\n  <link href="//netdna.bootstrapcdn.com/bootswatch/3.1.1/darkly/bootstrap.min.css" rel="stylesheet"/>\n  <link href="//netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.min.css" rel="stylesheet"/>\n  <!-- highlight.js -->\n  <link href="//yandex.st/highlightjs/8.0/styles/github.min.css" rel="stylesheet"/>\n  <!-- css fork ribbon -->\n  <link href="/angular-media-player/libs/github-fork-ribbon-css/gh-fork-ribbon.css" rel="stylesheet"/>\n  <!--[if lt IE 9]>\n        <link rel="stylesheet" href="/angular-media-player/libs/github-fork-ribbon-css/gh-fork-ribbon.ie.css">\n    <![endif]-->\n  <!-- overridden css -->\n  <link href="/angular-media-player/style.css" rel="stylesheet"/>\n  <!-- google analytics -->\n  <script async="" src="http://www.google-analytics.com/ga.js" type="text/javascript">\n  </script>\n  <script type="text/javascript">\n   var _gaq = _gaq || [];\n_gaq.push([\'_setAccount\', \'UA-42785441-1\']);\n_gaq.push([\'_trackPageview\']);\n\n(function() {\n  var ga = document.createElement(\'script\'); ga.type = \'text/javascript\'; ga.async = true;\n  ga.src = (\'https:\' === document.location.protocol ? \'https://ssl\' : \'http://www\') + \'.google-analytics.com/ga.js\';\n  var s = document.getElementsByTagName(\'script\')[0]; s.parentNode.insertBefore(ga, s);\n})();\n  </script>\n  <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.2.15/angular.js" type="text/javascript">\n  </script>\n  <script src="/angular-media-player/libs/angular-media-player.js" type="text/javascript">\n  </script>\n  <script type="text/javascript">\n   angular.module(\'docs\', [\'mediaPlayer\'])\n.config(function ($interpolateProvider) {\n  $interpolateProvider.startSymbol(\'[[\');\n  $interpolateProvider.endSymbol(\']]\');\n})\n.run(function ($rootScope) {\n  // helper function to seek to a percentage\n  $rootScope.seekPercentage = function ($event) {\n    var percentage = ($event.offsetX / $event.target.offsetWidth);\n    if (percentage <= 1) {\n      return percentage;\n    } else {\n      return 0;\n    }\n  };\n});\n  </script>\n </head>\n <body>\n  <div class="footerwrap">\n   <div class="github-fork-ribbon-wrapper right hidden-xs">\n    <div class="github-fork-ribbon">\n     <a href="https://github.com/mrgamer/angular-media-player">\n      Fork me on GitHub\n     </a>\n    </div>\n   </div>\n   <div class="navbar navbar-inverse navbar-fixed-top">\n    <div class="container">\n     <div class="navbar-header">\n      <a class="navbar-brand hidden-xs" href="/angular-media-player/index.html">\n       angular-media-player\n      </a>\n      <a class="navbar-brand visible-xs" href="/angular-media-player/index.html">\n       <i class="fa fa-home">\n       </i>\n      </a>\n      <p class="navbar-text navbar-arrow">\n      </p>\n      <p class="navbar-text navbar-active">\n       Getting Started\n      </p>\n     </div>\n    </div>\n   </div>\n   <div class="container">\n    <div class="col-xs-12 col-sm-9">\n     <h1 id="angular-media-player-build-status-https-travis-ci-org-mrgamer-angular-media-player-svg-branch-master-https-travis-ci-org-mrgamer-angular-media-player-">\n      angular-media-player\n      <a href="https://travis-ci.org/mrgamer/angular-media-player">\n       <img alt="Build Status" src="https://travis-ci.org/mrgamer/angular-media-player.svg?branch=master"/>\n      </a>\n     </h1>\n     <p>\n      AngularJS Directive that wraps\n      <code>\n       &lt;audio&gt;\n      </code>\n      or\n      <code>\n       &lt;video\n      </code>\n      &gt; tag exposing methods and properties to manipulate your player\n     </p>\n     <p>\n      <em>\n       updated\n      </em>\n      examples on github pages:\n      <a href="http://mrgamer.github.io/angular-media-player/">\n       http://mrgamer.github.io/angular-media-player/\n      </a>\n     </p>\n     <h2 id="abstract-idea">\n      Abstract / Idea\n     </h2>\n     <p>\n      I\'ve come across a lot of\n      <code>\n       &lt;audio&gt;\n      </code>\n      players on the web, many using Flash, many being easy-to-use, almost none of them being compatible with AngularJS.\n      <br/>\n      What i really was looking for was a simple audio wrapper\n      <strong>\n       without\n      </strong>\n      the need to support browser which don\'t have audio tag support!\n      <br/>\n      Means support for this project is the same as:\n      <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio#Browser_compatibility">\n       HTML5 audio draft\n      </a>\n      , jQuery is not necessary, and DOM manipulation is done only with jqLite (IE9+)\n      <br/>\n      <a href="http://github.com/mrgamer/angular-media-player">\n       angular-media-player\n      </a>\n      is html/css\n      <strong>\n       agnostic\n      </strong>\n      , meaning you can use it with your browser controls and default style, or bind the methods and properties in your own View\n     </p>\n     <h2 id="how-to-use-it-in-your-project">\n      How-to use it in your project\n     </h2>\n     <p>\n      Using\n      <a href="http://bower.io">\n       bower\n      </a>\n      :\n     </p>\n     <pre><code class="lang-bash">$ bower install angular<span class="hljs-attribute">-media</span><span class="hljs-attribute">-player</span>\n</code></pre>\n     <p>\n      Using github hosting:\n     </p>\n     <pre><code class="lang-html"><span class="hljs-comment">&lt;!-- non-minified for debugging --&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"//mrgamer.github.io/angular-media-player/dist/angular-media-player.js"</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text/javascript"</span>&gt;</span><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>\n<span class="hljs-comment">&lt;!-- minified --&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"//mrgamer.github.io/angular-media-player/dist/angular-media-player.min.js"</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text/javascript"</span>&gt;</span><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>\n</code></pre>\n     <h2 id="test-coverage">\n      Test coverage\n     </h2>\n     <p>\n      At the moment IE passes only 8 tests of 20, most of them require an\n      <code>\n       &lt;audio&gt;\n      </code>\n      tag to work with\n      <code>\n       .ogg\n      </code>\n      files.\n      <img alt="test-coverage" src="http://i.imgur.com/mkFdC4q.gif"/>\n     </p>\n     <p>\n      IE supports\n      <strong>\n       only\n      </strong>\n      <code>\n       .mp3\n      </code>\n      files, works as expected if you use them.\n     </p>\n     <h2 id="breaking-changes-with-0-5-x-">\n      Breaking changes with\n      <code>\n       0.5.x\n      </code>\n     </h2>\n     <ul>\n      <li>\n       <code>\n        angular.module\n       </code>\n       changed\n       <strong>\n        AGAIN\n       </strong>\n       from\n       <code>\n        \'audioPlayer\'\n       </code>\n       to\n       <code>\n        \'mediaPlayer\'\n       </code>\n       as the library supports\n       <code>\n        &lt;video&gt;\n       </code>\n       tag aswell\n      </li>\n      <li>\n       property\n       <code>\n        \'position\'\n       </code>\n       removed. Use\n       <code>\n        currentTime\n       </code>\n       instead.\n      </li>\n     </ul>\n     <p>\n      If you find something is missing from this list please take a couple of minutes to open an\n      <a href="https://github.com/mrgamer/angular-media-player/issues/new">\n       Issue\n      </a>\n     </p>\n     <h3 id="what-s-new">\n      What\'s new\n     </h3>\n     <ul>\n      <li>\n       I\'ve already written it but...\n       <code>\n        &lt;video&gt;\n       </code>\n       tag support!\n      </li>\n      <li>\n       new property\n       <code>\n        network\n       </code>\n      </li>\n      <li>\n       playback rate support\n      </li>\n      <li>\n       seeking\n      </li>\n      <li>\n       test-driven: both unit tests and asynchronous tests with real audio/video files (requires internet working)\n      </li>\n      <li>\n       playlist handling is way more robust, and tested.\n      </li>\n      <li>\n       <code>\n        mediaPlayer\n       </code>\n       is not created as an isolated scope, instead it\n       <strong>\n        pollutes\n       </strong>\n       the father scope. Watch out for name collisions.\n      </li>\n      <li>\n       Events are no more sent to\n       <code>\n        $rootScope\n       </code>\n       , they are handled by the namespaced\n       <code>\n        mediaPlayer\n       </code>\n       , that is now an\n       <a href="http://docs.angularjs.org/guide/scope">\n        angular.js Scope\n       </a>\n      </li>\n      <li>\n       Minimalist and flexible\n       <a href="#events">\n        event system\n       </a>\n       , based off browser implementation.\n      </li>\n     </ul>\n     <p>\n      The new documentation is on-going work, you can keep track of it being developed, but is not ready to be deployed yet.\n      <br/>\n      And this time will be on\n      <code>\n       gh-pages\n      </code>\n      !\n     </p>\n     <p>\n      More tests are coming.\n     </p>\n     <h2 id="getting-started">\n      Getting Started\n     </h2>\n     <h3 id="-examples-here-examples-">\n      <a href="http://aap.col3.me">\n       Examples here\n      </a>\n     </h3>\n     <p>\n      This directive it\'s just a way to expose\n      <em>\n       HTMLMediaElement\n      </em>\n      properties and methods to an AngularJS application, so you have to use custom html\n      <strong>\n       and\n      </strong>\n      css in order to interface with the audio directive.\n     </p>\n     <h2 id="basic-example">\n      Basic Example\n     </h2>\n     <p>\n      In your AngularJS application include in dependency injection\n      <code>\n       mediaPlayer\n      </code>\n     </p>\n     <pre><code class="lang-javascript">angular.<span class="hljs-built_in">module</span>(<span class="hljs-string">\'myApp\'</span>, [<span class="hljs-string">\'mediaPlayer\'</span>])\n.controller(<span class="hljs-string">\'MyController\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($scope)</span></span> .......)\n</code></pre>\n     <p>\n      Then in the html:\n     </p>\n     <pre><code class="lang-html"><span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">ng-controller</span>=<span class="hljs-value">"MyController"</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-title">audio</span> <span class="hljs-attribute">media-player</span>=<span class="hljs-value">"audio1"</span> <span class="hljs-attribute">data-playlist</span>=<span class="hljs-value">"playlist1"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-title">source</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"http://upload.wikimedia.org/wikipedia/en/d/d0/Rick_Astley_-_Never_Gonna_Give_You_Up.ogg"</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"audio/ogg"</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-title">audio</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">ng-show</span>=<span class="hljs-value">"audio1.playing"</span>&gt;</span>Player status: Playing<span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-title">span</span> <span class="hljs-attribute">ng-show</span>=<span class="hljs-value">"!audio1.playing"</span>&gt;</span>Player status: Paused<span class="hljs-tag">&lt;/<span class="hljs-title">span</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>\n</code></pre>\n     <p>\n      What happens here: a variable called\n      <code>\n       audio1\n      </code>\n      gets created on the scope bound to the controller that holds the\n      <code>\n       &lt;audio&gt;\n      </code>\n      tag.\nThat might be one of your specific controller, or, if you didn\'t define anyone, it will be\n      <code>\n       $rootScope\n      </code>\n      .\n     </p>\n     <p>\n      You can access those methods like this:\n     </p>\n     <pre><code class="lang-javascript">angular.module(<span class="hljs-string">\'myApp\'</span>).controller(<span class="hljs-string">\'MyController\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(<span class="hljs-variable">$scope</span>)</span> {</span>\n\n  <span class="hljs-comment">// access properties</span>\n  console.log(<span class="hljs-variable">$scope</span>.audio1.network);\n  console.log(<span class="hljs-variable">$scope</span>.audio1.ended);\n\n  <span class="hljs-variable">$scope</span>.mySpecialPlayButton = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> {</span>\n    <span class="hljs-variable">$scope</span>.customText = <span class="hljs-string">\'I started angular-media-player with a custom defined action!\'</span>;\n    <span class="hljs-variable">$scope</span>.audio1.playPause();\n  };\n})\n</code></pre>\n     <p>\n      You can use the methods in the controller AND directly in the HTML (as shown in the snippet before), since they are exposed in the $scope.\n     </p>\n     <h2 id="directive">\n      Directive\n     </h2>\n     <p>\n      <code>\n       media-player\n      </code>\n      is a directive working as an\n      <em>\n       attribute\n      </em>\n      , it\n      <strong>\n       must\n      </strong>\n      be used either on an\n      <code>\n       &lt;audio&gt;\n      </code>\n      , or\n      <code>\n       &lt;video&gt;\n      </code>\n      tag.\n     </p>\n     <h3 id="attributes">\n      Attributes\n     </h3>\n     <p>\n      Those can be used as any\n      <a href="http://docs.angularjs.org/guide/directive#matching-directives">\n       AngularJS directive attributes notation\n      </a>\n     </p>\n     <ul>\n      <li>\n       <strong>\n        playlist\n       </strong>\n       : A string, representing the name in the parent scope containing an Array containing audioElements(s)\n      </li>\n      <li>\n       <strong>\n        player-control\n       </strong>\n       :\n       <em>\n        deprecated\n       </em>\n       : A string, referring to the name created in the parent scope to access\n       <code>\n        media-player\n       </code>\n       properties.\n      </li>\n      <li>\n       <strong>\n        media-player\n       </strong>\n       : A string, referring to the name created in the parent scope to access\n       <code>\n        media-player\n       </code>\n       properties.\n      </li>\n     </ul>\n     <p>\n      Those attributes have a one-way binding, the objects gets allocated in the parent scope.\n     </p>\n     <h3 id="playlist-structure">\n      playlist structure\n     </h3>\n     <p>\n      Playlist is an Array containing\n      <code>\n       sourceElement(s)\n      </code>\n      .\n      <br/>\n      An\n      <code>\n       sourceElement\n      </code>\n      itself could be an Array of sourceObjects, or a single sourceObject, mimicking the\n      <code>\n       &lt;source&gt;\n      </code>\n      <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source">\n       HTML draft\n      </a>\n     </p>\n     <p>\n      <strong>\n       sourceObject structure\n      </strong>\n      :\n     </p>\n     <pre><code class="lang-javascript"><span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">src</span>:<span class="hljs-value"> <span class="hljs-string">\'http://some.where.com\'</span>, type: <span class="hljs-string">\'mime/type\'</span>, media: <span class="hljs-string">\'.css.media.query\'</span> </span></span></span>}\n</code></pre>\n     <p>\n      <strong>\n       or alternatively\n      </strong>\n     </p>\n     <pre><code class="lang-javascript">[\n  { src: <span class="hljs-string">\'http://some.where.com\'</span>, <span class="hljs-built_in">type</span>: <span class="hljs-string">\'audio/ogg\'</span> },\n  { src: <span class="hljs-string">\'http://some.where.com/lowquality\'</span>, <span class="hljs-built_in">type</span>: <span class="hljs-string">\'audio/ogg\'</span> },\n  { src: <span class="hljs-string">\'http://some.where.com/crapquality\'</span>, <span class="hljs-built_in">type</span>: <span class="hljs-string">\'audio/ogg\'</span> },\n  { src: <span class="hljs-string">\'http://some.where.com\'</span>, <span class="hljs-built_in">type</span>: <span class="hljs-string">\'audio/mp3\'</span> },\n]\n</code></pre>\n     <p>\n      <em>\n       For whoever wondering what\n       <code>\n        media\n       </code>\n       is\n      </em>\n      : it\'s just a\n      <a href="http://www.w3.org/TR/2009/CR-css3-mediaqueries-20090915/#media0">\n       css media query\n      </a>\n      , so the browser can pick which\n      <code>\n       &lt;source&gt;\n      </code>\n      tag to load.\n      <br/>\n      It\'s recent news that\n      <code>\n       media\n      </code>\n      it\'s (probably) getting\n      <a href="https://groups.google.com/a/chromium.org/forum/#!msg/blink-dev/5sWUMC_d8Tg/ZZ0Z7rfeCqUJ">\n       deprecated anyway\n      </a>\n     </p>\n     <h3 id="exposed-methods">\n      Exposed Methods\n     </h3>\n     <h5 id="player-load-mediaelement-autoplay-">\n      player.load([mediaElement, autoplay])\n     </h5>\n     <p>\n      Parameter\n      <code>\n       mediaElement\n      </code>\n      type\n      <code>\n       object\n      </code>\n      , structure as specified above.\n      <br/>\n      Parameter\n      <code>\n       autoplay\n      </code>\n      type\n      <code>\n       boolean\n      </code>\n      <br/>\n      Internal function called from the below methods, can still be accessed directly if want to, if no parameter is provided just calls the\n      <code>\n       &lt;audio&gt;\n      </code>\n      <em>\n       load\n      </em>\n      method (means it starts buffering).\n     </p>\n     <h5 id="player-play-index-selectiveplay-">\n      player.play([index], [selectivePlay])\n     </h5>\n     <blockquote>\n      <p>\n       <strong>\n        NOTE\n       </strong>\n       : this is\n       <em>\n        0-based\n       </em>\n       exactly as you refer to the elements of an Array.\n      </p>\n     </blockquote>\n     <p>\n      Parameter\n      <code>\n       index\n      </code>\n      type\n      <code>\n       number\n      </code>\n      , referring to the playlist index (0...playlist.length-1)\n      <br/>\n      You can force to play a specific song using the\n      <code>\n       index\n      </code>\n      param.\n     </p>\n     <p>\n      Parameter\n      <code>\n       selectivePlay\n      </code>\n      type\n      <code>\n       boolean\n      </code>\n      , when this is\n      <code>\n       true\n      </code>\n      will be only played the specified track\n     </p>\n     <h5 id="player-playpause-index-selectiveplay-">\n      player.playPause([index], [selectivePlay])\n     </h5>\n     <blockquote>\n      <p>\n       <strong>\n        NOTE\n       </strong>\n       : this is\n       <em>\n        0-based\n       </em>\n       exactly as you refer to the elements of an Array.\n      </p>\n     </blockquote>\n     <p>\n      Parameter\n      <code>\n       index\n      </code>\n      type\n      <code>\n       number\n      </code>\n      , referring to the playlist index (0...playlist.length-1)\n      <br/>\n      If you\n      <code>\n       playPause\n      </code>\n      the same index twice it will alternate start and stop.\n     </p>\n     <p>\n      Parameter\n      <code>\n       selectivePlay\n      </code>\n      type\n      <code>\n       boolean\n      </code>\n      , when this is\n      <code>\n       true\n      </code>\n      will be only played the specified track\n     </p>\n     <h5 id="player-pause-">\n      player.pause()\n     </h5>\n     <p>\n      Pauses the player.\n     </p>\n     <h5 id="player-next-autoplay-">\n      player.next([autoplay])\n     </h5>\n     <p>\n      Parameter\n      <code>\n       autoplay\n      </code>\n      type\n      <code>\n       boolean\n      </code>\n      <br/>\n      Goes to next mediaElement if there is one in the playlist.\n      <br/>\n      Autoplay behaviour is the following:\nIf a song is\n      <em>\n       already\n      </em>\n      playing, it will change to the next mediaElement, and autoplay itas soon as it\'s loaded.\n      <br/>\n      You can force the autoplay using the\n      <code>\n       autoplay\n      </code>\n      parameter.\n     </p>\n     <h5 id="player-prev-autoplay-">\n      player.prev([autoplay])\n     </h5>\n     <p>\n      Parameter\n      <code>\n       autoplay\n      </code>\n      type\n      <code>\n       boolean\n      </code>\n      <br/>\n      Goes to previous mediaElement if there is one in the playlist.\nIf a song is\n      <em>\n       already\n      </em>\n      playing, it will change to the previous mediaElement, and autoplay it as soon as it\'s loaded.\n      <br/>\n      You can force the autoplay using the\n      <code>\n       autoplay\n      </code>\n      parameter.\n     </p>\n     <h5 id="player-togglemute-">\n      player.toggleMute()\n     </h5>\n     <p>\n      Toggles mute property.\n     </p>\n     <h5 id="player-setvolume-value-">\n      player.setVolume(value)\n     </h5>\n     <p>\n      Parameter\n      <code>\n       value\n      </code>\n      type\n      <code>\n       number\n      </code>\n      <br/>\n      This method is a\n      <em>\n       setter\n      </em>\n      for the\n      <code>\n       volume\n      </code>\n      property.\n      <br/>\n      <code>\n       value\n      </code>\n      is between\n      <code>\n       0.0\n      </code>\n      and\n      <code>\n       1.0\n      </code>\n      ,\n      <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement">\n       refer to MDN\n      </a>\n      .\n     </p>\n     <h5 id="player-setplaybackrate-value-">\n      player.setPlaybackRate(value)\n     </h5>\n     <p>\n      Parameter\n      <code>\n       value\n      </code>\n      type\n      <code>\n       number\n      </code>\n      <br/>\n      This method is a\n      <em>\n       setter\n      </em>\n      for the\n      <code>\n       playbackRate\n      </code>\n      property.\n      <br/>\n      <code>\n       value\n      </code>\n      is between\n      <code>\n       0.0\n      </code>\n      and\n      <code>\n       1.0\n      </code>\n      ,\n      <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement">\n       refer to MDN\n      </a>\n      .\n     </p>\n     <h5 id="player-seek-value-">\n      player.seek(value)\n     </h5>\n     <p>\n      Parameter\n      <code>\n       value\n      </code>\n      can be type\n      <code>\n       number\n      </code>\n      or\n      <code>\n       string\n      </code>\n      <br/>\n      This method\n      <em>\n       sets\n      </em>\n      <code>\n       currentTime\n      </code>\n      on the element.\n      <br/>\n      <code>\n       value\n      </code>\n      can be between\n      <code>\n       0.0\n      </code>\n      and\n      <code>\n       max duration\n      </code>\n      , or it can be expressed in\n      <code>\n       HH:mm:ss\n      </code>\n      string format.\n     </p>\n     <h3 id="exposed-properties">\n      Exposed Properties\n     </h3>\n     <h5 id="-player-name-removed-">\n      <del>\n       player.name\n      </del>\n      <strong>\n       REMOVED\n      </strong>\n     </h5>\n     <p>\n      <del>\n       Default is\n       <code>\n        audioplayer\n       </code>\n       , it\'s the name-prefix used in the Events\n      </del>\n     </p>\n     <h5 id="player-playing">\n      player.playing\n     </h5>\n     <p>\n      <code>\n       true\n      </code>\n      or\n      <code>\n       false\n      </code>\n     </p>\n     <h5 id="player-ended">\n      player.ended\n     </h5>\n     <p>\n      <code>\n       true\n      </code>\n      or\n      <code>\n       false\n      </code>\n     </p>\n     <h5 id="player-network">\n      player.network\n     </h5>\n     <p>\n      <code>\n       \'progress\'\n      </code>\n      ,\n      <code>\n       \'stalled\'\n      </code>\n      ,\n      <code>\n       \'suspend\'\n      </code>\n      ,\n      <code>\n       undefined\n      </code>\n      (at initialization).\n      <br/>\n      This property is a sum-up of the network state, the value changes when the respective events gets fired.\n     </p>\n     <h5 id="player-currenttrack">\n      player.currentTrack\n     </h5>\n     <blockquote>\n      <p>\n       <strong>\n        NOTE\n       </strong>\n       : this is\n       <em>\n        1-based\n       </em>\n       exactly as\n       <code>\n        length\n       </code>\n       property of an Array.\n      </p>\n     </blockquote>\n     <p>\n      Tracks the position of the playing track, it\n      <strong>\n       might\n      </strong>\n      change during playing the same track due to pushing elements into\n      <code>\n       playlistArray\n      </code>\n     </p>\n     <h5 id="player-tracks">\n      player.tracks\n     </h5>\n     <blockquote>\n      <p>\n       <strong>\n        NOTE\n       </strong>\n       : this is\n       <em>\n        0-based\n       </em>\n       exactly as you refer to the elements of an Array.\n      </p>\n     </blockquote>\n     <p>\n      Number of tracks in the playlist.\n     </p>\n     <h4 id="properties-from-htmlmediaelement">\n      Properties from HTMLMediaElement\n     </h4>\n     <p>\n      Some properties are just forwarded to the scope, but are unchanged\n      <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement">\n       HTMLMediaElement spec\n      </a>\n     </p>\n     <p>\n      <code>\n       player.currentTime\n      </code>\n      <br/>\n      <code>\n       player.duration\n      </code>\n      <br/>\n      <code>\n       player.muted\n      </code>\n      <br/>\n      <code>\n       player.playbackRate\n      </code>\n      <br/>\n      <code>\n       player.volume\n      </code>\n     </p>\n     <p>\n      Timeranges:\n      <br/>\n      <code>\n       player.buffered\n      </code>\n      <br/>\n      <code>\n       player.played\n      </code>\n      <br/>\n      <code>\n       player.seekable\n      </code>\n     </p>\n     <h4 id="additional-properties">\n      Additional Properties\n     </h4>\n     <p>\n      The following properties refer to some\n      <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement">\n       HTMLMediaElement spec\n      </a>\n      properties, but are formatted for handiness.\n      <br/>\n      <code>\n       player.formatDuration\n      </code>\n      hh:mm:ss version of\n      <code>\n       player.duration\n      </code>\n      <br/>\n      <code>\n       player.formatTime\n      </code>\n      hh:mm:ss version of\n      <code>\n       player.duration\n      </code>\n      <br/>\n      <code>\n       player.loadPercent\n      </code>\n      0-100 version of\n      <code>\n       player.buffered\n      </code>\n      , it\'s just a number, not a TimeRange element.\n     </p>\n     <h3 id="events">\n      Events\n     </h3>\n     <p>\n      In case of need you can bind directly to the events generated by the browser.\n     </p>\n     <p>\n      This is done via wrappers, they just call angular.js jqLite methods:\n     </p>\n     <ul>\n      <li>\n       <a href="http://api.jquery.com/on/">\n        <code>\n         on (type, fn)\n        </code>\n       </a>\n       - binds a function to an event\n      </li>\n      <li>\n       <a href="http://api.jquery.com/off/">\n        <code>\n         off (type, fn)\n        </code>\n       </a>\n       - removes a function from an event\n      </li>\n      <li>\n       <a href="http://api.jquery.com/one/">\n        <code>\n         one (type, fn)\n        </code>\n       </a>\n       - binds a function to an event, once\n      </li>\n     </ul>\n     <p>\n      <strong>\n       WARNING\n      </strong>\n      : the events are not sent to the\n      <code>\n       $rootScope\n      </code>\n      anymore. Player namespacing is no more nocessary, thus removed.\n     </p>\n     <p>\n      Example:\n     </p>\n     <pre><code class="lang-javascript">angular.module(<span class="hljs-string">\'myApp\'</span>,[<span class="hljs-string">\'mediaPlayer\'</span>])\n.controller(<span class="hljs-string">\'MyController\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(<span class="hljs-variable">$scope</span>)</span> {</span>\n  <span class="hljs-variable">$scope</span>.playerName.on(<span class="hljs-string">\'load\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(evt)</span> {</span>\n    <span class="hljs-comment">// Tell someone a song is gonna get loaded.</span>\n  });\n})\n</code></pre>\n     <h3 id="playlist-behaviour">\n      Playlist Behaviour\n     </h3>\n     <p>\n      You can add/remove tracks on-fly from/to the playlist.\n      <br/>\n      If the current track gets removed, the player goes on\n      <strong>\n       pause()\n      </strong>\n      . (And starts loading the first track of the new playlist)\n      <br/>\n      Try and get the hold of this in the\n      <a href="http://aap.col3.me">\n       examples\n      </a>\n     </p>\n     <p>\n      If you wonder all the logic, just\n      <a href="https://github.com/mrgamer/angular-media-player/blob/master/src/directive.js#L280">\n       check out the source\n      </a>\n      , it has comments!\n     </p>\n     <h3 id="credits">\n      Credits\n     </h3>\n     <p>\n      A lot of guidelines to realize a simple re-usable project like this have come mainly from:\n     </p>\n     <ul>\n      <li>\n       <a href="https://github.com/tombatossals/angular-leaflet-directive">\n        angular-leaflet-directive\n       </a>\n       : work of\n       <a href="https://github.com/tombatossals">\n        tombatossals\n       </a>\n       , i think is a good example of a standalone project. (other than being useful :) )\n      </li>\n      <li>\n       <a href="https://github.com/btford/angular-socket-io">\n        angular-socket-io\n       </a>\n       : I think most of AngularJS developers know\n       <a href="https://github.com/btford">\n        Brian Ford\n       </a>\n       , I\'m out of count how many times i found his posts or works an enlightenment!\n      </li>\n      <li>\n       <a href="https://github.com/caitp/ng-media">\n        ng-media\n       </a>\n       : thanks to\n       <a href="https://github.com/caitp">\n        caitp\n       </a>\n       , I\'ve been trying to merge\n       <code>\n        mediaPlayer\n       </code>\n       lib and\n       <code>\n        ng-media\n       </code>\n       togheter, I\'ve learned a lot. In the end, that didn\'t happen because those projects were born for\n       <em>\n        very\n       </em>\n       different usages.\n      </li>\n     </ul>\n     <h1 id="contributing">\n      Contributing\n     </h1>\n     <p>\n      Contributing is\n      <strong>\n       always\n      </strong>\n      welcome, both via opening Issues, or compiling a Pull Request.\n     </p>\n     <p>\n      You can clone the repository and start working:\n     </p>\n     <pre><code class="lang-bash">git clone git@github<span class="hljs-built_in">.</span>com:mrgamer/angular<span class="hljs-attribute">-media</span><span class="hljs-attribute">-player</span><span class="hljs-built_in">.</span>git\ncd angular<span class="hljs-attribute">-media</span><span class="hljs-attribute">-player</span>\n<span class="hljs-subst">?!?!?</span>\nprofit<span class="hljs-subst">!</span>\n</code></pre>\n     <p>\n      To test the documentation system you need to:\n     </p>\n     <pre><code class="lang-bash">npm install\n<span class="hljs-preprocessor"># if you don\'t have bower installed globally</span>\n<span class="hljs-preprocessor"># sudo npm install bower -g</span>\nbower install\n<span class="hljs-preprocessor"># if you don\'t have grunt installed globally</span>\n<span class="hljs-preprocessor"># sudo npm install grunt-cli -g</span>\ngrunt docs\n<span class="hljs-preprocessor"># keep grunt executing and open a browser on http://localhost:8181/</span>\n</code></pre>\n     <p>\n      To create a new release:\n     </p>\n     <pre><code class="lang-bash">npm install\n<span class="hljs-preprocessor"># test before commit</span>\nbower install\nnpm test\ngrunt build\ngit commit -m <span class="hljs-string">"release X.Y.Z"</span>\ngit tag <span class="hljs-built_in">X</span><span class="hljs-preprocessor">.Y</span><span class="hljs-preprocessor">.Z</span>\ngit <span class="hljs-keyword">push</span> &amp;&amp; git <span class="hljs-keyword">push</span> --tags\n</code></pre>\n     <h1 id="release-history">\n      Release History\n     </h1>\n     <ul>\n      <li>\n       0.5.3 - test coverage run on IE aswell (8/20), just not the playback ones (because tests are written to use .ogg files). bugfix from 0.5.2\n      </li>\n      <li>\n       0.5.2 - fixed bug regarding how i used\n       <code>\n        angular.forEach\n       </code>\n       , sorry. (closes\n       <a href="https://github.com/mrgamer/angular-media-player/issues/26">\n        #26\n       </a>\n       )\n      </li>\n      <li>\n       0.5.1\n       <ul>\n        <li>\n         added\n         <a href="#playerplayindex-selectiveplay">\n          selective play\n         </a>\n         functionality on\n         <code>\n          play\n         </code>\n         and\n         <code>\n          playPause\n         </code>\n        </li>\n        <li>\n         <a href="#playerseekvalue">\n          seek\n         </a>\n         now works correctly and is tested\n        </li>\n        <li>\n         2 more tests\n        </li>\n       </ul>\n      </li>\n      <li>\n       0.5.0 - complete refactor, tests added,\n       <code>\n        &lt;video&gt;\n       </code>\n       tag support.\n      </li>\n      <li>\n       0.2.2 - backport from the\n       <code>\n        next\n       </code>\n       branch to support IE9-10\n      </li>\n      <li>\n       0.2.0 :\n       <ul>\n        <li>\n         <code>\n          angular.module\n         </code>\n         changed from\n         <code>\n          \'angular-audio-player\'\n         </code>\n         to\n         <code>\n          \'audioPlayer\'\n         </code>\n         - seemed more ngCompliant to me\n        </li>\n        <li>\n         property\n         <code>\n          \'playingTrack\'\n         </code>\n         renamed to\n         <code>\n          \'currentTrack\'\n         </code>\n         - again, on first directive tapeout names weren\'t the most important thing\n        </li>\n       </ul>\n      </li>\n      <li>\n       0.1.2 - first release, with basic functionalities\n      </li>\n     </ul>\n    </div>\n    <div class="col-xs-12 col-sm-3" role="navigation">\n     <p class="text-success">\n      Examples List\n     </p>\n     <div class="list-group">\n      <a class="list-group-item active" href="index.html">\n       Getting Started\n      </a>\n      <a class="list-group-item" href="robust-playlist.html">\n       Robust Playlist\n      </a>\n      <a class="list-group-item" href="robust-playlist-2.html">\n       Robust Playlist #2\n      </a>\n      <a class="list-group-item" href="backwards-compatible.html">\n       Backwards Compatibility\n      </a>\n      <a class="list-group-item" href="interactive.html">\n       Interactive Demo\n      </a>\n      <a class="list-group-item" href="ng-repeat.html">\n       Using ng-repeat\n      </a>\n      <a class="list-group-item" href="video-support.html">\n       Video support\n      </a>\n      <a class="list-group-item" href="development.html">\n       Test Page\n      </a>\n     </div>\n    </div>\n   </div>\n   <div class="push">\n   </div>\n  </div>\n  <div class="footer">\n   <div class="container">\n    angular-media-player is copyright \xc2\xa92014\n    <a href="http://col3.me">\n     Valerio Coltre\n    </a>\n    , licensed for use under the permissive\n    <a href="http://choosealicense.com/">\n     MIT Open Source License\n    </a>\n    .\n   </div>\n  </div>\n </body>\n</html>'