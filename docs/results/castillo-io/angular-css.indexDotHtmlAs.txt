b'<!DOCTYPE html>\n<html class="ng-scope" lang="en" ng-app="myApp" xmlns="http://www.w3.org/1999/xhtml">\n <head>\n  <style type="text/css">\n   @charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}\n  </style>\n  <meta charset="utf-8"/>\n  <title>\n   AngularCSS - Routes Demo\n  </title>\n  <meta content="CSS on-demand for AngularJS" name="description"/>\n  <meta content="width=device-width" name="viewport"/>\n  <!-- Third-party stylesheets -->\n  <link href="lib/bootstrap/bootstrap.min.css" rel="stylesheet" type="text/css"/>\n  <link href="lib/highlightjs/8.3/styles/github.min.css" rel="stylesheet" type="text/css"/>\n  <!-- Demo stylesheet -->\n  <link href="css/demo.css" rel="stylesheet" type="text/css"/>\n  <!-- AngularCSS stylesheets will be added here -->\n  <!-- ngRepeat: stylesheet in stylesheets | orderBy: \'weight\' track by $index -->\n  <link class="ng-scope" href="directives/black/directive-black.css" ng-attr-media="{{ stylesheet.media }}" ng-href="directives/black/directive-black.css" ng-repeat="stylesheet in stylesheets | orderBy: \'weight\' track by $index " rel="stylesheet" type="text/css"/>\n  <!-- end ngRepeat: stylesheet in stylesheets | orderBy: \'weight\' track by $index -->\n  <link class="ng-scope" href="directives/cyan/directive-cyan.css?cache=1492314595322" ng-attr-media="{{ stylesheet.media }}" ng-href="directives/cyan/directive-cyan.css?cache=1492314595322" ng-repeat="stylesheet in stylesheets | orderBy: \'weight\' track by $index " rel="stylesheet" type="text/css"/>\n  <!-- end ngRepeat: stylesheet in stylesheets | orderBy: \'weight\' track by $index -->\n  <link class="ng-scope" href="directives/magenta/directive-magenta.css" ng-attr-media="{{ stylesheet.media }}" ng-href="directives/magenta/directive-magenta.css" ng-repeat="stylesheet in stylesheets | orderBy: \'weight\' track by $index " rel="stylesheet" type="text/css"/>\n  <!-- end ngRepeat: stylesheet in stylesheets | orderBy: \'weight\' track by $index -->\n  <link class="ng-scope" href="directives/yellow/directive-yellow.css" ng-attr-media="{{ stylesheet.media }}" ng-href="directives/yellow/directive-yellow.css" ng-repeat="stylesheet in stylesheets | orderBy: \'weight\' track by $index " rel="stylesheet" type="text/css"/>\n  <!-- end ngRepeat: stylesheet in stylesheets | orderBy: \'weight\' track by $index -->\n </head>\n <body class="ng-scope" ng-controller="globalCtrl">\n  <div class="container">\n   <div class="navbar-header">\n    <button class="navbar-toggle collapsed" data-target="#bs-example-navbar-collapse-1" data-toggle="collapse" type="button">\n     <span class="sr-only">\n      Toggle navigation\n     </span>\n     <span class="icon-bar">\n     </span>\n     <span class="icon-bar">\n     </span>\n     <span class="icon-bar">\n     </span>\n    </button>\n    <a class="navbar-brand" href="#/">\n     AngularCSS\n    </a>\n   </div>\n   <div class="collapse navbar-collapse">\n    <ul class="nav navbar-nav">\n     <li class="link-black" ng-class="{ active: location == \'/black\' }">\n      <a href="#/black">\n       Black Page\n      </a>\n     </li>\n     <li class="link-cyan" ng-class="{ active: location == \'/cyan\' }">\n      <a href="#/cyan">\n       Cyan Page\n      </a>\n     </li>\n     <li class="link-magenta" ng-class="{ active: location == \'/magenta\' }">\n      <a href="#/magenta">\n       Magenta Page\n      </a>\n     </li>\n     <li class="link-yellow" ng-class="{ active: location == \'/yellow\' }">\n      <a href="#/yellow">\n       Yellow Page\n      </a>\n     </li>\n    </ul>\n    <ul class="nav navbar-nav navbar-right">\n     <li class="link-black">\n      <a href="http://www.github.com/castillo-io/angular-css" target="_blank">\n       GitHub\n      </a>\n     </li>\n    </ul>\n   </div>\n  </div>\n  <div class="demo-header">\n   <div class="container">\n    <h1>\n     CSS on-demand for AngularJS\n    </h1>\n    <p>\n     Optimize the presentation layer of your single-page apps by dynamically injecting stylesheets as needed.\n    </p>\n   </div>\n  </div>\n  <div class="container container-page">\n   <div class="col-xs-12">\n    <h2 class="page-heading">\n     <strong class="ng-binding">\n      Home\n     </strong>\n     view from ngRoute\n    </h2>\n   </div>\n   <div class="row row-content">\n    <div class="col-xs-12 col-sm-12 col-md-6 col-lg-5 col-left">\n     <!-- ngView:  -->\n     <section class="ng-scope" ng-view="">\n      <black class="ng-scope ng-isolate-scope">\n       <article class="directive directive-black col-xs-12 col-sm-6 col-md-6 col-lg-6" ng-click="goTo(\'/black\')">\n        <div class="directive-inner">\n         <h3>\n          Directive Black\n         </h3>\n         <p>\n          This directive\'s stylesheet should be added on "Home" and "Black" views and removed on the other views.\n         </p>\n        </div>\n       </article>\n      </black>\n      <article class="directive directive-magenta col-xs-12 col-sm-6 col-md-6 col-lg-6" ng-click="goTo(\'/magenta\')">\n       <div class="directive-inner">\n        <h3>\n         Directive Magenta\n        </h3>\n        <p>\n         This directive\'s stylesheets should be\n         <span class="underline">\n          preloaded\n         </span>\n         , added on "Home" and "Magenta" views and removed on the other views.\n        </p>\n       </div>\n      </article>\n      <cyan class="ng-scope ng-isolate-scope">\n       <article class="directive directive-cyan col-xs-12 col-sm-6 col-md-6 col-lg-6" ng-click="goTo(\'/cyan\')">\n        <div class="directive-inner">\n         <h3>\n          Directive Cyan\n         </h3>\n         <p>\n          This directive\'s stylesheet should be added on "Home" and "Cyan" views with\n          <span class="underline">\n           bust cache\n          </span>\n          enabled and removed on the other views.\n         </p>\n        </div>\n       </article>\n      </cyan>\n      <article class="directive directive-yellow col-xs-12 col-sm-6 col-md-6 col-lg-6" ng-click="goTo(\'/yellow\')">\n       <div class="directive-inner">\n        <h3>\n         Directive Yellow\n        </h3>\n        <p>\n         This directive\'s stylesheet should be added on "Home" and "Yellow" views, and\n         <span class="underline">\n          persisted\n         </span>\n         afterwards.\n        </p>\n       </div>\n      </article>\n     </section>\n    </div>\n    <div class="col-xs-12 col-sm-12 col-md-6 col-lg-7 col-right">\n     <article class="directive directive-stylesheets col-xs-12">\n      <div class="directive-inner">\n       <header>\n        <h2>\n         How it works\n        </h2>\n        <p>\n         AngularCSS listens for\n         <a href="https://github.com/angular/bower-angular-route" target="_blank">\n          route\n         </a>\n         (or\n         <a href="https://github.com/angular-ui/ui-router" target="_blank">\n          states\n         </a>\n         ) change events, adds the CSS defined on the current route and removes the CSS from the previous route. It also works with directives in the same fashion with the compile and scope destroy events.\n        </p>\n        <p>\n         To illustrate this behavior, each page and directive is defining CSS via this API. The main header changes color based on the current page CSS. Each directive\'s background color comes from the CSS defined in the Directive Definition Object (DDO). On page change, the CSS defined changes accordingly. See the app source code below for more details.\n        </p>\n        <hr/>\n       </header>\n       <button class="btn btn-default btn-sm pull-right" ng-click="toggle=!toggle" type="button">\n        <span ng-show="!toggle">\n         See Scope\n        </span>\n        <span class="ng-hide" ng-show="toggle">\n         See Tags\n        </span>\n       </button>\n       <div class="ng-hide" ng-show="toggle">\n        <h2>\n         What\'s in scope?\n        </h2>\n        <div hljs="" language="javascript" source="stylesheets2 | json">\n         <pre><code class="hljs javascript">[\n  {\n    <span class="hljs-string">"element"</span>: <span class="hljs-string">"link"</span>,\n    <span class="hljs-string">"rel"</span>: <span class="hljs-string">"stylesheet"</span>,\n    <span class="hljs-string">"type"</span>: <span class="hljs-string">"text/css"</span>,\n    <span class="hljs-string">"container"</span>: <span class="hljs-string">"head"</span>,\n    <span class="hljs-string">"method"</span>: <span class="hljs-string">"append"</span>,\n    <span class="hljs-string">"weight"</span>: <span class="hljs-number">0</span>,\n    <span class="hljs-string">"href"</span>: <span class="hljs-string">"directives/black/directive-black.css"</span>\n  },\n  {\n    <span class="hljs-string">"element"</span>: <span class="hljs-string">"link"</span>,\n    <span class="hljs-string">"rel"</span>: <span class="hljs-string">"stylesheet"</span>,\n    <span class="hljs-string">"type"</span>: <span class="hljs-string">"text/css"</span>,\n    <span class="hljs-string">"container"</span>: <span class="hljs-string">"head"</span>,\n    <span class="hljs-string">"method"</span>: <span class="hljs-string">"append"</span>,\n    <span class="hljs-string">"weight"</span>: <span class="hljs-number">0</span>,\n    <span class="hljs-string">"href"</span>: <span class="hljs-string">"directives/cyan/directive-cyan.css?cache=1492314595322"</span>,\n    <span class="hljs-string">"bustCache"</span>: <span class="hljs-literal">true</span>\n  },\n  {\n    <span class="hljs-string">"element"</span>: <span class="hljs-string">"link"</span>,\n    <span class="hljs-string">"rel"</span>: <span class="hljs-string">"stylesheet"</span>,\n    <span class="hljs-string">"type"</span>: <span class="hljs-string">"text/css"</span>,\n    <span class="hljs-string">"container"</span>: <span class="hljs-string">"head"</span>,\n    <span class="hljs-string">"method"</span>: <span class="hljs-string">"append"</span>,\n    <span class="hljs-string">"weight"</span>: <span class="hljs-number">0</span>,\n    <span class="hljs-string">"href"</span>: <span class="hljs-string">"directives/magenta/directive-magenta.css"</span>,\n    <span class="hljs-string">"preload"</span>: <span class="hljs-literal">true</span>\n  },\n  {\n    <span class="hljs-string">"element"</span>: <span class="hljs-string">"link"</span>,\n    <span class="hljs-string">"rel"</span>: <span class="hljs-string">"stylesheet"</span>,\n    <span class="hljs-string">"type"</span>: <span class="hljs-string">"text/css"</span>,\n    <span class="hljs-string">"container"</span>: <span class="hljs-string">"head"</span>,\n    <span class="hljs-string">"method"</span>: <span class="hljs-string">"append"</span>,\n    <span class="hljs-string">"weight"</span>: <span class="hljs-number">0</span>,\n    <span class="hljs-string">"href"</span>: <span class="hljs-string">"directives/yellow/directive-yellow.css"</span>,\n    <span class="hljs-string">"persist"</span>: <span class="hljs-literal">true</span>\n  }\n]</code></pre>\n        </div>\n       </div>\n       <div ng-show="!toggle">\n        <h2>\n         What\'s in the head tag?\n        </h2>\n        <div hljs="" language="html" source="stylesheets | $cssLinks">\n         <pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-title">link</span> <span class="hljs-attribute">rel</span>=<span class="hljs-value">"stylesheet"</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text/css"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"directives/black/directive-black.css"</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-title">link</span> <span class="hljs-attribute">rel</span>=<span class="hljs-value">"stylesheet"</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text/css"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"directives/cyan/directive-cyan.css?cache=1492314595322"</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-title">link</span> <span class="hljs-attribute">rel</span>=<span class="hljs-value">"stylesheet"</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text/css"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"directives/magenta/directive-magenta.css"</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-title">link</span> <span class="hljs-attribute">rel</span>=<span class="hljs-value">"stylesheet"</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text/css"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"directives/yellow/directive-yellow.css"</span>&gt;</span>\n\n</code></pre>\n        </div>\n       </div>\n      </div>\n     </article>\n    </div>\n   </div>\n  </div>\n  <div class="container container-page">\n   <div class="col-xs-12 page-title">\n    <h2 class="page-heading ng-binding">\n     Demo Source Code\n    </h2>\n    <p>\n     This demo app is running the code below. It uses Angular\'s\n     <a href="https://github.com/angular/bower-angular-route" target="_blank">\n      ngRoute\n     </a>\n     and a few custom directives.\n     <br/>\n     In the following code, each page and directive defines CSS via this API.\n    </p>\n    <p>\n     For a demo featuring UI Router click\n     <a href="states.html">\n      here\n     </a>\n     .\n    </p>\n    <div hljs="" language="javascript" source="routeAppSource">\n     <pre><code class="hljs javascript">\n<span class="hljs-comment">/**\n * Include \'angularCSS\' as a dependency\n * ngRoute is optional (no configuration required)\n */</span>\n<span class="hljs-keyword">var</span> myApp = angular.module(<span class="hljs-string">\'myApp\'</span>, [<span class="hljs-string">\'ngRoute\'</span>,<span class="hljs-string">\'angularCSS\'</span>]);\n\n<span class="hljs-comment">/**\n * Routes definition example\n */</span>\nmyApp.config(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">($routeProvider)</span> </span>{\n  \n  $routeProvider\n    .when(<span class="hljs-string">\'/black\'</span>, {\n      title: <span class="hljs-string">\'Black\'</span>,\n      templateUrl: <span class="hljs-string">\'pages/black/page-black.html\'</span>,\n      <span class="hljs-comment">/* Now we can bind css to routes */</span>\n      css: <span class="hljs-string">\'pages/black/page-black.css\'</span>\n    })\n    .when(<span class="hljs-string">\'/cyan\'</span>, {\n      title: <span class="hljs-string">\'Cyan\'</span>,\n      templateUrl: <span class="hljs-string">\'pages/cyan/page-cyan.html\'</span>,\n      <span class="hljs-comment">/* We can also enable features like bust cache, persist and preload */</span>\n      css: {\n        href: <span class="hljs-string">\'pages/cyan/page-cyan.css\'</span>,\n        bustCache: <span class="hljs-literal">true</span>\n      }\n    })\n    .when(<span class="hljs-string">\'/magenta\'</span>, {\n      title: <span class="hljs-string">\'Magenta\'</span>,\n      templateUrl: <span class="hljs-string">\'pages/magenta/page-magenta.html\'</span>,\n      <span class="hljs-comment">/* This is how we can include multiple stylesheets */</span>\n      css: [<span class="hljs-string">\'pages/magenta/page-magenta.css\'</span>,<span class="hljs-string">\'pages/magenta/page-magenta2.css\'</span>]\n    })\n    .when(<span class="hljs-string">\'/yellow\'</span>, {\n      title: <span class="hljs-string">\'Yellow\'</span>,\n      templateUrl: <span class="hljs-string">\'pages/yellow/page-yellow.html\'</span>,\n      css: [\n        {\n          href: <span class="hljs-string">\'pages/yellow/page-yellow.css\'</span>\n        }, {\n          href: <span class="hljs-string">\'pages/yellow/page-yellow.mobile.css\'</span>,\n          <span class="hljs-comment">/* Media Query support via window.matchMedia API\n           * This will only add the stylesheet if the breakpoint matches. Give it a try! */</span>\n          media: <span class="hljs-string">\'(max-width : 768px)\'</span>\n        }, {\n          href: <span class="hljs-string">\'pages/yellow/page-yellow.print.css\'</span>,\n          media: <span class="hljs-string">\'print\'</span>\n        }\n      ]\n    })\n    .when(<span class="hljs-string">\'/\'</span>, {\n      title: <span class="hljs-string">\'Home\'</span>,\n      templateUrl: <span class="hljs-string">\'pages/home/page-home.html\'</span>\n    })\n    .otherwise({\n      redirectTo: <span class="hljs-string">\'/\'</span>\n    });\n\n});\n\n\n<span class="hljs-comment">/**\n * Directive Definition Object (DDO) examples\n */</span>\n\nmyApp.component(<span class="hljs-string">\'black\'</span>, {\n  templateUrl: <span class="hljs-string">\'directives/black/directive-black.html\'</span>,\n  css: <span class="hljs-string">\'directives/black/directive-black.css\'</span> <span class="hljs-comment">/* Binding css to component */</span>\n});\n\nmyApp.component(<span class="hljs-string">\'cyan\'</span>, {\n  templateUrl: <span class="hljs-string">\'directives/cyan/directive-cyan.html\'</span>,\n  css: { <span class="hljs-comment">/* Same syntax as in the routes example applies here */</span>\n    href: <span class="hljs-string">\'directives/cyan/directive-cyan.css\'</span>,\n    bustCache: <span class="hljs-literal">true</span>\n  }\n});\n\nmyApp.directive(<span class="hljs-string">\'magenta\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n  <span class="hljs-keyword">return</span> {\n    restrict: <span class="hljs-string">\'E\'</span>,\n    replace: <span class="hljs-literal">true</span>,\n    templateUrl: <span class="hljs-string">\'directives/magenta/directive-magenta.html\'</span>,\n    css: {\n      href: <span class="hljs-string">\'directives/magenta/directive-magenta.css\'</span>,\n      <span class="hljs-comment">/* Preload: this will trigger an HTTP request on app load.\n       * Once the stylesheet is added, it will be loaded from the browser cache */</span>\n      preload: <span class="hljs-literal">true</span>\n    }\n  }\n});\n\nmyApp.directive(<span class="hljs-string">\'yellow\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n  <span class="hljs-keyword">return</span> {\n    restrict: <span class="hljs-string">\'E\'</span>,\n    replace: <span class="hljs-literal">true</span>,\n    templateUrl: <span class="hljs-string">\'directives/yellow/directive-yellow.html\'</span>,\n    css: {\n      href: <span class="hljs-string">\'directives/yellow/directive-yellow.css\'</span>,\n      <span class="hljs-comment">/* Persist: The stylesheet won\'t be removed even after the directive has been destroyed */</span>\n      persist: <span class="hljs-literal">true</span>\n    }\n  }\n});\n</code></pre>\n    </div>\n   </div>\n  </div>\n  <footer class="demo-footer">\n   <div class="container">\n    <div class="navbar-footer">\n     Designed, developed and maintained by\n     <a href="http://www.castillo.io" target="_blank">\n      Alex Castillo\n     </a>\n    </div>\n   </div>\n  </footer>\n  <!-- AngularJS core and dependencies -->\n  <script src="lib/angular-1.5.3/angular.js">\n  </script>\n  <script src="lib/angular-1.5.3/angular-route.js">\n  </script>\n  <!-- Third-party scripts for demo -->\n  <script src="lib/highlightjs/8.3/highlight.min.js">\n  </script>\n  <script src="lib/angular-highlightjs/angular-highlightjs.min.js">\n  </script>\n  <!-- AngularCSS library (from CDN) -->\n  <script src="//cdnjs.cloudflare.com/ajax/libs/angular-css/1.0.8/angular-css.js">\n  </script>\n  <!-- App Demo scripts -->\n  <script src="app.routes.js">\n  </script>\n  <script src="app.controller.js">\n  </script>\n </body>\n</html>'b'<!DOCTYPE html>\n<html class="ng-scope" lang="en" ng-app="myApp" xmlns="http://www.w3.org/1999/xhtml">\n <head>\n  <style type="text/css">\n   @charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}\n  </style>\n  <meta charset="utf-8"/>\n  <title>\n   AngularCSS - Routes Demo\n  </title>\n  <meta content="CSS on-demand for AngularJS" name="description"/>\n  <meta content="width=device-width" name="viewport"/>\n  <!-- Third-party stylesheets -->\n  <link href="lib/bootstrap/bootstrap.min.css" rel="stylesheet" type="text/css"/>\n  <link href="lib/highlightjs/8.3/styles/github.min.css" rel="stylesheet" type="text/css"/>\n  <!-- Demo stylesheet -->\n  <link href="css/demo.css" rel="stylesheet" type="text/css"/>\n  <!-- AngularCSS stylesheets will be added here -->\n  <!-- ngRepeat: stylesheet in stylesheets | orderBy: \'weight\' track by $index -->\n  <link class="ng-scope" href="directives/magenta/directive-magenta.css" ng-attr-media="{{ stylesheet.media }}" ng-href="directives/magenta/directive-magenta.css" ng-repeat="stylesheet in stylesheets | orderBy: \'weight\' track by $index " rel="stylesheet" type="text/css"/>\n  <!-- end ngRepeat: stylesheet in stylesheets | orderBy: \'weight\' track by $index -->\n  <link class="ng-scope" href="directives/cyan/directive-cyan.css?cache=1492569984976" ng-attr-media="{{ stylesheet.media }}" ng-href="directives/cyan/directive-cyan.css?cache=1492569984976" ng-repeat="stylesheet in stylesheets | orderBy: \'weight\' track by $index " rel="stylesheet" type="text/css"/>\n  <!-- end ngRepeat: stylesheet in stylesheets | orderBy: \'weight\' track by $index -->\n  <link class="ng-scope" href="directives/black/directive-black.css" ng-attr-media="{{ stylesheet.media }}" ng-href="directives/black/directive-black.css" ng-repeat="stylesheet in stylesheets | orderBy: \'weight\' track by $index " rel="stylesheet" type="text/css"/>\n  <!-- end ngRepeat: stylesheet in stylesheets | orderBy: \'weight\' track by $index -->\n  <link class="ng-scope" href="directives/yellow/directive-yellow.css" ng-attr-media="{{ stylesheet.media }}" ng-href="directives/yellow/directive-yellow.css" ng-repeat="stylesheet in stylesheets | orderBy: \'weight\' track by $index " rel="stylesheet" type="text/css"/>\n  <!-- end ngRepeat: stylesheet in stylesheets | orderBy: \'weight\' track by $index -->\n </head>\n <body class="ng-scope" ng-controller="globalCtrl">\n  <div class="container">\n   <div class="navbar-header">\n    <button class="navbar-toggle collapsed" data-target="#bs-example-navbar-collapse-1" data-toggle="collapse" type="button">\n     <span class="sr-only">\n      Toggle navigation\n     </span>\n     <span class="icon-bar">\n     </span>\n     <span class="icon-bar">\n     </span>\n     <span class="icon-bar">\n     </span>\n    </button>\n    <a class="navbar-brand" href="#/">\n     AngularCSS\n    </a>\n   </div>\n   <div class="collapse navbar-collapse">\n    <ul class="nav navbar-nav">\n     <li class="link-black" ng-class="{ active: location == \'/black\' }">\n      <a href="#/black">\n       Black Page\n      </a>\n     </li>\n     <li class="link-cyan" ng-class="{ active: location == \'/cyan\' }">\n      <a href="#/cyan">\n       Cyan Page\n      </a>\n     </li>\n     <li class="link-magenta" ng-class="{ active: location == \'/magenta\' }">\n      <a href="#/magenta">\n       Magenta Page\n      </a>\n     </li>\n     <li class="link-yellow" ng-class="{ active: location == \'/yellow\' }">\n      <a href="#/yellow">\n       Yellow Page\n      </a>\n     </li>\n    </ul>\n    <ul class="nav navbar-nav navbar-right">\n     <li class="link-black">\n      <a href="http://www.github.com/castillo-io/angular-css" target="_blank">\n       GitHub\n      </a>\n     </li>\n    </ul>\n   </div>\n  </div>\n  <div class="demo-header">\n   <div class="container">\n    <h1>\n     CSS on-demand for AngularJS\n    </h1>\n    <p>\n     Optimize the presentation layer of your single-page apps by dynamically injecting stylesheets as needed.\n    </p>\n   </div>\n  </div>\n  <div class="container container-page">\n   <div class="col-xs-12">\n    <h2 class="page-heading">\n     <strong class="ng-binding">\n      Home\n     </strong>\n     view from ngRoute\n    </h2>\n   </div>\n   <div class="row row-content">\n    <div class="col-xs-12 col-sm-12 col-md-6 col-lg-5 col-left">\n     <!-- ngView:  -->\n     <section class="ng-scope" ng-view="">\n      <black class="ng-scope ng-isolate-scope">\n       <article class="directive directive-black col-xs-12 col-sm-6 col-md-6 col-lg-6" ng-click="goTo(\'/black\')">\n        <div class="directive-inner">\n         <h3>\n          Directive Black\n         </h3>\n         <p>\n          This directive\'s stylesheet should be added on "Home" and "Black" views and removed on the other views.\n         </p>\n        </div>\n       </article>\n      </black>\n      <article class="directive directive-magenta col-xs-12 col-sm-6 col-md-6 col-lg-6" ng-click="goTo(\'/magenta\')">\n       <div class="directive-inner">\n        <h3>\n         Directive Magenta\n        </h3>\n        <p>\n         This directive\'s stylesheets should be\n         <span class="underline">\n          preloaded\n         </span>\n         , added on "Home" and "Magenta" views and removed on the other views.\n        </p>\n       </div>\n      </article>\n      <cyan class="ng-scope ng-isolate-scope">\n       <article class="directive directive-cyan col-xs-12 col-sm-6 col-md-6 col-lg-6" ng-click="goTo(\'/cyan\')">\n        <div class="directive-inner">\n         <h3>\n          Directive Cyan\n         </h3>\n         <p>\n          This directive\'s stylesheet should be added on "Home" and "Cyan" views with\n          <span class="underline">\n           bust cache\n          </span>\n          enabled and removed on the other views.\n         </p>\n        </div>\n       </article>\n      </cyan>\n      <article class="directive directive-yellow col-xs-12 col-sm-6 col-md-6 col-lg-6" ng-click="goTo(\'/yellow\')">\n       <div class="directive-inner">\n        <h3>\n         Directive Yellow\n        </h3>\n        <p>\n         This directive\'s stylesheet should be added on "Home" and "Yellow" views, and\n         <span class="underline">\n          persisted\n         </span>\n         afterwards.\n        </p>\n       </div>\n      </article>\n     </section>\n    </div>\n    <div class="col-xs-12 col-sm-12 col-md-6 col-lg-7 col-right">\n     <article class="directive directive-stylesheets col-xs-12">\n      <div class="directive-inner">\n       <header>\n        <h2>\n         How it works\n        </h2>\n        <p>\n         AngularCSS listens for\n         <a href="https://github.com/angular/bower-angular-route" target="_blank">\n          route\n         </a>\n         (or\n         <a href="https://github.com/angular-ui/ui-router" target="_blank">\n          states\n         </a>\n         ) change events, adds the CSS defined on the current route and removes the CSS from the previous route. It also works with directives in the same fashion with the compile and scope destroy events.\n        </p>\n        <p>\n         To illustrate this behavior, each page and directive is defining CSS via this API. The main header changes color based on the current page CSS. Each directive\'s background color comes from the CSS defined in the Directive Definition Object (DDO). On page change, the CSS defined changes accordingly. See the app source code below for more details.\n        </p>\n        <hr/>\n       </header>\n       <button class="btn btn-default btn-sm pull-right" ng-click="toggle=!toggle" type="button">\n        <span ng-show="!toggle">\n         See Scope\n        </span>\n        <span class="ng-hide" ng-show="toggle">\n         See Tags\n        </span>\n       </button>\n       <div class="ng-hide" ng-show="toggle">\n        <h2>\n         What\'s in scope?\n        </h2>\n        <div hljs="" language="javascript" source="stylesheets2 | json">\n         <pre><code class="hljs javascript">[\n  {\n    <span class="hljs-string">"element"</span>: <span class="hljs-string">"link"</span>,\n    <span class="hljs-string">"rel"</span>: <span class="hljs-string">"stylesheet"</span>,\n    <span class="hljs-string">"type"</span>: <span class="hljs-string">"text/css"</span>,\n    <span class="hljs-string">"container"</span>: <span class="hljs-string">"head"</span>,\n    <span class="hljs-string">"method"</span>: <span class="hljs-string">"append"</span>,\n    <span class="hljs-string">"weight"</span>: <span class="hljs-number">0</span>,\n    <span class="hljs-string">"href"</span>: <span class="hljs-string">"directives/magenta/directive-magenta.css"</span>,\n    <span class="hljs-string">"preload"</span>: <span class="hljs-literal">true</span>\n  },\n  {\n    <span class="hljs-string">"element"</span>: <span class="hljs-string">"link"</span>,\n    <span class="hljs-string">"rel"</span>: <span class="hljs-string">"stylesheet"</span>,\n    <span class="hljs-string">"type"</span>: <span class="hljs-string">"text/css"</span>,\n    <span class="hljs-string">"container"</span>: <span class="hljs-string">"head"</span>,\n    <span class="hljs-string">"method"</span>: <span class="hljs-string">"append"</span>,\n    <span class="hljs-string">"weight"</span>: <span class="hljs-number">0</span>,\n    <span class="hljs-string">"href"</span>: <span class="hljs-string">"directives/cyan/directive-cyan.css?cache=1492569984976"</span>,\n    <span class="hljs-string">"bustCache"</span>: <span class="hljs-literal">true</span>\n  },\n  {\n    <span class="hljs-string">"element"</span>: <span class="hljs-string">"link"</span>,\n    <span class="hljs-string">"rel"</span>: <span class="hljs-string">"stylesheet"</span>,\n    <span class="hljs-string">"type"</span>: <span class="hljs-string">"text/css"</span>,\n    <span class="hljs-string">"container"</span>: <span class="hljs-string">"head"</span>,\n    <span class="hljs-string">"method"</span>: <span class="hljs-string">"append"</span>,\n    <span class="hljs-string">"weight"</span>: <span class="hljs-number">0</span>,\n    <span class="hljs-string">"href"</span>: <span class="hljs-string">"directives/black/directive-black.css"</span>\n  },\n  {\n    <span class="hljs-string">"element"</span>: <span class="hljs-string">"link"</span>,\n    <span class="hljs-string">"rel"</span>: <span class="hljs-string">"stylesheet"</span>,\n    <span class="hljs-string">"type"</span>: <span class="hljs-string">"text/css"</span>,\n    <span class="hljs-string">"container"</span>: <span class="hljs-string">"head"</span>,\n    <span class="hljs-string">"method"</span>: <span class="hljs-string">"append"</span>,\n    <span class="hljs-string">"weight"</span>: <span class="hljs-number">0</span>,\n    <span class="hljs-string">"href"</span>: <span class="hljs-string">"directives/yellow/directive-yellow.css"</span>,\n    <span class="hljs-string">"persist"</span>: <span class="hljs-literal">true</span>\n  }\n]</code></pre>\n        </div>\n       </div>\n       <div ng-show="!toggle">\n        <h2>\n         What\'s in the head tag?\n        </h2>\n        <div hljs="" language="html" source="stylesheets | $cssLinks">\n         <pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-title">link</span> <span class="hljs-attribute">rel</span>=<span class="hljs-value">"stylesheet"</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text/css"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"directives/magenta/directive-magenta.css"</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-title">link</span> <span class="hljs-attribute">rel</span>=<span class="hljs-value">"stylesheet"</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text/css"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"directives/cyan/directive-cyan.css?cache=1492569984976"</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-title">link</span> <span class="hljs-attribute">rel</span>=<span class="hljs-value">"stylesheet"</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text/css"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"directives/black/directive-black.css"</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-title">link</span> <span class="hljs-attribute">rel</span>=<span class="hljs-value">"stylesheet"</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text/css"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"directives/yellow/directive-yellow.css"</span>&gt;</span>\n\n</code></pre>\n        </div>\n       </div>\n      </div>\n     </article>\n    </div>\n   </div>\n  </div>\n  <div class="container container-page">\n   <div class="col-xs-12 page-title">\n    <h2 class="page-heading ng-binding">\n     Demo Source Code\n    </h2>\n    <p>\n     This demo app is running the code below. It uses Angular\'s\n     <a href="https://github.com/angular/bower-angular-route" target="_blank">\n      ngRoute\n     </a>\n     and a few custom directives.\n     <br/>\n     In the following code, each page and directive defines CSS via this API.\n    </p>\n    <p>\n     For a demo featuring UI Router click\n     <a href="states.html">\n      here\n     </a>\n     .\n    </p>\n    <div hljs="" language="javascript" source="routeAppSource">\n     <pre><code class="hljs javascript">\n<span class="hljs-comment">/**\n * Include \'angularCSS\' as a dependency\n * ngRoute is optional (no configuration required)\n */</span>\n<span class="hljs-keyword">var</span> myApp = angular.module(<span class="hljs-string">\'myApp\'</span>, [<span class="hljs-string">\'ngRoute\'</span>,<span class="hljs-string">\'angularCSS\'</span>]);\n\n<span class="hljs-comment">/**\n * Routes definition example\n */</span>\nmyApp.config(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">($routeProvider)</span> </span>{\n  \n  $routeProvider\n    .when(<span class="hljs-string">\'/black\'</span>, {\n      title: <span class="hljs-string">\'Black\'</span>,\n      templateUrl: <span class="hljs-string">\'pages/black/page-black.html\'</span>,\n      <span class="hljs-comment">/* Now we can bind css to routes */</span>\n      css: <span class="hljs-string">\'pages/black/page-black.css\'</span>\n    })\n    .when(<span class="hljs-string">\'/cyan\'</span>, {\n      title: <span class="hljs-string">\'Cyan\'</span>,\n      templateUrl: <span class="hljs-string">\'pages/cyan/page-cyan.html\'</span>,\n      <span class="hljs-comment">/* We can also enable features like bust cache, persist and preload */</span>\n      css: {\n        href: <span class="hljs-string">\'pages/cyan/page-cyan.css\'</span>,\n        bustCache: <span class="hljs-literal">true</span>\n      }\n    })\n    .when(<span class="hljs-string">\'/magenta\'</span>, {\n      title: <span class="hljs-string">\'Magenta\'</span>,\n      templateUrl: <span class="hljs-string">\'pages/magenta/page-magenta.html\'</span>,\n      <span class="hljs-comment">/* This is how we can include multiple stylesheets */</span>\n      css: [<span class="hljs-string">\'pages/magenta/page-magenta.css\'</span>,<span class="hljs-string">\'pages/magenta/page-magenta2.css\'</span>]\n    })\n    .when(<span class="hljs-string">\'/yellow\'</span>, {\n      title: <span class="hljs-string">\'Yellow\'</span>,\n      templateUrl: <span class="hljs-string">\'pages/yellow/page-yellow.html\'</span>,\n      css: [\n        {\n          href: <span class="hljs-string">\'pages/yellow/page-yellow.css\'</span>\n        }, {\n          href: <span class="hljs-string">\'pages/yellow/page-yellow.mobile.css\'</span>,\n          <span class="hljs-comment">/* Media Query support via window.matchMedia API\n           * This will only add the stylesheet if the breakpoint matches. Give it a try! */</span>\n          media: <span class="hljs-string">\'(max-width : 768px)\'</span>\n        }, {\n          href: <span class="hljs-string">\'pages/yellow/page-yellow.print.css\'</span>,\n          media: <span class="hljs-string">\'print\'</span>\n        }\n      ]\n    })\n    .when(<span class="hljs-string">\'/\'</span>, {\n      title: <span class="hljs-string">\'Home\'</span>,\n      templateUrl: <span class="hljs-string">\'pages/home/page-home.html\'</span>\n    })\n    .otherwise({\n      redirectTo: <span class="hljs-string">\'/\'</span>\n    });\n\n});\n\n\n<span class="hljs-comment">/**\n * Directive Definition Object (DDO) examples\n */</span>\n\nmyApp.component(<span class="hljs-string">\'black\'</span>, {\n  templateUrl: <span class="hljs-string">\'directives/black/directive-black.html\'</span>,\n  css: <span class="hljs-string">\'directives/black/directive-black.css\'</span> <span class="hljs-comment">/* Binding css to component */</span>\n});\n\nmyApp.component(<span class="hljs-string">\'cyan\'</span>, {\n  templateUrl: <span class="hljs-string">\'directives/cyan/directive-cyan.html\'</span>,\n  css: { <span class="hljs-comment">/* Same syntax as in the routes example applies here */</span>\n    href: <span class="hljs-string">\'directives/cyan/directive-cyan.css\'</span>,\n    bustCache: <span class="hljs-literal">true</span>\n  }\n});\n\nmyApp.directive(<span class="hljs-string">\'magenta\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n  <span class="hljs-keyword">return</span> {\n    restrict: <span class="hljs-string">\'E\'</span>,\n    replace: <span class="hljs-literal">true</span>,\n    templateUrl: <span class="hljs-string">\'directives/magenta/directive-magenta.html\'</span>,\n    css: {\n      href: <span class="hljs-string">\'directives/magenta/directive-magenta.css\'</span>,\n      <span class="hljs-comment">/* Preload: this will trigger an HTTP request on app load.\n       * Once the stylesheet is added, it will be loaded from the browser cache */</span>\n      preload: <span class="hljs-literal">true</span>\n    }\n  }\n});\n\nmyApp.directive(<span class="hljs-string">\'yellow\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{\n  <span class="hljs-keyword">return</span> {\n    restrict: <span class="hljs-string">\'E\'</span>,\n    replace: <span class="hljs-literal">true</span>,\n    templateUrl: <span class="hljs-string">\'directives/yellow/directive-yellow.html\'</span>,\n    css: {\n      href: <span class="hljs-string">\'directives/yellow/directive-yellow.css\'</span>,\n      <span class="hljs-comment">/* Persist: The stylesheet won\'t be removed even after the directive has been destroyed */</span>\n      persist: <span class="hljs-literal">true</span>\n    }\n  }\n});\n</code></pre>\n    </div>\n   </div>\n  </div>\n  <footer class="demo-footer">\n   <div class="container">\n    <div class="navbar-footer">\n     Designed, developed and maintained by\n     <a href="http://www.castillo.io" target="_blank">\n      Alex Castillo\n     </a>\n    </div>\n   </div>\n  </footer>\n  <!-- AngularJS core and dependencies -->\n  <script src="lib/angular-1.5.3/angular.js">\n  </script>\n  <script src="lib/angular-1.5.3/angular-route.js">\n  </script>\n  <!-- Third-party scripts for demo -->\n  <script src="lib/highlightjs/8.3/highlight.min.js">\n  </script>\n  <script src="lib/angular-highlightjs/angular-highlightjs.min.js">\n  </script>\n  <!-- AngularCSS library (from CDN) -->\n  <script src="//cdnjs.cloudflare.com/ajax/libs/angular-css/1.0.8/angular-css.js">\n  </script>\n  <!-- App Demo scripts -->\n  <script src="app.routes.js">\n  </script>\n  <script src="app.controller.js">\n  </script>\n </body>\n</html>'