b'<html lang="en">\n <head>\n  <!-- Global site tag (gtag.js) - Google Analytics -->\n  <script async="" src="https://www.google-analytics.com/analytics.js" type="text/javascript">\n  </script>\n  <script async="" src="https://www.googletagmanager.com/gtag/js?id=UA-101409735-1">\n  </script>\n  <script>\n   window.dataLayer = window.dataLayer || [];\n\t\t  function gtag(){dataLayer.push(arguments);}\n\t\t  gtag(\'js\', new Date());\n\n\t\t  gtag(\'config\', \'UA-101409735-1\');\n  </script>\n  <meta charset="utf-8"/>\n  <meta content="IE=edge" http-equiv="X-UA-Compatible"/>\n  <meta content="width=device-width, initial-scale=1" name="viewport"/>\n  <title>\n   Examples\n  </title>\n  <link crossorigin="anonymous" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" rel="stylesheet"/>\n  <link href="/emberb/css/style.css" rel="stylesheet"/>\n  <link href="/emberb/css/syntax.css" rel="stylesheet"/>\n  <script crossorigin="anonymous" integrity="sha256-hVVnYaiADRTO2PzUGmuLJr8BLUSjGIZsDYGmIJLv2b8=" src="https://code.jquery.com/jquery-3.1.1.min.js">\n  </script>\n  <script crossorigin="anonymous" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js">\n  </script>\n  <script async="" src="//emberb.disqus.com/embed.js" type="text/javascript">\n  </script>\n  <link as="style" href="https://c.disquscdn.com/next/embed/styles/lounge.73c498778035470a16f391458a5d5cc4.css" rel="preload"/>\n  <link as="script" href="https://c.disquscdn.com/next/embed/common.bundle.5e2845671155c097129ebd8a2aeb308d.js" rel="preload"/>\n  <link as="script" href="https://c.disquscdn.com/next/embed/lounge.bundle.b8bf14b0bfe753b64dddaad74e2e663a.js" rel="preload"/>\n  <link as="script" href="https://disqus.com/next/config.js" rel="preload"/>\n </head>\n <body>\n  <nav class="navbar navbar-default navbar-static-top">\n   <div class="navbar-header">\n    <button class="navbar-toggle" data-target="#navbar-items" data-toggle="collapse" type="button">\n     <span class="sr-only">\n      Toggle navigation\n     </span>\n     <span class="icon-bar">\n     </span>\n     <span class="icon-bar">\n     </span>\n     <span class="icon-bar">\n     </span>\n    </button>\n    <a class="navbar-brand" href="/emberb/">\n     The Definitive Guide to Ruby\'s C API\n    </a>\n   </div>\n   <div class="collapse navbar-collapse" id="navbar-items">\n    <ul class="nav navbar-nav">\n     <li>\n      <a href="/emberb/c/">\n       The Ruby C API\n      </a>\n     </li>\n     <li>\n      <a href="/emberb/embed/">\n       Running Ruby in C\n      </a>\n     </li>\n     <li>\n      <a href="/emberb/extend/">\n       Running C in Ruby\n      </a>\n     </li>\n     <li class="active">\n      <a href="/emberb/examples/">\n       Examples\n      </a>\n     </li>\n    </ul>\n   </div>\n  </nav>\n  <div class="container-fluid">\n   <div class="row">\n    <div class="col-md-2" id="sidebar-wrapper">\n     <ol id="toc">\n      <li>\n       <a href="#running-ruby-in-c">\n        Running Ruby in C\n       </a>\n      </li>\n      <li>\n       <a href="#running-c-in-ruby">\n        Running C in Ruby\n       </a>\n      </li>\n      <li>\n       <a href="#comments">\n        Comments\n       </a>\n      </li>\n     </ol>\n    </div>\n    <div class="col-md-8" id="main">\n     <div class="page-header">\n      <h1>\n       Examples\n      </h1>\n     </div>\n     <h2 id="running-ruby-in-c">\n      Running Ruby in C\n     </h2>\n     <p>\n      This example is a simple little game of tag. In the game there are two squares:\nthe blue square is controlled using the arrow keys on the keyboard while the red\nsquare is controlled by a Ruby script. To make this work, we\xe2\x80\x99ll use the C API to\ndefine a little Ruby API that the script can access, and every couple of frames\nwe\xe2\x80\x99ll call a method defined in the Ruby script and pass objects encapsulating\nthe data for the two squares.\n     </p>\n     <p>\n      The Ruby script can look something like this:\n     </p>\n     <figure class="highlight">\n      <pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">think</span> <span class="n">ai</span><span class="p">,</span> <span class="n">player</span>\n  <span class="c1"># get my position</span>\n  <span class="n">ax</span><span class="p">,</span> <span class="n">ay</span> <span class="o">=</span> <span class="n">ai</span><span class="p">.</span><span class="nf">pos</span>\n\n  <span class="c1"># get direction that player moved</span>\n  <span class="n">dx</span><span class="p">,</span> <span class="n">dy</span> <span class="o">=</span> <span class="n">player</span><span class="p">.</span><span class="nf">dir</span>\n\n  <span class="c1"># ... movement logic ...</span>\n  <span class="n">x</span> <span class="o">=</span> <span class="n">dy</span>\n  <span class="n">y</span> <span class="o">=</span> <span class="o">-</span><span class="n">dx</span>\n\n  <span class="c1"># move in this direction</span>\n  <span class="n">ai</span><span class="p">.</span><span class="nf">move</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span>\n<span class="k">end</span></code></pre>\n     </figure>\n     <p>\n      The C code uses SDL2 for graphics and input and uses\n      <code class="highlighter-rouge">\n       stat()\n      </code>\n      (which may not be\nvery portable) to hot-reload the AI script whenever the file is changed . Here\xe2\x80\x99s\n      <code class="highlighter-rouge">\n       tag.c\n      </code>\n      :\n     </p>\n     <figure class="highlight">\n      <pre><code class="language-c" data-lang="c"><span class="cp">#include &lt;stdio.h&gt;\n#include &lt;stdbool.h&gt;\n#include &lt;math.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;sys/stat.h&gt;\n#include &lt;unistd.h&gt;\n</span>\n<span class="cp">#include &lt;SDL2/SDL.h&gt;\n#include &lt;ruby.h&gt;\n</span>\n<span class="cm">/* constants */</span>\n<span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">win_width</span> <span class="o">=</span> <span class="mi">1024</span><span class="p">;</span>\n<span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">win_height</span> <span class="o">=</span> <span class="mi">768</span><span class="p">;</span>\n<span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">actor_size</span> <span class="o">=</span> <span class="mi">30</span><span class="p">;</span>\n\n<span class="cm">/* for position and direction */</span>\n<span class="k">struct</span> <span class="n">vec2</span>\n<span class="p">{</span>\n\t<span class="kt">float</span> <span class="n">x</span><span class="p">;</span>\n\t<span class="kt">float</span> <span class="n">y</span><span class="p">;</span>\n<span class="p">};</span>\n\n<span class="cm">/* for the player and their opponent */</span>\n<span class="k">struct</span> <span class="n">actor</span>\n<span class="p">{</span>\n\t<span class="k">struct</span> <span class="n">vec2</span> <span class="n">pos</span><span class="p">;</span>\n\t<span class="k">struct</span> <span class="n">vec2</span> <span class="n">dir</span><span class="p">;</span>\n\t<span class="kt">float</span> <span class="n">speed</span><span class="p">;</span> <span class="c1">// top speed in pixels/millisecond\n</span>\t<span class="n">SDL_Color</span> <span class="n">color</span><span class="p">;</span>\n<span class="p">};</span>\n\n<span class="cm">/* wrapper for passing AI actor with AI script metadata */</span>\n<span class="k">struct</span> <span class="n">ai_actor</span>\n<span class="p">{</span>\n\t<span class="kt">char</span><span class="o">*</span> <span class="n">script</span><span class="p">;</span>\n\t<span class="n">bool</span> <span class="n">loaded</span><span class="p">;</span>\n\t<span class="n">bool</span> <span class="n">error</span><span class="p">;</span>\n\t<span class="kt">time_t</span> <span class="n">load_time</span><span class="p">;</span>\n\t<span class="k">struct</span> <span class="n">actor</span><span class="o">*</span> <span class="n">actor</span><span class="p">;</span>\n<span class="p">};</span>\n\n<span class="cm">/* set AI error state and possibly print exception */</span>\n<span class="kt">void</span> <span class="nf">ai_error</span><span class="p">(</span><span class="k">struct</span> <span class="n">ai_actor</span><span class="o">*</span> <span class="n">ai</span><span class="p">)</span>\n<span class="p">{</span>\n\t<span class="n">ai</span><span class="o">-&gt;</span><span class="n">error</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>\n\n\t<span class="n">ai</span><span class="o">-&gt;</span><span class="n">actor</span><span class="o">-&gt;</span><span class="n">dir</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">.</span><span class="n">f</span><span class="p">;</span>\n\t<span class="n">ai</span><span class="o">-&gt;</span><span class="n">actor</span><span class="o">-&gt;</span><span class="n">dir</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">.</span><span class="n">f</span><span class="p">;</span>\n\t<span class="n">ai</span><span class="o">-&gt;</span><span class="n">actor</span><span class="o">-&gt;</span><span class="n">color</span><span class="p">.</span><span class="n">a</span> <span class="o">=</span> <span class="mi">127</span><span class="p">;</span>\n\n\t<span class="cm">/* print exception */</span>\n\t<span class="n">VALUE</span> <span class="n">exception</span> <span class="o">=</span> <span class="n">rb_errinfo</span><span class="p">();</span>\n\t<span class="n">rb_set_errinfo</span><span class="p">(</span><span class="n">Qnil</span><span class="p">);</span>\n\n\t<span class="k">if</span> <span class="p">(</span><span class="n">RTEST</span><span class="p">(</span><span class="n">exception</span><span class="p">))</span> <span class="n">rb_warn</span><span class="p">(</span><span class="s">"AI script error: %"</span><span class="n">PRIsVALUE</span><span class="s">""</span><span class="p">,</span> <span class="n">rb_funcall</span><span class="p">(</span><span class="n">exception</span><span class="p">,</span> <span class="n">rb_intern</span><span class="p">(</span><span class="s">"full_message"</span><span class="p">),</span> <span class="mi">0</span><span class="p">));</span>\n<span class="p">}</span>\n\n<span class="cm">/* clear AI error state */</span>\n<span class="kt">void</span> <span class="nf">ai_reset</span><span class="p">(</span><span class="k">struct</span> <span class="n">ai_actor</span><span class="o">*</span> <span class="n">ai</span><span class="p">)</span>\n<span class="p">{</span>\n\t<span class="n">ai</span><span class="o">-&gt;</span><span class="n">error</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>\n\t<span class="n">ai</span><span class="o">-&gt;</span><span class="n">actor</span><span class="o">-&gt;</span><span class="n">color</span><span class="p">.</span><span class="n">a</span> <span class="o">=</span> <span class="mi">255</span><span class="p">;</span>\n<span class="p">}</span>\n\n<span class="cm">/* try to (re)load AI script */</span>\n<span class="kt">void</span> <span class="nf">ai_load</span><span class="p">(</span><span class="k">struct</span> <span class="n">ai_actor</span><span class="o">*</span> <span class="n">ai</span><span class="p">)</span>\n<span class="p">{</span>\n\t<span class="cm">/* get script modification time */</span>\n\t<span class="k">struct</span> <span class="n">stat</span> <span class="n">script_stat</span><span class="p">;</span>\n\t<span class="k">if</span> <span class="p">(</span><span class="n">stat</span><span class="p">(</span><span class="n">ai</span><span class="o">-&gt;</span><span class="n">script</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">script_stat</span><span class="p">))</span>\n\t<span class="p">{</span>\n\t\t<span class="k">if</span> <span class="p">(</span><span class="n">ai</span><span class="o">-&gt;</span><span class="n">loaded</span><span class="p">)</span>\n\t\t\t<span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">"Can\'t stat AI script</span><span class="se">\\n</span><span class="s">"</span><span class="p">);</span>\n\t\t<span class="n">ai</span><span class="o">-&gt;</span><span class="n">loaded</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>\n\t\t<span class="n">ai_error</span><span class="p">(</span><span class="n">ai</span><span class="p">);</span>\n\t\t<span class="k">return</span><span class="p">;</span>\n\t<span class="p">}</span>\n\n\t<span class="cm">/* nothing to do if we\'ve already loaded the script and it hasn\'t been updated */</span>\n\t<span class="k">if</span> <span class="p">(</span><span class="n">ai</span><span class="o">-&gt;</span><span class="n">loaded</span> <span class="o">&amp;&amp;</span> <span class="n">ai</span><span class="o">-&gt;</span><span class="n">load_time</span> <span class="o">==</span> <span class="n">script_stat</span><span class="p">.</span><span class="n">st_mtime</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>\n\n\t<span class="k">if</span> <span class="p">(</span><span class="n">ai</span><span class="o">-&gt;</span><span class="n">loaded</span><span class="p">)</span>\n\t\t<span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">"Reloading AI...</span><span class="se">\\n</span><span class="s">"</span><span class="p">);</span>\n\t<span class="k">else</span>\n\t\t<span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">"Loading AI...</span><span class="se">\\n</span><span class="s">"</span><span class="p">);</span>\n\n\t<span class="n">ai</span><span class="o">-&gt;</span><span class="n">loaded</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>\n\t<span class="n">ai</span><span class="o">-&gt;</span><span class="n">load_time</span> <span class="o">=</span> <span class="n">script_stat</span><span class="p">.</span><span class="n">st_mtime</span><span class="p">;</span>\n\n\t<span class="n">ai_reset</span><span class="p">(</span><span class="n">ai</span><span class="p">);</span>\n\n\t<span class="kt">int</span> <span class="n">state</span><span class="p">;</span>\n\t<span class="n">rb_load_protect</span><span class="p">(</span><span class="n">rb_str_new_cstr</span><span class="p">(</span><span class="n">ai</span><span class="o">-&gt;</span><span class="n">script</span><span class="p">),</span> <span class="mi">0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">state</span><span class="p">);</span>\n\n\t<span class="k">if</span> <span class="p">(</span><span class="n">state</span><span class="p">)</span> <span class="n">ai_error</span><span class="p">(</span><span class="n">ai</span><span class="p">);</span>\n<span class="p">}</span>\n\n<span class="cm">/* for rescuing exceptions in the AI script */</span>\n<span class="n">VALUE</span> <span class="nf">think_wrapper</span><span class="p">(</span><span class="n">VALUE</span> <span class="n">actors</span><span class="p">)</span>\n<span class="p">{</span>\n\t<span class="n">rb_funcall</span><span class="p">(</span><span class="n">rb_mKernel</span><span class="p">,</span> <span class="n">rb_intern</span><span class="p">(</span><span class="s">"think"</span><span class="p">),</span> <span class="mi">2</span><span class="p">,</span> <span class="n">rb_ary_entry</span><span class="p">(</span><span class="n">actors</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="n">rb_ary_entry</span><span class="p">(</span><span class="n">actors</span><span class="p">,</span> <span class="mi">1</span><span class="p">));</span>\n\n\t<span class="k">return</span> <span class="n">Qundef</span><span class="p">;</span>\n<span class="p">}</span>\n\n<span class="cm">/* run the AI script if possible */</span>\n<span class="kt">void</span> <span class="nf">ai_think</span><span class="p">(</span><span class="k">struct</span> <span class="n">ai_actor</span><span class="o">*</span> <span class="n">ai</span><span class="p">,</span> <span class="n">VALUE</span> <span class="n">ai_v</span><span class="p">,</span> <span class="n">VALUE</span> <span class="n">player_v</span><span class="p">)</span>\n<span class="p">{</span>\n\t<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">ai</span><span class="o">-&gt;</span><span class="n">loaded</span> <span class="o">||</span> <span class="n">ai</span><span class="o">-&gt;</span><span class="n">error</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>\n\n\t<span class="kt">int</span> <span class="n">state</span><span class="p">;</span>\n\t<span class="n">rb_protect</span><span class="p">(</span><span class="n">think_wrapper</span><span class="p">,</span> <span class="n">rb_ary_new_from_args</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">ai_v</span><span class="p">,</span> <span class="n">player_v</span><span class="p">),</span> <span class="o">&amp;</span><span class="n">state</span><span class="p">);</span>\n\n\t<span class="k">if</span> <span class="p">(</span><span class="n">state</span><span class="p">)</span> <span class="n">ai_error</span><span class="p">(</span><span class="n">ai</span><span class="p">);</span>\n<span class="p">}</span>\n\n<span class="cm">/* move actor after ms time has elapsed */</span>\n<span class="kt">void</span> <span class="nf">step_actor</span><span class="p">(</span><span class="k">struct</span> <span class="n">actor</span><span class="o">*</span> <span class="n">act</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">ms</span><span class="p">)</span>\n<span class="p">{</span>\n\t<span class="kt">float</span> <span class="n">norm</span> <span class="o">=</span> <span class="n">sqrtf</span><span class="p">(</span><span class="n">act</span><span class="o">-&gt;</span><span class="n">dir</span><span class="p">.</span><span class="n">x</span> <span class="o">*</span> <span class="n">act</span><span class="o">-&gt;</span><span class="n">dir</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">act</span><span class="o">-&gt;</span><span class="n">dir</span><span class="p">.</span><span class="n">y</span> <span class="o">*</span> <span class="n">act</span><span class="o">-&gt;</span><span class="n">dir</span><span class="p">.</span><span class="n">y</span><span class="p">);</span>\n\n\t<span class="cm">/* no movement */</span>\n\t<span class="k">if</span> <span class="p">(</span><span class="n">norm</span> <span class="o">==</span> <span class="mi">0</span><span class="p">.</span><span class="n">f</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>\n\n\t<span class="cm">/* allow actor to move slower than speed, but not faster */</span>\n\t<span class="k">if</span> <span class="p">(</span><span class="n">norm</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="p">.</span><span class="n">f</span><span class="p">)</span> <span class="n">norm</span> <span class="o">=</span> <span class="mi">1</span><span class="p">.</span><span class="n">f</span><span class="p">;</span>\n\n\t<span class="n">act</span><span class="o">-&gt;</span><span class="n">pos</span><span class="p">.</span><span class="n">x</span> <span class="o">+=</span> <span class="p">(</span><span class="n">act</span><span class="o">-&gt;</span><span class="n">dir</span><span class="p">.</span><span class="n">x</span> <span class="o">*</span> <span class="n">act</span><span class="o">-&gt;</span><span class="n">speed</span> <span class="o">*</span> <span class="p">(</span><span class="kt">float</span><span class="p">)</span><span class="n">ms</span><span class="p">)</span> <span class="o">/</span> <span class="n">norm</span><span class="p">;</span>\n\t<span class="n">act</span><span class="o">-&gt;</span><span class="n">pos</span><span class="p">.</span><span class="n">y</span> <span class="o">+=</span> <span class="p">(</span><span class="n">act</span><span class="o">-&gt;</span><span class="n">dir</span><span class="p">.</span><span class="n">y</span> <span class="o">*</span> <span class="n">act</span><span class="o">-&gt;</span><span class="n">speed</span> <span class="o">*</span> <span class="p">(</span><span class="kt">float</span><span class="p">)</span><span class="n">ms</span><span class="p">)</span> <span class="o">/</span> <span class="n">norm</span><span class="p">;</span>\n\n\t<span class="cm">/* clamp position to screen */</span>\n\t<span class="k">if</span> <span class="p">(</span><span class="n">act</span><span class="o">-&gt;</span><span class="n">pos</span><span class="p">.</span><span class="n">x</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">.</span><span class="n">f</span><span class="p">)</span>\n\t\t<span class="n">act</span><span class="o">-&gt;</span><span class="n">pos</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">.</span><span class="n">f</span><span class="p">;</span>\n\t<span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">act</span><span class="o">-&gt;</span><span class="n">pos</span><span class="p">.</span><span class="n">x</span> <span class="o">&gt;</span> <span class="n">win_width</span> <span class="o">-</span> <span class="n">actor_size</span><span class="p">)</span>\n\t\t<span class="n">act</span><span class="o">-&gt;</span><span class="n">pos</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">win_width</span> <span class="o">-</span> <span class="n">actor_size</span><span class="p">;</span>\n\t<span class="k">if</span> <span class="p">(</span><span class="n">act</span><span class="o">-&gt;</span><span class="n">pos</span><span class="p">.</span><span class="n">y</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">.</span><span class="n">f</span><span class="p">)</span>\n\t\t<span class="n">act</span><span class="o">-&gt;</span><span class="n">pos</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">.</span><span class="n">f</span><span class="p">;</span>\n\t<span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">act</span><span class="o">-&gt;</span><span class="n">pos</span><span class="p">.</span><span class="n">y</span> <span class="o">&gt;</span> <span class="n">win_height</span> <span class="o">-</span> <span class="n">actor_size</span><span class="p">)</span>\n\t\t<span class="n">act</span><span class="o">-&gt;</span><span class="n">pos</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="n">win_height</span> <span class="o">-</span> <span class="n">actor_size</span><span class="p">;</span>\n<span class="p">}</span>\n\n<span class="cm">/* draw an actor as a colored box */</span>\n<span class="kt">void</span> <span class="nf">draw_actor</span><span class="p">(</span><span class="n">SDL_Renderer</span><span class="o">*</span> <span class="n">renderer</span><span class="p">,</span> <span class="k">struct</span> <span class="n">actor</span><span class="o">*</span> <span class="n">act</span><span class="p">)</span>\n<span class="p">{</span>\n\t<span class="n">SDL_SetRenderDrawColor</span><span class="p">(</span><span class="n">renderer</span><span class="p">,</span> <span class="n">act</span><span class="o">-&gt;</span><span class="n">color</span><span class="p">.</span><span class="n">r</span><span class="p">,</span> <span class="n">act</span><span class="o">-&gt;</span><span class="n">color</span><span class="p">.</span><span class="n">g</span><span class="p">,</span> <span class="n">act</span><span class="o">-&gt;</span><span class="n">color</span><span class="p">.</span><span class="n">b</span><span class="p">,</span> <span class="n">act</span><span class="o">-&gt;</span><span class="n">color</span><span class="p">.</span><span class="n">a</span><span class="p">);</span>\n\t<span class="n">SDL_Rect</span> <span class="n">rectangle</span> <span class="o">=</span> <span class="p">{</span> <span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">act</span><span class="o">-&gt;</span><span class="n">pos</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="n">act</span><span class="o">-&gt;</span><span class="n">pos</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="p">.</span><span class="n">w</span> <span class="o">=</span> <span class="n">actor_size</span><span class="p">,</span> <span class="p">.</span><span class="n">h</span> <span class="o">=</span> <span class="n">actor_size</span> <span class="p">};</span>\n\t<span class="n">SDL_RenderFillRect</span><span class="p">(</span><span class="n">renderer</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">rectangle</span><span class="p">);</span>\n<span class="p">}</span>\n\n<span class="cm">/* methods for the API we\'re defining for the AI script */</span>\n<span class="cm">/* time - returns total elapsed time in milliseconds */</span>\n<span class="n">VALUE</span> <span class="nf">m_time</span><span class="p">(</span><span class="n">VALUE</span> <span class="n">self</span><span class="p">)</span>\n<span class="p">{</span>\n\t<span class="k">return</span> <span class="n">UINT2NUM</span><span class="p">(</span><span class="n">SDL_GetTicks</span><span class="p">());</span>\n<span class="p">}</span>\n\n<span class="cm">/* we don\'t need any mark/free/GC/etc. see later comment when we define the class */</span>\n<span class="k">static</span> <span class="k">const</span> <span class="n">rb_data_type_t</span> <span class="n">actor_type</span> <span class="o">=</span> <span class="p">{</span> <span class="p">.</span><span class="n">wrap_struct_name</span> <span class="o">=</span> <span class="s">"actor"</span> <span class="p">};</span>\n\n<span class="cm">/* Actor#pos - returns screen position x, y in pixels */</span>\n<span class="n">VALUE</span> <span class="nf">actor_m_pos</span><span class="p">(</span><span class="n">VALUE</span> <span class="n">self</span><span class="p">)</span>\n<span class="p">{</span>\n\t<span class="k">struct</span> <span class="n">actor</span><span class="o">*</span> <span class="n">data</span><span class="p">;</span>\n\t<span class="n">TypedData_Get_Struct</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="k">struct</span> <span class="n">actor</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">actor_type</span><span class="p">,</span> <span class="n">data</span><span class="p">);</span>\n\n\t<span class="k">return</span> <span class="n">rb_ary_new_from_args</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">DBL2NUM</span><span class="p">(</span><span class="n">data</span><span class="o">-&gt;</span><span class="n">pos</span><span class="p">.</span><span class="n">x</span><span class="p">),</span> <span class="n">DBL2NUM</span><span class="p">(</span><span class="n">data</span><span class="o">-&gt;</span><span class="n">pos</span><span class="p">.</span><span class="n">y</span><span class="p">));</span>\n<span class="p">}</span>\n\n<span class="cm">/* Actor#dir - returns last movement direction x, y. each is in the range (-1..1) */</span>\n<span class="n">VALUE</span> <span class="nf">actor_m_dir</span><span class="p">(</span><span class="n">VALUE</span> <span class="n">self</span><span class="p">)</span>\n<span class="p">{</span>\n\t<span class="k">struct</span> <span class="n">actor</span><span class="o">*</span> <span class="n">data</span><span class="p">;</span>\n\t<span class="n">TypedData_Get_Struct</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="k">struct</span> <span class="n">actor</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">actor_type</span><span class="p">,</span> <span class="n">data</span><span class="p">);</span>\n\n\t<span class="k">return</span> <span class="n">rb_ary_new_from_args</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">DBL2NUM</span><span class="p">(</span><span class="n">data</span><span class="o">-&gt;</span><span class="n">dir</span><span class="p">.</span><span class="n">x</span><span class="p">),</span> <span class="n">DBL2NUM</span><span class="p">(</span><span class="n">data</span><span class="o">-&gt;</span><span class="n">dir</span><span class="p">.</span><span class="n">y</span><span class="p">));</span>\n<span class="p">}</span>\n\n<span class="cm">/* Actor#move - set next movement direction. x, y as in Actor#pos */</span>\n<span class="n">VALUE</span> <span class="nf">actor_m_move</span><span class="p">(</span><span class="n">VALUE</span> <span class="n">self</span><span class="p">,</span> <span class="n">VALUE</span> <span class="n">x</span><span class="p">,</span> <span class="n">VALUE</span> <span class="n">y</span><span class="p">)</span>\n<span class="p">{</span>\n\t<span class="kt">float</span> <span class="n">nx</span> <span class="o">=</span> <span class="n">NUM2DBL</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>\n\t<span class="kt">float</span> <span class="n">ny</span> <span class="o">=</span> <span class="n">NUM2DBL</span><span class="p">(</span><span class="n">y</span><span class="p">);</span>\n\n\t<span class="k">struct</span> <span class="n">actor</span><span class="o">*</span> <span class="n">data</span><span class="p">;</span>\n\t<span class="n">TypedData_Get_Struct</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="k">struct</span> <span class="n">actor</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">actor_type</span><span class="p">,</span> <span class="n">data</span><span class="p">);</span>\n\n\t<span class="n">data</span><span class="o">-&gt;</span><span class="n">dir</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">nx</span><span class="p">;</span>\n\t<span class="n">data</span><span class="o">-&gt;</span><span class="n">dir</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="n">ny</span><span class="p">;</span>\n\n\t<span class="k">return</span> <span class="n">Qnil</span><span class="p">;</span>\n<span class="p">}</span>\n\n<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">**</span> <span class="n">argv</span><span class="p">)</span>\n<span class="p">{</span>\n\t<span class="cm">/* start Ruby TODO is this redundant? */</span>\n\t<span class="k">if</span> <span class="p">(</span><span class="n">ruby_setup</span><span class="p">())</span>\n\t<span class="p">{</span>\n\t\t<span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">"Failed to init Ruby VM</span><span class="se">\\n</span><span class="s">"</span><span class="p">);</span>\n\t\t<span class="k">return</span> <span class="mi">1</span><span class="p">;</span>\n\t<span class="p">}</span>\n\t<span class="cm">/* set a nicer script name than &lt;main&gt; */</span>\n\t<span class="n">ruby_script</span><span class="p">(</span><span class="s">"ruby"</span><span class="p">);</span>\n\n\t<span class="cm">/* define our own little API for use in the AI script */</span>\n\t<span class="n">rb_define_global_function</span><span class="p">(</span><span class="s">"time"</span><span class="p">,</span> <span class="n">m_time</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>\n\n\t<span class="cm">/* Actor will wrap struct actor for passing to Ruby */</span>\n\t<span class="n">VALUE</span> <span class="n">cActor</span> <span class="o">=</span> <span class="n">rb_define_class</span><span class="p">(</span><span class="s">"Actor"</span><span class="p">,</span> <span class="n">rb_cData</span><span class="p">);</span>\n\t<span class="n">rb_define_method</span><span class="p">(</span><span class="n">cActor</span><span class="p">,</span> <span class="s">"pos"</span><span class="p">,</span> <span class="n">actor_m_pos</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>\n\t<span class="n">rb_define_method</span><span class="p">(</span><span class="n">cActor</span><span class="p">,</span> <span class="s">"dir"</span><span class="p">,</span> <span class="n">actor_m_dir</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>\n\t<span class="n">rb_define_method</span><span class="p">(</span><span class="n">cActor</span><span class="p">,</span> <span class="s">"move"</span><span class="p">,</span> <span class="n">actor_m_move</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>\n\n\t<span class="cm">/*\n\t * Notice that even though Actor wraps C data, we didn\'t define an\n\t * allocation or free function. That\'s because we\'re going to create all\n\t * the actors in C and expose them to Ruby. However we should make sure\n\t * that Ruby can\'t create new Actors, because they\'ll contain invalid data\n\t * pointers\n\t */</span>\n\t<span class="n">rb_undef_method</span><span class="p">(</span><span class="n">rb_singleton_class</span><span class="p">(</span><span class="n">cActor</span><span class="p">),</span> <span class="s">"new"</span><span class="p">);</span>\n\n\t<span class="cm">/* start SDL */</span>\n\t<span class="n">SDL_Init</span><span class="p">(</span><span class="n">SDL_INIT_VIDEO</span><span class="p">);</span>\n\n\t<span class="cm">/* create window */</span>\n\t<span class="n">SDL_Window</span><span class="o">*</span> <span class="n">window</span> <span class="o">=</span> <span class="n">SDL_CreateWindow</span><span class="p">(</span>\n\t\t<span class="s">"Tag"</span><span class="p">,</span>\n\t\t<span class="n">SDL_WINDOWPOS_UNDEFINED</span><span class="p">,</span>\n\t\t<span class="n">SDL_WINDOWPOS_UNDEFINED</span><span class="p">,</span>\n\t\t<span class="n">win_width</span><span class="p">,</span>\n\t\t<span class="n">win_height</span><span class="p">,</span>\n\t\t<span class="mi">0</span>\n\t<span class="p">);</span>\n\t<span class="k">if</span> <span class="p">(</span><span class="n">window</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>\n\t<span class="p">{</span>\n\t\t<span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">"SDL_CreateWindow failed: %s</span><span class="se">\\n</span><span class="s">"</span><span class="p">,</span> <span class="n">SDL_GetError</span><span class="p">());</span>\n\t\t<span class="k">return</span> <span class="mi">1</span><span class="p">;</span>\n\t<span class="p">}</span>\n\n\t<span class="cm">/* create renderer */</span>\n\t<span class="n">SDL_Renderer</span><span class="o">*</span> <span class="n">renderer</span> <span class="o">=</span> <span class="n">SDL_CreateRenderer</span><span class="p">(</span><span class="n">window</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">SDL_RENDERER_ACCELERATED</span><span class="p">);</span>\n\t<span class="k">if</span> <span class="p">(</span><span class="n">renderer</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>\n\t<span class="p">{</span>\n\t\t<span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">"SDL_CreateRenderer failed: %s</span><span class="se">\\n</span><span class="s">"</span><span class="p">,</span> <span class="n">SDL_GetError</span><span class="p">());</span>\n\t\t<span class="k">return</span> <span class="mi">1</span><span class="p">;</span>\n\t<span class="p">}</span>\n\t<span class="n">SDL_SetRenderDrawBlendMode</span><span class="p">(</span><span class="n">renderer</span><span class="p">,</span> <span class="n">SDL_BLENDMODE_BLEND</span><span class="p">);</span>\n\n\t<span class="cm">/* create actors */</span>\n\t<span class="k">struct</span> <span class="n">actor</span> <span class="n">player</span> <span class="o">=</span> <span class="p">{</span>\n\t\t<span class="p">.</span><span class="n">pos</span> <span class="o">=</span> <span class="p">{</span> <span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">win_width</span> <span class="o">/</span> <span class="mi">2</span><span class="p">.</span><span class="n">f</span> <span class="o">+</span> <span class="mi">100</span><span class="p">.</span><span class="n">f</span> <span class="o">-</span> <span class="n">actor_size</span> <span class="o">/</span> <span class="mi">2</span><span class="p">.</span><span class="n">f</span><span class="p">,</span> <span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="n">win_height</span> <span class="o">/</span> <span class="mi">2</span><span class="p">.</span><span class="n">f</span> <span class="o">-</span> <span class="n">actor_size</span> <span class="o">/</span> <span class="mi">2</span><span class="p">.</span><span class="n">f</span> <span class="p">},</span>\n\t\t<span class="p">.</span><span class="n">dir</span> <span class="o">=</span> <span class="p">{</span> <span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">.</span><span class="n">f</span><span class="p">,</span> <span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">.</span><span class="n">f</span> <span class="p">},</span>\n\t\t<span class="p">.</span><span class="n">speed</span> <span class="o">=</span> <span class="mi">0</span><span class="p">.</span><span class="mi">5</span><span class="n">f</span><span class="p">,</span>\n\t\t<span class="p">.</span><span class="n">color</span> <span class="o">=</span> <span class="p">{</span> <span class="p">.</span><span class="n">r</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="p">.</span><span class="n">g</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span> <span class="o">=</span> <span class="mi">255</span><span class="p">,</span> <span class="p">.</span><span class="n">a</span> <span class="o">=</span> <span class="mi">255</span> <span class="p">}</span>\n\t<span class="p">};</span>\n\t<span class="k">struct</span> <span class="n">actor</span> <span class="n">ai_act</span> <span class="o">=</span> <span class="p">{</span>\n\t\t<span class="p">.</span><span class="n">pos</span> <span class="o">=</span> <span class="p">{</span> <span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">win_width</span> <span class="o">/</span> <span class="mi">2</span><span class="p">.</span><span class="n">f</span> <span class="o">-</span> <span class="mi">100</span><span class="p">.</span><span class="n">f</span> <span class="o">-</span> <span class="n">actor_size</span> <span class="o">/</span> <span class="mi">2</span><span class="p">.</span><span class="n">f</span><span class="p">,</span> <span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="n">win_height</span> <span class="o">/</span> <span class="mi">2</span><span class="p">.</span><span class="n">f</span> <span class="o">-</span> <span class="n">actor_size</span> <span class="o">/</span> <span class="mi">2</span><span class="p">.</span><span class="n">f</span> <span class="p">},</span>\n\t\t<span class="p">.</span><span class="n">dir</span> <span class="o">=</span> <span class="p">{</span> <span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">.</span><span class="n">f</span><span class="p">,</span> <span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">.</span><span class="n">f</span> <span class="p">},</span>\n\t\t<span class="p">.</span><span class="n">speed</span> <span class="o">=</span> <span class="mi">0</span><span class="p">.</span><span class="mi">55</span><span class="n">f</span><span class="p">,</span>\n\t\t<span class="p">.</span><span class="n">color</span> <span class="o">=</span> <span class="p">{</span> <span class="p">.</span><span class="n">r</span> <span class="o">=</span> <span class="mi">255</span><span class="p">,</span> <span class="p">.</span><span class="n">g</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="p">.</span><span class="n">a</span> <span class="o">=</span> <span class="mi">255</span> <span class="p">}</span>\n\t<span class="p">};</span>\n\n\t<span class="k">struct</span> <span class="n">ai_actor</span> <span class="n">ai</span> <span class="o">=</span> <span class="p">{</span>\n\t\t<span class="p">.</span><span class="n">script</span> <span class="o">=</span> <span class="s">"./ai.rb"</span><span class="p">,</span>\n\t\t<span class="p">.</span><span class="n">loaded</span> <span class="o">=</span> <span class="nb">false</span><span class="p">,</span>\n\t\t<span class="p">.</span><span class="n">error</span> <span class="o">=</span> <span class="nb">false</span><span class="p">,</span>\n\t\t<span class="p">.</span><span class="n">actor</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ai_act</span>\n\t<span class="p">};</span>\n\n\t<span class="cm">/* create Ruby objects for actors */</span>\n\t<span class="cm">/* we can use NULL for the free function because the data are on the stack */</span>\n\t<span class="n">VALUE</span> <span class="n">player_v</span> <span class="o">=</span> <span class="n">TypedData_Wrap_Struct</span><span class="p">(</span><span class="n">cActor</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">actor_type</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">player</span><span class="p">);</span>\n\t<span class="n">VALUE</span> <span class="n">ai_v</span> <span class="o">=</span> <span class="n">TypedData_Wrap_Struct</span><span class="p">(</span><span class="n">cActor</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">actor_type</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ai_act</span><span class="p">);</span>\n\n\t<span class="cm">/* don\'t allow the player to be moved via the AI script */</span>\n\t<span class="n">rb_undef_method</span><span class="p">(</span><span class="n">rb_singleton_class</span><span class="p">(</span><span class="n">player_v</span><span class="p">),</span> <span class="s">"move"</span><span class="p">);</span>\n\n\t<span class="cm">/* set up timing */</span>\n\t<span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">ai_step</span> <span class="o">=</span> <span class="mi">33</span><span class="p">;</span> <span class="cm">/* run AI at 30fps */</span>\n\t<span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">last_time</span> <span class="o">=</span> <span class="n">SDL_GetTicks</span><span class="p">();</span>\n\t<span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">now</span><span class="p">;</span>\n\t<span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">frame_time</span><span class="p">;</span>\n\t<span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">ai_time</span><span class="p">;</span>\n\n\t<span class="cm">/* start up AI */</span>\n\t<span class="n">ai_load</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ai</span><span class="p">);</span>\n\t<span class="n">ai_think</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ai</span><span class="p">,</span> <span class="n">ai_v</span><span class="p">,</span> <span class="n">player_v</span><span class="p">);</span>\n\n\t<span class="cm">/* for player input */</span>\n\t<span class="k">const</span> <span class="n">Uint8</span><span class="o">*</span> <span class="n">keyboard</span> <span class="o">=</span> <span class="n">SDL_GetKeyboardState</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>\n\n\t<span class="cm">/* main loop */</span>\n\t<span class="n">SDL_Event</span> <span class="n">event</span><span class="p">;</span>\n\t<span class="n">bool</span> <span class="n">running</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>\n\t<span class="k">while</span> <span class="p">(</span><span class="n">running</span><span class="p">)</span>\n\t<span class="p">{</span>\n\t\t<span class="cm">/* update timers */</span>\n\t\t<span class="n">now</span> <span class="o">=</span> <span class="n">SDL_GetTicks</span><span class="p">();</span>\n\t\t<span class="n">frame_time</span> <span class="o">=</span> <span class="n">now</span> <span class="o">-</span> <span class="n">last_time</span><span class="p">;</span>\n\t\t<span class="n">ai_time</span> <span class="o">+=</span> <span class="n">frame_time</span><span class="p">;</span>\n\t\t<span class="n">last_time</span> <span class="o">=</span> <span class="n">now</span><span class="p">;</span>\n\n\t\t<span class="cm">/* event handling */</span>\n\t\t<span class="k">while</span> <span class="p">(</span><span class="n">SDL_PollEvent</span><span class="p">(</span><span class="o">&amp;</span><span class="n">event</span><span class="p">))</span>\n\t\t<span class="p">{</span>\n\t\t\t<span class="k">switch</span> <span class="p">(</span><span class="n">event</span><span class="p">.</span><span class="n">type</span><span class="p">)</span>\n\t\t\t<span class="p">{</span>\n\t\t\t\t<span class="k">case</span> <span class="n">SDL_QUIT</span><span class="p">:</span>\n\t\t\t\t\t<span class="n">running</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>\n\t\t\t\t\t<span class="k">break</span><span class="p">;</span>\n\t\t\t\t<span class="k">case</span> <span class="n">SDL_KEYDOWN</span><span class="p">:</span>\n\t\t\t\t\t<span class="k">if</span> <span class="p">(</span><span class="n">event</span><span class="p">.</span><span class="n">key</span><span class="p">.</span><span class="n">keysym</span><span class="p">.</span><span class="n">sym</span> <span class="o">==</span> <span class="n">SDLK_ESCAPE</span><span class="p">)</span>\n\t\t\t\t\t<span class="p">{</span>\n\t\t\t\t\t\t<span class="n">running</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>\n\t\t\t\t\t\t<span class="k">break</span><span class="p">;</span>\n\t\t\t\t\t<span class="p">}</span>\n\t\t\t<span class="p">}</span>\n\t\t<span class="p">}</span>\n\n\t\t<span class="cm">/* player movement */</span>\n\t\t<span class="n">player</span><span class="p">.</span><span class="n">dir</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">.</span><span class="n">f</span><span class="p">;</span>\n\t\t<span class="n">player</span><span class="p">.</span><span class="n">dir</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">.</span><span class="n">f</span><span class="p">;</span>\n\n\t\t<span class="k">if</span> <span class="p">(</span><span class="n">keyboard</span><span class="p">[</span><span class="n">SDL_SCANCODE_UP</span><span class="p">])</span>\n\t\t\t<span class="n">player</span><span class="p">.</span><span class="n">dir</span><span class="p">.</span><span class="n">y</span> <span class="o">-=</span> <span class="mi">1</span><span class="p">.</span><span class="n">f</span><span class="p">;</span>\n\t\t<span class="k">if</span> <span class="p">(</span><span class="n">keyboard</span><span class="p">[</span><span class="n">SDL_SCANCODE_DOWN</span><span class="p">])</span>\n\t\t\t<span class="n">player</span><span class="p">.</span><span class="n">dir</span><span class="p">.</span><span class="n">y</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">.</span><span class="n">f</span><span class="p">;</span>\n\t\t<span class="k">if</span> <span class="p">(</span><span class="n">keyboard</span><span class="p">[</span><span class="n">SDL_SCANCODE_LEFT</span><span class="p">])</span>\n\t\t\t<span class="n">player</span><span class="p">.</span><span class="n">dir</span><span class="p">.</span><span class="n">x</span> <span class="o">-=</span> <span class="mi">1</span><span class="p">.</span><span class="n">f</span><span class="p">;</span>\n\t\t<span class="k">if</span> <span class="p">(</span><span class="n">keyboard</span><span class="p">[</span><span class="n">SDL_SCANCODE_RIGHT</span><span class="p">])</span>\n\t\t\t<span class="n">player</span><span class="p">.</span><span class="n">dir</span><span class="p">.</span><span class="n">x</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">.</span><span class="n">f</span><span class="p">;</span>\n\n\t\t<span class="cm">/* AI movement */</span>\n\t\t<span class="k">if</span> <span class="p">(</span><span class="n">ai_time</span> <span class="o">&gt;=</span> <span class="n">ai_step</span><span class="p">)</span>\n\t\t<span class="p">{</span>\n\t\t\t<span class="n">ai_load</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ai</span><span class="p">);</span>\n\t\t\t<span class="n">ai_think</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ai</span><span class="p">,</span> <span class="n">ai_v</span><span class="p">,</span> <span class="n">player_v</span><span class="p">);</span>\n\n\t\t\t<span class="n">ai_time</span> <span class="o">%=</span> <span class="n">ai_step</span><span class="p">;</span>\n\t\t<span class="p">}</span>\n\n\t\t<span class="cm">/* game step */</span>\n\t\t<span class="n">step_actor</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ai_act</span><span class="p">,</span> <span class="n">frame_time</span><span class="p">);</span>\n\t\t<span class="n">step_actor</span><span class="p">(</span><span class="o">&amp;</span><span class="n">player</span><span class="p">,</span> <span class="n">frame_time</span><span class="p">);</span>\n\n\t\t<span class="cm">/* render */</span>\n\t\t<span class="n">SDL_SetRenderDrawColor</span><span class="p">(</span><span class="n">renderer</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">);</span>\n\t\t<span class="n">SDL_RenderClear</span><span class="p">(</span><span class="n">renderer</span><span class="p">);</span>\n\n\t\t<span class="n">draw_actor</span><span class="p">(</span><span class="n">renderer</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ai_act</span><span class="p">);</span>\n\t\t<span class="n">draw_actor</span><span class="p">(</span><span class="n">renderer</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">player</span><span class="p">);</span>\n\n\t\t<span class="n">SDL_RenderPresent</span><span class="p">(</span><span class="n">renderer</span><span class="p">);</span>\n\n\t\t<span class="cm">/* let CPU rest */</span>\n\t\t<span class="n">SDL_Delay</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>\n\t<span class="p">}</span>\n\n\t<span class="cm">/* clean up */</span>\n\t<span class="n">SDL_DestroyRenderer</span><span class="p">(</span><span class="n">renderer</span><span class="p">);</span>\n\t<span class="n">SDL_DestroyWindow</span><span class="p">(</span><span class="n">window</span><span class="p">);</span>\n\n\t<span class="cm">/* stop SDL */</span>\n\t<span class="n">SDL_Quit</span><span class="p">();</span>\n\n\t<span class="cm">/* stop Ruby */</span>\n\t<span class="k">return</span> <span class="n">ruby_cleanup</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>\n<span class="p">}</span></code></pre>\n     </figure>\n     <p>\n      The Makefile is nothing special:\n     </p>\n     <figure class="highlight">\n      <pre><code class="language-make" data-lang="make"><span class="c"># this is just a hack to get the Ruby version in this guide\n# you can just hard-code it e.g. RUBY=2.4\n</span><span class="nv">RUBY</span><span class="o">=</span><span class="nf">$(</span><span class="nb">shell</span> <span class="nb">grep </span>rbversion ../../_config.yml | cut <span class="nt">-d</span><span class="s1">\' \'</span> <span class="nt">-f2</span><span class="nv">)</span>\n\n<span class="nv">CFLAGS</span><span class="o">=</span><span class="nt">-std</span><span class="o">=</span>gnu11 <span class="nt">-Wall</span> <span class="nf">$(</span><span class="nb">shell</span> pkg-config <span class="nt">--cflags</span> ruby-<span class="nv">$(RUBY)</span> sdl2<span class="nv">)</span>\n<span class="nv">LDLIBS</span><span class="o">=</span><span class="nf">$(</span><span class="nb">shell</span> pkg-config <span class="nt">--libs</span> ruby-<span class="nv">$(RUBY)</span> sdl2<span class="nv">)</span>\n\n<span class="nl">all</span><span class="o">:</span> <span class="nf">tag</span>\n\n<span class="nl">clean</span><span class="o">:</span>\n\trm <span class="nt">-f</span> tag <span class="k">*</span>.o</code></pre>\n     </figure>\n     <h2 id="running-c-in-ruby">\n      Running C in Ruby\n     </h2>\n     <p>\n      This example is a Ruby C extension that wraps the\n      <a href="https://gmplib.org/">\n       GMP\n      </a>\n      C library for\narbitrary precision arithmetic. This is far from a complete example: it only\nwraps the integer functions, implements only the basic functionality of the\nlibrary, and doesn\xe2\x80\x99t bother nicely integrating with Ruby\xe2\x80\x99s existing numeric\ntypes. If you want a\n      <em>\n       really\n      </em>\n      full example, check out the\n      <a href="https://github.com/srawlins/gmp">\n       GMP gem\n      </a>\n      .\n     </p>\n     <p>\n      Everything is in\n      <code class="highlighter-rouge">\n       gmp.c\n      </code>\n      where we define our\n      <code class="highlighter-rouge">\n       GMP::Integer\n      </code>\n      class:\n     </p>\n     <figure class="highlight">\n      <pre><code class="language-c" data-lang="c"><span class="cp">#include &lt;ruby.h&gt;\n#include &lt;gmp.h&gt;\n#include &lt;string.h&gt;\n</span>\n<span class="cm">/*\n * we\'re going to be unwrapping VALUEs to get the C data A LOT.\n * It\'s not that hard, but it gets tedious. This lets us go\n * straight from a VALUE to the underlying data\n */</span>\n<span class="cp">#define UNWRAP(val, data) \\\n\tmpz_t* data;\\\n\tTypedData_Get_Struct(val, mpz_t, &amp;mpz_type, data);\n</span>\n<span class="cm">/*\n * we\'re also going to be pretty strict about accepting only\n * objects of our GMP::Integer type, so this will be a frequent test\n */</span>\n<span class="cp">#define CHECK_MPZ(val) \\\n\tif (CLASS_OF(val) != cInteger)\\\n\t\trb_raise(rb_eTypeError, "%+"PRIsVALUE" is not a %"PRIsVALUE, val, cInteger);\n</span>\n<span class="cm">/* it\'s nice to have these as globals for easy access in methods */</span>\n<span class="n">VALUE</span> <span class="n">mGMP</span><span class="p">;</span>\n<span class="n">VALUE</span> <span class="n">cInteger</span><span class="p">;</span>\n\n<span class="cm">/* function to free data wrapped in GMP::Integer */</span>\n<span class="kt">void</span> <span class="nf">integer_free</span><span class="p">(</span><span class="kt">void</span><span class="o">*</span> <span class="n">data</span><span class="p">)</span>\n<span class="p">{</span>\n\t<span class="cm">/* free memory allocated by GMP */</span>\n\t<span class="n">mpz_clear</span><span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="n">mpz_t</span><span class="o">*</span><span class="p">)</span><span class="n">data</span><span class="p">);</span>\n\n\t<span class="n">free</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>\n<span class="p">}</span>\n\n<span class="k">static</span> <span class="k">const</span> <span class="n">rb_data_type_t</span> <span class="n">mpz_type</span> <span class="o">=</span> <span class="p">{</span>\n\t<span class="p">.</span><span class="n">wrap_struct_name</span> <span class="o">=</span> <span class="s">"gmp_mpz"</span><span class="p">,</span>\n\t<span class="p">.</span><span class="n">function</span> <span class="o">=</span> <span class="p">{</span>\n\t\t<span class="p">.</span><span class="n">dfree</span> <span class="o">=</span> <span class="n">integer_free</span><span class="p">,</span>\n\t\t<span class="cm">/* probably should set .dsize but I don\'t know how to write it for mpz_t... */</span>\n\t<span class="p">},</span>\n\t<span class="p">.</span><span class="n">flags</span> <span class="o">=</span> <span class="n">RUBY_TYPED_FREE_IMMEDIATELY</span><span class="p">,</span>\n<span class="p">};</span>\n\n<span class="cm">/* GMP::Integer.allocate */</span>\n<span class="n">VALUE</span> <span class="nf">integer_c_alloc</span><span class="p">(</span><span class="n">VALUE</span> <span class="n">self</span><span class="p">)</span>\n<span class="p">{</span>\n\t<span class="n">mpz_t</span><span class="o">*</span> <span class="n">data</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">mpz_t</span><span class="p">));</span>\n\t<span class="cm">/* GMP initialization */</span>\n\t<span class="n">mpz_init</span><span class="p">(</span><span class="o">*</span><span class="n">data</span><span class="p">);</span>\n\n\t<span class="k">return</span> <span class="n">TypedData_Wrap_Struct</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">mpz_type</span><span class="p">,</span> <span class="n">data</span><span class="p">);</span>\n<span class="p">}</span>\n\n<span class="cm">/* GMP::Integer#initialize\n *\n * Sets internal mpz_t using first argument\n *\n * If the first argument is a String, you can supply a second Fixnum argument\n * as the base for interpreting the String. The default base of 0 means that\n * the base will be determined by the String\'s prefix.\n */</span>\n<span class="n">VALUE</span> <span class="nf">integer_m_initialize</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="n">VALUE</span><span class="o">*</span> <span class="n">argv</span><span class="p">,</span> <span class="n">VALUE</span> <span class="n">self</span><span class="p">)</span>\n<span class="p">{</span>\n\t<span class="kt">int</span> <span class="n">base</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>\n\n\t<span class="cm">/* check for optional base argument */</span>\n\t<span class="n">VALUE</span> <span class="n">val</span><span class="p">;</span>\n\t<span class="n">VALUE</span> <span class="n">rbase</span><span class="p">;</span>\n\t<span class="k">if</span> <span class="p">(</span><span class="n">rb_scan_args</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">,</span> <span class="s">"11"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">val</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">rbase</span><span class="p">)</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span>\n\t<span class="p">{</span>\n\t\t<span class="cm">/* base only makes sense with a string */</span>\n\t\t<span class="n">Check_Type</span><span class="p">(</span><span class="n">val</span><span class="p">,</span> <span class="n">T_STRING</span><span class="p">);</span>\n\t\t<span class="n">Check_Type</span><span class="p">(</span><span class="n">rbase</span><span class="p">,</span> <span class="n">T_FIXNUM</span><span class="p">);</span>\n\n\t\t<span class="n">base</span> <span class="o">=</span> <span class="n">FIX2INT</span><span class="p">(</span><span class="n">rbase</span><span class="p">);</span>\n\n\t\t<span class="cm">/* GMP only accepts certain bases */</span>\n\t\t<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">base</span> <span class="o">&gt;=</span> <span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="n">base</span> <span class="o">&lt;=</span> <span class="mi">62</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">base</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>\n\t\t\t<span class="n">rb_raise</span><span class="p">(</span><span class="n">rb_eRangeError</span><span class="p">,</span> <span class="s">"base must be 0 or in (2..62)"</span><span class="p">);</span>\n\t<span class="p">}</span>\n\n\t<span class="n">UNWRAP</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">data</span><span class="p">);</span>\n\n\t<span class="n">VALUE</span> <span class="n">str</span><span class="p">;</span>\n\n\t<span class="k">switch</span> <span class="p">(</span><span class="n">TYPE</span><span class="p">(</span><span class="n">val</span><span class="p">))</span>\n\t<span class="p">{</span>\n\t\t<span class="k">case</span> <span class="n">T_FIXNUM</span><span class="p">:</span>\n\t\t\t<span class="cm">/* easy case */</span>\n\t\t\t<span class="n">mpz_set_si</span><span class="p">(</span><span class="o">*</span><span class="n">data</span><span class="p">,</span> <span class="n">FIX2LONG</span><span class="p">(</span><span class="n">val</span><span class="p">));</span>\n\t\t\t<span class="k">return</span> <span class="n">self</span><span class="p">;</span>\n\t\t<span class="k">case</span> <span class="n">T_BIGNUM</span><span class="p">:</span>\n\t\t\t<span class="cm">/* this is the easiest way to safely convert */</span>\n\t\t\t<span class="n">str</span> <span class="o">=</span> <span class="n">rb_funcall</span><span class="p">(</span><span class="n">val</span><span class="p">,</span> <span class="n">rb_intern</span><span class="p">(</span><span class="s">"to_s"</span><span class="p">),</span> <span class="mi">0</span><span class="p">);</span>\n\t\t\t<span class="n">base</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>\n\t\t\t<span class="k">break</span><span class="p">;</span>\n\t\t<span class="k">case</span> <span class="n">T_STRING</span><span class="p">:</span>\n\t\t\t<span class="n">str</span> <span class="o">=</span> <span class="n">val</span><span class="p">;</span>\n\t\t\t<span class="k">break</span><span class="p">;</span>\n\t\t<span class="k">case</span> <span class="n">T_DATA</span><span class="p">:</span>\n\t\t\t<span class="cm">/* copy another GMP::Integer */</span>\n\t\t\t<span class="k">if</span> <span class="p">(</span><span class="n">CLASS_OF</span><span class="p">(</span><span class="n">val</span><span class="p">)</span> <span class="o">==</span> <span class="n">cInteger</span><span class="p">)</span>\n\t\t\t<span class="p">{</span>\n\t\t\t\t<span class="n">UNWRAP</span><span class="p">(</span><span class="n">val</span><span class="p">,</span> <span class="n">other</span><span class="p">);</span>\n\n\t\t\t\t<span class="n">mpz_set</span><span class="p">(</span><span class="o">*</span><span class="n">data</span><span class="p">,</span> <span class="o">*</span><span class="n">other</span><span class="p">);</span>\n\n\t\t\t\t<span class="k">return</span> <span class="n">self</span><span class="p">;</span>\n\t\t\t<span class="p">}</span>\n\t\t\t<span class="cm">/* break intentionally omitted */</span>\n\t\t<span class="nl">default:</span>\n\t\t\t<span class="n">rb_raise</span><span class="p">(</span><span class="n">rb_eTypeError</span><span class="p">,</span> <span class="s">"%+"</span><span class="n">PRIsVALUE</span><span class="s">" is not an integer type"</span><span class="p">,</span> <span class="n">val</span><span class="p">);</span>\n\t\t\t<span class="k">break</span><span class="p">;</span>\n\t<span class="p">}</span>\n\n\t<span class="cm">/* assign */</span>\n\t<span class="kt">char</span><span class="o">*</span> <span class="n">cstr</span> <span class="o">=</span> <span class="n">StringValueCStr</span><span class="p">(</span><span class="n">str</span><span class="p">);</span>\n\t<span class="k">if</span> <span class="p">(</span><span class="n">mpz_set_str</span><span class="p">(</span><span class="o">*</span><span class="n">data</span><span class="p">,</span> <span class="n">cstr</span><span class="p">,</span> <span class="n">base</span><span class="p">))</span>\n\t<span class="p">{</span>\n\t\t<span class="k">if</span> <span class="p">(</span><span class="n">base</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>\n\t\t\t<span class="n">rb_raise</span><span class="p">(</span><span class="n">rb_eArgError</span><span class="p">,</span> <span class="s">"invalid number: %"</span><span class="n">PRIsVALUE</span><span class="p">,</span> <span class="n">val</span><span class="p">);</span>\n\t\t<span class="k">else</span>\n\t\t\t<span class="n">rb_raise</span><span class="p">(</span><span class="n">rb_eArgError</span><span class="p">,</span> <span class="s">"invalid base %d number: %"</span><span class="n">PRIsVALUE</span><span class="p">,</span> <span class="n">base</span><span class="p">,</span> <span class="n">val</span><span class="p">);</span>\n\t<span class="p">}</span>\n\n\t<span class="k">return</span> <span class="n">self</span><span class="p">;</span>\n<span class="p">}</span>\n\n<span class="cm">/* GMP::Integer#to_s\n *\n * Accepts an optional Fixnum argument for the base of the String (default 10)\n */</span>\n<span class="n">VALUE</span> <span class="nf">integer_m_to_s</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="n">VALUE</span><span class="o">*</span> <span class="n">argv</span><span class="p">,</span> <span class="n">VALUE</span> <span class="n">self</span><span class="p">)</span>\n<span class="p">{</span>\n\t<span class="kt">int</span> <span class="n">base</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>\n\n\t<span class="cm">/* check for optional base argument */</span>\n\t<span class="n">VALUE</span> <span class="n">rbase</span><span class="p">;</span>\n\t<span class="k">if</span> <span class="p">(</span><span class="n">rb_scan_args</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">,</span> <span class="s">"01"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">rbase</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>\n\t<span class="p">{</span>\n\t\t<span class="n">Check_Type</span><span class="p">(</span><span class="n">rbase</span><span class="p">,</span> <span class="n">T_FIXNUM</span><span class="p">);</span>\n\n\t\t<span class="n">base</span> <span class="o">=</span> <span class="n">FIX2INT</span><span class="p">(</span><span class="n">rbase</span><span class="p">);</span>\n\n\t\t<span class="cm">/* GMP only accepts certain bases */</span>\n\t\t<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">base</span> <span class="o">&gt;=</span> <span class="o">-</span><span class="mi">36</span> <span class="o">&amp;&amp;</span> <span class="n">base</span> <span class="o">&lt;=</span> <span class="o">-</span><span class="mi">2</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="p">(</span><span class="n">base</span> <span class="o">&gt;=</span> <span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="n">base</span> <span class="o">&lt;=</span> <span class="mi">62</span><span class="p">))</span>\n\t\t\t<span class="n">rb_raise</span><span class="p">(</span><span class="n">rb_eRangeError</span><span class="p">,</span> <span class="s">"base must be in (-36..-2) or (2..62)"</span><span class="p">);</span>\n\t<span class="p">}</span>\n\n\t<span class="n">UNWRAP</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">data</span><span class="p">);</span>\n\n\t<span class="cm">/* get C string from GMP */</span>\n\t<span class="kt">char</span><span class="o">*</span> <span class="n">cstr</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="n">mpz_sizeinbase</span><span class="p">(</span><span class="o">*</span><span class="n">data</span><span class="p">,</span> <span class="n">base</span><span class="p">)</span> <span class="o">+</span> <span class="mi">2</span><span class="p">);</span>\n\t<span class="n">mpz_get_str</span><span class="p">(</span><span class="n">cstr</span><span class="p">,</span> <span class="n">base</span><span class="p">,</span> <span class="o">*</span><span class="n">data</span><span class="p">);</span>\n\n\t<span class="cm">/* create Ruby String */</span>\n\t<span class="n">VALUE</span> <span class="n">str</span> <span class="o">=</span> <span class="n">rb_str_new_cstr</span><span class="p">(</span><span class="n">cstr</span><span class="p">);</span>\n\n\t<span class="cm">/* free memory */</span>\n\t<span class="n">free</span><span class="p">(</span><span class="n">cstr</span><span class="p">);</span>\n\n\t<span class="k">return</span> <span class="n">str</span><span class="p">;</span>\n<span class="p">}</span>\n\n<span class="cm">/* GMP::Integer#to_i */</span>\n<span class="n">VALUE</span> <span class="nf">integer_m_to_i</span><span class="p">(</span><span class="n">VALUE</span> <span class="n">self</span><span class="p">)</span>\n<span class="p">{</span>\n\t<span class="cm">/* safest and easiest way to convert is to call to_s.to_i */</span>\n\t<span class="k">return</span> <span class="n">rb_funcall</span><span class="p">(</span><span class="n">integer_m_to_s</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">self</span><span class="p">),</span> <span class="n">rb_intern</span><span class="p">(</span><span class="s">"to_i"</span><span class="p">),</span> <span class="mi">0</span><span class="p">);</span>\n<span class="p">}</span>\n\n<span class="cm">/* GMP::Integer#&lt;=&gt; */</span>\n<span class="n">VALUE</span> <span class="nf">integer_m_spaceship</span><span class="p">(</span><span class="n">VALUE</span> <span class="n">self</span><span class="p">,</span> <span class="n">VALUE</span> <span class="n">x</span><span class="p">)</span>\n<span class="p">{</span>\n\t<span class="n">CHECK_MPZ</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>\n\n\t<span class="n">UNWRAP</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">data</span><span class="p">);</span>\n\t<span class="n">UNWRAP</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">other</span><span class="p">);</span>\n\n\t<span class="cm">/* shortcut for identical objects */</span>\n\t<span class="k">if</span> <span class="p">(</span><span class="n">data</span> <span class="o">==</span> <span class="n">other</span><span class="p">)</span>\n\t\t<span class="k">return</span> <span class="n">INT2FIX</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>\n\n\t<span class="k">return</span> <span class="n">INT2FIX</span><span class="p">(</span><span class="n">mpz_cmp</span><span class="p">(</span><span class="o">*</span><span class="n">data</span><span class="p">,</span> <span class="o">*</span><span class="n">other</span><span class="p">));</span>\n<span class="p">}</span>\n\n<span class="cm">/* GMP::Integer#== */</span>\n<span class="n">VALUE</span> <span class="nf">integer_m_eq</span><span class="p">(</span><span class="n">VALUE</span> <span class="n">self</span><span class="p">,</span> <span class="n">VALUE</span> <span class="n">x</span><span class="p">)</span>\n<span class="p">{</span>\n\t<span class="cm">/* for GMP::Integers, use &lt;=&gt; */</span>\n\t<span class="k">if</span> <span class="p">(</span><span class="n">CLASS_OF</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">==</span> <span class="n">cInteger</span><span class="p">)</span>\n\t\t<span class="k">return</span> <span class="n">integer_m_spaceship</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span> <span class="o">==</span> <span class="n">INT2FIX</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">?</span> <span class="n">Qtrue</span> <span class="o">:</span> <span class="n">Qfalse</span><span class="p">;</span>\n\n\t<span class="k">return</span> <span class="n">rb_call_super</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">x</span><span class="p">);</span>\n<span class="p">}</span>\n\n<span class="cm">/* GMP::Integer#+ */</span>\n<span class="n">VALUE</span> <span class="nf">integer_m_add</span><span class="p">(</span><span class="n">VALUE</span> <span class="n">self</span><span class="p">,</span> <span class="n">VALUE</span> <span class="n">x</span><span class="p">)</span>\n<span class="p">{</span>\n\t<span class="n">CHECK_MPZ</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>\n\n\t<span class="n">UNWRAP</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">data</span><span class="p">);</span>\n\t<span class="n">UNWRAP</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">other</span><span class="p">);</span>\n\n\t<span class="cm">/*\n\t * we need a new GMP::Integer to store the result, but there\'s no need\n\t * to actually use the `new` method\n\t */</span>\n\t<span class="n">VALUE</span> <span class="n">result</span> <span class="o">=</span> <span class="n">integer_c_alloc</span><span class="p">(</span><span class="n">cInteger</span><span class="p">);</span>\n\t<span class="n">UNWRAP</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">res</span><span class="p">);</span>\n\n\t<span class="n">mpz_add</span><span class="p">(</span><span class="o">*</span><span class="n">res</span><span class="p">,</span> <span class="o">*</span><span class="n">data</span><span class="p">,</span> <span class="o">*</span><span class="n">other</span><span class="p">);</span>\n\n\t<span class="k">return</span> <span class="n">result</span><span class="p">;</span>\n<span class="p">}</span>\n<span class="cm">/* multiplication and subtraction would be defined nearly identically */</span>\n\n<span class="cm">/* GMP::Integer#-@ */</span>\n<span class="n">VALUE</span> <span class="nf">integer_m_neg</span><span class="p">(</span><span class="n">VALUE</span> <span class="n">self</span><span class="p">)</span>\n<span class="p">{</span>\n\t<span class="n">UNWRAP</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">data</span><span class="p">);</span>\n\n\t<span class="cm">/* bypassing `new` as in the + method */</span>\n\t<span class="n">VALUE</span> <span class="n">result</span> <span class="o">=</span> <span class="n">integer_c_alloc</span><span class="p">(</span><span class="n">cInteger</span><span class="p">);</span>\n\t<span class="n">UNWRAP</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">res</span><span class="p">);</span>\n\n\t<span class="n">mpz_neg</span><span class="p">(</span><span class="o">*</span><span class="n">res</span><span class="p">,</span> <span class="o">*</span><span class="n">data</span><span class="p">);</span>\n\n\t<span class="k">return</span> <span class="n">result</span><span class="p">;</span>\n<span class="p">}</span>\n\n<span class="cm">/* entry point */</span>\n<span class="kt">void</span> <span class="nf">Init_gmp</span><span class="p">()</span>\n<span class="p">{</span>\n\t<span class="n">mGMP</span> <span class="o">=</span> <span class="n">rb_define_module</span><span class="p">(</span><span class="s">"GMP"</span><span class="p">);</span>\n\n\t<span class="cm">/* define GMP::Integer */</span>\n\t<span class="n">cInteger</span> <span class="o">=</span> <span class="n">rb_define_class_under</span><span class="p">(</span><span class="n">mGMP</span><span class="p">,</span> <span class="s">"Integer"</span><span class="p">,</span> <span class="n">rb_cData</span><span class="p">);</span>\n\t<span class="n">rb_define_alloc_func</span><span class="p">(</span><span class="n">cInteger</span><span class="p">,</span> <span class="n">integer_c_alloc</span><span class="p">);</span>\n\t<span class="n">rb_define_method</span><span class="p">(</span><span class="n">cInteger</span><span class="p">,</span> <span class="s">"initialize"</span><span class="p">,</span> <span class="n">integer_m_initialize</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">);</span>\n\t<span class="n">rb_define_method</span><span class="p">(</span><span class="n">cInteger</span><span class="p">,</span> <span class="s">"to_s"</span><span class="p">,</span> <span class="n">integer_m_to_s</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">);</span>\n\t<span class="n">rb_define_method</span><span class="p">(</span><span class="n">cInteger</span><span class="p">,</span> <span class="s">"to_i"</span><span class="p">,</span> <span class="n">integer_m_to_i</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>\n\t<span class="n">rb_define_method</span><span class="p">(</span><span class="n">cInteger</span><span class="p">,</span> <span class="s">"&lt;=&gt;"</span><span class="p">,</span> <span class="n">integer_m_spaceship</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>\n\t<span class="n">rb_define_method</span><span class="p">(</span><span class="n">cInteger</span><span class="p">,</span> <span class="s">"=="</span><span class="p">,</span> <span class="n">integer_m_eq</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>\n\t<span class="n">rb_define_method</span><span class="p">(</span><span class="n">cInteger</span><span class="p">,</span> <span class="s">"+"</span><span class="p">,</span> <span class="n">integer_m_add</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>\n\t<span class="n">rb_define_method</span><span class="p">(</span><span class="n">cInteger</span><span class="p">,</span> <span class="s">"-@"</span><span class="p">,</span> <span class="n">integer_m_neg</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>\n\n\t<span class="n">rb_define_alias</span><span class="p">(</span><span class="n">cInteger</span><span class="p">,</span> <span class="s">"inspect"</span><span class="p">,</span> <span class="s">"to_s"</span><span class="p">);</span>\n<span class="p">}</span></code></pre>\n     </figure>\n     <p>\n      The\n      <code class="highlighter-rouge">\n       extconf.rb\n      </code>\n      is really simple.\n     </p>\n     <figure class="highlight">\n      <pre><code class="language-ruby" data-lang="ruby"><span class="c1">#!/usr/bin/env ruby</span>\n<span class="nb">require</span> <span class="s1">\'mkmf\'</span>\n\n<span class="k">raise</span> <span class="s2">"Can\'t find GMP lib"</span>       <span class="k">unless</span> <span class="n">have_library</span> <span class="s1">\'gmp\'</span>\n<span class="k">raise</span> <span class="s2">"Can\'t find GMP header"</span>    <span class="k">unless</span> <span class="n">have_header</span>  <span class="s1">\'gmp.h\'</span>\n<span class="k">raise</span> <span class="s2">"Can\'t find string header"</span> <span class="k">unless</span> <span class="n">have_header</span>  <span class="s1">\'string.h\'</span>\n\n<span class="n">create_makefile</span> <span class="s1">\'gmp\'</span></code></pre>\n     </figure>\n     <p>\n      And now you can finally find out what your name means in base 62:\n     </p>\n     <figure class="highlight">\n      <pre><code class="language-ruby" data-lang="ruby"><span class="nb">require</span> <span class="s1">\'./ext/gmp\'</span>\n\n<span class="nb">puts</span> <span class="no">GMP</span><span class="o">::</span><span class="no">Integer</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s1">\'Maxwell\'</span><span class="p">,</span> <span class="mi">62</span><span class="p">)</span>\n<span class="c1"># 1283471748369</span></code></pre>\n     </figure>\n     <p>\n      For this example I tried to do everything in C, but practically that isn\xe2\x80\x99t\nnecessary (or desirable). If one of your C methods just calls a bunch of API\nfunctions (like\n      <code class="highlighter-rouge">\n       to_i\n      </code>\n      and\n      <code class="highlighter-rouge">\n       ==\n      </code>\n      in the example), you\xe2\x80\x99re probably only saving\nyourself a couple CPU cycles compared to implementing the method in Ruby. And of\ncourse that comes at the cost of needing to spend more time writing C and less\ntime writing Ruby. \xe2\x98\xba\n     </p>\n     <p>\n      A common convention when writing extensions is to only implement the \xe2\x80\x9cmeat\xe2\x80\x9d of\nthe extension in C and to do everything else in a regular Ruby script that pulls\nin the compiled library. For example, we could have written a\n      <code class="highlighter-rouge">\n       gmp.rb\n      </code>\n      script to\nsignificantly simplify our extension:\n     </p>\n     <figure class="highlight">\n      <pre><code class="language-ruby" data-lang="ruby"><span class="nb">require</span> <span class="s1">\'./ext/gmp\'</span>\n\n<span class="k">class</span> <span class="nc">GMP</span><span class="o">::</span><span class="no">Integer</span>\n  <span class="k">def</span> <span class="nf">to_i</span>\n    <span class="nb">to_s</span><span class="p">.</span><span class="nf">to_i</span>\n  <span class="k">end</span>\n\n  <span class="k">def</span> <span class="nf">==</span> <span class="n">other</span>\n    <span class="k">return</span> <span class="p">(</span><span class="nb">self</span> <span class="o">&lt;=&gt;</span> <span class="n">other</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="k">if</span> <span class="n">other</span><span class="p">.</span><span class="nf">is_a?</span> <span class="nb">self</span><span class="p">.</span><span class="nf">class</span>\n    <span class="k">super</span>\n  <span class="k">end</span>\n\n  <span class="k">alias</span> <span class="ss">:inspect</span> <span class="ss">:to_s</span>\n<span class="k">end</span></code></pre>\n     </figure>\n     <h2 id="comments">\n      Comments\n     </h2>\n     <div id="disqus_thread">\n     </div>\n    </div>\n   </div>\n  </div>\n  <script type="text/javascript">\n   var disqus_shortname = \'emberb\';\n\tvar disqus_identifier = \'/examples\';\n\n\t/* * * DON\'T EDIT BELOW THIS LINE * * */\n\t(function() {\n\t\tvar dsq = document.createElement(\'script\'); dsq.type = \'text/javascript\'; dsq.async = true;\n\t\tdsq.src = \'//\' + disqus_shortname + \'.disqus.com/embed.js\';\n\t\t(document.getElementsByTagName(\'head\')[0] || document.getElementsByTagName(\'body\')[0]).appendChild(dsq);\n\t})();\n  </script>\n  <noscript>\n   Please enable JavaScript to view the\n   <a href="http://disqus.com/?ref_noscript">\n    comments powered by Disqus.\n   </a>\n  </noscript>\n  <script>\n   $(document).ready(function() {\n\t// get all headers after the first one\n\tvar headers = $(\'#main :header\').slice(1);\n\n\tfunction hlvl(x) {\n\t\treturn x.tagName[1] * 1;\n\t}\n\n\tif (headers.length > 0) {\n\t\tvar index = 0;\n\n\t\t// build toc starting at header level\n\t\tfunction build_toc() {\n\t\t\tvar ol = $(\'<ol></ol>\');\n\n\t\t\tvar level = hlvl(headers[index]);\n\n\t\t\twhile(true) {\n\t\t\t\t// if we\'ve reached the end or the header is too high level we\'re done\n\t\t\t\tif (index >= headers.length || hlvl(headers[index]) < level)\n\t\t\t\t{\n\t\t\t\t\treturn ol;\n\t\t\t\t}\n\n\t\t\t\t// create li\n\t\t\t\tvar li = $(\'<li><a href="#\' + headers[index].id + \'">\' + $(headers[index]).text() + \'</a></li>\');\n\n\t\t\t\t++index;\n\n\t\t\t\t// if the next header is a level lower, recurse and add it to the li\n\t\t\t\tif (index < headers.length && hlvl(headers[index]) > level)\n\t\t\t\t\tli.append(build_toc());\n\n\t\t\t\t// add to the list\n\t\t\t\tol.append(li);\n\t\t\t}\n\t\t}\n\n\t\tvar toc = build_toc();\n\n\t\ttoc[0].id = "toc";\n\n\t\t$(\'#sidebar-wrapper\').append(toc);\n\t}\n});\n  </script>\n  <footer>\n   <div class="contact">\n    <p>\n     <a href="https://github.com/silverhammermba">\n      github.com/silverhammermba\n     </a>\n     <br/>\n    </p>\n   </div>\n   <a href="http://creativecommons.org/licenses/by/4.0/" rel="license">\n    <img alt="Creative Commons License" src="http://i.creativecommons.org/l/by/4.0/88x31.png" style="border-width:0"/>\n   </a>\n   <br/>\n   <span property="dct:title" xmlns:dct="http://purl.org/dc/terms/">\n    The Definitive Guide to Ruby\'s C API\n   </span>\n   by\n   <a href="http://silverhammermba.github.io/superuser/" property="cc:attributionName" rel="cc:attributionURL" xmlns:cc="http://creativecommons.org/ns#">\n    Maxwell Anselm\n   </a>\n   is licensed under a\n   <a href="http://creativecommons.org/licenses/by/4.0/" rel="license">\n    Creative Commons Attribution 4.0 International License\n   </a>\n   .\n  </footer>\n  <iframe style="display: none;">\n  </iframe>\n  <div class="adsbox">\n  </div>\n </body>\n</html>'