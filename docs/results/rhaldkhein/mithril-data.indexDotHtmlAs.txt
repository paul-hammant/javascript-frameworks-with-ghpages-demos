b'<html lang="en-US">\n <head>\n  <meta charset="utf-8"/>\n  <meta content="chrome=1" http-equiv="X-UA-Compatible"/>\n  <!-- Begin Jekyll SEO tag v2.4.0 -->\n  <title>\n   mithril-data | A rich data model library for Mithril javascript framework\n  </title>\n  <meta content="Jekyll v3.6.2" name="generator"/>\n  <meta content="mithril-data" property="og:title"/>\n  <meta content="en_US" property="og:locale"/>\n  <meta content="A rich data model library for Mithril javascript framework" name="description"/>\n  <meta content="A rich data model library for Mithril javascript framework" property="og:description"/>\n  <link href="http://rhaldkhein.github.io/mithril-data/" rel="canonical"/>\n  <meta content="http://rhaldkhein.github.io/mithril-data/" property="og:url"/>\n  <meta content="mithril-data" property="og:site_name"/>\n  <script type="application/ld+json">\n   {"name":"mithril-data","description":"A rich data model library for Mithril javascript framework","@type":"WebSite","url":"http://rhaldkhein.github.io/mithril-data/","headline":"mithril-data","@context":"http://schema.org"}\n  </script>\n  <!-- End Jekyll SEO tag -->\n  <link href="/mithril-data/assets/css/style.css?v=f7ad00c30bc0794c42e0521f6d8a5db81273c1cb" rel="stylesheet"/>\n  <meta content="width=device-width" name="viewport"/>\n  <!--[if lt IE 9]>\n    <script src="//html5shiv.googlecode.com/svn/trunk/html5.js"></script>\n    <![endif]-->\n </head>\n <body>\n  <div class="wrapper">\n   <header>\n    <h1>\n     mithril-data\n    </h1>\n    <p>\n     A rich data model library for Mithril javascript framework\n    </p>\n    <p class="view">\n     <a href="https://github.com/rhaldkhein/mithril-data">\n      View the Project on GitHub\n      <small>\n      </small>\n     </a>\n    </p>\n   </header>\n   <section>\n    <h1 id="mithril-data">\n     mithril-data\n    </h1>\n    <p>\n     A rich data model library for Mithril javascript framework.\n    </p>\n    <p>\n     <a href="https://travis-ci.org/rhaldkhein/mithril-data">\n      <img alt="Build Status" src="https://travis-ci.org/rhaldkhein/mithril-data.svg?branch=master"/>\n     </a>\n    </p>\n    <h4 id="features">\n     Features\n    </h4>\n    <ul>\n     <li>\n      Create brilliant application with\n      <strong>\n       Schema\n      </strong>\n      -based\n      <strong>\n       Model\n      </strong>\n      and\n      <strong>\n       Collection\n      </strong>\n     </li>\n     <li>\n      Enriched with\n      <strong>\n       Lodash\n      </strong>\n      methods, integrated into Model &amp; Collection\n     </li>\n     <li>\n      <strong>\n       Auto Redraw\n      </strong>\n      on Model &amp; Collection changes\n     </li>\n     <li>\n      <strong>\n       State\n      </strong>\n      (View-Model) using Mithril\xe2\x80\x99s stream\n     </li>\n     <li>\n      Extensible, Configurable and Customizable\n     </li>\n     <li>\n      And many more \xe2\x80\xa6\n     </li>\n    </ul>\n    <h4 id="dependencies">\n     Dependencies\n    </h4>\n    <ul>\n     <li>\n      <a href="http://mithril.js.org/">\n       Mithril\n      </a>\n      (&gt;= 1.0.0)\n     </li>\n     <li>\n      <a href="http://lodash.com/">\n       Lodash\n      </a>\n      (&gt;= 4.12.0) - Many Lodash methods are attached to Model and Collection\n     </li>\n    </ul>\n    <hr/>\n    <h2 id="schema">\n     Schema\n    </h2>\n    <div class="language-javascript highlighter-rouge">\n     <div class="highlight">\n      <pre class="highlight"><code><span class="kd">var</span> <span class="nx">userSchema</span> <span class="o">=</span> <span class="p">{</span>\n   <span class="na">name</span> <span class="p">:</span> <span class="s1">\'User\'</span><span class="p">,</span>\n   <span class="na">props</span> <span class="p">:</span> <span class="p">[</span><span class="s1">\'name\'</span><span class="p">,</span> <span class="s1">\'age\'</span><span class="p">]</span>\n<span class="p">}</span>\n\n<span class="kd">var</span> <span class="nx">noteSchema</span> <span class="o">=</span> <span class="p">{</span>\n   <span class="na">name</span> <span class="p">:</span> <span class="s1">\'Note\'</span><span class="p">,</span>\n   <span class="na">props</span> <span class="p">:</span> <span class="p">[</span><span class="s1">\'title\'</span><span class="p">,</span> <span class="s1">\'body\'</span><span class="p">,</span> <span class="s1">\'author\'</span><span class="p">],</span>\n   <span class="na">defaults</span> <span class="p">:</span> <span class="p">{</span>\n      <span class="na">title</span><span class="p">:</span> <span class="s1">\'Default Title\'</span><span class="p">,</span>\n      <span class="na">body</span><span class="p">:</span> <span class="s1">\'Default Body\'</span>\n   <span class="p">},</span>\n   <span class="na">refs</span> <span class="p">:</span> <span class="p">{</span>\n      <span class="na">author</span><span class="p">:</span> <span class="s1">\'User\'</span>\n   <span class="p">},</span>\n   <span class="na">url</span> <span class="p">:</span> <span class="s1">\'/customurl\'</span><span class="p">,</span>\n   <span class="na">redraw</span> <span class="p">:</span> <span class="kc">true</span>\n<span class="p">}</span>\n</code></pre>\n     </div>\n    </div>\n    <p>\n     All available schema options:\n    </p>\n    <ul>\n     <li>\n      <strong>\n       name\n      </strong>\n      - (string,\n      <strong>\n       required\n      </strong>\n      ) name of the model\n     </li>\n     <li>\n      <strong>\n       props\n      </strong>\n      - (string array,\n      <strong>\n       required\n      </strong>\n      ) list of model props\n     </li>\n     <li>\n      <strong>\n       defaults\n      </strong>\n      - (object {prop:value}) default value of props\n     </li>\n     <li>\n      <strong>\n       refs\n      </strong>\n      - (object {prop:model}) list of references to other models\n     </li>\n     <li>\n      <strong>\n       url\n      </strong>\n      - (string) the specific url of the model. defaults to model\xe2\x80\x99s\n      <code class="highlighter-rouge">\n       name\n      </code>\n     </li>\n     <li>\n      <strong>\n       redraw\n      </strong>\n      - (boolean) trigger a redraw when a model with this schema is updated. defaults to\n      <code class="highlighter-rouge">\n       false\n      </code>\n     </li>\n     <li>\n      <strong>\n       methods\n      </strong>\n      - (object {name:function}) add custom methods to model instances (by schema)\n     </li>\n     <li>\n      <strong>\n       parser\n      </strong>\n      - (function) add data parser to automatically parse data storing to model\n     </li>\n    </ul>\n    <p>\n     Additional option information:\n    </p>\n    <p>\n     <strong>\n      parser\n     </strong>\n     - An option to parse different data objects.\n    </p>\n    <div class="language-javascript highlighter-rouge">\n     <div class="highlight">\n      <pre class="highlight"><code><span class="c1">// Parsers for Notes schema</span>\n<span class="nx">parser</span> <span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>\n  <span class="k">if</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">kind</span> <span class="o">===</span> <span class="s1">\'3rd#party\'</span><span class="p">)</span> <span class="p">{</span>\n    <span class="k">return</span> <span class="p">{</span>\n      <span class="na">title</span> <span class="p">:</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">wrap</span><span class="p">.</span><span class="nx">title</span><span class="p">,</span>\n      <span class="na">body</span> <span class="p">:</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">wrap</span><span class="p">.</span><span class="nx">inner</span><span class="p">.</span><span class="nx">body</span><span class="p">,</span>\n      <span class="na">author</span> <span class="p">:</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">wrap</span><span class="p">.</span><span class="nx">inner</span><span class="p">.</span><span class="nx">author</span>\n    <span class="p">}</span>\n  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>\n    <span class="c1">// Another source</span>\n  <span class="p">}</span>\n<span class="p">}</span>\n<span class="c1">// This auto parse wrapped data. Also parsed with `setObject()`.</span>\n<span class="kd">var</span> <span class="nx">note</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Note</span><span class="p">({</span><span class="na">wrapped</span><span class="p">:</span> <span class="s1">\'data\'</span><span class="p">})</span>\n<span class="nx">note</span><span class="p">.</span><span class="nx">setObject</span><span class="p">({</span><span class="na">wrapped</span><span class="p">:</span> <span class="s1">\'data\'</span><span class="p">})</span>\n<span class="c1">// To disable parsing. Set `parse: false` in the options.</span>\n<span class="kd">var</span> <span class="nx">note</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Note</span><span class="p">({</span><span class="na">unwrapped</span><span class="p">:</span> <span class="s1">\'data\'</span><span class="p">},</span> <span class="p">{</span><span class="na">parse</span><span class="p">:</span> <span class="kc">false</span><span class="p">})</span>\n</code></pre>\n     </div>\n    </div>\n    <hr/>\n    <h2 id="model">\n     Model\n    </h2>\n    <div class="language-javascript highlighter-rouge">\n     <div class="highlight">\n      <pre class="highlight"><code><span class="kd">var</span> <span class="nx">User</span> <span class="o">=</span> <span class="nx">md</span><span class="p">.</span><span class="nx">model</span><span class="p">(</span><span class="nx">userSchema</span><span class="p">)</span>\n<span class="kd">var</span> <span class="nx">Note</span> <span class="o">=</span> <span class="nx">md</span><span class="p">.</span><span class="nx">model</span><span class="p">(</span><span class="nx">noteSchema</span><span class="p">)</span>\n\n<span class="kd">var</span> <span class="nx">userA</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">User</span><span class="p">()</span>\n<span class="nx">userA</span><span class="p">.</span><span class="nx">name</span><span class="p">(</span><span class="s1">\'Foo\'</span><span class="p">)</span>\n<span class="nx">userA</span><span class="p">.</span><span class="nx">age</span><span class="p">(</span><span class="mi">123</span><span class="p">)</span>\n<span class="nx">userA</span><span class="p">.</span><span class="nx">save</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>\n   <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">err</span><span class="p">)</span>\n     <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">\'Saved\'</span><span class="p">)</span>\n<span class="p">})</span>\n\n<span class="kd">var</span> <span class="nx">noteA</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Note</span><span class="p">({</span>\n   <span class="na">title</span><span class="p">:</span> <span class="s1">\'My Notes\'</span>\n<span class="p">},</span> <span class="p">{</span>\n   <span class="na">redraw</span> <span class="p">:</span> <span class="kc">true</span>\n<span class="p">})</span>\n<span class="nx">noteA</span><span class="p">.</span><span class="nx">body</span><span class="p">(</span><span class="s1">\'A note content\'</span><span class="p">)</span>\n<span class="nx">noteA</span><span class="p">.</span><span class="nx">author</span><span class="p">(</span><span class="nx">userA</span><span class="p">)</span>\n<span class="nx">noteA</span><span class="p">.</span><span class="nx">save</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="nx">fnResolve</span><span class="p">,</span> <span class="nx">fnReject</span><span class="p">)</span>\n</code></pre>\n     </div>\n    </div>\n    <h4 id="new-modelconstructorinitials-options">\n     new &lt;ModelConstructor&gt;([initials, options])\n    </h4>\n    <p>\n     Creates an instance of model.\n    </p>\n    <ul>\n     <li>\n      <strong>\n       initials\n      </strong>\n      - (object {prop:value}) initial values of props\n     </li>\n     <li>\n      <strong>\n       options\n      </strong>\n      - (object) specific options to model instance\n      <ul>\n       <li>\n        <strong>\n         redraw\n        </strong>\n        - (boolean) redraw\n       </li>\n       <li>\n        <strong>\n         parse\n        </strong>\n        - (boolean) set\n        <code class="highlighter-rouge">\n         false\n        </code>\n        to disable parsing. defaults to\n        <code class="highlighter-rouge">\n         true\n        </code>\n       </li>\n      </ul>\n     </li>\n    </ul>\n    <h4 id="propvalue-silent">\n     #&lt;prop&gt;([value, silent])\n    </h4>\n    <p>\n     Get or set value of prop. If auto-redraw is enabled, pass\n     <code class="highlighter-rouge">\n      true\n     </code>\n     at the end to set without auto redrawing. This uses the basic usage of stream, and to get the stream itself, use\n     <code class="highlighter-rouge">\n      &lt;prop&gt;.stream\n     </code>\n     .\n    </p>\n    <div class="language-javascript highlighter-rouge">\n     <div class="highlight">\n      <pre class="highlight"><code><span class="nx">user</span><span class="p">.</span><span class="nx">name</span><span class="p">(</span><span class="s1">\'Foo\'</span><span class="p">)</span> <span class="c1">// Sets the name to `Foo`</span>\n<span class="kd">var</span> <span class="nx">n</span> <span class="o">=</span> <span class="nx">user</span><span class="p">.</span><span class="nx">name</span><span class="p">()</span> <span class="c1">// Get the name... returns `Foo`</span>\n<span class="nx">user</span><span class="p">.</span><span class="nx">name</span><span class="p">(</span><span class="s1">\'Bar\'</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span> <span class="c1">// Silently sets the name to `Bar` (without redrawing)</span>\n<span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="nx">user</span><span class="p">.</span><span class="nx">name</span><span class="p">.</span><span class="nx">stream</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="c1">// Get the stream object with `&lt;prop&gt;.stream`</span>\n</code></pre>\n     </div>\n    </div>\n    <h4 id="optkey-value">\n     #opt(key[, value])\n    </h4>\n    <p>\n     Sets an option(s) specific to the model. See\n     <code class="highlighter-rouge">\n      ModelConstructor\n     </code>\n     for list of options.\n    </p>\n    <h4 id="idstrid">\n     #id([strId])\n    </h4>\n    <p>\n     Get or set the ID of model regardless of real ID prop. This is useful if you have different id prop like\n     <code class="highlighter-rouge">\n      _id\n     </code>\n     (mongodb).\n    </p>\n    <div class="language-javascript highlighter-rouge">\n     <div class="highlight">\n      <pre class="highlight"><code><span class="c1">// Assumes that you configure `keyId` to `_id`</span>\n<span class="nx">user</span><span class="p">.</span><span class="nx">_id</span><span class="p">(</span><span class="s1">\'Bar\'</span><span class="p">)</span> <span class="c1">// Sets the id to `Bar`</span>\n<span class="kd">var</span> <span class="nx">id</span> <span class="o">=</span> <span class="nx">user</span><span class="p">.</span><span class="nx">id</span><span class="p">()</span> <span class="c1">// Returns `Bar`</span>\n<span class="c1">// user.id(\'Bar\') // You can also use this</span>\n</code></pre>\n     </div>\n    </div>\n    <h4 id="lid">\n     #lid()\n    </h4>\n    <p>\n     Get the local ID of model. This ID is generated automatically when model is created.\n    </p>\n    <h4 id="url">\n     #url()\n    </h4>\n    <p>\n     Get the url. It return the combination of\n     <code class="highlighter-rouge">\n      baseUrl\n     </code>\n     and the models\xe2\x80\x99\n     <code class="highlighter-rouge">\n      url\n     </code>\n     .\n    </p>\n    <h4 id="setkey-value-silent">\n     #set(key[, value, silent])\n    </h4>\n    <p>\n     Set a value to a prop of the model.\n    </p>\n    <div class="language-javascript highlighter-rouge">\n     <div class="highlight">\n      <pre class="highlight"><code><span class="nx">user</span><span class="p">.</span><span class="kd">set</span><span class="p">(</span><span class="s1">\'name\'</span><span class="p">,</span> <span class="s1">\'Foo\'</span><span class="p">)</span> <span class="c1">// Sets single prop</span>\n<span class="c1">// Silent set, will NOT trigger the auto redraw</span>\n<span class="nx">user</span><span class="p">.</span><span class="kd">set</span><span class="p">(</span><span class="s1">\'age\'</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span> <span class="c1">// Pass true at the end</span>\n</code></pre>\n     </div>\n    </div>\n    <h4 id="setobjectobj-silent">\n     #setObject(obj[, silent])\n    </h4>\n    <p>\n     Set multiple values at once using object.\n    </p>\n    <div class="language-javascript highlighter-rouge">\n     <div class="highlight">\n      <pre class="highlight"><code><span class="nx">user</span><span class="p">.</span><span class="kd">set</span><span class="p">({</span><span class="na">name</span><span class="p">:</span> <span class="s1">\'Bar\'</span><span class="p">,</span> <span class="na">age</span><span class="p">:</span> <span class="mi">12</span><span class="p">})</span> <span class="c1">// Sets multiple props using object</span>\n<span class="nx">user</span><span class="p">.</span><span class="kd">set</span><span class="p">(</span><span class="nx">existingModelInstance</span><span class="p">)</span> <span class="c1">// Sets multiple props user existing model instance</span>\n<span class="c1">// Silent set, will NOT trigger the auto redraw</span>\n<span class="nx">user</span><span class="p">.</span><span class="kd">set</span><span class="p">({</span><span class="na">age</span><span class="p">:</span> <span class="mi">32</span><span class="p">},</span> <span class="kc">true</span><span class="p">)</span> <span class="c1">// Pass true at the end</span>\n</code></pre>\n     </div>\n    </div>\n    <h4 id="getkey">\n     #get(key)\n    </h4>\n    <p>\n     Get a value or a copy of all values in object literal format.\n    </p>\n    <div class="language-javascript highlighter-rouge">\n     <div class="highlight">\n      <pre class="highlight"><code><span class="nx">user</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="s1">\'name\'</span><span class="p">)</span> <span class="c1">// Returns the value of name</span>\n<span class="nx">user</span><span class="p">.</span><span class="kd">get</span><span class="p">()</span> <span class="c1">// Returns an object (copy) with all props and values. e.g. {name: "Foo", age: 12}</span>\n</code></pre>\n     </div>\n    </div>\n    <h4 id="getcopydeep">\n     #getCopy([deep])\n    </h4>\n    <p>\n     Get a copy model in object literal format. Additionally, you can set deep to\n     <code class="highlighter-rouge">\n      true\n     </code>\n     to copy all props recursively.\n    </p>\n    <h4 id="attachcollectioncollection">\n     #attachCollection(collection)\n    </h4>\n    <p>\n     Attach the model to a collection.\n    </p>\n    <h4 id="detachcollectioncollection">\n     #detachCollection(collection)\n    </h4>\n    <p>\n     Detach the model from a collection.\n    </p>\n    <h4 id="detach">\n     #detach()\n    </h4>\n    <p>\n     Detach the model from ALL associated collections.\n    </p>\n    <h4 id="remove">\n     #remove()\n    </h4>\n    <p>\n     Triggers\n     <code class="highlighter-rouge">\n      detach\n     </code>\n     and also\n     <code class="highlighter-rouge">\n      dispose\n     </code>\n     the object. Make sure you\xe2\x80\x99re not using the model anymore.\n    </p>\n    <h4 id="issaved">\n     #isSaved()\n    </h4>\n    <p>\n     True if it contains id and fresh from store (server or local storage).\n    </p>\n    <h4 id="ismodified">\n     #isModified()\n    </h4>\n    <p>\n     True when a prop is modified.\n    </p>\n    <h4 id="isdirty">\n     #isDirty()\n    </h4>\n    <p>\n     True if the model is modified or not saved.\n    </p>\n    <h4 id="saveoptions-callback">\n     #save([options, callback])\n    </h4>\n    <p>\n     Saves the model to data store. To check for result, you can use either\n     <code class="highlighter-rouge">\n      callback\n     </code>\n     or\n     <code class="highlighter-rouge">\n      then\n     </code>\n     . Callback arguments are\n     <code class="highlighter-rouge">\n      (err, response, model)\n     </code>\n     . Properties for\n     <code class="highlighter-rouge">\n      options\n     </code>\n     is the same with\n     <code class="highlighter-rouge">\n      m.request\n     </code>\n     \xe2\x80\x99s options but with additional\n     <code class="highlighter-rouge">\n      path\n     </code>\n     string property.\n     <code class="highlighter-rouge">\n      path\n     </code>\n     is the path to actual value for the model in the response object. Like in\n     <code class="highlighter-rouge">\n      response:{outer:{model:{}}}\n     </code>\n     will be\n     <code class="highlighter-rouge">\n      "outer.model"\n     </code>\n     .\n    </p>\n    <div class="language-javascript highlighter-rouge">\n     <div class="highlight">\n      <pre class="highlight"><code><span class="nx">user</span><span class="p">.</span><span class="nx">save</span><span class="p">()</span>\n   <span class="p">.</span><span class="nx">then</span><span class="p">(</span>\n      <span class="kd">function</span> <span class="p">(</span><span class="nx">model</span><span class="p">)</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">\'Saved\'</span><span class="p">)</span> <span class="p">},</span>\n      <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">}</span>\n   <span class="p">)</span>\n   <span class="p">.</span><span class="k">catch</span><span class="p">(</span>\n      <span class="kd">function</span><span class="p">(</span><span class="nx">catchErr</span><span class="p">)</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">catchErr</span><span class="p">)</span> <span class="p">}</span>\n   <span class="p">)</span>\n</code></pre>\n     </div>\n    </div>\n    <h4 id="fetchoptions-callback">\n     #fetch([options, callback])\n    </h4>\n    <p>\n     Fetches the model from data store. Model ID required to fetch. This method also accept\n     <code class="highlighter-rouge">\n      callback\n     </code>\n     or\n     <code class="highlighter-rouge">\n      then\n     </code>\n     . Properties for\n     <code class="highlighter-rouge">\n      options\n     </code>\n     is the same with\n     <code class="highlighter-rouge">\n      #save()\n     </code>\n     \xe2\x80\x99s options. If\n     <code class="highlighter-rouge">\n      placeholder\n     </code>\n     is given in the configuration, the returned value will be that placeholder string.\n    </p>\n    <div class="language-javascript highlighter-rouge">\n     <div class="highlight">\n      <pre class="highlight"><code><span class="nx">user</span><span class="p">.</span><span class="nx">id</span><span class="p">(</span><span class="s1">\'abc123\'</span><span class="p">)</span>\n<span class="nx">user</span><span class="p">.</span><span class="nx">fetch</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">model</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/* Success! model now have other prop values */</span> <span class="p">}</span> <span class="p">);</span>\n<span class="c1">// If placeholder is set as \'Loading...\'</span>\n<span class="nx">user</span><span class="p">.</span><span class="nx">name</span><span class="p">();</span> <span class="c1">// Returns `Loading...`, until the fetch completed</span>\n</code></pre>\n     </div>\n    </div>\n    <h4 id="destroyoptions-callback">\n     #destroy([options, callback])\n    </h4>\n    <p>\n     Destroys the model from data store and triggers\n     <code class="highlighter-rouge">\n      remove\n     </code>\n     method. Also accept\n     <code class="highlighter-rouge">\n      callback\n     </code>\n     or\n     <code class="highlighter-rouge">\n      then\n     </code>\n     . Parameter\n     <code class="highlighter-rouge">\n      options\n     </code>\n     is the same with\n     <code class="highlighter-rouge">\n      #save()\n     </code>\n     \xe2\x80\x99s options.\n    </p>\n    <h4 id="populate">\n     #populate()\n    </h4>\n    <p>\n     Populates all references. This will trigger fetch if necessary.\n    </p>\n    <h4 id="lodash-methods">\n     #&lt;lodash methods&gt;()\n    </h4>\n    <p>\n     Model includes few methods of Lodash.\n     <code class="highlighter-rouge">\n      has\n     </code>\n     ,\n     <code class="highlighter-rouge">\n      keys\n     </code>\n     ,\n     <code class="highlighter-rouge">\n      values\n     </code>\n     ,\n     <code class="highlighter-rouge">\n      pick\n     </code>\n     , and\n     <code class="highlighter-rouge">\n      omit\n     </code>\n     . See\n     <strong>\n      Lodash\n     </strong>\n     for info.\n    </p>\n    <div class="language-javascript highlighter-rouge">\n     <div class="highlight">\n      <pre class="highlight"><code><span class="nx">userA</span><span class="p">.</span><span class="nx">pick</span><span class="p">([</span><span class="s1">\'name\'</span><span class="p">,</span> <span class="s1">\'age\'</span><span class="p">])</span>\n<span class="c1">// Returns an object with only two properties `name` and `age`, excluding others.</span>\n</code></pre>\n     </div>\n    </div>\n    <hr/>\n    <h2 id="collection">\n     Collection\n    </h2>\n    <div class="language-javascript highlighter-rouge">\n     <div class="highlight">\n      <pre class="highlight"><code><span class="kd">var</span> <span class="nx">userCollection</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">md</span><span class="p">.</span><span class="nx">Collection</span><span class="p">({</span>\n   <span class="na">model</span> <span class="p">:</span> <span class="nx">User</span><span class="p">,</span>\n   <span class="na">url</span> <span class="p">:</span> <span class="s1">\'/usercollectionurl\'</span><span class="p">,</span>\n   <span class="na">redraw</span> <span class="p">:</span> <span class="kc">true</span>\n<span class="p">})</span>\n<span class="nx">userCollection</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="k">new</span> <span class="nx">User</span><span class="p">())</span>\n</code></pre>\n     </div>\n    </div>\n    <h4 id="new-collectionoptions">\n     new Collection([options])\n    </h4>\n    <p>\n     All available collection options:\n    </p>\n    <ul>\n     <li>\n      <strong>\n       model\n      </strong>\n      - (model constructor) the associated model to the collection\n     </li>\n     <li>\n      <strong>\n       url\n      </strong>\n      - (string) the specific url of the collection. defaults to associated model\xe2\x80\x99s\n      <code class="highlighter-rouge">\n       name\n      </code>\n     </li>\n     <li>\n      <strong>\n       redraw\n      </strong>\n      - (boolean) trigger a redraw when the collection is updated. Defaults to\n      <code class="highlighter-rouge">\n       false\n      </code>\n     </li>\n     <li>\n      <table>\n       <tbody>\n        <tr>\n         <td>\n          <strong>\n           state\n          </strong>\n          - (State\n         </td>\n         <td>\n          object\n         </td>\n         <td>\n          array) set a state factory (View-Model) for the collection. See\n          <code class="highlighter-rouge">\n           #stateOf()\n          </code>\n          method and\n          <code class="highlighter-rouge">\n           md.State()\n          </code>\n          for more info.\n         </td>\n        </tr>\n       </tbody>\n      </table>\n     </li>\n    </ul>\n    <blockquote>\n     <p>\n      A collection with redraw =\n      <code class="highlighter-rouge">\n       true\n      </code>\n      will always trigger a\n      <code class="highlighter-rouge">\n       redraw\n      </code>\n      even though the contained model has redraw =\n      <code class="highlighter-rouge">\n       false\n      </code>\n      .\n     </p>\n    </blockquote>\n    <blockquote>\n     <p>\n      Omitted\n      <code class="highlighter-rouge">\n       model\n      </code>\n      in option is allowed and will make the collection\n      <code class="highlighter-rouge">\n       generic\n      </code>\n      . Therefore, some methods will NOT be available, like\n      <code class="highlighter-rouge">\n       create\n      </code>\n      and\n      <code class="highlighter-rouge">\n       fetch\n      </code>\n      .\n     </p>\n    </blockquote>\n    <h4 id="optkey-value-1">\n     #opt(key[, value])\n    </h4>\n    <p>\n     Sets an option(s) to the collection. See\n     <code class="highlighter-rouge">\n      Collection\n     </code>\n     for list of options.\n    </p>\n    <h4 id="addmodel-unshift-silent">\n     #add(model[, unshift, silent])\n    </h4>\n    <p>\n     Adds a model to the collection. Optionally, you can add at the beginning with\n     <code class="highlighter-rouge">\n      unshift\n     </code>\n     =\n     <code class="highlighter-rouge">\n      true\n     </code>\n     and silently with\n     <code class="highlighter-rouge">\n      silent\n     </code>\n     =\n     <code class="highlighter-rouge">\n      true\n     </code>\n     .\n    </p>\n    <h4 id="addallmodels-unshift-silent">\n     #addAll(models[, unshift, silent])\n    </h4>\n    <p>\n     Adds an array of models to the collection. Optionally, you can set\n     <code class="highlighter-rouge">\n      unshift\n     </code>\n     and\n     <code class="highlighter-rouge">\n      silent\n     </code>\n     as well.\n    </p>\n    <h4 id="createobjects">\n     #create(objects)\n    </h4>\n    <p>\n     Create and add multiple models to the collection from passed array of objects.\n    </p>\n    <div class="language-javascript highlighter-rouge">\n     <div class="highlight">\n      <pre class="highlight"><code><span class="nx">userCollection</span><span class="p">.</span><span class="nx">create</span><span class="p">([</span> <span class="p">{</span><span class="na">name</span><span class="p">:</span><span class="s1">\'Foo\'</span><span class="p">},</span> <span class="p">{</span><span class="na">name</span><span class="p">:</span><span class="s1">\'Bar\'</span><span class="p">}</span> <span class="p">])</span>\n</code></pre>\n     </div>\n    </div>\n    <h4 id="getmixed">\n     #get(mixed)\n    </h4>\n    <p>\n     Get a model from collection. Argument\n     <code class="highlighter-rouge">\n      mixed\n     </code>\n     can be a\n     <code class="highlighter-rouge">\n      number\n     </code>\n     ,\n     <code class="highlighter-rouge">\n      string\n     </code>\n     ,\n     <code class="highlighter-rouge">\n      object\n     </code>\n     or\n     <code class="highlighter-rouge">\n      model\n     </code>\n     instance. Returns the first matched only otherwise\n     <code class="highlighter-rouge">\n      undefined\n     </code>\n     .\n    </p>\n    <div class="language-javascript highlighter-rouge">\n     <div class="highlight">\n      <pre class="highlight"><code><span class="nx">userCollection</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="s1">\'abc\'</span><span class="p">)</span> \n<span class="nx">userCollection</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="mi">123</span><span class="p">)</span> <span class="c1">// If string or number, it will find by Id</span>\n<span class="nx">userCollection</span><span class="p">.</span><span class="kd">get</span><span class="p">({</span><span class="na">name</span><span class="p">:</span><span class="s1">\'Foo\'</span><span class="p">})</span> <span class="c1">// Will match the first model with name equal to `Foo`</span>\n<span class="nx">userCollection</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="nx">model</span><span class="p">)</span> <span class="c1">// Will find by model instance, compared with Lodash\'s `indexOf`</span>\n</code></pre>\n     </div>\n    </div>\n    <h4 id="getallmixedarr-falsy">\n     #getAll(mixedArr[, falsy])\n    </h4>\n    <p>\n     Get multiple models from collection. Array can contain\n     <code class="highlighter-rouge">\n      mixed\n     </code>\n     type, same with\n     <code class="highlighter-rouge">\n      get()\n     </code>\n     . Returns an array of first matched only of each array element. Argument\n     <code class="highlighter-rouge">\n      falsy\n     </code>\n     will include falsy value like\n     <code class="highlighter-rouge">\n      undifened\n     </code>\n     in the list, instead of omitting.\n    </p>\n    <h4 id="removemixed-silent">\n     #remove(mixed[, silent])\n    </h4>\n    <p>\n     Removes a model from collection.\n     <code class="highlighter-rouge">\n      mixed\n     </code>\n     can be same with\n     <code class="highlighter-rouge">\n      get()\n     </code>\n     \xe2\x80\x99s mixed argument.\n    </p>\n    <h4 id="pushmodel-silent">\n     #push(model[, silent])\n    </h4>\n    <p>\n     Adds a model or array of models at the end.\n    </p>\n    <h4 id="unshiftmodel-silent">\n     #unshift(model[, silent])\n    </h4>\n    <p>\n     Adds a model or array of models at the beginning.\n    </p>\n    <h4 id="shiftsilent">\n     #shift([silent])\n    </h4>\n    <p>\n     Removes the model at the beginning.\n    </p>\n    <h4 id="popsilent">\n     #pop([silent])\n    </h4>\n    <p>\n     Removes the model at the end.\n    </p>\n    <h4 id="clearsilent">\n     #clear([silent])\n    </h4>\n    <p>\n     Removes ALL models.\n    </p>\n    <h4 id="sortprops-orders">\n     #sort(props[, orders])\n    </h4>\n    <p>\n     Sort the collection. Argument\n     <code class="highlighter-rouge">\n      props\n     </code>\n     is an array of props to sort and\n     <code class="highlighter-rouge">\n      orders\n     </code>\n     is an array of\n     <code class="highlighter-rouge">\n      asc\n     </code>\n     or\n     <code class="highlighter-rouge">\n      desc\n     </code>\n     . Optioanally, if you\xe2\x80\x99re sorting only single prop, you can pass a string instread of array.\n    </p>\n    <div class="language-javascript highlighter-rouge">\n     <div class="highlight">\n      <pre class="highlight"><code><span class="c1">// Sort the collection by `name` in default order `asc`</span>\n<span class="nx">userCollection</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="s1">\'name\'</span><span class="p">)</span>\n<span class="c1">// Sort the collection by `name` in `desc` order</span>\n<span class="nx">userCollection</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="s1">\'name\'</span><span class="p">,</span> <span class="s1">\'desc\'</span><span class="p">)</span>\n<span class="c1">// Sort the collection by `age` first starting from old (desc) and then `name`</span>\n<span class="nx">userCollection</span><span class="p">.</span><span class="nx">sort</span><span class="p">([</span><span class="s1">\'age\'</span><span class="p">,</span> <span class="s1">\'name\'</span><span class="p">],</span> <span class="p">[</span><span class="s1">\'desc\'</span><span class="p">,</span> <span class="s1">\'asc\'</span><span class="p">])</span>\n</code></pre>\n     </div>\n    </div>\n    <h4 id="sortbyorderorder--path-">\n     #sortByOrder(order\n     <array>\n      , path\n      <string>\n       )\n      </string>\n     </array>\n    </h4>\n    <p>\n     Sort the collection by giver order.\n    </p>\n    <h4 id="pluck">\n     #pluck()\n    </h4>\n    <p>\n     Pluck a prop from each model.\n    </p>\n    <div class="language-javascript highlighter-rouge">\n     <div class="highlight">\n      <pre class="highlight"><code><span class="nx">userCollection</span><span class="p">.</span><span class="nx">pluck</span><span class="p">(</span><span class="s1">\'id\'</span><span class="p">)</span> \n<span class="c1">// Returns [123, 456, 789]</span>\n</code></pre>\n     </div>\n    </div>\n    <h4 id="containsmixed">\n     #contains(mixed)\n    </h4>\n    <p>\n     Returns\n     <code class="highlighter-rouge">\n      true\n     </code>\n     if the model contains in the collection, otherwise\n     <code class="highlighter-rouge">\n      false\n     </code>\n     . Argument\n     <code class="highlighter-rouge">\n      mixed\n     </code>\n     is the same with\n     <code class="highlighter-rouge">\n      get()\n     </code>\n     method.\n    </p>\n    <h4 id="reserve">\n     #reserve()\n    </h4>\n    <p>\n     Reverse the order of the collection.\n    </p>\n    <h4 id="randomize">\n     #randomize()\n    </h4>\n    <p>\n     Randomize the order of the collection.\n    </p>\n    <h4 id="model-1">\n     #model()\n    </h4>\n    <p>\n     Get the associated model constructor.\n    </p>\n    <h4 id="stateofmixed">\n     #stateOf(mixed)\n    </h4>\n    <p>\n     Get the state of a model in the collection. Argument\n     <code class="highlighter-rouge">\n      mixed\n     </code>\n     is the same with\n     <code class="highlighter-rouge">\n      get()\n     </code>\n     method.\n    </p>\n    <div class="language-javascript highlighter-rouge">\n     <div class="highlight">\n      <pre class="highlight"><code><span class="c1">// Set state signature on creating collection</span>\n<span class="kd">var</span> <span class="nx">col</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">md</span><span class="p">.</span><span class="nx">Collection</span><span class="p">({</span>\n   <span class="na">state</span> <span class="p">:</span> <span class="p">{</span>\n      <span class="na">isEditing</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>\n      <span class="na">isLoading</span><span class="p">:</span> <span class="kc">false</span>  \n   <span class="p">}</span>\n<span class="p">})</span>\n<span class="c1">// Create user</span>\n<span class="kd">var</span> <span class="nx">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">User</span><span class="p">()</span>\n<span class="c1">// Add user to collection</span>\n<span class="nx">col</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">user</span><span class="p">);</span>\n<span class="c1">// Retrieving state value</span>\n<span class="nx">col</span><span class="p">.</span><span class="nx">stateOf</span><span class="p">(</span><span class="nx">user</span><span class="p">).</span><span class="nx">isEditing</span><span class="p">()</span> <span class="c1">// Returns `true`</span>\n<span class="c1">// Setting state</span>\n<span class="nx">col</span><span class="p">.</span><span class="nx">stateOf</span><span class="p">(</span><span class="nx">user</span><span class="p">).</span><span class="nx">isEditing</span><span class="p">(</span><span class="kc">false</span><span class="p">)</span> <span class="c1">// Sets and returns `false`</span>\n</code></pre>\n     </div>\n    </div>\n    <h4 id="url-1">\n     #url()\n    </h4>\n    <p>\n     Get the url.\n    </p>\n    <h4 id="fetchquery-options-callback">\n     #fetch(query[, options, callback])\n    </h4>\n    <p>\n     Query to data store and populate the collection. Callback arguments are\n     <code class="highlighter-rouge">\n      (err, response, models)\n     </code>\n     . Properties for\n     <code class="highlighter-rouge">\n      options\n     </code>\n     is the same with\n     <code class="highlighter-rouge">\n      m.request\n     </code>\n     \xe2\x80\x99s options but with additional\n     <code class="highlighter-rouge">\n      path\n     </code>\n     and\n     <code class="highlighter-rouge">\n      clear\n     </code>\n     property.\n     <code class="highlighter-rouge">\n      path\n     </code>\n     is the path to actual array of items for the collection in the response object. Like in\n     <code class="highlighter-rouge">\n      response:{outer:{items:[]}}\n     </code>\n     will be\n     <code class="highlighter-rouge">\n      "outer.items"\n     </code>\n     . And\n     <code class="highlighter-rouge">\n      clear\n     </code>\n     will clear the collection before placing the fetched data.\n    </p>\n    <div class="language-javascript highlighter-rouge">\n     <div class="highlight">\n      <pre class="highlight"><code><span class="nx">userCollection</span><span class="p">.</span><span class="nx">fetch</span><span class="p">({</span> <span class="na">age</span> <span class="p">:</span> <span class="mi">30</span> <span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(){</span>\n   <span class="c1">// Success! `userCollection` now have models with age 30</span>\n<span class="p">})</span>\n</code></pre>\n     </div>\n    </div>\n    <h4 id="hasmodel">\n     #hasModel()\n    </h4>\n    <p>\n     Returns\n     <code class="highlighter-rouge">\n      true\n     </code>\n     if the collection has associated model, otherwise\n     <code class="highlighter-rouge">\n      false\n     </code>\n     .\n    </p>\n    <h4 id="destroy">\n     #destroy()\n    </h4>\n    <p>\n     Destroys the collection. Trigger\n     <code class="highlighter-rouge">\n      clear\n     </code>\n     and\n     <code class="highlighter-rouge">\n      dispose\n     </code>\n     .\n    </p>\n    <h4 id="isfetching">\n     #isFetching()\n    </h4>\n    <p>\n     Checks if the collection is fetching.\n    </p>\n    <h4 id="lodash-methods-1">\n     #&lt;lodash methods&gt;()\n    </h4>\n    <p>\n     Collection includes several methods of Lodash.\n     <code class="highlighter-rouge">\n      forEach\n     </code>\n     ,\n     <code class="highlighter-rouge">\n      map\n     </code>\n     ,\n     <code class="highlighter-rouge">\n      find\n     </code>\n     ,\n     <code class="highlighter-rouge">\n      findIndex\n     </code>\n     ,\n     <code class="highlighter-rouge">\n      findLastIndex\n     </code>\n     ,\n     <code class="highlighter-rouge">\n      filter\n     </code>\n     ,\n     <code class="highlighter-rouge">\n      reject\n     </code>\n     ,\n     <code class="highlighter-rouge">\n      every\n     </code>\n     ,\n     <code class="highlighter-rouge">\n      some\n     </code>\n     ,\n     <code class="highlighter-rouge">\n      invoke\n     </code>\n     ,\n     <code class="highlighter-rouge">\n      maxBy\n     </code>\n     ,\n     <code class="highlighter-rouge">\n      minBy\n     </code>\n     ,\n     <code class="highlighter-rouge">\n      sortBy\n     </code>\n     ,\n     <code class="highlighter-rouge">\n      groupBy\n     </code>\n     ,\n     <code class="highlighter-rouge">\n      shuffle\n     </code>\n     ,\n     <code class="highlighter-rouge">\n      size\n     </code>\n     ,\n     <code class="highlighter-rouge">\n      initial\n     </code>\n     ,\n     <code class="highlighter-rouge">\n      without\n     </code>\n     ,\n     <code class="highlighter-rouge">\n      indexOf\n     </code>\n     ,\n     <code class="highlighter-rouge">\n      lastIndexOf\n     </code>\n     ,\n     <code class="highlighter-rouge">\n      difference\n     </code>\n     ,\n     <code class="highlighter-rouge">\n      sample\n     </code>\n     ,\n     <code class="highlighter-rouge">\n      reverse\n     </code>\n     ,\n     <code class="highlighter-rouge">\n      nth\n     </code>\n     ,\n     <code class="highlighter-rouge">\n      first\n     </code>\n     ,\n     <code class="highlighter-rouge">\n      last\n     </code>\n     ,\n     <code class="highlighter-rouge">\n      toArray\n     </code>\n     ,\n     <code class="highlighter-rouge">\n      slice\n     </code>\n     ,\n     <code class="highlighter-rouge">\n      orderBy\n     </code>\n     ,\n     <code class="highlighter-rouge">\n      transform\n     </code>\n     . See\n     <strong>\n      Lodash\n     </strong>\n     for info.\n    </p>\n    <div class="language-javascript highlighter-rouge">\n     <div class="highlight">\n      <pre class="highlight"><code><span class="kd">var</span> <span class="nx">filtered</span> <span class="o">=</span> <span class="nx">userCollection</span><span class="p">.</span><span class="nx">filter</span><span class="p">({</span><span class="na">age</span><span class="p">:</span> <span class="mi">30</span><span class="p">})</span>\n<span class="c1">// Returns an array of models with age of 30.</span>\n</code></pre>\n     </div>\n    </div>\n    <hr/>\n    <h2 id="state">\n     State\n    </h2>\n    <p>\n     Also known as View-Model. See Mithril\xe2\x80\x99s view-model description for more info.\n    </p>\n    <div class="language-javascript highlighter-rouge">\n     <div class="highlight">\n      <pre class="highlight"><code><span class="kd">var</span> <span class="nx">_isEditing</span> <span class="o">=</span> <span class="nx">md</span><span class="p">.</span><span class="nx">stream</span><span class="p">(</span><span class="kc">false</span><span class="p">)</span>\n<span class="c1">// Create state factory</span>\n<span class="kd">var</span> <span class="nx">stateFactory</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">md</span><span class="p">.</span><span class="nx">State</span><span class="p">({</span>\n   <span class="na">isLoading</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>\n   <span class="na">isEditing</span><span class="p">:</span> <span class="nx">_isEditing</span> <span class="c1">// Add exisiting stream created somewhere</span>\n<span class="p">})</span>\n<span class="c1">// Creating states </span>\n<span class="nx">stateFactory</span><span class="p">.</span><span class="kd">set</span><span class="p">(</span><span class="s1">\'A\'</span><span class="p">);</span>\n<span class="nx">stateFactory</span><span class="p">.</span><span class="kd">set</span><span class="p">(</span><span class="s1">\'B\'</span><span class="p">);</span>\n<span class="c1">// Using states</span>\n<span class="kd">var</span> <span class="nx">component</span> <span class="o">=</span> <span class="p">{</span>\n   <span class="na">controller</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>\n      <span class="k">this</span><span class="p">.</span><span class="nx">stateA</span> <span class="o">=</span> <span class="nx">stateFactory</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="s1">\'A\'</span><span class="p">)</span>\n      <span class="k">this</span><span class="p">.</span><span class="nx">stateA</span><span class="p">.</span><span class="nx">isEditing</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span>\n      <span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">stateA</span><span class="p">.</span><span class="nx">isEditing</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="c1">// Using with stream</span>\n   <span class="p">},</span>\n   <span class="na">view</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">ctrl</span><span class="p">)</span> <span class="p">{</span>\n      <span class="k">return</span> <span class="nx">m</span><span class="p">(</span><span class="s1">\'div\'</span><span class="p">,</span> <span class="s1">\'Is editing \'</span> <span class="o">+</span> <span class="nx">ctrl</span><span class="p">.</span><span class="nx">stateA</span><span class="p">.</span><span class="nx">isEditing</span><span class="p">())</span> <span class="c1">// Displays `Is editing true`</span>\n   <span class="p">}</span>\n<span class="p">}</span>\n</code></pre>\n     </div>\n    </div>\n    <h4 id="new-statesignature-options">\n     new State(signature[, options])\n    </h4>\n    <p>\n     Creates a new State factory.\n     <code class="highlighter-rouge">\n      signature\n     </code>\n     can be object or array.\n    </p>\n    <p>\n     All available state options:\n    </p>\n    <ul>\n     <li>\n      <strong>\n       store\n      </strong>\n      - (function) the custom store function (it must return a function). defaults to\n      <code class="highlighter-rouge">\n       stream\n      </code>\n      that was set in\n      <code class="highlighter-rouge">\n       md.config\n      </code>\n     </li>\n     <li>\n      <strong>\n       prefix\n      </strong>\n      - (string) the string prefix for custom store.\n     </li>\n    </ul>\n    <h4 id="setkey">\n     #set(key)\n    </h4>\n    <p>\n     Internally creates a new state by\n     <code class="highlighter-rouge">\n      key\n     </code>\n     .\n    </p>\n    <h4 id="getkey-1">\n     #get(key)\n    </h4>\n    <p>\n     Get the state by\n     <code class="highlighter-rouge">\n      key\n     </code>\n     .\n    </p>\n    <h4 id="removekey">\n     #remove(key)\n    </h4>\n    <p>\n     Removes the state by\n     <code class="highlighter-rouge">\n      key\n     </code>\n     .\n    </p>\n    <h4 id="mdstatecreatesignature-options">\n     md.State.create(signature[, options])\n    </h4>\n    <p>\n     Creates a state without instantiating new State factory.\n     <code class="highlighter-rouge">\n      options\n     </code>\n     is same with state factory constructor.\n    </p>\n    <div class="language-javascript highlighter-rouge">\n     <div class="highlight">\n      <pre class="highlight"><code><span class="c1">// Create state factory</span>\n<span class="kd">var</span> <span class="nx">state</span> <span class="o">=</span> <span class="nx">md</span><span class="p">.</span><span class="nx">State</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span>\n   <span class="na">isWorking</span><span class="p">:</span> <span class="kc">false</span>\n<span class="p">})</span>\n<span class="nx">state</span><span class="p">.</span><span class="nx">isWorking</span><span class="p">()</span> <span class="c1">// Get state. =&gt; false</span>\n<span class="nx">state</span><span class="p">.</span><span class="nx">isWorking</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="c1">// Set state. =&gt; true</span>\n</code></pre>\n     </div>\n    </div>\n    <h4 id="mdstateassignobject-signature-options">\n     md.State.assign(object, signature[, options])\n    </h4>\n    <p>\n     Same with\n     <code class="highlighter-rouge">\n      create\n     </code>\n     but assigns to given\n     <code class="highlighter-rouge">\n      object\n     </code>\n     , instead of creating new object.\n    </p>\n    <div class="language-javascript highlighter-rouge">\n     <div class="highlight">\n      <pre class="highlight"><code><span class="c1">// Existing object</span>\n<span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{};</span>\n<span class="c1">// Create state factory</span>\n<span class="nx">md</span><span class="p">.</span><span class="nx">State</span><span class="p">.</span><span class="nx">assign</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="p">{</span>\n   <span class="na">isWorking</span><span class="p">:</span> <span class="kc">false</span>\n<span class="p">})</span>\n<span class="nx">obj</span><span class="p">.</span><span class="nx">isWorking</span><span class="p">()</span>\n</code></pre>\n     </div>\n    </div>\n    <hr/>\n    <h2 id="configure--customize">\n     Configure &amp; Customize\n    </h2>\n    <p>\n     Configuration must be set before using any of\n     <code class="highlighter-rouge">\n      mithril-data\n     </code>\n     \xe2\x80\x99s functionality.\n    </p>\n    <div class="language-javascript highlighter-rouge">\n     <div class="highlight">\n      <pre class="highlight"><code><span class="nx">md</span><span class="p">.</span><span class="nx">config</span><span class="p">({</span>\n   <span class="na">baseUrl</span> <span class="p">:</span> <span class="s1">\'/baseurl\'</span><span class="p">,</span>\n   <span class="na">keyId</span> <span class="p">:</span> <span class="s1">\'_id\'</span><span class="p">,</span> <span class="c1">// mongodb</span>\n   <span class="na">store</span> <span class="p">:</span> <span class="nx">customStoreFunction</span>\n<span class="p">})</span>\n</code></pre>\n     </div>\n    </div>\n    <p>\n     All available config options:\n    </p>\n    <ul>\n     <li>\n      <strong>\n       baseUrl\n      </strong>\n      - (string) the base url\n     </li>\n     <li>\n      <strong>\n       keyId\n      </strong>\n      - (string) the custom ID of the model. defaults to\n      <code class="highlighter-rouge">\n       id\n      </code>\n     </li>\n     <li>\n      <strong>\n       redraw\n      </strong>\n      - (boolean) the global redraw flag. default to\n      <code class="highlighter-rouge">\n       false\n      </code>\n     </li>\n     <li>\n      <strong>\n       cache\n      </strong>\n      - (boolean) enable caching the models created by a collection. defaults to\n      <code class="highlighter-rouge">\n       false\n      </code>\n     </li>\n     <li>\n      <strong>\n       modelMethods\n      </strong>\n      - (object { methodName :\n      <code class="highlighter-rouge">\n       function()\n      </code>\n      }) additional methods to bind to\n      <code class="highlighter-rouge">\n       model\n      </code>\n      \xe2\x80\x99s prototype\n     </li>\n     <li>\n      <strong>\n       collectionMethods\n      </strong>\n      - (object { methodName :\n      <code class="highlighter-rouge">\n       function()\n      </code>\n      }) additional methods to bind to\n      <code class="highlighter-rouge">\n       collection\n      </code>\n      \xe2\x80\x99s prototype\n     </li>\n     <li>\n      <strong>\n       modelBindMethods\n      </strong>\n      - (string array) model\xe2\x80\x99s methods to bind to itself. see Lodash\n      <code class="highlighter-rouge">\n       bindAll()\n      </code>\n     </li>\n     <li>\n      <strong>\n       collectionBindMethods\n      </strong>\n      - (string array) collection\xe2\x80\x99s methods to bind to itself\n     </li>\n     <li>\n      <strong>\n       storeConfigOptions\n      </strong>\n      - (function) a function to\n      <code class="highlighter-rouge">\n       manipulate the options\n      </code>\n      before sending data to data-store\n     </li>\n     <li>\n      <strong>\n       storeConfigXHR\n      </strong>\n      - (function) a function to\n      <code class="highlighter-rouge">\n       manipulate XHR\n      </code>\n      before sending data to data-store. see Mithril\xe2\x80\x99s\n      <code class="highlighter-rouge">\n       m.request\n      </code>\n      for more info\n     </li>\n     <li>\n      <strong>\n       storeExtract\n      </strong>\n      - (function) a function to trigger after receiving data from data-store. see Mithril\xe2\x80\x99s\n      <code class="highlighter-rouge">\n       m.request\n      </code>\n      for more info\n     </li>\n     <li>\n      <strong>\n       storeSerializer\n      </strong>\n      - (function) a function that overrides data-store serializer. see Mithril\xe2\x80\x99s\n      <code class="highlighter-rouge">\n       m.request\n      </code>\n      for more info\n     </li>\n     <li>\n      <strong>\n       storeDeserializer\n      </strong>\n      - (function) a function that overrides data-store deserializer. see Mithril\xe2\x80\x99s\n      <code class="highlighter-rouge">\n       m.request\n      </code>\n      for more info\n     </li>\n     <li>\n      <strong>\n       store\n      </strong>\n      - (function) a function that handles the storing of data. defaults to\n      <code class="highlighter-rouge">\n       m.request\n      </code>\n     </li>\n     <li>\n      <strong>\n       stream\n      </strong>\n      - (function) a function that handles the model props as well as md\xe2\x80\x99s State class. defaults to Mithril\xe2\x80\x99s\n      <code class="highlighter-rouge">\n       Stream\n      </code>\n     </li>\n     <li>\n      <strong>\n       cache\n      </strong>\n      - (boolean) should use cache or not in all collections. defaults to\n      <code class="highlighter-rouge">\n       false\n      </code>\n     </li>\n     <li>\n      <strong>\n       cacheLimit\n      </strong>\n      - (number) limit of cache. defaults to\n      <code class="highlighter-rouge">\n       100\n      </code>\n     </li>\n     <li>\n      <strong>\n       placeholder\n      </strong>\n      - (string) the string to return by prop when the model fetching or collection through\n      <code class="highlighter-rouge">\n       isFetching\n      </code>\n      method\n     </li>\n    </ul>\n    <h4 id="storeconfigoptions">\n     storeConfigOptions\n    </h4>\n    <p>\n     This is useful when you want to modify the\n     <code class="highlighter-rouge">\n      options\n     </code>\n     object before sending to data-store. One scenario is to create custom url instead of default generated url.\n    </p>\n    <div class="language-javascript highlighter-rouge">\n     <div class="highlight">\n      <pre class="highlight"><code><span class="nx">user</span><span class="p">.</span><span class="nx">id</span><span class="p">(</span><span class="s1">\'abc123\'</span><span class="p">)</span>\n<span class="nx">user</span><span class="p">.</span><span class="nx">fetch</span><span class="p">()</span>\n<span class="c1">// The default url is `/user?id=abc123` but we want `/user/abc123</span>\n<span class="nx">md</span><span class="p">.</span><span class="nx">config</span><span class="p">({</span> <span class="na">storeConfigOptions</span> <span class="p">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>\n    <span class="nx">options</span><span class="p">.</span><span class="nx">url</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">url</span> <span class="o">+</span> <span class="s1">\'/\'</span> <span class="o">+</span> <span class="nx">options</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">id</span>\n    <span class="nx">options</span><span class="p">.</span><span class="nx">data</span> <span class="o">=</span> <span class="kc">null</span> <span class="c1">// clear the data as we\'ve used it already</span>\n<span class="p">}})</span>\n</code></pre>\n     </div>\n    </div>\n    <h4 id="store">\n     store\n    </h4>\n    <p>\n     A function responsible for storing the data (defaults to\n     <code class="highlighter-rouge">\n      m.request\n     </code>\n     ). An example is, if you want to store data using local storage.\n    </p>\n    <div class="language-javascript highlighter-rouge">\n     <div class="highlight">\n      <pre class="highlight"><code><span class="kd">var</span> <span class="nx">fnLocalStorage</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>\n    <span class="k">if</span> <span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">method</span> <span class="o">===</span> <span class="s1">\'POST\'</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/* Writing data... */</span> <span class="p">}</span>\n    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">method</span> <span class="o">===</span> <span class="s1">\'GET\'</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/* Reading data... */</span> <span class="p">}</span>\n    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">method</span> <span class="o">===</span> <span class="s1">\'DELETE\'</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/* Deleting data... */</span> <span class="p">}</span>\n    <span class="k">else</span> <span class="p">{</span> <span class="cm">/* Do something with other methods */</span> <span class="p">}</span>\n<span class="p">}</span>\n<span class="nx">md</span><span class="p">.</span><span class="nx">config</span><span class="p">({</span> <span class="na">store</span> <span class="p">:</span> <span class="nx">fnLocalStorage</span><span class="p">})</span>\n</code></pre>\n     </div>\n    </div>\n    <blockquote>\n     <p>\n      Just make sure that your custom store should return a Promise.\n     </p>\n    </blockquote>\n    <hr/>\n    <h2 id="more">\n     More\n    </h2>\n    <h4 id="mdstore">\n     md.store\n    </h4>\n    <p>\n     A handy tool that handles request to data-store. The result is through\n     <code class="highlighter-rouge">\n      then\n     </code>\n     /\n     <code class="highlighter-rouge">\n      catch\n     </code>\n     .\n    </p>\n    <ul>\n     <li>\n      <strong>\n       request(url[, method, data, opt])\n      </strong>\n      - creates a request to data-store. the\n      <code class="highlighter-rouge">\n       opt\n      </code>\n      will override the options when storing to data-store\n     </li>\n     <li>\n      <strong>\n       get(url[, data, opt])\n      </strong>\n      - calls\n      <code class="highlighter-rouge">\n       request\n      </code>\n      with\n      <code class="highlighter-rouge">\n       GET\n      </code>\n      method, passing the\n      <code class="highlighter-rouge">\n       data\n      </code>\n      and\n      <code class="highlighter-rouge">\n       opt\n      </code>\n     </li>\n     <li>\n      <strong>\n       post(url[, data, opt])\n      </strong>\n      - calls\n      <code class="highlighter-rouge">\n       request\n      </code>\n      with\n      <code class="highlighter-rouge">\n       POST\n      </code>\n      method, passing the\n      <code class="highlighter-rouge">\n       data\n      </code>\n      and\n      <code class="highlighter-rouge">\n       opt\n      </code>\n     </li>\n     <li>\n      <strong>\n       destroy(url[, data, opt])\n      </strong>\n      - calls\n      <code class="highlighter-rouge">\n       request\n      </code>\n      with\n      <code class="highlighter-rouge">\n       DELETE\n      </code>\n      method, passing the\n      <code class="highlighter-rouge">\n       data\n      </code>\n      and\n      <code class="highlighter-rouge">\n       opt\n      </code>\n     </li>\n    </ul>\n    <h4 id="mdstream">\n     md.stream\n    </h4>\n    <p>\n     Expose Mithril\xe2\x80\x99s Stream (unmodified and only bundled).\n    </p>\n    <h4 id="mdtostream">\n     md.toStream\n    </h4>\n    <p>\n     A helper function to convert any value to stream.\n    </p>\n    <h4 id="mdmodelgetname">\n     md.model.get(name)\n    </h4>\n    <p>\n     A way to get a model constructor from other scope. Argument\n     <code class="highlighter-rouge">\n      name\n     </code>\n     is the model name.\n    </p>\n    <h4 id="mddefaultconfigconfig">\n     md.defaultConfig(config)\n    </h4>\n    <p>\n     Overrides the default config.\n    </p>\n    <h4 id="mdresetconfig">\n     md.resetConfig()\n    </h4>\n    <p>\n     Resets the config to default. If\n     <code class="highlighter-rouge">\n      defaultConfig()\n     </code>\n     is used, it will reset to that config.\n    </p>\n    <h4 id="mdnoconflict">\n     md.noConflict()\n    </h4>\n    <p>\n     Return the old reference to\n     <code class="highlighter-rouge">\n      md\n     </code>\n     .\n    </p>\n    <h4 id="mdversion">\n     md.version()\n    </h4>\n    <p>\n     Return the current version.\n    </p>\n    <hr/>\n    <h2 id="installation">\n     Installation\n    </h2>\n    <div class="language-sh highlighter-rouge">\n     <div class="highlight">\n      <pre class="highlight"><code><span class="c"># NPM</span>\nnpm install mithril-data\n<span class="c"># Bower</span>\nbower install mithril-data\n</code></pre>\n     </div>\n    </div>\n    <p>\n     Node / CommonJS:\n    </p>\n    <div class="language-javascript highlighter-rouge">\n     <div class="highlight">\n      <pre class="highlight"><code><span class="kd">var</span> <span class="nx">md</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">\'mithril-data\'</span><span class="p">);</span>\n</code></pre>\n     </div>\n    </div>\n    <p>\n     HTML: (\n     <code class="highlighter-rouge">\n      md\n     </code>\n     is automatically exposed to browser\xe2\x80\x99s global scope)\n    </p>\n    <div class="language-html highlighter-rouge">\n     <div class="highlight">\n      <pre class="highlight"><code><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"text/javascript"</span> <span class="na">src=</span><span class="s">"lodash.min.js"</span><span class="nt">&gt;&lt;/script&gt;</span>\n<span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"text/javascript"</span> <span class="na">src=</span><span class="s">"mithril.min.js"</span><span class="nt">&gt;&lt;/script&gt;</span>\n<span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"text/javascript"</span> <span class="na">src=</span><span class="s">"mithril-data.min.js"</span><span class="nt">&gt;&lt;/script&gt;</span>\n<span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"text/javascript"</span><span class="nt">&gt;</span>\n  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">md</span><span class="p">.</span><span class="nx">version</span><span class="p">());</span>\n<span class="nt">&lt;/script&gt;</span>\n</code></pre>\n     </div>\n    </div>\n    <hr/>\n    <h3 id="license">\n     License\n    </h3>\n    <p>\n     MIT\n    </p>\n   </section>\n   <footer>\n    <p>\n     This project is maintained by\n     <a href="https://github.com/rhaldkhein">\n      rhaldkhein\n     </a>\n    </p>\n    <p>\n     <small>\n      Hosted on GitHub Pages \xe2\x80\x94 Theme by\n      <a href="https://github.com/orderedlist">\n       orderedlist\n      </a>\n     </small>\n    </p>\n   </footer>\n  </div>\n  <script src="/mithril-data/assets/js/scale.fix.js">\n  </script>\n </body>\n</html>'