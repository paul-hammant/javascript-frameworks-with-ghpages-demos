b'<!DOCTYPE html>\n<html xmlns="http://www.w3.org/1999/xhtml">\n <head>\n  <meta content="text/html; charset=utf-8" http-equiv="Content-Type"/>\n  <meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"/>\n  <title>\n   Cherrytree for Knockout - Component-like Heiarchial Routing for Knockout SPAs\n  </title>\n  <link href="page.css" rel="stylesheet" type="text/css"/>\n  <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.9.1/highlight.min.js">\n  </script>\n  <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.9.1/languages/javascript.min.js">\n  </script>\n  <link href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.9.1/styles/hybrid.min.css" rel="stylesheet" type="text/css"/>\n  <link href="https://fonts.googleapis.com/css?family=Roboto+Mono|Julius+Sans+One|Oxygen:400,300|Muli:400,300|Raleway:400,300" rel="stylesheet" type="text/css"/>\n  <script>\n   hljs.initHighlightingOnLoad();\n  </script>\n </head>\n <body>\n  <main>\n   <h1>\n    Cherrytree for Knockout\n   </h1>\n   <p>\n    <a href="https://github.com/nathanboktae/cherrytree-for-knockout">\n     cherrytree-for-knockout\n    </a>\n    is a way to define your routing in your Knockout-based applications. Inspired by components, it allows you to associate templates and view models in a heirarchial fashion, similar to libraries like\n    <a href="https://angular-ui.github.io/ui-router/">\n     angular-ui-router\n    </a>\n    .\n   </p>\n   <h2>\n    Interactive Example\n   </h2>\n   <article>\n    <script src="https://cdnjs.cloudflare.com/ajax/libs/knockout/3.3.0/knockout-debug.js">\n    </script>\n    <script src="cherrytree-2.3.1.js">\n    </script>\n    <script src="cherrytree-for-knockout-0.5.2.js">\n    </script>\n    <div class="demo route-demo-site" data-bind="routeView: router">\n     <section class="demo-site">\n      <h1 data-bind="text: header">\n       A forum board example\n      </h1>\n      <div class="route-forums-list" data-bind="routeView: true">\n       <ul class="forums" data-bind="foreach: forums">\n        <li>\n         <a data-bind="routeHref: { name: \'threads.list\', params: { forumId: id } }, text: name" href="#7/list">\n          cherrytree-for-knockout demo forum\n         </a>\n        </li>\n       </ul>\n      </div>\n     </section>\n    </div>\n    <script src="bulletin-board.js">\n    </script>\n    <pre><code class="javascript hljs">\n<span class="hljs-keyword">var</span> demoSite = {\n  <span class="hljs-comment">// we mark this abstract as we don\'t want this page to be</span>\n  <span class="hljs-comment">// routable directly, only it\'s children</span>\n  abstract: <span class="hljs-literal">true</span>,\n  path: <span class="hljs-string">\'/\'</span>,\n  <span class="hljs-comment">// we declare any data that needs to be resolved</span>\n  <span class="hljs-comment">// or injected into the view model constructor</span>\n  <span class="hljs-comment">// in the resolve block here. Promises are used as most often this</span>\n  <span class="hljs-comment">// is where you need to fetch something from the server</span>\n  <span class="hljs-comment">// before rendering or loading the view.</span>\n  resolve: {\n    forums: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">transition, resolutions</span>) </span>{\n      <span class="hljs-comment">// query the server for all the forums.</span>\n      <span class="hljs-comment">// return axios.get(....).then(r =&gt; r.data)</span>\n      <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.resolve([{\n        id: <span class="hljs-number">7</span>,\n        name: <span class="hljs-string">\'cherrytree-for-knockout demo forum\'</span>\n      }])\n    }\n  },\n  <span class="hljs-comment">// in the real world you would import your templates through</span>\n  <span class="hljs-comment">// your favorite module system</span>\n  <span class="hljs-comment">// like `require(\'text!./forum-templates.html\')`</span>\n  <span class="hljs-comment">// only the root routeView binding needs to be passed the router.</span>\n  <span class="hljs-comment">// Nested routeViews do not need any options.</span>\n  template: <span class="hljs-string">`\n&lt;section class="demo-site"&gt;\n  &lt;h1 data-bind="text: header"&gt;&lt;/h1&gt;\n  &lt;div data-bind="routeView: true"&gt;&lt;/div&gt;\n&lt;/section&gt;`</span>,\n  <span class="hljs-comment">// view models are called with new, but you can just return an object as seen below.</span>\n  viewModel: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n    <span class="hljs-keyword">this</span>.header = <span class="hljs-string">\'A forum board example\'</span>\n  }\n},\n\nforumList = {\n  path: <span class="hljs-string">\'\'</span>,\n  <span class="hljs-comment">// the routeHref binding is an easy way to generate a link to another route.</span>\n  template: <span class="hljs-string">`\n&lt;ul class="forums" data-bind="foreach: forums"&gt;\n  &lt;li&gt;&lt;a data-bind="routeHref: { name: \'threads.list\', params: { forumId: id } },\n    text: name"&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;`</span>,\n  <span class="hljs-comment">// you can just sreturn the params if there is nothing else to add.</span>\n  viewModel: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">params</span>) </span>{\n   <span class="hljs-keyword">return</span> params\n  }\n},\n\nforum = {\n  <span class="hljs-comment">// paths are relative extentions of where they are used, for better composability</span>\n  path: <span class="hljs-string">\':forumId\'</span>,\n  abstract: <span class="hljs-literal">true</span>,\n  template: <span class="hljs-string">\'\\\n&lt;section class="forum"&gt;\\\n  &lt;h2 data-bind="text: title"&gt;&lt;/h2&gt;\\\n  &lt;div data-bind="routeView: true"&gt;&lt;/div&gt;\\\n&lt;/section&gt;\'</span>,\n  resolve: {\n    forum: (t, r) =&gt; <span class="hljs-built_in">Promise</span>.resolve(r.forums.find(f =&gt; f.id == t.params.forumId)),\n    threads: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">transition, resolutions</span>) </span>{\n      <span class="hljs-comment">// query the server for the threads in this forum, e.g.</span>\n      <span class="hljs-comment">// return axios.get(....).then(r =&gt; r.data)</span>\n      <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.resolve([{\n        id: <span class="hljs-number">1</span>,\n        name: <span class="hljs-string">\'Welcome to the forums!\'</span>\n      }, {\n        id: <span class="hljs-number">2</span>,\n        name: <span class="hljs-string">\'A newbie question...\'</span>\n      }])\n    }\n  },\n  viewModel: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">params, route</span>) </span>{\n    <span class="hljs-keyword">this</span>.title = <span class="hljs-string">\'Viewing forum \'</span> + params.forum.name\n  }\n},\n\nthreadsList = {\n  <span class="hljs-comment">// when specifying params to routeHref, you only need to specify additional params</span>\n  template: <span class="hljs-string">`\n&lt;ul class="threads" data-bind="foreach: threads"&gt;\n  &lt;li&gt;&lt;a data-bind="routeHref: { name: \\\'thread\\\', params: { threadId: id } },\n   text: name"&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;`</span>,\n  viewModel: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">params</span>) </span>{\n    <span class="hljs-keyword">return</span> params\n  }\n},\n\nthread = {\n  resolve: {\n    thread: (tr, r) =&gt; <span class="hljs-built_in">Promise</span>.resolve(\n      r.threads.find(t =&gt; t.id == tr.params.threadId)),\n    posts: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">transition, resolutions</span>) </span>{\n      <span class="hljs-comment">// Again this would be queried from the server</span>\n      <span class="hljs-comment">// return axios.get(....).then(r =&gt; r.data)</span>\n      <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.resolve([{\n        author: <span class="hljs-string">\'Bob\'</span>,\n        text: <span class="hljs-string">\'Sample post\'</span>\n      }, {\n        author: <span class="hljs-string">\'Jill\'</span>,\n        text: <span class="hljs-string">\'Sample reply\'</span>\n      }, {\n        author: <span class="hljs-string">\'Bob\'</span>,\n        text: <span class="hljs-string">\'Thank you!\'</span>\n      }])\n    }\n  },\n  path: <span class="hljs-string">\'threads/:threadId\'</span>,\n  <span class="hljs-comment">// if you use routeHref with just a string, it will use that</span>\n  <span class="hljs-comment">// as the route name and reuse the current params</span>\n  template: <span class="hljs-string">`\n    &lt;section class="thread"&gt;\n      &lt;nav&gt;&lt;a data-bind="routeHref: \'threads.list\'"&gt;Back to\n      &lt;span data-bind="text: forum.name"&gt;&lt;/span&gt;&lt;/a&gt;&lt;/nav&gt;\n      &lt;h4 data-bind="text: thread.title"&gt;&lt;/h4&gt;\n      &lt;ul data-bind="foreach: posts"&gt;\n        &lt;span class="author" data-bind="text: author"&gt;&lt;/span&gt;\n        &lt;li data-bind="text: text"&gt;&lt;/li&gt;\n      &lt;/ul&gt;\n    &lt;/section&gt;`</span>,\n  viewModel: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">params, route</span>) </span>{\n    <span class="hljs-built_in">Object</span>.assign(<span class="hljs-keyword">this</span>, params)\n  }\n},\n\nrouter = cherrytree({ pushState: <span class="hljs-literal">false</span> })\n\nrouter.map(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">route</span>) </span>{\n  route(<span class="hljs-string">\'demo-site\'</span>, demoSite, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n    route(<span class="hljs-string">\'forums.list\'</span>, forumList)\n    route(<span class="hljs-string">\'forum\'</span>, forum, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n      route(<span class="hljs-string">\'threads.list\'</span>, threadsList)\n      route(<span class="hljs-string">\'thread\'</span>, thread)\n    })\n  })\n})\n\nrouter.use(ko.bindingHandlers.routeView.middleware)\nrouter.listen()\n\nko.applyBindings({ router }, <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">\'main\'</span>))\n</code></pre>\n   </article>\n  </main>\n </body>\n</html>'b'<!DOCTYPE html>\n<html xmlns="http://www.w3.org/1999/xhtml">\n <head>\n  <meta content="text/html; charset=utf-8" http-equiv="Content-Type"/>\n  <meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"/>\n  <title>\n   Cherrytree for Knockout - Component-like Heiarchial Routing for Knockout SPAs\n  </title>\n  <link href="page.css" rel="stylesheet" type="text/css"/>\n  <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.9.1/highlight.min.js">\n  </script>\n  <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.9.1/languages/javascript.min.js">\n  </script>\n  <link href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.9.1/styles/hybrid.min.css" rel="stylesheet" type="text/css"/>\n  <link href="https://fonts.googleapis.com/css?family=Roboto+Mono|Julius+Sans+One|Oxygen:400,300|Muli:400,300|Raleway:400,300" rel="stylesheet" type="text/css"/>\n  <script>\n   hljs.initHighlightingOnLoad();\n  </script>\n </head>\n <body>\n  <main>\n   <h1>\n    Cherrytree for Knockout\n   </h1>\n   <p>\n    <a href="https://github.com/nathanboktae/cherrytree-for-knockout">\n     cherrytree-for-knockout\n    </a>\n    is a way to define your routing in your Knockout-based applications. Inspired by components, it allows you to associate templates and view models in a heirarchial fashion, similar to libraries like\n    <a href="https://angular-ui.github.io/ui-router/">\n     angular-ui-router\n    </a>\n    .\n   </p>\n   <h2>\n    Interactive Example\n   </h2>\n   <article>\n    <script src="https://cdnjs.cloudflare.com/ajax/libs/knockout/3.3.0/knockout-debug.js">\n    </script>\n    <script src="cherrytree-2.3.1.js">\n    </script>\n    <script src="cherrytree-for-knockout-0.5.2.js">\n    </script>\n    <div class="demo route-demo-site" data-bind="routeView: router">\n     <section class="demo-site">\n      <h1 data-bind="text: header">\n       A forum board example\n      </h1>\n      <div class="route-forums-list" data-bind="routeView: true">\n       <ul class="forums" data-bind="foreach: forums">\n        <li>\n         <a data-bind="routeHref: { name: \'threads.list\', params: { forumId: id } }, text: name" href="#7/list">\n          cherrytree-for-knockout demo forum\n         </a>\n        </li>\n       </ul>\n      </div>\n     </section>\n    </div>\n    <script src="bulletin-board.js">\n    </script>\n    <pre><code class="javascript hljs">\n<span class="hljs-keyword">var</span> demoSite = {\n  <span class="hljs-comment">// we mark this abstract as we don\'t want this page to be</span>\n  <span class="hljs-comment">// routable directly, only it\'s children</span>\n  abstract: <span class="hljs-literal">true</span>,\n  path: <span class="hljs-string">\'/\'</span>,\n  <span class="hljs-comment">// we declare any data that needs to be resolved</span>\n  <span class="hljs-comment">// or injected into the view model constructor</span>\n  <span class="hljs-comment">// in the resolve block here. Promises are used as most often this</span>\n  <span class="hljs-comment">// is where you need to fetch something from the server</span>\n  <span class="hljs-comment">// before rendering or loading the view.</span>\n  resolve: {\n    forums: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">transition, resolutions</span>) </span>{\n      <span class="hljs-comment">// query the server for all the forums.</span>\n      <span class="hljs-comment">// return axios.get(....).then(r =&gt; r.data)</span>\n      <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.resolve([{\n        id: <span class="hljs-number">7</span>,\n        name: <span class="hljs-string">\'cherrytree-for-knockout demo forum\'</span>\n      }])\n    }\n  },\n  <span class="hljs-comment">// in the real world you would import your templates through</span>\n  <span class="hljs-comment">// your favorite module system</span>\n  <span class="hljs-comment">// like `require(\'text!./forum-templates.html\')`</span>\n  <span class="hljs-comment">// only the root routeView binding needs to be passed the router.</span>\n  <span class="hljs-comment">// Nested routeViews do not need any options.</span>\n  template: <span class="hljs-string">`\n&lt;section class="demo-site"&gt;\n  &lt;h1 data-bind="text: header"&gt;&lt;/h1&gt;\n  &lt;div data-bind="routeView: true"&gt;&lt;/div&gt;\n&lt;/section&gt;`</span>,\n  <span class="hljs-comment">// view models are called with new, but you can just return an object as seen below.</span>\n  viewModel: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n    <span class="hljs-keyword">this</span>.header = <span class="hljs-string">\'A forum board example\'</span>\n  }\n},\n\nforumList = {\n  path: <span class="hljs-string">\'\'</span>,\n  <span class="hljs-comment">// the routeHref binding is an easy way to generate a link to another route.</span>\n  template: <span class="hljs-string">`\n&lt;ul class="forums" data-bind="foreach: forums"&gt;\n  &lt;li&gt;&lt;a data-bind="routeHref: { name: \'threads.list\', params: { forumId: id } },\n    text: name"&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;`</span>,\n  <span class="hljs-comment">// you can just sreturn the params if there is nothing else to add.</span>\n  viewModel: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">params</span>) </span>{\n   <span class="hljs-keyword">return</span> params\n  }\n},\n\nforum = {\n  <span class="hljs-comment">// paths are relative extentions of where they are used, for better composability</span>\n  path: <span class="hljs-string">\':forumId\'</span>,\n  abstract: <span class="hljs-literal">true</span>,\n  template: <span class="hljs-string">\'\\\n&lt;section class="forum"&gt;\\\n  &lt;h2 data-bind="text: title"&gt;&lt;/h2&gt;\\\n  &lt;div data-bind="routeView: true"&gt;&lt;/div&gt;\\\n&lt;/section&gt;\'</span>,\n  resolve: {\n    forum: (t, r) =&gt; <span class="hljs-built_in">Promise</span>.resolve(r.forums.find(f =&gt; f.id == t.params.forumId)),\n    threads: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">transition, resolutions</span>) </span>{\n      <span class="hljs-comment">// query the server for the threads in this forum, e.g.</span>\n      <span class="hljs-comment">// return axios.get(....).then(r =&gt; r.data)</span>\n      <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.resolve([{\n        id: <span class="hljs-number">1</span>,\n        name: <span class="hljs-string">\'Welcome to the forums!\'</span>\n      }, {\n        id: <span class="hljs-number">2</span>,\n        name: <span class="hljs-string">\'A newbie question...\'</span>\n      }])\n    }\n  },\n  viewModel: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">params, route</span>) </span>{\n    <span class="hljs-keyword">this</span>.title = <span class="hljs-string">\'Viewing forum \'</span> + params.forum.name\n  }\n},\n\nthreadsList = {\n  <span class="hljs-comment">// when specifying params to routeHref, you only need to specify additional params</span>\n  template: <span class="hljs-string">`\n&lt;ul class="threads" data-bind="foreach: threads"&gt;\n  &lt;li&gt;&lt;a data-bind="routeHref: { name: \\\'thread\\\', params: { threadId: id } },\n   text: name"&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;`</span>,\n  viewModel: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">params</span>) </span>{\n    <span class="hljs-keyword">return</span> params\n  }\n},\n\nthread = {\n  resolve: {\n    thread: (tr, r) =&gt; <span class="hljs-built_in">Promise</span>.resolve(\n      r.threads.find(t =&gt; t.id == tr.params.threadId)),\n    posts: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">transition, resolutions</span>) </span>{\n      <span class="hljs-comment">// Again this would be queried from the server</span>\n      <span class="hljs-comment">// return axios.get(....).then(r =&gt; r.data)</span>\n      <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.resolve([{\n        author: <span class="hljs-string">\'Bob\'</span>,\n        text: <span class="hljs-string">\'Sample post\'</span>\n      }, {\n        author: <span class="hljs-string">\'Jill\'</span>,\n        text: <span class="hljs-string">\'Sample reply\'</span>\n      }, {\n        author: <span class="hljs-string">\'Bob\'</span>,\n        text: <span class="hljs-string">\'Thank you!\'</span>\n      }])\n    }\n  },\n  path: <span class="hljs-string">\'threads/:threadId\'</span>,\n  <span class="hljs-comment">// if you use routeHref with just a string, it will use that</span>\n  <span class="hljs-comment">// as the route name and reuse the current params</span>\n  template: <span class="hljs-string">`\n    &lt;section class="thread"&gt;\n      &lt;nav&gt;&lt;a data-bind="routeHref: \'threads.list\'"&gt;Back to\n      &lt;span data-bind="text: forum.name"&gt;&lt;/span&gt;&lt;/a&gt;&lt;/nav&gt;\n      &lt;h4 data-bind="text: thread.title"&gt;&lt;/h4&gt;\n      &lt;ul data-bind="foreach: posts"&gt;\n        &lt;span class="author" data-bind="text: author"&gt;&lt;/span&gt;\n        &lt;li data-bind="text: text"&gt;&lt;/li&gt;\n      &lt;/ul&gt;\n    &lt;/section&gt;`</span>,\n  viewModel: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">params, route</span>) </span>{\n    <span class="hljs-built_in">Object</span>.assign(<span class="hljs-keyword">this</span>, params)\n  }\n},\n\nrouter = cherrytree({ pushState: <span class="hljs-literal">false</span> })\n\nrouter.map(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">route</span>) </span>{\n  route(<span class="hljs-string">\'demo-site\'</span>, demoSite, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n    route(<span class="hljs-string">\'forums.list\'</span>, forumList)\n    route(<span class="hljs-string">\'forum\'</span>, forum, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n      route(<span class="hljs-string">\'threads.list\'</span>, threadsList)\n      route(<span class="hljs-string">\'thread\'</span>, thread)\n    })\n  })\n})\n\nrouter.use(ko.bindingHandlers.routeView.middleware)\nrouter.listen()\n\nko.applyBindings({ router }, <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">\'main\'</span>))\n</code></pre>\n   </article>\n  </main>\n </body>\n</html>'