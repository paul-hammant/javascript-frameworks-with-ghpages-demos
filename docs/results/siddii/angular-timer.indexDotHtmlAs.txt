b'<!-- From index.tpl.html - Grunt task index -->\n<!DOCTYPE html>\n<html lang="en" xmlns="http://www.w3.org/1999/xhtml">\n <head>\n  <style type="text/css">\n   @charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}\n  </style>\n  <meta charset="utf-8"/>\n  <title>\n   Angular Timer, a simple, inter-operable AngularJS directive\n  </title>\n  <meta content="width=device-width, initial-scale=1.0" name="viewport"/>\n  <!-- compiled CSS -->\n  <link href="bower_components/bootstrap/docs/assets/css/bootstrap.css" rel="stylesheet" type="text/css"/>\n  <link href="bower_components/bootstrap/docs/assets/css/bootstrap-responsive.css" rel="stylesheet" type="text/css"/>\n  <link href="docs/css/docs.css" rel="stylesheet" type="text/css"/>\n  <link href="docs/css/prettify.css" rel="stylesheet" type="text/css"/>\n  <!-- compiled JavaScript -->\n  <script src="dist/assets/js/angular-timer-bower.js" type="text/javascript">\n  </script>\n  <script src="dist/assets/js/angular-timer-all.min.js" type="text/javascript">\n  </script>\n  <script src="docs/docs.js" type="text/javascript">\n  </script>\n  <script src="docs/prettify.js" type="text/javascript">\n  </script>\n  <script src="docs/application.js" type="text/javascript">\n  </script>\n </head>\n <body class="ng-scope" ng-app="timer-demo" ng-controller="TimerDemoController">\n  <!-- ngInclude: undefined -->\n  <ng-include class="ng-scope" onload="linkAnchors();" src="\'navbar.html\'">\n   <div class="navbar navbar-inverse navbar-fixed-top ng-scope">\n    <div class="navbar-inner">\n     <div id="fork-me">\n      <a href="https://github.com/siddii/angular-timer/fork" title="Fork me on GitHub">\n       <img alt="Fork me on GitHub" src="docs/images/forkme.png"/>\n      </a>\n     </div>\n     <div class="container">\n      <button class="btn btn-navbar" data-target=".nav-collapse" data-toggle="collapse" type="button">\n       <span class="icon-bar">\n       </span>\n       <span class="icon-bar">\n       </span>\n       <span class="icon-bar">\n       </span>\n      </button>\n      <a class="brand" href="index.html">\n       Angular Timer\n      </a>\n      <div class="nav-collapse collapse">\n       <ul class="nav">\n        <li class="dropdown">\n         <a class="dropdown-toggle" data-toggle="dropdown" href="#">\n          Examples\n         </a>\n         <ul class="dropdown-menu">\n          <li>\n           <a href="index.html#basic-timer">\n            Basic Example\n           </a>\n          </li>\n          <li>\n           <a href="index.html#clock-timer">\n            Clock Timer\n           </a>\n          </li>\n          <li>\n          </li>\n          <li>\n           <a href="index.html#clock-timer-i18n">\n            Clock Timer with i18n\n           </a>\n          </li>\n          <li>\n           <a href="index.html#timer-with-start-time">\n            Timer with start time\n           </a>\n          </li>\n          <li>\n           <a href="index.html#progressbar-timer">\n            Progressbar Timer\n           </a>\n          </li>\n          <li>\n           <a href="index.html#countdown-timer">\n            Countdown Timer\n           </a>\n          </li>\n          <li>\n           <a href="index.html#auto-start-false-timer">\n            Timer with\n            <em>\n             auto-start=false\n            </em>\n           </a>\n          </li>\n         </ul>\n        </li>\n        <li ng-non-bindable="">\n         <a href="index.html#markup">\n          &lt;timer/&gt;\n         </a>\n        </li>\n        <li class="dropdown">\n         <a class="dropdown-toggle" data-toggle="dropdown" href="#">\n          Examples\n         </a>\n         <ul class="dropdown-menu">\n          <li>\n           <a href="examples.html#angularjs-single-timer">\n            AngularJS - Single Timer\n           </a>\n          </li>\n          <li>\n           <a href="examples.html#angularjs-multiple-timer">\n            AngularJS - Multiple Timers\n           </a>\n          </li>\n          <li>\n           <a href="examples.html#angularjs-polling-timer">\n            AngularJS - Polling Timers\n           </a>\n          </li>\n          <li>\n           <a href="examples.html#jquery-timer">\n            jQuery\n           </a>\n          </li>\n          <li>\n           <a href="examples.html#plain-javascript">\n            Plain JavaScript\n           </a>\n          </li>\n         </ul>\n        </li>\n        <li class="dropdown">\n         <a class="dropdown-toggle" data-toggle="dropdown" href="#">\n          Code\n         </a>\n         <ul class="dropdown-menu">\n          <li>\n           <a href="https://github.com/siddii/angular-timer" target="_new">\n            View on Github\n           </a>\n          </li>\n          <li>\n           <a href="index.html#bower">\n            Install using Bower\n           </a>\n          </li>\n          <li>\n           <a href="https://github.com/siddii/angular-timer/archive/master.zip" target="_new">\n            Download\n           </a>\n          </li>\n          <li>\n           <a href="index.html#contribute">\n            Contribute\n           </a>\n          </li>\n         </ul>\n        </li>\n       </ul>\n      </div>\n     </div>\n    </div>\n   </div>\n  </ng-include>\n  <div class="container page-content">\n   <section id="introduction">\n    <h1>\n     Introduction\n    </h1>\n    <p>\n     Directives in\n     <a href="http://angularjs.org" target="_new">\n      AngularJS\n     </a>\n     is a powerful way of building\n            reusable\n     <em>\n      UI components\n     </em>\n     . This simple project will serve as a sample/reference implementation\n            demonstrating its flexibilities by making it\n     <em>\n      inter-operable\n     </em>\n     across runtime (AngularJS, plain simple\n            JavaScript &amp; jQuery)\n    </p>\n    <p>\n     For basic understanding of how directives work in AngularJS, please head to this\n     <a href="http://docs.angularjs.org/guide/directive" target="_new">\n      developer guide\n     </a>\n     .\n    </p>\n   </section>\n   <section id="basic-timer">\n    <h3>\n     Basic Example\n    </h3>\n    <div class="bs-docs-example ng-scope" timer-controls="">\n     <p>\n      This simple directive\n      <code>\n       &lt;timer /&gt;\n      </code>\n      will start the timer with the default option of\n                ticking every 1 millisecond\n     </p>\n     <h3>\n      <timer class="ng-isolate-scope">\n       <span class="ng-binding ng-scope">\n        2314\n       </span>\n      </timer>\n     </h3>\n     <button class="btn" ng-click="timerStart()" type="button">\n      Start\n     </button>\n     <button class="btn" ng-click="timerStop()" type="button">\n      Stop\n     </button>\n    </div>\n   </section>\n   <section id="start-time-and-auto-start-set">\n    <h3>\n     Timer with start time and auto start set\n    </h3>\n    <div class="bs-docs-example">\n     <p>\n      This will start a timer with 1410914940000 milliseconds and stopped\n     </p>\n     <h3>\n      <timer autostart="false" class="ng-isolate-scope" start-time="1410914940000">\n       <span class="ng-binding ng-scope">\n        81398827770\n       </span>\n      </timer>\n     </h3>\n    </div>\n   </section>\n   <section id="clock-timer">\n    <h3>\n     Timer with hours, minutes &amp; seconds\n    </h3>\n    <div class="bs-docs-example ng-scope" timer-controls="">\n     <p>\n      This markup\n      <code ng-non-bindable="">\n       &lt;timer interval="1000"&gt;{{hours}} hour{{hoursS}}, {{minutes}}\n                minute{{minutesS}}, {{seconds}} second{{secondsS}}.&lt;/timer&gt;\n      </code>\n      will run the clock timer ticking every second\n     </p>\n     <h3>\n      <timer class="ng-binding ng-isolate-scope" interval="1000">\n       <span class="ng-binding ng-scope">\n        0 hours, 0 minutes, 2 seconds.\n       </span>\n      </timer>\n     </h3>\n     <button class="btn ng-binding" ng-click="timerToggle()" type="button">\n      Stop\n     </button>\n    </div>\n   </section>\n   <section id="clock-timer-i18n">\n    <h3>\n     Timer i18n\n    </h3>\n    <div class="bs-docs-example">\n     <p>\n      This markup\n      <code ng-non-bindable="">\n       &lt;timer interval="1000" language="fr" &gt;{{yearUnit}}\n      </code>\n      will run the clock timer ticking every second.\n     </p>\n     <p>\n      You can use a controller variable as the language attribut or a string. If a scope variable is used, the value will be watched,\n      <strong>\n       that is to say if your app language changes, the change will also affects the timer.\n      </strong>\n     </p>\n     <p>\n      Based on\n      <a href="https://github.com/EvanHahn/HumanizeDuration.js">\n       HumanizeDuration\n      </a>\n      with more than 16 languages available.\n     </p>\n     <h3>\n      Spanish\n     </h3>\n     <div id="spanish">\n      <h4>\n       Year max unit time :\n       <timer class="ng-binding ng-isolate-scope" interval="1000" language="es">\n        <span class="ng-binding ng-scope">\n         2 segundos\n        </span>\n       </timer>\n      </h4>\n      <h4>\n       Hour max unit time:\n       <timer class="ng-binding ng-isolate-scope" interval="1000" language="es">\n        <span class="ng-binding ng-scope">\n         2 segundos\n        </span>\n       </timer>\n      </h4>\n      <h4>\n       Second max unit time:\n       <timer class="ng-binding ng-isolate-scope" interval="1000" language="es">\n        <span class="ng-binding ng-scope">\n         2 segundos\n        </span>\n       </timer>\n      </h4>\n     </div>\n     <h3>\n      French\n     </h3>\n     <div id="french">\n      <h4>\n       Year max unit time :\n       <timer class="ng-binding ng-isolate-scope" interval="1000" language="fr">\n        <span class="ng-binding ng-scope">\n         2 secondes\n        </span>\n       </timer>\n      </h4>\n      <h4>\n       Hour max unit time:\n       <timer class="ng-binding ng-isolate-scope" interval="1000" language="fr">\n        <span class="ng-binding ng-scope">\n         2 secondes\n        </span>\n       </timer>\n      </h4>\n      <h4>\n       Second max unit time:\n       <timer class="ng-binding ng-isolate-scope" interval="1000" language="fr">\n        <span class="ng-binding ng-scope">\n         2 secondes\n        </span>\n       </timer>\n      </h4>\n     </div>\n     <h3>\n      Available units\n     </h3>\n     <ul>\n      <li>\n       <strong>\n        secondUnit\n       </strong>\n       : 8\xc2\xa0164\xc2\xa0816 seconds\n      </li>\n      <li>\n       <strong>\n        minuteUnit\n       </strong>\n       : 136\xc2\xa0089 minutes, 16 seconds\n      </li>\n      <li>\n       <strong>\n        hourUnit\n       </strong>\n       : 18 126 hours,9 minutes, 16 seconds\n      </li>\n      <li>\n       <strong>\n        dayUnit\n       </strong>\n       :  755 days, 6 hours, 9 minutes, 16 seconds\n      </li>\n      <li>\n       <strong>\n        monthUnit\n       </strong>\n       : 25 month, 5 days, 6 hours, 9 minutes, 16 seconds\n      </li>\n      <li>\n       <strong>\n        yearUnit\n       </strong>\n       : 2 years, 1 month, 5 days, 6 hours, 9 minutes, 16 seconds\n      </li>\n     </ul>\n    </div>\n   </section>\n   <section id="clock-timer-leading-zero">\n    <h3>\n     Timer with leading zero\n    </h3>\n    <div class="bs-docs-example ng-scope" timer-controls="">\n     <p>\n      This markup\n      <code ng-non-bindable="">\n       &lt;timer interval="1000"&gt;{{hhours}} hour{{hhoursS}}, {{mminutes}}\n                minute{{minutesS}}, {{sseconds}} second{{secondsS}}.&lt;/timer&gt;\n      </code>\n      will run the clock timer ticking every second with an additional zero at the beginning if unit is smaller than 10\n     </p>\n     <h3>\n      <timer class="ng-binding ng-isolate-scope" interval="1000">\n       <span class="ng-binding ng-scope">\n        00 hours, 00 minutes, 02 seconds\n       </span>\n      </timer>\n     </h3>\n     <button class="btn ng-binding" ng-click="timerToggle()" type="button">\n      Stop\n     </button>\n    </div>\n   </section>\n   <section id="timer-with-start-time">\n    <h3>\n     Timer initialised with some predefined start time.\n    </h3>\n    <div class="bs-docs-example ng-scope" timer-controls="">\n     <p>\n      Following is the timer clock setting for the days, hours, minutes &amp; seconds elapsed since\n      <b class="ng-binding">\n       January 1, 2017 (GMT-6)\n      </b>\n     </p>\n     <p class="muted ng-binding">\n      (01 Jan 2017 06:00:00 GMT = 1483246800000 milliseconds)\n     </p>\n     <code ng-non-bindable="">\n      &lt;timer start-time="{{startTime}}"&gt;{{days}} days, {{hours}} hours, {{minutes}} minutes, {{seconds}} seconds.&lt;/timer&gt;\n     </code>\n     <h3>\n      <timer class="ng-binding ng-isolate-scope" start-time="startTime">\n       <span class="ng-binding ng-scope">\n        104 days, 22 hours, 36 minutes, 10 seconds.\n       </span>\n      </timer>\n     </h3>\n     <button class="btn ng-binding" ng-click="timerToggle()" type="button">\n      Stop\n     </button>\n    </div>\n   </section>\n   <section id="timer-with-end-time">\n    <h3>\n     Timer initialised with some predefined end time.\n    </h3>\n    <div class="bs-docs-example">\n     <p>\n      Following is the countdown timer setting for the days, hours, minutes &amp; seconds to\n      <b class="ng-binding">\n       January 1, 2018 (GMT)\n      </b>\n     </p>\n     <p class="muted ng-binding">\n      (01 Jan 2018 00:00:00 GMT = 1514782800000 milliseconds)\n     </p>\n     <code ng-non-bindable="">\n      &lt;timer end-time="{{endTime}}"&gt;{{days}} days, {{hours}} hours, {{minutes}} minutes, {{seconds}} seconds.&lt;/timer&gt;\n     </code>\n     <h3>\n      <timer class="ng-binding ng-isolate-scope" end-time="endTime">\n       <span class="ng-binding ng-scope">\n        260 days, 1 hours, 23 minutes, 49 seconds.\n       </span>\n      </timer>\n     </h3>\n    </div>\n   </section>\n   <section id="progressbar-timer">\n    <h3>\n     Progressbar Timer\n    </h3>\n    <div class="bs-docs-example">\n     <p>\n      Timer directive along with\n      <a href="http://twitter.github.io/bootstrap/components.html#progress" target="_new">\n       Twitter Bootstrap\'s Progressbar\n      </a>\n      will set the timer\n                on Progressbar control.\n     </p>\n     <code ng-non-bindable="">\n      &lt;timer countdown="30" interval="1000"&gt;&lt;div class="progress\n                progress-striped active {{displayProgressActive}}"style="height: 30px;"&gt;\n     </code>\n     <code ng-non-bindable="">\n      Remaining time : {{countdown}} second{{secondsS}} ({{progressBar}}%). Activity? {{displayProgressActive}}\n     </code>\n     <code ng-non-bindable="">\n      &lt;div class="bar" style="min-width: 2em;width: {{progressBar}}%;"&gt;&lt;/div&gt;\n     </code>\n     <code ng-non-bindable="">\n      &lt;/div&gt;&lt;/timer&gt;\n     </code>\n     <h3>\n      <timer class="ng-binding ng-isolate-scope" countdown="30" id="countdown" interval="1000">\n       <span class="ng-binding ng-scope">\n        Remaining time : 27 seconds (6.7%). Activity? active\n       </span>\n       <div class="progress progress-striped active" style="height: 30px;">\n        <div class="bar ng-binding" style="min-width: 2em; height: 30px; width: 6.7%;">\n         6.7%\n        </div>\n       </div>\n      </timer>\n     </h3>\n     <code ng-non-bindable="">\n      &lt;timer end-time="1451628000000" interval="1000"&gt;&lt;div class="progress\n                progress-striped active {{displayProgressActive}}"style="height: 30px;"&gt;\n     </code>\n     <code ng-non-bindable="">\n      &lt;div class="bar" style="min-width: 2em;width: {{progressBar}}%;"&gt;&lt;/div&gt;\n     </code>\n     <code ng-non-bindable="">\n      &lt;/div&gt;&lt;/timer&gt;\n     </code>\n     <h3>\n      <timer class="ng-binding ng-isolate-scope" end-time="1451628000000" interval="1000">\n       <span class="ng-binding ng-scope">\n        (%). Progress bar activity : active\n       </span>\n       <div class="progress progress-striped active" style="height: 30px;">\n        <div class="bar ng-binding" style="min-width: 2em; width: %;">\n         %\n        </div>\n       </div>\n      </timer>\n     </h3>\n     <button class="btn" ng-click="timerStart()" type="button">\n      Start\n     </button>\n     <button class="btn" ng-click="timerStop()" type="button">\n      Stop\n     </button>\n    </div>\n   </section>\n   <section id="countdown-timer">\n    <h3>\n     Countdown Timer\n    </h3>\n    <div class="bs-docs-example ng-scope" timer-controls="">\n     <p>\n      The countdown timer\n      <code ng-non-bindable="">\n       &lt;timer interval="1000" countdown="100"&gt;{{countdown}}&lt;/timer&gt;\n      </code>\n      will start its countdown from 100 until it reaches 0 by ticking every second\n     </p>\n     <h3>\n      <timer class="ng-binding ng-isolate-scope" countdown="100" interval="1000">\n       <span class="ng-binding ng-scope">\n        97\n       </span>\n      </timer>\n     </h3>\n     <button class="btn" ng-click="timerAddCDSeconds(10)" type="button">\n      Add 10 Seconds\n     </button>\n    </div>\n   </section>\n   <section id="auto-start-false-timer">\n    <h3>\n     Timer with\n     <em>\n      autostart = false\n     </em>\n    </h3>\n    <div class="bs-docs-example ng-scope" timer-controls="">\n     <p>\n      Click on the start button to start the timer.\n      <code ng-non-bindable="">\n       &lt;timer autostart="false" interval="1000"&gt;{{seconds}}&lt;/timer&gt;\n      </code>\n     </p>\n     <h3>\n      <timer autostart="false" class="ng-binding ng-isolate-scope" interval="1000">\n       <span class="ng-binding ng-scope">\n        0\n       </span>\n      </timer>\n     </h3>\n     <button class="btn ng-binding" ng-click="timerToggle()" type="button">\n      Start\n     </button>\n    </div>\n   </section>\n   <section id="plural-unit-timer">\n    <h3>\n     Plural / Singular units\n    </h3>\n    <div class="bs-docs-example">\n     <p>\n      Two stopped countdown timers to illustrate how to handle pluralization of time units.\n      <code ng-non-bindable="">\n       &lt;timer autostart="false" countdown="90061"&gt;{{days}} day{{daysS}}, {{hours}} hour{{hoursS}}, {{minutes}} minute{{minutesS}}, {{seconds}} second{{secondsS}}.&lt;/timer&gt;\n      </code>\n     </p>\n     <h3 class="singular-counter">\n      <timer autostart="false" class="ng-binding ng-isolate-scope" countdown="90061">\n       <span class="ng-binding ng-scope">\n        1 day, 1 hour, 1 minute, 1 second.\n       </span>\n      </timer>\n     </h3>\n     <code ng-non-bindable="">\n      &lt;timer autostart="false" countdown="190061"&gt;{{days}} day{{daysS}}, {{hours}} hour{{hoursS}}, {{minutes}} minute{{minutesS}}, {{seconds}} second{{secondsS}}.&lt;/timer&gt;\n     </code>\n     <h3 class="plural-counter">\n      <timer autostart="false" class="ng-binding ng-isolate-scope" countdown="190061">\n       <span class="ng-binding ng-scope">\n        2 days, 4 hours, 47 minutes, 41 seconds.\n       </span>\n      </timer>\n     </h3>\n    </div>\n   </section>\n   <section id="max-time-unit-countdown-timer">\n    <h3>\n     Countdown time display according to specified\n     <em>\n      max-time-unit\n     </em>\n    </h3>\n    <div class="bs-docs-example">\n     <p>\n      This markup will display countdown time in minute and seconds only.  This attribute can be applied to regular clock timer as well.\n      <code ng-non-bindable="">\n       &lt;timer countdown="10041" max-time-unit="\'minute\'" interval="1000"&gt;{{mminutes}} minute{{minutesS}}, {{sseconds}} second{{secondsS}}&lt;/timer&gt;\n      </code>\n     </p>\n     <p class="muted">\n      countdown Time with max time unit option - year\n     </p>\n     <h3 class="WithMaxTimeUnitAsYear">\n      <timer class="ng-binding ng-isolate-scope" countdown="100410000" interval="1000" max-time-unit="\'year\'">\n       <span class="ng-binding ng-scope">\n        03 years, 02 months, 22 days, 03 hours, 39 minutes, 58 seconds\n       </span>\n      </timer>\n     </h3>\n     <p class="muted">\n      countdown Time with max time unit option - minute\n     </p>\n     <h3 class="WithMaxTimeUnitAsMinute">\n      <timer class="ng-binding ng-isolate-scope" countdown="10041" interval="1000" max-time-unit="\'minute\'">\n       <span class="ng-binding ng-scope">\n        167 minutes, 19 seconds\n       </span>\n      </timer>\n     </h3>\n     <p class="muted">\n      countdown Time with max time unit option - second\n     </p>\n     <h3 class="WithMaxTimeUnitAsSecond">\n      <timer class="ng-binding ng-isolate-scope" countdown="10041" interval="1000" max-time-unit="\'second\'">\n       <span class="ng-binding ng-scope">\n        00 minutes, 10039 seconds\n       </span>\n      </timer>\n     </h3>\n     <p class="muted">\n      countdown Time without max time unit option - minute\n     </p>\n     <h3 class="WithoutMaxTimeUnit">\n      <timer class="ng-binding ng-isolate-scope" countdown="10041" interval="1000">\n       <span class="ng-binding ng-scope">\n        00 days, 02 hours, 47 minutes, 19 seconds\n       </span>\n      </timer>\n     </h3>\n    </div>\n   </section>\n   <section id="finish-callback-timer">\n    <h3>\n     Countdown Finished Callback\n    </h3>\n    <div class="bs-docs-example">\n     <p>\n      A countdown timer that updates a value once the callback is reached\n      <code ng-non-bindable="">\n       &lt;timer countdown="3" interval="1000" finish-callback="callbackTimer.finished()"&gt;{{seconds}} second{{secondsS}}&lt;/timer&gt;\n      </code>\n     </p>\n     <h3 class="counter">\n      <timer class="ng-binding ng-isolate-scope" countdown="3" finish-callback="callbackTimer.finished()" interval="1000">\n       <span class="ng-binding ng-scope">\n        1 second\n       </span>\n      </timer>\n     </h3>\n     Timer:\n     <span class="timer-status ng-binding">\n      Running\n     </span>\n     Callbacks:\n     <span class="timer-callbacks ng-binding">\n      0\n     </span>\n    </div>\n   </section>\n   <section id="markup">\n    <h3>\n     Markup\n    </h3>\n    <p>\n     Timer directive can be declared using following options. By default, it will display milliseconds inside\n     <code>\n      span\n     </code>\n     tag. It can also take\n     <em>\n      template\n     </em>\n     string to display user-defined formats.\n    </p>\n    <div class="bs-docs-example">\n     <p>\n      <code ng-nonbindable="">\n       &lt;timer interval="1000" /&gt;\n      </code>\n     </p>\n    </div>\n    <div class="bs-docs-example">\n     <p>\n      <code ng-non-bindable="">\n       &lt;timer interval="1000"&gt;{{hours}} hours, {{minutes}} minutes,\n                    {{seconds}} seconds, {{millis}} milliseconds.&lt;/timer&gt;\n      </code>\n     </p>\n    </div>\n    <h4>\n     Attributes\n    </h4>\n    <table class="table table-bordered table-striped">\n     <thead>\n      <tr>\n       <th>\n        Name\n       </th>\n       <th>\n        Required\n       </th>\n       <th>\n        Default value\n       </th>\n      </tr>\n     </thead>\n     <tbody>\n      <tr>\n       <td>\n        interval\n       </td>\n       <td>\n        false\n       </td>\n       <td>\n        1 millisecond\n       </td>\n      </tr>\n      <tr>\n       <td>\n        autostart\n        <br/>\n        <em>\n         Formerly called \'auto-start\'. Please see this\n         <a href="https://github.com/siddii/angular-timer/issues/14" target="_new">\n          issue\n         </a>\n        </em>\n       </td>\n       <td>\n        false\n       </td>\n       <td>\n        true\n       </td>\n      </tr>\n      <tr>\n       <td>\n        countdown\n       </td>\n       <td>\n        false\n       </td>\n       <td>\n       </td>\n      </tr>\n      <tr>\n       <td>\n        start-time\n       </td>\n       <td>\n        false\n       </td>\n       <td>\n        starts the timer with predefined time (in milliseconds).\n       </td>\n      </tr>\n      <tr>\n       <td>\n        end-time\n       </td>\n       <td>\n        false\n       </td>\n       <td>\n        Sets the countdown based on predefined end time (in milliseconds).\n       </td>\n      </tr>\n      <tr>\n       <td>\n        max-time-unit\n       </td>\n       <td>\n        false\n       </td>\n       <td>\n        no default value.   But you can give value,  \'minute\', \'second\', or \'hour\'.\n       </td>\n      </tr>\n      <tr>\n       <td>\n        language\n       </td>\n       <td>\n        false\n       </td>\n       <td>\n        \'en\' for English. Please see\n        <a href="https://github.com/EvanHahn/HumanizeDuration.js#supported-languages" target="_blank">\n         supported languages\n        </a>\n        .\n       </td>\n      </tr>\n     </tbody>\n    </table>\n    <h4>\n     Methods\n    </h4>\n    <p>\n     Following DOM methods can be invoked to\n     <em>\n      timer\n     </em>\n     . Append to\n     <code>\n      timer-\n     </code>\n     for scope based\n            events when calling from AngularJS controllers.\n    </p>\n    <table class="table table-bordered table-striped">\n     <thead>\n      <tr>\n       <th>\n        Method name\n       </th>\n       <th>\n        Description\n       </th>\n      </tr>\n     </thead>\n     <tbody>\n      <tr>\n       <td>\n        start\n       </td>\n       <td>\n        Starts the timer\n       </td>\n      </tr>\n      <tr>\n       <td>\n        stop\n       </td>\n       <td>\n        Stops the timer\n       </td>\n      </tr>\n      <tr>\n       <td>\n        clear\n       </td>\n       <td>\n        Same as\n        <i>\n         stop\n        </i>\n        . But, without the event being triggered\n       </td>\n      </tr>\n      <tr>\n       <td>\n        resume\n       </td>\n       <td>\n        Resumes the timer. Will NOT reset the start time\n       </td>\n      </tr>\n      <tr>\n       <td>\n        addCDSeconds\n       </td>\n       <td>\n        Add\n        <i>\n         seconds\n        </i>\n        to running countdown\n       </td>\n      </tr>\n     </tbody>\n    </table>\n    <h4>\n     Events\n    </h4>\n    <table class="table table-bordered table-striped">\n     <thead>\n      <tr>\n       <th>\n        Event name\n       </th>\n       <th>\n        Description\n       </th>\n      </tr>\n     </thead>\n     <tbody>\n      <tr>\n       <td>\n        timer-tick\n       </td>\n       <td>\n        Tick event that gets emitted for every timer tick for specified interval. Please refer to\n        <a href="examples.html#angularjs-polling-timer">\n         Polling Timer\n        </a>\n        example for its usage.\n       </td>\n      </tr>\n      <tr>\n       <td>\n        timer-stopped\n       </td>\n       <td>\n        Tick event that gets emitted when the timer stops. Please refer to\n        <a href="examples.html#angularjs-single-timer">\n         Single Timer\n        </a>\n        example for its usage.\n       </td>\n      </tr>\n     </tbody>\n    </table>\n   </section>\n   <section id="bower">\n    <h3>\n     Install using Bower\n    </h3>\n    <p>\n     <code>\n      bower install angular-timer\n     </code>\n    </p>\n   </section>\n   <section id="contribute">\n    <h3>\n     Contributions welcome!\n    </h3>\n    <p>\n     We welcome any or all kinds of contributions! Please submit\n     <a href="https://github.com/siddii/angular-timer/pulls" target="_new">\n      pull requests\n     </a>\n     or create\n     <a href="https://github.com/siddii/angular-timer/issues" target="_new">\n      issues\n     </a>\n     to contribute to this\n            project :)\n    </p>\n   </section>\n   <footer>\n    <p>\n     \xc2\xa9 Siddique Hameed 2013\n    </p>\n   </footer>\n  </div>\n </body>\n</html>'b'<!-- From index.tpl.html - Grunt task index -->\n<!DOCTYPE html>\n<html lang="en" xmlns="http://www.w3.org/1999/xhtml">\n <head>\n  <style type="text/css">\n   @charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}\n  </style>\n  <meta charset="utf-8"/>\n  <title>\n   Angular Timer, a simple, inter-operable AngularJS directive\n  </title>\n  <meta content="width=device-width, initial-scale=1.0" name="viewport"/>\n  <!-- compiled CSS -->\n  <link href="bower_components/bootstrap/docs/assets/css/bootstrap.css" rel="stylesheet" type="text/css"/>\n  <link href="bower_components/bootstrap/docs/assets/css/bootstrap-responsive.css" rel="stylesheet" type="text/css"/>\n  <link href="docs/css/docs.css" rel="stylesheet" type="text/css"/>\n  <link href="docs/css/prettify.css" rel="stylesheet" type="text/css"/>\n  <!-- compiled JavaScript -->\n  <script src="dist/assets/js/angular-timer-bower.js" type="text/javascript">\n  </script>\n  <script src="dist/assets/js/angular-timer-all.min.js" type="text/javascript">\n  </script>\n  <script src="docs/docs.js" type="text/javascript">\n  </script>\n  <script src="docs/prettify.js" type="text/javascript">\n  </script>\n  <script src="docs/application.js" type="text/javascript">\n  </script>\n </head>\n <body class="ng-scope" ng-app="timer-demo" ng-controller="TimerDemoController">\n  <!-- ngInclude: undefined -->\n  <ng-include class="ng-scope" onload="linkAnchors();" src="\'navbar.html\'">\n   <div class="navbar navbar-inverse navbar-fixed-top ng-scope">\n    <div class="navbar-inner">\n     <div id="fork-me">\n      <a href="https://github.com/siddii/angular-timer/fork" title="Fork me on GitHub">\n       <img alt="Fork me on GitHub" src="docs/images/forkme.png"/>\n      </a>\n     </div>\n     <div class="container">\n      <button class="btn btn-navbar" data-target=".nav-collapse" data-toggle="collapse" type="button">\n       <span class="icon-bar">\n       </span>\n       <span class="icon-bar">\n       </span>\n       <span class="icon-bar">\n       </span>\n      </button>\n      <a class="brand" href="index.html">\n       Angular Timer\n      </a>\n      <div class="nav-collapse collapse">\n       <ul class="nav">\n        <li class="dropdown">\n         <a class="dropdown-toggle" data-toggle="dropdown" href="#">\n          Examples\n         </a>\n         <ul class="dropdown-menu">\n          <li>\n           <a href="index.html#basic-timer">\n            Basic Example\n           </a>\n          </li>\n          <li>\n           <a href="index.html#clock-timer">\n            Clock Timer\n           </a>\n          </li>\n          <li>\n          </li>\n          <li>\n           <a href="index.html#clock-timer-i18n">\n            Clock Timer with i18n\n           </a>\n          </li>\n          <li>\n           <a href="index.html#timer-with-start-time">\n            Timer with start time\n           </a>\n          </li>\n          <li>\n           <a href="index.html#progressbar-timer">\n            Progressbar Timer\n           </a>\n          </li>\n          <li>\n           <a href="index.html#countdown-timer">\n            Countdown Timer\n           </a>\n          </li>\n          <li>\n           <a href="index.html#auto-start-false-timer">\n            Timer with\n            <em>\n             auto-start=false\n            </em>\n           </a>\n          </li>\n         </ul>\n        </li>\n        <li ng-non-bindable="">\n         <a href="index.html#markup">\n          &lt;timer/&gt;\n         </a>\n        </li>\n        <li class="dropdown">\n         <a class="dropdown-toggle" data-toggle="dropdown" href="#">\n          Examples\n         </a>\n         <ul class="dropdown-menu">\n          <li>\n           <a href="examples.html#angularjs-single-timer">\n            AngularJS - Single Timer\n           </a>\n          </li>\n          <li>\n           <a href="examples.html#angularjs-multiple-timer">\n            AngularJS - Multiple Timers\n           </a>\n          </li>\n          <li>\n           <a href="examples.html#angularjs-polling-timer">\n            AngularJS - Polling Timers\n           </a>\n          </li>\n          <li>\n           <a href="examples.html#jquery-timer">\n            jQuery\n           </a>\n          </li>\n          <li>\n           <a href="examples.html#plain-javascript">\n            Plain JavaScript\n           </a>\n          </li>\n         </ul>\n        </li>\n        <li class="dropdown">\n         <a class="dropdown-toggle" data-toggle="dropdown" href="#">\n          Code\n         </a>\n         <ul class="dropdown-menu">\n          <li>\n           <a href="https://github.com/siddii/angular-timer" target="_new">\n            View on Github\n           </a>\n          </li>\n          <li>\n           <a href="index.html#bower">\n            Install using Bower\n           </a>\n          </li>\n          <li>\n           <a href="https://github.com/siddii/angular-timer/archive/master.zip" target="_new">\n            Download\n           </a>\n          </li>\n          <li>\n           <a href="index.html#contribute">\n            Contribute\n           </a>\n          </li>\n         </ul>\n        </li>\n       </ul>\n      </div>\n     </div>\n    </div>\n   </div>\n  </ng-include>\n  <div class="container page-content">\n   <section id="introduction">\n    <h1>\n     Introduction\n    </h1>\n    <p>\n     Directives in\n     <a href="http://angularjs.org" target="_new">\n      AngularJS\n     </a>\n     is a powerful way of building\n            reusable\n     <em>\n      UI components\n     </em>\n     . This simple project will serve as a sample/reference implementation\n            demonstrating its flexibilities by making it\n     <em>\n      inter-operable\n     </em>\n     across runtime (AngularJS, plain simple\n            JavaScript &amp; jQuery)\n    </p>\n    <p>\n     For basic understanding of how directives work in AngularJS, please head to this\n     <a href="http://docs.angularjs.org/guide/directive" target="_new">\n      developer guide\n     </a>\n     .\n    </p>\n   </section>\n   <section id="basic-timer">\n    <h3>\n     Basic Example\n    </h3>\n    <div class="bs-docs-example ng-scope" timer-controls="">\n     <p>\n      This simple directive\n      <code>\n       &lt;timer /&gt;\n      </code>\n      will start the timer with the default option of\n                ticking every 1 millisecond\n     </p>\n     <h3>\n      <timer class="ng-isolate-scope">\n       <span class="ng-binding ng-scope">\n        2206\n       </span>\n      </timer>\n     </h3>\n     <button class="btn" ng-click="timerStart()" type="button">\n      Start\n     </button>\n     <button class="btn" ng-click="timerStop()" type="button">\n      Stop\n     </button>\n    </div>\n   </section>\n   <section id="start-time-and-auto-start-set">\n    <h3>\n     Timer with start time and auto start set\n    </h3>\n    <div class="bs-docs-example">\n     <p>\n      This will start a timer with 1410914940000 milliseconds and stopped\n     </p>\n     <h3>\n      <timer autostart="false" class="ng-isolate-scope" start-time="1410914940000">\n       <span class="ng-binding ng-scope">\n        81655506951\n       </span>\n      </timer>\n     </h3>\n    </div>\n   </section>\n   <section id="clock-timer">\n    <h3>\n     Timer with hours, minutes &amp; seconds\n    </h3>\n    <div class="bs-docs-example ng-scope" timer-controls="">\n     <p>\n      This markup\n      <code ng-non-bindable="">\n       &lt;timer interval="1000"&gt;{{hours}} hour{{hoursS}}, {{minutes}}\n                minute{{minutesS}}, {{seconds}} second{{secondsS}}.&lt;/timer&gt;\n      </code>\n      will run the clock timer ticking every second\n     </p>\n     <h3>\n      <timer class="ng-binding ng-isolate-scope" interval="1000">\n       <span class="ng-binding ng-scope">\n        0 hours, 0 minutes, 2 seconds.\n       </span>\n      </timer>\n     </h3>\n     <button class="btn ng-binding" ng-click="timerToggle()" type="button">\n      Stop\n     </button>\n    </div>\n   </section>\n   <section id="clock-timer-i18n">\n    <h3>\n     Timer i18n\n    </h3>\n    <div class="bs-docs-example">\n     <p>\n      This markup\n      <code ng-non-bindable="">\n       &lt;timer interval="1000" language="fr" &gt;{{yearUnit}}\n      </code>\n      will run the clock timer ticking every second.\n     </p>\n     <p>\n      You can use a controller variable as the language attribut or a string. If a scope variable is used, the value will be watched,\n      <strong>\n       that is to say if your app language changes, the change will also affects the timer.\n      </strong>\n     </p>\n     <p>\n      Based on\n      <a href="https://github.com/EvanHahn/HumanizeDuration.js">\n       HumanizeDuration\n      </a>\n      with more than 16 languages available.\n     </p>\n     <h3>\n      Spanish\n     </h3>\n     <div id="spanish">\n      <h4>\n       Year max unit time :\n       <timer class="ng-binding ng-isolate-scope" interval="1000" language="es">\n        <span class="ng-binding ng-scope">\n         2 segundos\n        </span>\n       </timer>\n      </h4>\n      <h4>\n       Hour max unit time:\n       <timer class="ng-binding ng-isolate-scope" interval="1000" language="es">\n        <span class="ng-binding ng-scope">\n         2 segundos\n        </span>\n       </timer>\n      </h4>\n      <h4>\n       Second max unit time:\n       <timer class="ng-binding ng-isolate-scope" interval="1000" language="es">\n        <span class="ng-binding ng-scope">\n         2 segundos\n        </span>\n       </timer>\n      </h4>\n     </div>\n     <h3>\n      French\n     </h3>\n     <div id="french">\n      <h4>\n       Year max unit time :\n       <timer class="ng-binding ng-isolate-scope" interval="1000" language="fr">\n        <span class="ng-binding ng-scope">\n         2 secondes\n        </span>\n       </timer>\n      </h4>\n      <h4>\n       Hour max unit time:\n       <timer class="ng-binding ng-isolate-scope" interval="1000" language="fr">\n        <span class="ng-binding ng-scope">\n         2 secondes\n        </span>\n       </timer>\n      </h4>\n      <h4>\n       Second max unit time:\n       <timer class="ng-binding ng-isolate-scope" interval="1000" language="fr">\n        <span class="ng-binding ng-scope">\n         2 secondes\n        </span>\n       </timer>\n      </h4>\n     </div>\n     <h3>\n      Available units\n     </h3>\n     <ul>\n      <li>\n       <strong>\n        secondUnit\n       </strong>\n       : 8\xc2\xa0164\xc2\xa0816 seconds\n      </li>\n      <li>\n       <strong>\n        minuteUnit\n       </strong>\n       : 136\xc2\xa0089 minutes, 16 seconds\n      </li>\n      <li>\n       <strong>\n        hourUnit\n       </strong>\n       : 18 126 hours,9 minutes, 16 seconds\n      </li>\n      <li>\n       <strong>\n        dayUnit\n       </strong>\n       :  755 days, 6 hours, 9 minutes, 16 seconds\n      </li>\n      <li>\n       <strong>\n        monthUnit\n       </strong>\n       : 25 month, 5 days, 6 hours, 9 minutes, 16 seconds\n      </li>\n      <li>\n       <strong>\n        yearUnit\n       </strong>\n       : 2 years, 1 month, 5 days, 6 hours, 9 minutes, 16 seconds\n      </li>\n     </ul>\n    </div>\n   </section>\n   <section id="clock-timer-leading-zero">\n    <h3>\n     Timer with leading zero\n    </h3>\n    <div class="bs-docs-example ng-scope" timer-controls="">\n     <p>\n      This markup\n      <code ng-non-bindable="">\n       &lt;timer interval="1000"&gt;{{hhours}} hour{{hhoursS}}, {{mminutes}}\n                minute{{minutesS}}, {{sseconds}} second{{secondsS}}.&lt;/timer&gt;\n      </code>\n      will run the clock timer ticking every second with an additional zero at the beginning if unit is smaller than 10\n     </p>\n     <h3>\n      <timer class="ng-binding ng-isolate-scope" interval="1000">\n       <span class="ng-binding ng-scope">\n        00 hours, 00 minutes, 02 seconds\n       </span>\n      </timer>\n     </h3>\n     <button class="btn ng-binding" ng-click="timerToggle()" type="button">\n      Stop\n     </button>\n    </div>\n   </section>\n   <section id="timer-with-start-time">\n    <h3>\n     Timer initialised with some predefined start time.\n    </h3>\n    <div class="bs-docs-example ng-scope" timer-controls="">\n     <p>\n      Following is the timer clock setting for the days, hours, minutes &amp; seconds elapsed since\n      <b class="ng-binding">\n       January 1, 2017 (GMT-6)\n      </b>\n     </p>\n     <p class="muted ng-binding">\n      (01 Jan 2017 06:00:00 GMT = 1483246800000 milliseconds)\n     </p>\n     <code ng-non-bindable="">\n      &lt;timer start-time="{{startTime}}"&gt;{{days}} days, {{hours}} hours, {{minutes}} minutes, {{seconds}} seconds.&lt;/timer&gt;\n     </code>\n     <h3>\n      <timer class="ng-binding ng-isolate-scope" start-time="startTime">\n       <span class="ng-binding ng-scope">\n        107 days, 21 hours, 54 minutes, 9 seconds.\n       </span>\n      </timer>\n     </h3>\n     <button class="btn ng-binding" ng-click="timerToggle()" type="button">\n      Stop\n     </button>\n    </div>\n   </section>\n   <section id="timer-with-end-time">\n    <h3>\n     Timer initialised with some predefined end time.\n    </h3>\n    <div class="bs-docs-example">\n     <p>\n      Following is the countdown timer setting for the days, hours, minutes &amp; seconds to\n      <b class="ng-binding">\n       January 1, 2018 (GMT)\n      </b>\n     </p>\n     <p class="muted ng-binding">\n      (01 Jan 2018 00:00:00 GMT = 1514782800000 milliseconds)\n     </p>\n     <code ng-non-bindable="">\n      &lt;timer end-time="{{endTime}}"&gt;{{days}} days, {{hours}} hours, {{minutes}} minutes, {{seconds}} seconds.&lt;/timer&gt;\n     </code>\n     <h3>\n      <timer class="ng-binding ng-isolate-scope" end-time="endTime">\n       <span class="ng-binding ng-scope">\n        257 days, 2 hours, 5 minutes, 50 seconds.\n       </span>\n      </timer>\n     </h3>\n    </div>\n   </section>\n   <section id="progressbar-timer">\n    <h3>\n     Progressbar Timer\n    </h3>\n    <div class="bs-docs-example">\n     <p>\n      Timer directive along with\n      <a href="http://twitter.github.io/bootstrap/components.html#progress" target="_new">\n       Twitter Bootstrap\'s Progressbar\n      </a>\n      will set the timer\n                on Progressbar control.\n     </p>\n     <code ng-non-bindable="">\n      &lt;timer countdown="30" interval="1000"&gt;&lt;div class="progress\n                progress-striped active {{displayProgressActive}}"style="height: 30px;"&gt;\n     </code>\n     <code ng-non-bindable="">\n      Remaining time : {{countdown}} second{{secondsS}} ({{progressBar}}%). Activity? {{displayProgressActive}}\n     </code>\n     <code ng-non-bindable="">\n      &lt;div class="bar" style="min-width: 2em;width: {{progressBar}}%;"&gt;&lt;/div&gt;\n     </code>\n     <code ng-non-bindable="">\n      &lt;/div&gt;&lt;/timer&gt;\n     </code>\n     <h3>\n      <timer class="ng-binding ng-isolate-scope" countdown="30" id="countdown" interval="1000">\n       <span class="ng-binding ng-scope">\n        Remaining time : 27 seconds (6.7%). Activity? active\n       </span>\n       <div class="progress progress-striped active" style="height: 30px;">\n        <div class="bar ng-binding" style="min-width: 2em; height: 30px; width: 6.7%;">\n         6.7%\n        </div>\n       </div>\n      </timer>\n     </h3>\n     <code ng-non-bindable="">\n      &lt;timer end-time="1451628000000" interval="1000"&gt;&lt;div class="progress\n                progress-striped active {{displayProgressActive}}"style="height: 30px;"&gt;\n     </code>\n     <code ng-non-bindable="">\n      &lt;div class="bar" style="min-width: 2em;width: {{progressBar}}%;"&gt;&lt;/div&gt;\n     </code>\n     <code ng-non-bindable="">\n      &lt;/div&gt;&lt;/timer&gt;\n     </code>\n     <h3>\n      <timer class="ng-binding ng-isolate-scope" end-time="1451628000000" interval="1000">\n       <span class="ng-binding ng-scope">\n        (%). Progress bar activity : active\n       </span>\n       <div class="progress progress-striped active" style="height: 30px;">\n        <div class="bar ng-binding" style="min-width: 2em; width: %;">\n         %\n        </div>\n       </div>\n      </timer>\n     </h3>\n     <button class="btn" ng-click="timerStart()" type="button">\n      Start\n     </button>\n     <button class="btn" ng-click="timerStop()" type="button">\n      Stop\n     </button>\n    </div>\n   </section>\n   <section id="countdown-timer">\n    <h3>\n     Countdown Timer\n    </h3>\n    <div class="bs-docs-example ng-scope" timer-controls="">\n     <p>\n      The countdown timer\n      <code ng-non-bindable="">\n       &lt;timer interval="1000" countdown="100"&gt;{{countdown}}&lt;/timer&gt;\n      </code>\n      will start its countdown from 100 until it reaches 0 by ticking every second\n     </p>\n     <h3>\n      <timer class="ng-binding ng-isolate-scope" countdown="100" interval="1000">\n       <span class="ng-binding ng-scope">\n        97\n       </span>\n      </timer>\n     </h3>\n     <button class="btn" ng-click="timerAddCDSeconds(10)" type="button">\n      Add 10 Seconds\n     </button>\n    </div>\n   </section>\n   <section id="auto-start-false-timer">\n    <h3>\n     Timer with\n     <em>\n      autostart = false\n     </em>\n    </h3>\n    <div class="bs-docs-example ng-scope" timer-controls="">\n     <p>\n      Click on the start button to start the timer.\n      <code ng-non-bindable="">\n       &lt;timer autostart="false" interval="1000"&gt;{{seconds}}&lt;/timer&gt;\n      </code>\n     </p>\n     <h3>\n      <timer autostart="false" class="ng-binding ng-isolate-scope" interval="1000">\n       <span class="ng-binding ng-scope">\n        0\n       </span>\n      </timer>\n     </h3>\n     <button class="btn ng-binding" ng-click="timerToggle()" type="button">\n      Start\n     </button>\n    </div>\n   </section>\n   <section id="plural-unit-timer">\n    <h3>\n     Plural / Singular units\n    </h3>\n    <div class="bs-docs-example">\n     <p>\n      Two stopped countdown timers to illustrate how to handle pluralization of time units.\n      <code ng-non-bindable="">\n       &lt;timer autostart="false" countdown="90061"&gt;{{days}} day{{daysS}}, {{hours}} hour{{hoursS}}, {{minutes}} minute{{minutesS}}, {{seconds}} second{{secondsS}}.&lt;/timer&gt;\n      </code>\n     </p>\n     <h3 class="singular-counter">\n      <timer autostart="false" class="ng-binding ng-isolate-scope" countdown="90061">\n       <span class="ng-binding ng-scope">\n        1 day, 1 hour, 1 minute, 1 second.\n       </span>\n      </timer>\n     </h3>\n     <code ng-non-bindable="">\n      &lt;timer autostart="false" countdown="190061"&gt;{{days}} day{{daysS}}, {{hours}} hour{{hoursS}}, {{minutes}} minute{{minutesS}}, {{seconds}} second{{secondsS}}.&lt;/timer&gt;\n     </code>\n     <h3 class="plural-counter">\n      <timer autostart="false" class="ng-binding ng-isolate-scope" countdown="190061">\n       <span class="ng-binding ng-scope">\n        2 days, 4 hours, 47 minutes, 41 seconds.\n       </span>\n      </timer>\n     </h3>\n    </div>\n   </section>\n   <section id="max-time-unit-countdown-timer">\n    <h3>\n     Countdown time display according to specified\n     <em>\n      max-time-unit\n     </em>\n    </h3>\n    <div class="bs-docs-example">\n     <p>\n      This markup will display countdown time in minute and seconds only.  This attribute can be applied to regular clock timer as well.\n      <code ng-non-bindable="">\n       &lt;timer countdown="10041" max-time-unit="\'minute\'" interval="1000"&gt;{{mminutes}} minute{{minutesS}}, {{sseconds}} second{{secondsS}}&lt;/timer&gt;\n      </code>\n     </p>\n     <p class="muted">\n      countdown Time with max time unit option - year\n     </p>\n     <h3 class="WithMaxTimeUnitAsYear">\n      <timer class="ng-binding ng-isolate-scope" countdown="100410000" interval="1000" max-time-unit="\'year\'">\n       <span class="ng-binding ng-scope">\n        03 years, 02 months, 22 days, 03 hours, 39 minutes, 58 seconds\n       </span>\n      </timer>\n     </h3>\n     <p class="muted">\n      countdown Time with max time unit option - minute\n     </p>\n     <h3 class="WithMaxTimeUnitAsMinute">\n      <timer class="ng-binding ng-isolate-scope" countdown="10041" interval="1000" max-time-unit="\'minute\'">\n       <span class="ng-binding ng-scope">\n        167 minutes, 19 seconds\n       </span>\n      </timer>\n     </h3>\n     <p class="muted">\n      countdown Time with max time unit option - second\n     </p>\n     <h3 class="WithMaxTimeUnitAsSecond">\n      <timer class="ng-binding ng-isolate-scope" countdown="10041" interval="1000" max-time-unit="\'second\'">\n       <span class="ng-binding ng-scope">\n        00 minutes, 10039 seconds\n       </span>\n      </timer>\n     </h3>\n     <p class="muted">\n      countdown Time without max time unit option - minute\n     </p>\n     <h3 class="WithoutMaxTimeUnit">\n      <timer class="ng-binding ng-isolate-scope" countdown="10041" interval="1000">\n       <span class="ng-binding ng-scope">\n        00 days, 02 hours, 47 minutes, 19 seconds\n       </span>\n      </timer>\n     </h3>\n    </div>\n   </section>\n   <section id="finish-callback-timer">\n    <h3>\n     Countdown Finished Callback\n    </h3>\n    <div class="bs-docs-example">\n     <p>\n      A countdown timer that updates a value once the callback is reached\n      <code ng-non-bindable="">\n       &lt;timer countdown="3" interval="1000" finish-callback="callbackTimer.finished()"&gt;{{seconds}} second{{secondsS}}&lt;/timer&gt;\n      </code>\n     </p>\n     <h3 class="counter">\n      <timer class="ng-binding ng-isolate-scope" countdown="3" finish-callback="callbackTimer.finished()" interval="1000">\n       <span class="ng-binding ng-scope">\n        1 second\n       </span>\n      </timer>\n     </h3>\n     Timer:\n     <span class="timer-status ng-binding">\n      Running\n     </span>\n     Callbacks:\n     <span class="timer-callbacks ng-binding">\n      0\n     </span>\n    </div>\n   </section>\n   <section id="markup">\n    <h3>\n     Markup\n    </h3>\n    <p>\n     Timer directive can be declared using following options. By default, it will display milliseconds inside\n     <code>\n      span\n     </code>\n     tag. It can also take\n     <em>\n      template\n     </em>\n     string to display user-defined formats.\n    </p>\n    <div class="bs-docs-example">\n     <p>\n      <code ng-nonbindable="">\n       &lt;timer interval="1000" /&gt;\n      </code>\n     </p>\n    </div>\n    <div class="bs-docs-example">\n     <p>\n      <code ng-non-bindable="">\n       &lt;timer interval="1000"&gt;{{hours}} hours, {{minutes}} minutes,\n                    {{seconds}} seconds, {{millis}} milliseconds.&lt;/timer&gt;\n      </code>\n     </p>\n    </div>\n    <h4>\n     Attributes\n    </h4>\n    <table class="table table-bordered table-striped">\n     <thead>\n      <tr>\n       <th>\n        Name\n       </th>\n       <th>\n        Required\n       </th>\n       <th>\n        Default value\n       </th>\n      </tr>\n     </thead>\n     <tbody>\n      <tr>\n       <td>\n        interval\n       </td>\n       <td>\n        false\n       </td>\n       <td>\n        1 millisecond\n       </td>\n      </tr>\n      <tr>\n       <td>\n        autostart\n        <br/>\n        <em>\n         Formerly called \'auto-start\'. Please see this\n         <a href="https://github.com/siddii/angular-timer/issues/14" target="_new">\n          issue\n         </a>\n        </em>\n       </td>\n       <td>\n        false\n       </td>\n       <td>\n        true\n       </td>\n      </tr>\n      <tr>\n       <td>\n        countdown\n       </td>\n       <td>\n        false\n       </td>\n       <td>\n       </td>\n      </tr>\n      <tr>\n       <td>\n        start-time\n       </td>\n       <td>\n        false\n       </td>\n       <td>\n        starts the timer with predefined time (in milliseconds).\n       </td>\n      </tr>\n      <tr>\n       <td>\n        end-time\n       </td>\n       <td>\n        false\n       </td>\n       <td>\n        Sets the countdown based on predefined end time (in milliseconds).\n       </td>\n      </tr>\n      <tr>\n       <td>\n        max-time-unit\n       </td>\n       <td>\n        false\n       </td>\n       <td>\n        no default value.   But you can give value,  \'minute\', \'second\', or \'hour\'.\n       </td>\n      </tr>\n      <tr>\n       <td>\n        language\n       </td>\n       <td>\n        false\n       </td>\n       <td>\n        \'en\' for English. Please see\n        <a href="https://github.com/EvanHahn/HumanizeDuration.js#supported-languages" target="_blank">\n         supported languages\n        </a>\n        .\n       </td>\n      </tr>\n     </tbody>\n    </table>\n    <h4>\n     Methods\n    </h4>\n    <p>\n     Following DOM methods can be invoked to\n     <em>\n      timer\n     </em>\n     . Append to\n     <code>\n      timer-\n     </code>\n     for scope based\n            events when calling from AngularJS controllers.\n    </p>\n    <table class="table table-bordered table-striped">\n     <thead>\n      <tr>\n       <th>\n        Method name\n       </th>\n       <th>\n        Description\n       </th>\n      </tr>\n     </thead>\n     <tbody>\n      <tr>\n       <td>\n        start\n       </td>\n       <td>\n        Starts the timer\n       </td>\n      </tr>\n      <tr>\n       <td>\n        stop\n       </td>\n       <td>\n        Stops the timer\n       </td>\n      </tr>\n      <tr>\n       <td>\n        clear\n       </td>\n       <td>\n        Same as\n        <i>\n         stop\n        </i>\n        . But, without the event being triggered\n       </td>\n      </tr>\n      <tr>\n       <td>\n        resume\n       </td>\n       <td>\n        Resumes the timer. Will NOT reset the start time\n       </td>\n      </tr>\n      <tr>\n       <td>\n        addCDSeconds\n       </td>\n       <td>\n        Add\n        <i>\n         seconds\n        </i>\n        to running countdown\n       </td>\n      </tr>\n     </tbody>\n    </table>\n    <h4>\n     Events\n    </h4>\n    <table class="table table-bordered table-striped">\n     <thead>\n      <tr>\n       <th>\n        Event name\n       </th>\n       <th>\n        Description\n       </th>\n      </tr>\n     </thead>\n     <tbody>\n      <tr>\n       <td>\n        timer-tick\n       </td>\n       <td>\n        Tick event that gets emitted for every timer tick for specified interval. Please refer to\n        <a href="examples.html#angularjs-polling-timer">\n         Polling Timer\n        </a>\n        example for its usage.\n       </td>\n      </tr>\n      <tr>\n       <td>\n        timer-stopped\n       </td>\n       <td>\n        Tick event that gets emitted when the timer stops. Please refer to\n        <a href="examples.html#angularjs-single-timer">\n         Single Timer\n        </a>\n        example for its usage.\n       </td>\n      </tr>\n     </tbody>\n    </table>\n   </section>\n   <section id="bower">\n    <h3>\n     Install using Bower\n    </h3>\n    <p>\n     <code>\n      bower install angular-timer\n     </code>\n    </p>\n   </section>\n   <section id="contribute">\n    <h3>\n     Contributions welcome!\n    </h3>\n    <p>\n     We welcome any or all kinds of contributions! Please submit\n     <a href="https://github.com/siddii/angular-timer/pulls" target="_new">\n      pull requests\n     </a>\n     or create\n     <a href="https://github.com/siddii/angular-timer/issues" target="_new">\n      issues\n     </a>\n     to contribute to this\n            project :)\n    </p>\n   </section>\n   <footer>\n    <p>\n     \xc2\xa9 Siddique Hameed 2013\n    </p>\n   </footer>\n  </div>\n </body>\n</html>'