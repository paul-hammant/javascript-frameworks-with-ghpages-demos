b'<!DOCTYPE html>\n<html lang="en" xmlns="http://www.w3.org/1999/xhtml">\n <head>\n  <title>\n   Vue.js Radial Progress Bar Demo\n  </title>\n  <style>\n   html, body {\n        background: #4e4f4f;\n        text-align: center;\n        color: #FFF;\n        font-family: \'Open Sans\', Helvetica, Verdana, sans-serif;\n        font-size: 16px;\n      }\n      #app {\n        display: flex;\n        align-items: center;\n      }\n      .radial-progress-display {\n        flex: 1;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n      }\n      .radial-progress-controls {\n        display: flex;\n        flex: 1;\n      }\n      .controls {\n        margin-top: 10px;\n        text-align: center;\n      }\n      .controls button {\n        border-radius: 5px;\n        color: #fff;\n        padding: 13px 20px;\n        background: #ff9f37;\n        border: 0;\n        outline: 0;\n        line-height: 1.3em;\n        text-transform: uppercase;\n        cursor: pointer;\n        box-sizing: border-box;\n      }\n      .controls button:hover {\n        background: #ff9f37;\n      }\n      p {\n        margin: 5px 0;\n      }\n      .visible-collapse {\n        visibility: collapse;\n      }\n      input {\n        margin: 0;\n        padding: 8px;\n        border: 1px solid #ccc;\n        border-radius: 5px;\n      }\n      input, button {\n        font: inherit;\n        margin-bottom: 10px;\n      }\n      .text-left {\n        text-align: left;\n      }\n      .text-right {\n        text-align: right;\n      }\n      label {\n        margin-right: 15px;\n      }\n      .spc-b {\n        margin-bottom: 30px;\n      }\n  </style>\n  <link href="https://fonts.googleapis.com/css?family=Open+Sans" rel="stylesheet"/>\n  <script async="" defer="" src="https://buttons.github.io/buttons.js">\n  </script>\n  <style type="text/css">\n   .radial-progress-container{position:relative}.radial-progress-inner{top:0;right:0;bottom:0;left:0;position:absolute;border-radius:50%;margin:0 auto;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center}\n  </style>\n </head>\n <body>\n  <h1>\n   Vue.js Radial Progress Bar\n  </h1>\n  <p class="spc-b">\n   Customizable radial progress bar component with gradients and animations!\n  </p>\n  <div class="spc-b">\n   <iframe allowtransparency="true" frameborder="0" scrolling="no" src="https://buttons.github.io/buttons.html#href=https%3A%2F%2Fgithub.com%2Fwyzant-dev%2Fvue-radial-progress&amp;text=View%20on%20Github&amp;data-count-api=%2Frepos%2Fwyzant-dev%2Fvue-radial-progress%23stargazers_count&amp;data-count-href=%2Fwyzant-dev%2Fvue-radial-progress%2Fstargazers&amp;data-count-aria-label=%23%20stargazers%20on%20GitHub&amp;data-style=mega&amp;data-icon=&amp;aria-label=Star%20wyzant-dev%2Fvue-radial-progress%20on%20GitHub" style="width: 169px; height: 28px; border: none;">\n   </iframe>\n  </div>\n  <div id="app">\n   <div class="radial-progress-display">\n    <div class="radial-progress-container" style="height: 300px; width: 300px;">\n     <div class="radial-progress-inner" style="width: 280px;">\n      <p>\n       Total steps: 6\n      </p>\n      <p>\n       Completed steps: 1\n      </p>\n     </div>\n     <svg class="radial-progress-bar" height="300" version="1.1" width="300" xmlns="http://www.w3.org/2000/svg">\n      <defs>\n       <radialgradient cx="0.5" cy="0.5" fx="0.75" fy="0.9330127018922193" id="radial-gradient" r="0.65">\n        <stop offset="30%" stop-color="#bbff42">\n        </stop>\n        <stop offset="100%" stop-color="#429321">\n        </stop>\n       </radialgradient>\n      </defs>\n      <circle cx="150" cy="150" fill="transparent" r="140" stroke="#323232" stroke-dasharray="879.645943005142" stroke-dashoffset="0" stroke-linecap="round" style="height: 300px; width: 300px; stroke-width: 10px;">\n      </circle>\n      <circle cx="150" cy="150" fill="transparent" r="140" stroke="url(#radial-gradient)" stroke-dasharray="879.645943005142" stroke-dashoffset="879.645943005142" stroke-linecap="round" style="height: 300px; width: 300px; stroke-width: 10px; stroke-dashoffset: 733.038; transition: stroke-dashoffset 1000ms linear;" transform="rotate(270, 150,150)">\n      </circle>\n     </svg>\n    </div>\n    <!--v-component-->\n    <div class="controls">\n     <button>\n      Prev\n     </button>\n     <button>\n      Next\n     </button>\n    </div>\n   </div>\n   <table class="radial-progress-controls text-right">\n    <tbody>\n     <tr>\n      <td>\n       <label for="total-steps">\n        Total steps\n       </label>\n      </td>\n      <td>\n       <input id="total-steps" placeholder="Total steps" type="number" value="6"/>\n      </td>\n     </tr>\n     <tr>\n      <td>\n       <label for="animate-speed">\n        Animate speed\n       </label>\n      </td>\n      <td>\n       <input id="animate-speed" placeholder="Animate speed" type="number" value="1000"/>\n      </td>\n     </tr>\n     <tr>\n      <td>\n       <label for="diameter">\n        Diameter\n       </label>\n      </td>\n      <td>\n       <input id="diameter" placeholder="Diameter" type="number" value="300"/>\n      </td>\n     </tr>\n     <tr>\n      <td>\n       <label for="stroke-width">\n        Stoke width\n       </label>\n      </td>\n      <td>\n       <input id="stroke-width" placeholder="Stroke width" type="number" value="10"/>\n      </td>\n     </tr>\n     <tr>\n      <td>\n       <label for="timing-function">\n        Timing function\n       </label>\n      </td>\n      <td>\n       <input id="timing-function" placeholder="Timing function" type="text" value="linear"/>\n      </td>\n     </tr>\n     <tr>\n      <td>\n       <label for="start-color">\n        Start color\n       </label>\n      </td>\n      <td>\n       <input id="start-color" placeholder="Start color" type="color" value="#bbff42"/>\n      </td>\n     </tr>\n     <tr>\n      <td>\n       <label for="stop-color">\n        Stop color\n       </label>\n      </td>\n      <td>\n       <input id="stop-color" placeholder="Stop color" type="color" value="#429321"/>\n      </td>\n     </tr>\n     <tr>\n      <td>\n       <label for="inner-stroke-color">\n        Inner stroke color\n       </label>\n      </td>\n      <td>\n       <input id="inner-stroke-color" placeholder="Inner stroke color" type="color" value="#323232"/>\n      </td>\n     </tr>\n    </tbody>\n   </table>\n   <script src="https://cdnjs.cloudflare.com/ajax/libs/vue/1.0.1/vue.min.js">\n   </script>\n   <script src="./dist/vue-radial-progress.min.js">\n   </script>\n   <script>\n    Vue.config.debug = true\n\n      new Vue({\n        el: \'#app\',\n        components: {\n          RadialProgressBar: RadialProgressBar,\n        },\n        data () {\n          return {\n            completedSteps: 1,\n            totalSteps: 6,\n            animateSpeed: 1000,\n            diameter: 300,\n            strokeWidth: 10,\n            startColor: \'#bbff42\',\n            stopColor: \'#429321\',\n            innerStrokeColor: \'#323232\',\n            timingFunc: \'linear\'\n          }\n        },\n        methods: {\n          timingFuncChanged(e) {\n            this.timingFunc = e.target.value\n          },\n\n          innerStrokeColorChanged (e) {\n            this.innerStrokeColor = e.target.value\n          },\n\n          stopColorChanged (e) {\n            this.stopColor = e.target.value\n          },\n\n          startColorChanged (e) {\n            this.startColor = e.target.value\n          },\n\n          strokeWidthChanged (e) {\n            e.preventDefault()\n            const val = e.target.value\n\n            if (!val || isNaN(val)) {\n              return false\n            }\n\n            this.strokeWidth = parseInt(val)\n          },\n\n          diameterChanged (e) {\n            e.preventDefault()\n            const val = e.target.value\n\n            if (!val || isNaN(val)) {\n              return false\n            }\n\n            this.diameter = parseInt(val)\n          },\n\n          animateSpeedChanged (e) {\n            e.preventDefault()\n            const val = e.target.value\n\n            if (!val || isNaN(val)) {\n              return false\n            }\n\n            this.animateSpeed = parseInt(val)\n          },\n\n          totalStepsChanged (e) {\n            e.preventDefault()\n            const val = e.target.value\n\n            if (!val || isNaN(val)) {\n              return false\n            }\n\n            this.totalSteps = parseInt(val)\n          },\n          nextStep () {\n            this.completedSteps += 1\n          },\n          prevStep () {\n            this.completedSteps -= 1\n          }\n        }\n      })\n   </script>\n  </div>\n </body>\n</html>'b'<!DOCTYPE html>\n<html lang="en" xmlns="http://www.w3.org/1999/xhtml">\n <head>\n  <title>\n   Vue.js Radial Progress Bar Demo\n  </title>\n  <style>\n   html, body {\n        background: #4e4f4f;\n        text-align: center;\n        color: #FFF;\n        font-family: \'Open Sans\', Helvetica, Verdana, sans-serif;\n        font-size: 16px;\n      }\n      #app {\n        display: flex;\n        align-items: center;\n      }\n      .radial-progress-display {\n        flex: 1;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n      }\n      .radial-progress-controls {\n        display: flex;\n        flex: 1;\n      }\n      .controls {\n        margin-top: 10px;\n        text-align: center;\n      }\n      .controls button {\n        border-radius: 5px;\n        color: #fff;\n        padding: 13px 20px;\n        background: #ff9f37;\n        border: 0;\n        outline: 0;\n        line-height: 1.3em;\n        text-transform: uppercase;\n        cursor: pointer;\n        box-sizing: border-box;\n      }\n      .controls button:hover {\n        background: #ff9f37;\n      }\n      p {\n        margin: 5px 0;\n      }\n      .visible-collapse {\n        visibility: collapse;\n      }\n      input {\n        margin: 0;\n        padding: 8px;\n        border: 1px solid #ccc;\n        border-radius: 5px;\n      }\n      input, button {\n        font: inherit;\n        margin-bottom: 10px;\n      }\n      .text-left {\n        text-align: left;\n      }\n      .text-right {\n        text-align: right;\n      }\n      label {\n        margin-right: 15px;\n      }\n      .spc-b {\n        margin-bottom: 30px;\n      }\n  </style>\n  <link href="https://fonts.googleapis.com/css?family=Open+Sans" rel="stylesheet"/>\n  <script async="" defer="" src="https://buttons.github.io/buttons.js">\n  </script>\n  <style type="text/css">\n   .radial-progress-container{position:relative}.radial-progress-inner{top:0;right:0;bottom:0;left:0;position:absolute;border-radius:50%;margin:0 auto;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center}\n  </style>\n </head>\n <body>\n  <h1>\n   Vue.js Radial Progress Bar\n  </h1>\n  <p class="spc-b">\n   Customizable radial progress bar component with gradients and animations!\n  </p>\n  <div class="spc-b">\n   <iframe allowtransparency="true" frameborder="0" scrolling="no" src="https://buttons.github.io/buttons.html#href=https%3A%2F%2Fgithub.com%2Fwyzant-dev%2Fvue-radial-progress&amp;text=View%20on%20Github&amp;data-count-api=%2Frepos%2Fwyzant-dev%2Fvue-radial-progress%23stargazers_count&amp;data-count-href=%2Fwyzant-dev%2Fvue-radial-progress%2Fstargazers&amp;data-count-aria-label=%23%20stargazers%20on%20GitHub&amp;data-style=mega&amp;data-icon=&amp;aria-label=Star%20wyzant-dev%2Fvue-radial-progress%20on%20GitHub" style="width: 169px; height: 28px; border: none;">\n   </iframe>\n  </div>\n  <div id="app">\n   <div class="radial-progress-display">\n    <div class="radial-progress-container" style="height: 300px; width: 300px;">\n     <div class="radial-progress-inner" style="width: 280px;">\n      <p>\n       Total steps: 6\n      </p>\n      <p>\n       Completed steps: 1\n      </p>\n     </div>\n     <svg class="radial-progress-bar" height="300" version="1.1" width="300" xmlns="http://www.w3.org/2000/svg">\n      <defs>\n       <radialgradient cx="0.5" cy="0.5" fx="0.75" fy="0.9330127018922193" id="radial-gradient" r="0.65">\n        <stop offset="30%" stop-color="#bbff42">\n        </stop>\n        <stop offset="100%" stop-color="#429321">\n        </stop>\n       </radialgradient>\n      </defs>\n      <circle cx="150" cy="150" fill="transparent" r="140" stroke="#323232" stroke-dasharray="879.645943005142" stroke-dashoffset="0" stroke-linecap="round" style="height: 300px; width: 300px; stroke-width: 10px;">\n      </circle>\n      <circle cx="150" cy="150" fill="transparent" r="140" stroke="url(#radial-gradient)" stroke-dasharray="879.645943005142" stroke-dashoffset="879.645943005142" stroke-linecap="round" style="height: 300px; width: 300px; stroke-width: 10px; stroke-dashoffset: 733.038; transition: stroke-dashoffset 1000ms linear;" transform="rotate(270, 150,150)">\n      </circle>\n     </svg>\n    </div>\n    <!--v-component-->\n    <div class="controls">\n     <button>\n      Prev\n     </button>\n     <button>\n      Next\n     </button>\n    </div>\n   </div>\n   <table class="radial-progress-controls text-right">\n    <tbody>\n     <tr>\n      <td>\n       <label for="total-steps">\n        Total steps\n       </label>\n      </td>\n      <td>\n       <input id="total-steps" placeholder="Total steps" type="number" value="6"/>\n      </td>\n     </tr>\n     <tr>\n      <td>\n       <label for="animate-speed">\n        Animate speed\n       </label>\n      </td>\n      <td>\n       <input id="animate-speed" placeholder="Animate speed" type="number" value="1000"/>\n      </td>\n     </tr>\n     <tr>\n      <td>\n       <label for="diameter">\n        Diameter\n       </label>\n      </td>\n      <td>\n       <input id="diameter" placeholder="Diameter" type="number" value="300"/>\n      </td>\n     </tr>\n     <tr>\n      <td>\n       <label for="stroke-width">\n        Stoke width\n       </label>\n      </td>\n      <td>\n       <input id="stroke-width" placeholder="Stroke width" type="number" value="10"/>\n      </td>\n     </tr>\n     <tr>\n      <td>\n       <label for="timing-function">\n        Timing function\n       </label>\n      </td>\n      <td>\n       <input id="timing-function" placeholder="Timing function" type="text" value="linear"/>\n      </td>\n     </tr>\n     <tr>\n      <td>\n       <label for="start-color">\n        Start color\n       </label>\n      </td>\n      <td>\n       <input id="start-color" placeholder="Start color" type="color" value="#bbff42"/>\n      </td>\n     </tr>\n     <tr>\n      <td>\n       <label for="stop-color">\n        Stop color\n       </label>\n      </td>\n      <td>\n       <input id="stop-color" placeholder="Stop color" type="color" value="#429321"/>\n      </td>\n     </tr>\n     <tr>\n      <td>\n       <label for="inner-stroke-color">\n        Inner stroke color\n       </label>\n      </td>\n      <td>\n       <input id="inner-stroke-color" placeholder="Inner stroke color" type="color" value="#323232"/>\n      </td>\n     </tr>\n    </tbody>\n   </table>\n   <script src="https://cdnjs.cloudflare.com/ajax/libs/vue/1.0.1/vue.min.js">\n   </script>\n   <script src="./dist/vue-radial-progress.min.js">\n   </script>\n   <script>\n    Vue.config.debug = true\n\n      new Vue({\n        el: \'#app\',\n        components: {\n          RadialProgressBar: RadialProgressBar,\n        },\n        data () {\n          return {\n            completedSteps: 1,\n            totalSteps: 6,\n            animateSpeed: 1000,\n            diameter: 300,\n            strokeWidth: 10,\n            startColor: \'#bbff42\',\n            stopColor: \'#429321\',\n            innerStrokeColor: \'#323232\',\n            timingFunc: \'linear\'\n          }\n        },\n        methods: {\n          timingFuncChanged(e) {\n            this.timingFunc = e.target.value\n          },\n\n          innerStrokeColorChanged (e) {\n            this.innerStrokeColor = e.target.value\n          },\n\n          stopColorChanged (e) {\n            this.stopColor = e.target.value\n          },\n\n          startColorChanged (e) {\n            this.startColor = e.target.value\n          },\n\n          strokeWidthChanged (e) {\n            e.preventDefault()\n            const val = e.target.value\n\n            if (!val || isNaN(val)) {\n              return false\n            }\n\n            this.strokeWidth = parseInt(val)\n          },\n\n          diameterChanged (e) {\n            e.preventDefault()\n            const val = e.target.value\n\n            if (!val || isNaN(val)) {\n              return false\n            }\n\n            this.diameter = parseInt(val)\n          },\n\n          animateSpeedChanged (e) {\n            e.preventDefault()\n            const val = e.target.value\n\n            if (!val || isNaN(val)) {\n              return false\n            }\n\n            this.animateSpeed = parseInt(val)\n          },\n\n          totalStepsChanged (e) {\n            e.preventDefault()\n            const val = e.target.value\n\n            if (!val || isNaN(val)) {\n              return false\n            }\n\n            this.totalSteps = parseInt(val)\n          },\n          nextStep () {\n            this.completedSteps += 1\n          },\n          prevStep () {\n            this.completedSteps -= 1\n          }\n        }\n      })\n   </script>\n  </div>\n </body>\n</html>'