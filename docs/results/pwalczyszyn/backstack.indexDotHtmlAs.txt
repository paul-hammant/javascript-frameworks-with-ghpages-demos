b'<html class="wf-myriadpro-n7-active wf-ratio-n4-active wf-ratio-n3-active wf-myriadpro-i7-active wf-myriadpro-i4-active wf-myriadpro-n4-active wf-active" xmlns="http://www.w3.org/1999/html">\n <head>\n  <title>\n   BackStack demo page\n  </title>\n  <meta content="text/html; charset=utf-8" http-equiv="Content-type"/>\n  <link href="css/normalize.css" rel="stylesheet"/>\n  <link href="css/style.css" rel="stylesheet"/>\n  <link href="images/favicon.ico" rel="shortcut icon" type="image/x-icon"/>\n  <script async="" src="http://www.google-analytics.com/ga.js" type="text/javascript">\n  </script>\n  <script src="http://code.jquery.com/jquery-1.7.2.min.js" type="text/javascript">\n  </script>\n  <script src="scripts/libs/underscore/underscore-min.js" type="text/javascript">\n  </script>\n  <script src="scripts/libs/backbone/backbone-min.js" type="text/javascript">\n  </script>\n  <script src="scripts/libs/backstack/backstack-min.js" type="text/javascript">\n  </script>\n  <script src="scripts/views/IntroView.js" type="text/javascript">\n  </script>\n  <script src="scripts/views/AboutView.js" type="text/javascript">\n  </script>\n  <script src="scripts/views/ExampleView.js" type="text/javascript">\n  </script>\n  <script src="scripts/views/APIView.js" type="text/javascript">\n  </script>\n  <script src="scripts/views/MainView.js" type="text/javascript">\n  </script>\n  <script src="scripts/main.js" type="text/javascript">\n  </script>\n  <script src="http://use.typekit.com/fyi4kzh.js" type="text/javascript">\n  </script>\n  <style type="text/css">\n   .tk-ratio{font-family:"ratio",sans-serif;}.tk-myriad-pro{font-family:"myriad-pro",sans-serif;}\n  </style>\n  <style type="text/css">\n   @font-face{font-family:ratio;src:url(https://use.typekit.com/af/4a19ce/000000000000000000010d53/27/l?subset_id=2&fvd=n4&v=3) format("woff2"),url(https://use.typekit.com/af/4a19ce/000000000000000000010d53/27/d?subset_id=2&fvd=n4&v=3) format("woff"),url(https://use.typekit.com/af/4a19ce/000000000000000000010d53/27/a?subset_id=2&fvd=n4&v=3) format("opentype");font-weight:400;font-style:normal;}@font-face{font-family:ratio;src:url(https://use.typekit.com/af/02d2ff/000000000000000000010d51/27/l?subset_id=2&fvd=n3&v=3) format("woff2"),url(https://use.typekit.com/af/02d2ff/000000000000000000010d51/27/d?subset_id=2&fvd=n3&v=3) format("woff"),url(https://use.typekit.com/af/02d2ff/000000000000000000010d51/27/a?subset_id=2&fvd=n3&v=3) format("opentype");font-weight:300;font-style:normal;}@font-face{font-family:myriad-pro;src:url(https://use.typekit.com/af/9a5180/00000000000000000001709e/27/l?subset_id=2&fvd=n7&v=3) format("woff2"),url(https://use.typekit.com/af/9a5180/00000000000000000001709e/27/d?subset_id=2&fvd=n7&v=3) format("woff"),url(https://use.typekit.com/af/9a5180/00000000000000000001709e/27/a?subset_id=2&fvd=n7&v=3) format("opentype");font-weight:700;font-style:normal;}@font-face{font-family:myriad-pro;src:url(https://use.typekit.com/af/04a489/00000000000000000001709f/27/l?subset_id=2&fvd=i7&v=3) format("woff2"),url(https://use.typekit.com/af/04a489/00000000000000000001709f/27/d?subset_id=2&fvd=i7&v=3) format("woff"),url(https://use.typekit.com/af/04a489/00000000000000000001709f/27/a?subset_id=2&fvd=i7&v=3) format("opentype");font-weight:700;font-style:italic;}@font-face{font-family:myriad-pro;src:url(https://use.typekit.com/af/bce065/00000000000000000001709b/27/l?subset_id=2&fvd=i4&v=3) format("woff2"),url(https://use.typekit.com/af/bce065/00000000000000000001709b/27/d?subset_id=2&fvd=i4&v=3) format("woff"),url(https://use.typekit.com/af/bce065/00000000000000000001709b/27/a?subset_id=2&fvd=i4&v=3) format("opentype");font-weight:400;font-style:italic;}@font-face{font-family:myriad-pro;src:url(https://use.typekit.com/af/8cf19a/00000000000000000001709a/27/l?subset_id=2&fvd=n4&v=3) format("woff2"),url(https://use.typekit.com/af/8cf19a/00000000000000000001709a/27/d?subset_id=2&fvd=n4&v=3) format("woff"),url(https://use.typekit.com/af/8cf19a/00000000000000000001709a/27/a?subset_id=2&fvd=n4&v=3) format("opentype");font-weight:400;font-style:normal;}\n  </style>\n  <script type="text/javascript">\n   try{Typekit.load();}catch(e){}\n  </script>\n  <!-- Templates -->\n  <script id="introTemplate" type="text/html">\n   <a href="#" class="start-demo"><img src="images/splash-bttn.png"/></a>\n  </script>\n  <script id="mainTemplate" type="text/html">\n   <div id="navBar">\n            <button id="btnIntro" class="nav-bar-btn">Intro</button>\n            <button id="btnAbout" data-view="aboutView" class="nav-bar-btn">About</button>\n            <button id="btnAPI" data-view="apiView" class="nav-bar-btn">API</button>\n            <button id="btnExample" data-view="exampleView" class="nav-bar-btn">Example</button>\n        </div>\n        <div id="subviewsContainer" />\n  </script>\n  <script id="aboutTemplate" type="text/html">\n   <h3>What is BackStack?</h3>\n        <p>\n            BackStack is a JavaScript component/extension for <a href="http://documentcloud.github.com/backbone" target="_blank">Backbone.js</a> that allows you to create nice view\n            transitions in your HTML5 apps. By default it comes with an implementation of mobile-style slide transitions, fade\n            transitions, and no-effect transitions.\n        </p>\n        <p>\n            It is conceptually based on the <a href="http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/spark/components/ViewNavigator.html" target="_blank">ViewNavigator API</a> from the mobile SDK of the <a href="http://incubator.apache.org/flex/" target="_blank">Apache Flex framework</a>. It enables developers to manage a stack of views that can be pushed, popped, or replaced.\n        </p>\n\n        <h3>Why should I use it?</h3>\n        <p>Although you can use it for web development (as I did to create this site) it is especially useful when building mobile apps with PhoneGap/Cordova framework.\n            Of course, if you are using one of the dozen or so available mobile UI frameworks like <a href="http://jquerymobile.com/" target="_blank">jQuery Mobile</a>,\n            <a href="http://www.sencha.com/products/touch/" target="_blank">Sencha Touch</a>, or <a href="http://www.jqtouch.com/" target="_blank">jQTouch</a> you don\'t need it.\n        </p>\n\n        <h3>Download</h3>\n        <p>You can get the latest version from the <a href="https://github.com/pwalczyszyn/backstack" target="_blank">BackStack project site on GitHub</a>.</p>\n\n        <h3>Are there other alternatives?</h3>\n        <p>You can use the ViewNavigator implementation from the <a href="http://triceam.github.com/app-UI/" target="_blank">app-UI</a> framework built by fellow Adobe Evangelist\n            <a href="http://tricedesigns.com/" target="_blank">Andy Trice</a>. Alternatively, you can build the transitions yourself; it is not really hard! Or, use one of the frameworks mentioned above.\n        </p>\n\n        <h3>How was it built?</h3>\n        <p>This may not be particularly interesting to everyone but I used the <a href="https://github.com/jrburke/almond" target="_blank">almond</a> library to develop/package BackStack. Almond is a replacement AMD loader for RequireJS. It is a smaller "shim" loader, providing a minimal AMD API footprint that includes loader plugin support.</p>\n  </script>\n  <script id="apiTemplate" type="text/html">\n   <h2>BackStack.StackNavigator class API\'s.</h2>\n\n        <h3>Constructor</h3>\n        <ul>\n            <li><strong>options</strong> - Backbone view options hash.\n                <ul>\n                    <li><strong>options.popTransition</strong> - default transition effect object to be used during pop operations.</li>\n                    <li><strong>options.pushTransition</strong> - default transition effect object to be used during push operations.</li>\n                </ul>\n            </li>\n        </ul>\n\n        <h3>Events</h3>\n        <p>\n            BackStack.StackNavigator eventing model is based on Backbone\'s events implementation.\n            <ul>\n                <li><strong>StackNavigator#viewChanging</strong> - It\'s triggered just before view on the stack is changed. This event is cancelable and the view change can be stopped using <code>event.preventDefault()</code> function.\n                    <h4>Event object properties:</h4>\n                    <ul>\n                        <li><strong>action</strong> - this property can have following values: push, pop, popAll, replace and replaceAll.</li>\n                        <li><strong>fromViewClass</strong> - class of a from view.</li>\n                        <li><strong>fromView</strong> - instance of a from view.</li>\n                        <li><strong>toViewClass</strong> - class of a to view.</li>\n                        <li><strong>toView</strong> - instance of a to view.</li>\n                    </ul>\n                </li>\n\n                <li><strong>StackNavigator#viewChanged</strong> - It\'s triggered after view on the stack is changed. This event cannot be canceled.\n                    <h4>Event object properties:</h4>\n                    <ul>\n                        <li><strong>target</strong> - Instance of BackStack.StackNavigator that triggered this event.</li>\n                    </ul>\n                </li>\n                <li><strong>Backbone.View#viewActivate</strong> - This event is triggered when view is activated on the stack.\n                    <h4>Event object properties:</h4>\n                    <ul>\n                        <li><strong>target</strong> - Instance of a view that was activated.</li>\n                    </ul>\n                </li>\n                <li><strong>Backbone.View#viewDeactivate</strong> - This event is triggered when view is deactivated on the stack. Either it was popped or it was covered by another view.\n                    <h4>Event object properties:</h4>\n                    <ul>\n                        <li><strong>target</strong> - Instance of a view that was deactivated.</li>\n                    </ul>\n                </li>\n            </ul>\n        </p>\n\n        <h3>Fields</h3>\n        <ul>\n            <li><strong>StackNavigator.viewsStack</strong> - An array with all the view refs on the stack.</li>\n            <li><strong>StackNavigator.activeView</strong> - View on top of the stack.</li>\n            <li><strong>StackNavigator.defaultPushTransition</strong> - Default push transition effect.</li>\n            <li><strong>StackNavigator.defaultPopTransition</strong> - Default pop transition effect.</li>\n        </ul>\n\n        <h3>Functions</h3>\n        <ul>\n            <li><strong>StackNavigator.popAll(transition)</strong> - Pops all views from a stack and leaves empty stack.\n                <h4>Parameters:</h4>\n                <ul>\n                    <li>{Effect} <strong>transition</strong> Transition effect to be played when popping views.</li>\n                </ul>\n            </li>\n\n            <li><strong>StackNavigator.popView(transition)</strong> - Pops an active view from a stack and displays one below.\n                <h4>Parameters:</h4>\n                <ul>\n                    <li>{Effect} <strong>transition</strong> Transition effect to be played when popping new view.</li>\n                </ul>\n            </li>\n\n            <li><strong>StackNavigator.pushView(view, viewOptions, transition)</strong> - Pushes new view to the stack.\n                <h4>Parameters:</h4>\n                <ul>\n                    <li>{Backbone.View || Backbone.ViewClass} <strong>view</strong> View class or view instance to be pushed on top of the stack.</li>\n                    <li>{Object} <strong>viewOptions</strong> Options to be passed if view is constructed by StackNavigator.</li>\n                    <li>{Effect} <strong>transition</strong> Transition effect to be played when pushing new view.</li>\n                </ul>\n            </li>\n\n            <li><strong>StackNavigator.replaceAll(view, viewOptions, transition)</strong> - Replaces all of the views on the stack, with the one passed as a view param.\n                <h4>Parameters:</h4>\n                <ul>\n                    <li>{Backbone.View || Backbone.ViewClass} <strong>view</strong> View class or view instance to be pushed on top of the stack.</li>\n                    <li>{Object} <strong>viewOptions</strong> Options to be passed if view is constructed by StackNavigator.</li>\n                    <li>{Effect} <strong>transition</strong> Transition effect to be played when replacing views.</li>\n                </ul>\n            </li>\n\n            <li><strong>StackNavigator.replaceView(view, viewOptions, transition)</strong> - Replaces view on top of the stack, with the one passed as a view param.\n                <h4>Parameters:</h4>\n                <ul>\n                    <li>{Backbone.View || Backbone.ViewClass} <strong>view</strong> View class or view instance to be pushed on top of the stack instead of current one.</li>\n                    <li>{Object} <strong>viewOptions</strong> Options to be passed if view is constructed by StackNavigator.</li>\n                    <li>{Effect} <strong>transition</strong> Transition effect to be played when replacing view.</li>\n                </ul>\n            </li>\n        </ul>\n  </script>\n  <script id="exampleTamplate" type="text/html">\n   <iframe id="ifJsfiddle" src="http://jsfiddle.net/pwalczyszyn/dwRQU/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>\n  </script>\n  <script type="text/javascript">\n   var _gaq = _gaq || [];\n        _gaq.push([\'_setAccount\', \'UA-31959402-1\']);\n        _gaq.push([\'_trackPageview\']);\n\n        (function() {\n            var ga = document.createElement(\'script\'); ga.type = \'text/javascript\'; ga.async = true;\n            ga.src = (\'https:\' == document.location.protocol ? \'https://ssl\' : \'http://www\') + \'.google-analytics.com/ga.js\';\n            var s = document.getElementsByTagName(\'script\')[0]; s.parentNode.insertBefore(ga, s);\n        })();\n  </script>\n </head>\n <body onload="onBodyLoad()">\n  <a href="https://github.com/pwalczyszyn/backstack">\n   <img alt="Fork me on GitHub" src="https://s3.amazonaws.com/github/ribbons/forkme_right_white_ffffff.png" style="position: absolute; top: 0; right: 0; border: 0;"/>\n  </a>\n  <div id="tabletContainer">\n   <img src="images/border.png"/>\n   <div id="container" style="overflow: hidden;">\n    <div id="introView" style="position: absolute; visibility: visible; overflow: hidden; width: 100%; height: 100%; left: 0px;">\n     <a class="start-demo" href="#">\n      <img src="images/splash-bttn.png"/>\n     </a>\n    </div>\n   </div>\n  </div>\n </body>\n</html>'