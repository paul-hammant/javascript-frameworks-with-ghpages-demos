b'<!DOCTYPE html>\n<html xmlns="http://www.w3.org/1999/xhtml">\n <head>\n  <meta charset="utf-8"/>\n  <title>\n   AngularJS PubNub Chat Application\n  </title>\n  <meta content="width=device-width" name="viewport"/>\n  <script src="http://cdn.pardot.com/pd.js" type="text/javascript">\n  </script>\n  <script async="" src="http://www.google-analytics.com/analytics.js" type="text/javascript">\n  </script>\n  <script async="" src="//www.google-analytics.com/analytics.js">\n  </script>\n  <script async="" src="//www.googletagmanager.com/gtm.js?id=GTM-PZWSZ2">\n  </script>\n  <script src="https://cdn.pubnub.com/pubnub.min.js">\n  </script>\n  <script src="https://cdn.pubnub.com/pubnub-crypto.min.js">\n  </script>\n  <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.0.8/angular.min.js">\n  </script>\n  <style type="text/css">\n   @charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak{display:none !important;}ng\\:form{display:block;}\n  </style>\n  <script src="//code.jquery.com/jquery-1.10.1.min.js">\n  </script>\n  <!-- build:css styles/main.css -->\n  <link href="//netdna.bootstrapcdn.com/bootstrap/3.0.2/css/bootstrap.min.css" rel="stylesheet"/>\n  <link href="styles/prettify.css" rel="stylesheet"/>\n  <link href="styles/flat-ui.css" rel="stylesheet"/>\n  <link href="styles/main.css" rel="stylesheet"/>\n  <link href="//netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.css" rel="stylesheet"/>\n  <!-- endbuild -->\n  <script src="http://pi.pardot.com/analytics?ver=3&amp;visitor_id=&amp;pi_opt_in=&amp;campaign_id=23596&amp;account_id=29622&amp;title=AngularJS%20PubNub%20Chat%20Application&amp;url=http%3A%2F%2Fpubnub.github.io%2Fangular-js%2Findex.html%23%2Fjoin&amp;referrer=" type="text/javascript">\n  </script>\n  <script src="http://www2.pubnub.com/analytics?conly=true&amp;visitor_id=227621261&amp;pi_opt_in=&amp;campaign_id=23596&amp;account_id=29622&amp;title=AngularJS%20PubNub%20Chat%20Application&amp;url=http%3A%2F%2Fpubnub.github.io%2Fangular-js%2Findex.html%23%2Fjoin&amp;referrer=&amp;visitor_id_sign=36f8c87a6b81766e93ce52d456470c7ac8b9c6cb107b56e92fd462dabd94298ad7572f30b4ab35cc435e4e260bc506ed63ef52ec" type="text/javascript">\n  </script>\n </head>\n <body class="ng-scope" ng-app="PubNubAngularApp">\n  <!-- Google Tag Manager -->\n  <noscript>\n   &lt;iframe src="//www.googletagmanager.com/ns.html?id=GTM-PZWSZ2"\nheight="0" width="0" style="display:none;visibility:hidden"&gt;&lt;/iframe&gt;\n  </noscript>\n  <script>\n   (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({\'gtm.start\':\nnew Date().getTime(),event:\'gtm.js\'});var f=d.getElementsByTagName(s)[0],\nj=d.createElement(s),dl=l!=\'dataLayer\'?\'&amp;l=\'+l:\'\';j.async=true;j.src=\n\'//www.googletagmanager.com/gtm.js?id=\'+i+dl;f.parentNode.insertBefore(j,f);\n})(window,document,\'script\',\'dataLayer\',\'GTM-PZWSZ2\');\n  </script>\n  <!-- End Google Tag Manager -->\n  <div ng-view="">\n   <div class="container col-md-12 ng-scope" ng-include="" src="\'views/_nav.html\'">\n    <div class="top-menu navbar navbar-default ng-scope">\n     <div class="navbar-header">\n      <p class="brandP">\n       <a href="http://pubnub.com" style="text-decoration:none">\n        <img height="30px" src="images/pubnub-large.png"/>\n       </a>\n       +\n       <a href="http://angularjs.org" style="text-decoration:none">\n        <img height="30px" src="http://angularjs.org/img/AngularJS-large.png"/>\n       </a>\n      </p>\n     </div>\n     <ul class="nav navbar-nav navbar-right">\n      <li>\n       <a href="" onclick="scrl2(\'#getting_started\')">\n        Getting Started\n       </a>\n      </li>\n      <li>\n       <a href="" onclick="scrl2(\'#angular_api_tour\')">\n        PubNub Angular API Tour\n       </a>\n      </li>\n      <li>\n       <a href="" onclick="scrl2(\'#angular_api_reference\')">\n        API Reference\n       </a>\n      </li>\n      <li>\n       <a href="https://github.com/pubnub/angular-js">\n        <i class="fa fa-github">\n        </i>\n        View on GitHub\n       </a>\n      </li>\n     </ul>\n    </div>\n   </div>\n   <div class="container col-md-12 ng-scope" ng-include="" src="\'views/_happy.html\'">\n    <div class="col-md-12 ng-scope">\n     <div class="row">\n      <div class="col-md-8 well">\n       <table>\n        <tbody>\n         <tr>\n          <td>\n           <img src="images/icons/shield.svg" style="height:96px"/>\n           <br/>\n           <br/>\n           <img src="images/icons/girl.svg" style="height:96px"/>\n          </td>\n          <td>\n           <img src="images/image_04.png"/>\n          </td>\n          <td>\n           <img src="images/icons/chat.svg" style="height:96px"/>\n           <br/>\n           <br/>\n           <img src="images/icons/dude.svg" style="height:96px"/>\n          </td>\n         </tr>\n        </tbody>\n       </table>\n       <h4>\n        More AngularJS. More PubNub. More Fun.\n       </h4>\n       <p>\n        As of Feb 2016 - We are working to update all of our Angular examples \n  so the one below is out of date. For now please read about how to \n  build a real-time Angular app using PubNub by visiting\n        <a href="https://www.pubnub.com/blog/2016-02-11-getting-started-with-pubnub-new-angularjs-sdk/">\n         this updated blog post\n        </a>\n       </p>\n       <p>\n        There\'s a new AngularJS PubNub API in town, optimized to make\nbuilding real-time web applications as easy as possible.\n       </p>\n       <p>\n        We hope you\'ll enjoy this friendly and useful sample\napplication that weighs in at around 70 lines of coffeescript.\n       </p>\n       <p ng-hide="selectedChannel">\n        To begin, please enter a username (or accept the random\nselection) and click Join to enter the chat area.\n       </p>\n      </div>\n      <div class="col-md-4">\n       <div class="panel panel-default">\n        <div class="panel-heading">\n         <h3 class="panel-title">\n          <i class="fa fa-info-circle">\n          </i>\n          Exploring AngularJS and PubNub\n         </h3>\n        </div>\n        <div class="panel-body">\n         <ul>\n          <li>\n           <a href="" onclick="scrl2(\'#chat_application\')">\n            The AngularJS Chat Application\n           </a>\n          </li>\n          <li>\n           <a href="" onclick="scrl2(\'#getting_started\')">\n            Getting Started\n           </a>\n          </li>\n          <li>\n           <a href="" onclick="scrl2(\'#angular_api_tour\')">\n            PubNub Angular API Tour\n           </a>\n          </li>\n          <li>\n           <a href="" onclick="scrl2(\'#angular_api_reference\')">\n            API Reference\n           </a>\n          </li>\n          <li>\n           <a href="https://github.com/pubnub/javascript">\n            <i class="fa fa-share">\n            </i>\n            PubNub JavaScript API\n           </a>\n          </li>\n          <li>\n           <a href="http://angularjs.org">\n            <i class="fa fa-share">\n            </i>\n            AngularJS Home\n           </a>\n          </li>\n         </ul>\n        </div>\n       </div>\n       <div class="panel panel-default panel-primary" ng-hide="selectedChannel">\n        <div class="panel-heading">\n         <h3 class="panel-title">\n          Join Chat\n         </h3>\n        </div>\n        <form class="panel-body ng-pristine ng-valid">\n         <ul class="list-unstyled">\n          <li>\n           <label>\n            Username\n           </label>\n          </li>\n          <li>\n           <input class="input-lg form-control ng-pristine ng-valid" maxlength="20" ng-model="data.username" size="20" type="text"/>\n          </li>\n         </ul>\n         <ul class="list-unstyled">\n          <li>\n           <label>\n            City\n           </label>\n          </li>\n          <li>\n           <input class="input-lg form-control ng-pristine ng-valid" maxlength="20" ng-model="data.city" size="20" type="text"/>\n          </li>\n         </ul>\n         <ul class="list-unstyled">\n          <li>\n           <label>\n            <input class="checkbox-inline input-lg ng-pristine ng-valid" ng-model="data.super" type="checkbox"/>\n            Log in with super powers?\n           </label>\n          </li>\n         </ul>\n         <ul class="list-unstyled">\n          <li>\n           <input class="btn btn-block btn-primary" ng-click="join()" type="submit" value="Join"/>\n          </li>\n         </ul>\n        </form>\n       </div>\n      </div>\n     </div>\n    </div>\n   </div>\n   <div class="container ng-scope">\n    <section class="chat-section">\n     <div class="container">\n      <h2>\n       PubNub AngularJS Chat Example\n      </h2>\n      <p>\n       <span class="label label-default" ng-hide="selectedChannel">\n        Not Connected Yet\n       </span>\n       To enter the sample Chat application, choose a username and press the "Join" button above.\n      </p>\n      <img class="img-rounded" src="images/screenshot.png" style="width:600px"/>\n     </div>\n    </section>\n   </div>\n   <div class="ng-scope" ng-include="" src="\'views/_content.html\'">\n    <div class="container ng-scope">\n     <article>\n      <hr/>\n      <section id="getting_started">\n       <div class="holder">\n       </div>\n       <div class="frame">\n        <h2>\n         Getting Started\n        </h2>\n        <p>\n         The HTML page includes 3 key libraries:\n        </p>\n        <ul>\n         <li>\n          The core PubNub JS Library (generally from the CDN)\n         </li>\n         <li>\n          AngularJS (usually as a Bower component)\n         </li>\n         <li>\n          PubNub Angular (copy &amp; paste for now - bower component coming soon!)\n         </li>\n        </ul>\n        <p>\n         The HTML script includes look like this:\n        </p>\n        <pre class="well">&lt;script src="http://cdn.pubnub.com/pubnub.min.js"&gt;&lt;/script&gt;\n&lt;script src="components/angular/angular.js"&gt;&lt;/script&gt;\n&lt;script src="scripts/pubnub-angular.js"&gt;&lt;/script&gt;</pre>\n        <p>\n         The app is Angular-enabled with an\n         <code>\n          ng-app\n         </code>\n         attribute:\n        </p>\n        <pre class="well">&lt;body ng-app="PubNubAngularApp"&gt;</pre>\n        <p>\n         Where \'PubNubAngularApp\' is the name of the Angular module containing our app.\n        </p>\n        <p>\n         The code for the app lives in:\n        </p>\n        <pre class="well">&lt;script src="scripts/app.js"&gt;&lt;/script&gt;</pre>\n       </div>\n      </section>\n      <hr/>\n      <section id="angular_api_tour">\n       <div class="holder">\n       </div>\n       <div class="frame">\n        <h2>\n         PubNub Angular API Tour\n        </h2>\n        <p>\n         The PubNub Angular API lives in the\n         <code>\n          scripts/pubnub-angular.js\n         </code>\n         file.\n        </p>\n        <p>\n         Notice the dependency on the PubNub Angular library (\n         <code>\n          pubnub.angular.service\n         </code>\n         ):\n        </p>\n        <pre class="well">angular.module(\'PubNubAngularApp\', ["pubnub.angular.service"])</pre>\n        <p>\n         The code for the controllers lives in:\n        </p>\n        <pre class="well">&lt;script src="scripts/controllers/main.js"&gt;&lt;/script&gt;</pre>\n        <p>\n         Now, the\n         <code>\n          PubNub\n         </code>\n         service can be injected into the controller by name!\n        </p>\n        <pre class="well">.controller(\'JoinCtrl\', function($scope, PubNub) { ... });</pre>\n        <h4>\n         Using the Special AngularJS PubNub API\n        </h4>\n        <p>\n         Publishing to channels is trivial - just use the\n         <code>\n          PubNub.ngPublish()\n         </code>\n         method.\n        </p>\n        <pre class="well">$scope.publish = function() {\n  PubNub.ngPublish({\n    channel: $scope.selectedChannel,\n    message: $scope.newMessage\n  });\n};</pre>\n        <p>\n         As you can see, we call the PubNub publish method passing in the desired\nchannel and message to transmit. It is also possible to transmit structured\ndata as JSON objects, so go wild!\n        </p>\n        <p>\n         It\'s not necessary to subscribe to a channel in order to publish to a channel.\n        </p>\n        <p>\n         Subscribing to channels is accomplished by calling the\n         <code>\n          PubNub.ngSubscribe()\n         </code>\n         method. After the channel is subscribed, the app can register root scope message events\nby calling\n         <code>\n          $rootScope.$on\n         </code>\n         with the event string returned by\n         <code>\n          PubNub.ngMsgEv(channel)\n         </code>\n         .\n        </p>\n        <pre class="well">$scope.subscribe = function() {\n  ...\n  PubNub.ngSubscribe({ channel: theChannel })\n  ...\n  $rootScope.$on(PubNub.ngMsgEv(theChannel), function(event, payload) {\n    // payload contains message, channel, env...\n    console.log(\'got a message event:\', payload);    \n  })</pre>\n        <p>\n         This is the core of the PubNub API - allowing clients to subscribe and\npublish to channels, and have those events propagate in real-time to other\napplications connected to the same channels.\n        </p>\n        <h4>\n         Integrating Presence Events\n        </h4>\n        <p>\n         It\'s also easy to integrate presence events using the Angular API. In\nthe example above, we just add an additional couple lines of code to\ncall the\n         <code>\n          PubNub.ngHereNow()\n         </code>\n         method (retrieve current users), and register\nfor presence events by calling\n         <code>\n          $rootScope.$on\n         </code>\n         with the event string\nreturned by\n         <code>\n          PubNub.ngPrsEv(channel)\n         </code>\n         .\n        </p>\n        <pre class="well">$scope.subscribe = function() {\n  ...\n  PubNub.ngSubscribe({ channel: theChannel })\n  $rootScope.$on(PubNub.ngMsgEv(theChannel), function(event, payload) { ... })\n  ...\n  $rootScope.$on(PubNub.ngPrsEv(theChannel), function(event, payload) {\n    // payload contains message, channel, env...\n    console.log(\'got a presence event:\', payload);\n  })\n\n  PubNub.ngHereNow { channel: theChannel }</pre>\n        <p>\n         Using the presence event as a trigger, we retrieve the Presence\nlist for a channel using the\n         <code>\n          PubNub.ngListPresence(channel)\n         </code>\n         function.\n        </p>\n        <pre class="well">$rootScope.$on(PubNub.ngPrsEv(theChannel), function(event, payload) {\n  $scope.users = PubNub.ngListPresence(theChannel);\n})</pre>\n        <p>\n         It\'s also possible to retrieve the extended Presence state data\nfor a channel using the\n         <code>\n          PubNub.ngPresenceData(channel)\n         </code>\n         function.\n        </p>\n        <pre class="well">$rootScope.$on(PubNub.ngPrsEv(theChannel), function(event, payload) {\n  $scope.userData = PubNub.ngPresenceData(theChannel);\n})</pre>\n        <h4>\n         Retrieving History\n        </h4>\n        <p>\n         It can be super-handy to gather the previous several hundred messages\nfrom the PubNub channel history. The PubNub Angular API makes this easy\nby bridging the event model of the PubNub JS history API and the AngularJS\nevent broadcast model so that historical messages come through the same\nevent interface.\n        </p>\n        <pre class="well">PubNub.ngHistory({channel:theChannel, count:500});\n// messages will be broadcast via $rootScope...</pre>\n        <h4>\n         Listing &amp; Unsubscribing from Channels\n        </h4>\n        <p>\n         The PubNub Angular API takes care of keeping track of currently subscribed\nchannels. Call the\n         <code>\n          PubNub.ngListChannels()\n         </code>\n         method to return a\nlist of presently subscribed channels.\n        </p>\n        <pre class="well">$scope.channels = PubNub.ngListChannels()</pre>\n        <p>\n         Unsubscribing is as easy as calling the\n         <code>\n          PubNub.ngUnsubscribe()\n         </code>\n         method. The library even takes care of removing the Angular event handlers\nfor you to prevent unsightly memory leaks!\n        </p>\n        <pre class="well">PubNub.ngUnsubscribe({channel:theChannel})</pre>\n        <h4>\n         Restricting Access (Advanced)\n        </h4>\n        <p>\n         Often times, it\'s desirable to lock down applications and channels.\nWith PAM (PubNub Access Manager), it\'s easy. There are 2 calls:\n         <code>\n          grant\n         </code>\n         which grants access for users having a specified\nauth key, and\n         <code>\n          audit\n         </code>\n         which returns the current policy\nconfiguration.\n        </p>\n        <p>\n         Note: to perform access control operations, the PubNub client must\nbe initialized with the secret key (which should always be protected\nby server-only access).\n        </p>\n        <pre class="well">PubNub.ngGrant({channel:theChannel,auth_key:\'readers_must_have_this_secret\',read:true,write:false,callback:function(){...}});\n# now clients providing the auth key can read...\n\nPubNub.ngAudit({channel:theChannel,auth_key:\'readers_must_have_this_secret\',callback:function(policy){...}});\n# calls back with the policy description as a JSON object...</pre>\n        <p>\n         If this is interesting to you, see http://www.pubnub.com/docs/javascript/overview/security.html\nfor more details!\n        </p>\n       </div>\n       <hr/>\n       <section id="angular_api_reference">\n        <h2>\n         PubNub Angular API Reference\n        </h2>\n        <h4>\n         Core Angular API Methods\n        </h4>\n        <ul>\n         <li>\n          <code>\n           PubNub.init({publish_key:\'your_key\',subscribe_key:\'your_key\',uuid:\'an_optional_user_uuid\'})\n          </code>\n          : initialize the PubNub Angular API with the specified values\n         </li>\n         <li>\n          <code>\n           PubNub.ngSubscribe({channel:aChannel,message:aCallback,presence:anotherCallback})\n          </code>\n          : subscribe to the specified channel; the provided callbacks (if any) will be invoked by wrapper functions that also maintain the Angular data structures for channels list and presence\n         </li>\n         <li>\n          <code>\n           PubNub.ngUnsubscribe({channel:aChannel})\n          </code>\n          : unsubscribe from the specified channel including any message/presence events\n         </li>\n         <li>\n          <code>\n           PubNub.ngPublish({channel:aChannel,message:aMessage})\n          </code>\n          : publish a message to the specified channel\n         </li>\n         <li>\n          <code>\n           PubNub.ngHistory({channel:aChannel})\n          </code>\n          : calls PUBNUB.history with the specified channel to produce root scope message broadcast events (make sure the code is subscribed to the channel and channel message events)\n         </li>\n         <li>\n          <code>\n           PubNub.ngHereNow({channel:aChannel})\n          </code>\n          : calls PUBNUB.here_now with the specified channel to produce root scope presence broadcast events (make sure the code is subscribed to the channel and channel presence events)\n         </li>\n         <li>\n          <code>\n           PubNub.ngWhereNow()\n          </code>\n          : returns user/channel subscription data\n         </li>\n         <li>\n          <code>\n           PubNub.ngAuth()\n          </code>\n          : updates the auth_key associated with the PubNub session\n         </li>\n         <li>\n          <code>\n           PubNub.ngAudit()\n          </code>\n          : displays PAM (PubNub Access Manager) settings, see http://www.pubnub.com/docs/javascript/api/reference.html#access\n         </li>\n         <li>\n          <code>\n           PubNub.ngGrant()\n          </code>\n          : grants acccess via PAM (PubNub Access Manager), see http://www.pubnub.com/docs/javascript/api/reference.html#grant\n         </li>\n         <li>\n          <code>\n           PubNub.ngRevoke()\n          </code>\n          : revokes acccess via PAM (PubNub Access Manager), see http://www.pubnub.com/docs/javascript/api/reference.html#grant\n         </li>\n         <li>\n          <code>\n           PubNub.ngListPresence(channel)\n          </code>\n          : returns the list of subscribers for a channel\n         </li>\n         <li>\n          <code>\n           PubNub.ngPresenceData(channel)\n          </code>\n          : returns the map of uuid to extended state data for a channel\n         </li>\n         <li>\n          <code>\n           PubNub.ngListChannels()\n          </code>\n          : returns the list of channels that the PubNub Angular API is connected to\n         </li>\n         <li>\n          <code>\n           PubNub.ngListPresence(channel)\n          </code>\n          : returns the list of subscribers for a channel\n         </li>\n         <li>\n          <code>\n           PubNub.ngState({channel:channel})\n          </code>\n          : retrieves extended user state for a channel\n         </li>\n         <li>\n          <code>\n           PubNub.ngState({channel:channel,state:newState})\n          </code>\n          : updates extended user state for a channel\n         </li>\n         <li>\n          <code>\n           PubNub.ngMsgEv(channel)\n          </code>\n          : returns the root scope broadcast event name for message events for a given channel\n         </li>\n         <li>\n          <code>\n           PubNub.ngPrsEv(channel)\n          </code>\n          : returns the root scope broadcast event name for presence events for a given channel\n         </li>\n        </ul>\n        <h4>\n         Using the PubNub JS API directly (advanced)\n        </h4>\n        <p>\n         In unusual cases where you need to access the PubNub API directly, we make it\neasy by exposing the PUBNUB methods via the\n         <code>\n          PubNub.jsapi.*\n         </code>\n         . So if\nyou really need to call\n         <code>\n          PUBNUB.each()\n         </code>\n         , you can do it by calling\n         <code>\n          PubNub.jsapi.each()\n         </code>\n         .\n        </p>\n        <p>\n         For example:\n        </p>\n        <ul>\n         <li>\n          <code>\n           PubNub.jsapi.publish\n          </code>\n         </li>\n         <li>\n          <code>\n           PubNub.jsapi.subscribe\n          </code>\n         </li>\n         <li>\n          <code>\n           PubNub.jsapi.unsubscribe\n          </code>\n         </li>\n         <li>\n          <code>\n           PubNub.jsapi.here_now\n          </code>\n         </li>\n         <li>\n          <code>\n           PubNub.jsapi.history\n          </code>\n         </li>\n        </ul>\n        <p>\n         <span class="label label-info">\n          NOTE\n         </span>\n         These methods do not call the internal AngularJS bookkeeping methods\nto make sure the channel lists and rootScope broadcast events\nget propagated - make sure you know what you\'re doing!\n        </p>\n        <p>\n         And... Stay tuned! We\'re adding support for more PubNub APIs all the\ntime.\n        </p>\n       </section>\n      </section>\n     </article>\n    </div>\n   </div>\n   <div class="ng-scope" ng-include="" src="\'views/_footer.html\'">\n    <div class="bottom-menu ng-scope">\n     <div class="container">\n      <div class="row">\n       <div class="col-md-7">\n        <h6 class="footer-title">\n         More with PubNub Real-time Network\n        </h6>\n        <p>\n         Do you like this freebie?\nWant to get more stuff like this?\n         <br/>\n         Subscribe to\n         <a href="http://twitter.com/PubNub" target="pntwitter">\n          @PubNub\n         </a>\n         news and updates to stay tuned on great designs.\n         <br/>\n         <a href="http://www.pubnub.com/free-trial" target="signup">\n          PubNub Real-Time Network\n         </a>\n         .\n        </p>\n        <p>\n         <a href="http://twitter.com/PubNub" target="pntwitter2">\n          <i class="fa fa-twitter">\n          </i>\n          Follow us on Twitter\n         </a>\n        </p>\n       </div>\n       <div class="col-md-5">\n        <div class="footer-banner">\n         <h6>\n          <i class="fa fa-comments">\n          </i>\n          PubNub Network\n         </h6>\n         <a alt="PubNub Real-Time Network" class="btn btn-info btn-large btn-block" href="http://www.pubnub.com/free-trial" target="freetrial">\n          Try PubNub Today!\n         </a>\n         <br/>\n        </div>\n        <ul>\n         <li>\n          Core Building Blocks for Secure Real-Time\n         </li>\n         <li>\n          A Lot of Useful Samples\n         </li>\n         <li>\n          Real-Time on a Redundant, Global Network\n         </li>\n         <li>\n          Rapid Development and On-Demand Scaling\n         </li>\n         <li>\n          Drops into Mobile and Web by Default\n         </li>\n         <li>\n          Over 50 Supported SDKs\n         </li>\n        </ul>\n       </div>\n      </div>\n     </div>\n    </div>\n    <!-- .menu.terms -->\n    <!-- %ul -->\n    <!-- %li -->\n    <!-- %a(href="#") \xc2\xa9 2009-13 PubNub Inc. -->\n    <!-- %li -->\n    <!-- %a(href="http://pubnub.com/terms" id="terms") Terms &amp; Conditions -->\n    <!-- %li -->\n    <!-- %a(href="http://pubnub.com/privacy-policy" id="privacy") Privacy Policy -->\n   </div>\n  </div>\n  <script id="" type="text/javascript">\n   "undefined"!==typeof FB&amp;&amp;FB.Event.subscribe("edge.create",function(a){dataLayer.push({event:"socialInt",socialNetwork:"Facebook",socialAction:"Share",socialTarget:a})});\n  </script>\n </body>\n</html>'b'<!DOCTYPE html>\n<html xmlns="http://www.w3.org/1999/xhtml">\n <head>\n  <meta charset="utf-8"/>\n  <title>\n   AngularJS PubNub Chat Application\n  </title>\n  <meta content="width=device-width" name="viewport"/>\n  <script src="http://cdn.pardot.com/pd.js" type="text/javascript">\n  </script>\n  <script async="" src="http://www.google-analytics.com/analytics.js" type="text/javascript">\n  </script>\n  <script async="" src="//www.google-analytics.com/analytics.js">\n  </script>\n  <script async="" src="//www.googletagmanager.com/gtm.js?id=GTM-PZWSZ2">\n  </script>\n  <script src="https://cdn.pubnub.com/pubnub.min.js">\n  </script>\n  <script src="https://cdn.pubnub.com/pubnub-crypto.min.js">\n  </script>\n  <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.0.8/angular.min.js">\n  </script>\n  <style type="text/css">\n   @charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak{display:none !important;}ng\\:form{display:block;}\n  </style>\n  <script src="//code.jquery.com/jquery-1.10.1.min.js">\n  </script>\n  <!-- build:css styles/main.css -->\n  <link href="//netdna.bootstrapcdn.com/bootstrap/3.0.2/css/bootstrap.min.css" rel="stylesheet"/>\n  <link href="styles/prettify.css" rel="stylesheet"/>\n  <link href="styles/flat-ui.css" rel="stylesheet"/>\n  <link href="styles/main.css" rel="stylesheet"/>\n  <link href="//netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.css" rel="stylesheet"/>\n  <!-- endbuild -->\n  <script src="http://pi.pardot.com/analytics?ver=3&amp;visitor_id=&amp;pi_opt_in=&amp;campaign_id=23596&amp;account_id=29622&amp;title=AngularJS%20PubNub%20Chat%20Application&amp;url=http%3A%2F%2Fpubnub.github.io%2Fangular-js%2Findex.html%23%2Fjoin&amp;referrer=" type="text/javascript">\n  </script>\n  <script src="http://www2.pubnub.com/analytics?conly=true&amp;visitor_id=227830655&amp;pi_opt_in=&amp;campaign_id=23596&amp;account_id=29622&amp;title=AngularJS%20PubNub%20Chat%20Application&amp;url=http%3A%2F%2Fpubnub.github.io%2Fangular-js%2Findex.html%23%2Fjoin&amp;referrer=&amp;visitor_id_sign=0904ac99c35ce42d94bf9c85ea5ac8f80e75569a254ee41d564947e1c0c7581dfc5192c1eab00413c3ba4734a494b0a5873e31a8" type="text/javascript">\n  </script>\n </head>\n <body class="ng-scope" ng-app="PubNubAngularApp">\n  <!-- Google Tag Manager -->\n  <noscript>\n   &lt;iframe src="//www.googletagmanager.com/ns.html?id=GTM-PZWSZ2"\nheight="0" width="0" style="display:none;visibility:hidden"&gt;&lt;/iframe&gt;\n  </noscript>\n  <script>\n   (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({\'gtm.start\':\nnew Date().getTime(),event:\'gtm.js\'});var f=d.getElementsByTagName(s)[0],\nj=d.createElement(s),dl=l!=\'dataLayer\'?\'&amp;l=\'+l:\'\';j.async=true;j.src=\n\'//www.googletagmanager.com/gtm.js?id=\'+i+dl;f.parentNode.insertBefore(j,f);\n})(window,document,\'script\',\'dataLayer\',\'GTM-PZWSZ2\');\n  </script>\n  <!-- End Google Tag Manager -->\n  <div ng-view="">\n   <div class="container col-md-12 ng-scope" ng-include="" src="\'views/_nav.html\'">\n    <div class="top-menu navbar navbar-default ng-scope">\n     <div class="navbar-header">\n      <p class="brandP">\n       <a href="http://pubnub.com" style="text-decoration:none">\n        <img height="30px" src="images/pubnub-large.png"/>\n       </a>\n       +\n       <a href="http://angularjs.org" style="text-decoration:none">\n        <img height="30px" src="http://angularjs.org/img/AngularJS-large.png"/>\n       </a>\n      </p>\n     </div>\n     <ul class="nav navbar-nav navbar-right">\n      <li>\n       <a href="" onclick="scrl2(\'#getting_started\')">\n        Getting Started\n       </a>\n      </li>\n      <li>\n       <a href="" onclick="scrl2(\'#angular_api_tour\')">\n        PubNub Angular API Tour\n       </a>\n      </li>\n      <li>\n       <a href="" onclick="scrl2(\'#angular_api_reference\')">\n        API Reference\n       </a>\n      </li>\n      <li>\n       <a href="https://github.com/pubnub/angular-js">\n        <i class="fa fa-github">\n        </i>\n        View on GitHub\n       </a>\n      </li>\n     </ul>\n    </div>\n   </div>\n   <div class="container col-md-12 ng-scope" ng-include="" src="\'views/_happy.html\'">\n    <div class="col-md-12 ng-scope">\n     <div class="row">\n      <div class="col-md-8 well">\n       <table>\n        <tbody>\n         <tr>\n          <td>\n           <img src="images/icons/shield.svg" style="height:96px"/>\n           <br/>\n           <br/>\n           <img src="images/icons/girl.svg" style="height:96px"/>\n          </td>\n          <td>\n           <img src="images/image_04.png"/>\n          </td>\n          <td>\n           <img src="images/icons/chat.svg" style="height:96px"/>\n           <br/>\n           <br/>\n           <img src="images/icons/dude.svg" style="height:96px"/>\n          </td>\n         </tr>\n        </tbody>\n       </table>\n       <h4>\n        More AngularJS. More PubNub. More Fun.\n       </h4>\n       <p>\n        As of Feb 2016 - We are working to update all of our Angular examples \n  so the one below is out of date. For now please read about how to \n  build a real-time Angular app using PubNub by visiting\n        <a href="https://www.pubnub.com/blog/2016-02-11-getting-started-with-pubnub-new-angularjs-sdk/">\n         this updated blog post\n        </a>\n       </p>\n       <p>\n        There\'s a new AngularJS PubNub API in town, optimized to make\nbuilding real-time web applications as easy as possible.\n       </p>\n       <p>\n        We hope you\'ll enjoy this friendly and useful sample\napplication that weighs in at around 70 lines of coffeescript.\n       </p>\n       <p ng-hide="selectedChannel">\n        To begin, please enter a username (or accept the random\nselection) and click Join to enter the chat area.\n       </p>\n      </div>\n      <div class="col-md-4">\n       <div class="panel panel-default">\n        <div class="panel-heading">\n         <h3 class="panel-title">\n          <i class="fa fa-info-circle">\n          </i>\n          Exploring AngularJS and PubNub\n         </h3>\n        </div>\n        <div class="panel-body">\n         <ul>\n          <li>\n           <a href="" onclick="scrl2(\'#chat_application\')">\n            The AngularJS Chat Application\n           </a>\n          </li>\n          <li>\n           <a href="" onclick="scrl2(\'#getting_started\')">\n            Getting Started\n           </a>\n          </li>\n          <li>\n           <a href="" onclick="scrl2(\'#angular_api_tour\')">\n            PubNub Angular API Tour\n           </a>\n          </li>\n          <li>\n           <a href="" onclick="scrl2(\'#angular_api_reference\')">\n            API Reference\n           </a>\n          </li>\n          <li>\n           <a href="https://github.com/pubnub/javascript">\n            <i class="fa fa-share">\n            </i>\n            PubNub JavaScript API\n           </a>\n          </li>\n          <li>\n           <a href="http://angularjs.org">\n            <i class="fa fa-share">\n            </i>\n            AngularJS Home\n           </a>\n          </li>\n         </ul>\n        </div>\n       </div>\n       <div class="panel panel-default panel-primary" ng-hide="selectedChannel">\n        <div class="panel-heading">\n         <h3 class="panel-title">\n          Join Chat\n         </h3>\n        </div>\n        <form class="panel-body ng-pristine ng-valid">\n         <ul class="list-unstyled">\n          <li>\n           <label>\n            Username\n           </label>\n          </li>\n          <li>\n           <input class="input-lg form-control ng-pristine ng-valid" maxlength="20" ng-model="data.username" size="20" type="text"/>\n          </li>\n         </ul>\n         <ul class="list-unstyled">\n          <li>\n           <label>\n            City\n           </label>\n          </li>\n          <li>\n           <input class="input-lg form-control ng-pristine ng-valid" maxlength="20" ng-model="data.city" size="20" type="text"/>\n          </li>\n         </ul>\n         <ul class="list-unstyled">\n          <li>\n           <label>\n            <input class="checkbox-inline input-lg ng-pristine ng-valid" ng-model="data.super" type="checkbox"/>\n            Log in with super powers?\n           </label>\n          </li>\n         </ul>\n         <ul class="list-unstyled">\n          <li>\n           <input class="btn btn-block btn-primary" ng-click="join()" type="submit" value="Join"/>\n          </li>\n         </ul>\n        </form>\n       </div>\n      </div>\n     </div>\n    </div>\n   </div>\n   <div class="container ng-scope">\n    <section class="chat-section">\n     <div class="container">\n      <h2>\n       PubNub AngularJS Chat Example\n      </h2>\n      <p>\n       <span class="label label-default" ng-hide="selectedChannel">\n        Not Connected Yet\n       </span>\n       To enter the sample Chat application, choose a username and press the "Join" button above.\n      </p>\n      <img class="img-rounded" src="images/screenshot.png" style="width:600px"/>\n     </div>\n    </section>\n   </div>\n   <div class="ng-scope" ng-include="" src="\'views/_content.html\'">\n    <div class="container ng-scope">\n     <article>\n      <hr/>\n      <section id="getting_started">\n       <div class="holder">\n       </div>\n       <div class="frame">\n        <h2>\n         Getting Started\n        </h2>\n        <p>\n         The HTML page includes 3 key libraries:\n        </p>\n        <ul>\n         <li>\n          The core PubNub JS Library (generally from the CDN)\n         </li>\n         <li>\n          AngularJS (usually as a Bower component)\n         </li>\n         <li>\n          PubNub Angular (copy &amp; paste for now - bower component coming soon!)\n         </li>\n        </ul>\n        <p>\n         The HTML script includes look like this:\n        </p>\n        <pre class="well">&lt;script src="http://cdn.pubnub.com/pubnub.min.js"&gt;&lt;/script&gt;\n&lt;script src="components/angular/angular.js"&gt;&lt;/script&gt;\n&lt;script src="scripts/pubnub-angular.js"&gt;&lt;/script&gt;</pre>\n        <p>\n         The app is Angular-enabled with an\n         <code>\n          ng-app\n         </code>\n         attribute:\n        </p>\n        <pre class="well">&lt;body ng-app="PubNubAngularApp"&gt;</pre>\n        <p>\n         Where \'PubNubAngularApp\' is the name of the Angular module containing our app.\n        </p>\n        <p>\n         The code for the app lives in:\n        </p>\n        <pre class="well">&lt;script src="scripts/app.js"&gt;&lt;/script&gt;</pre>\n       </div>\n      </section>\n      <hr/>\n      <section id="angular_api_tour">\n       <div class="holder">\n       </div>\n       <div class="frame">\n        <h2>\n         PubNub Angular API Tour\n        </h2>\n        <p>\n         The PubNub Angular API lives in the\n         <code>\n          scripts/pubnub-angular.js\n         </code>\n         file.\n        </p>\n        <p>\n         Notice the dependency on the PubNub Angular library (\n         <code>\n          pubnub.angular.service\n         </code>\n         ):\n        </p>\n        <pre class="well">angular.module(\'PubNubAngularApp\', ["pubnub.angular.service"])</pre>\n        <p>\n         The code for the controllers lives in:\n        </p>\n        <pre class="well">&lt;script src="scripts/controllers/main.js"&gt;&lt;/script&gt;</pre>\n        <p>\n         Now, the\n         <code>\n          PubNub\n         </code>\n         service can be injected into the controller by name!\n        </p>\n        <pre class="well">.controller(\'JoinCtrl\', function($scope, PubNub) { ... });</pre>\n        <h4>\n         Using the Special AngularJS PubNub API\n        </h4>\n        <p>\n         Publishing to channels is trivial - just use the\n         <code>\n          PubNub.ngPublish()\n         </code>\n         method.\n        </p>\n        <pre class="well">$scope.publish = function() {\n  PubNub.ngPublish({\n    channel: $scope.selectedChannel,\n    message: $scope.newMessage\n  });\n};</pre>\n        <p>\n         As you can see, we call the PubNub publish method passing in the desired\nchannel and message to transmit. It is also possible to transmit structured\ndata as JSON objects, so go wild!\n        </p>\n        <p>\n         It\'s not necessary to subscribe to a channel in order to publish to a channel.\n        </p>\n        <p>\n         Subscribing to channels is accomplished by calling the\n         <code>\n          PubNub.ngSubscribe()\n         </code>\n         method. After the channel is subscribed, the app can register root scope message events\nby calling\n         <code>\n          $rootScope.$on\n         </code>\n         with the event string returned by\n         <code>\n          PubNub.ngMsgEv(channel)\n         </code>\n         .\n        </p>\n        <pre class="well">$scope.subscribe = function() {\n  ...\n  PubNub.ngSubscribe({ channel: theChannel })\n  ...\n  $rootScope.$on(PubNub.ngMsgEv(theChannel), function(event, payload) {\n    // payload contains message, channel, env...\n    console.log(\'got a message event:\', payload);    \n  })</pre>\n        <p>\n         This is the core of the PubNub API - allowing clients to subscribe and\npublish to channels, and have those events propagate in real-time to other\napplications connected to the same channels.\n        </p>\n        <h4>\n         Integrating Presence Events\n        </h4>\n        <p>\n         It\'s also easy to integrate presence events using the Angular API. In\nthe example above, we just add an additional couple lines of code to\ncall the\n         <code>\n          PubNub.ngHereNow()\n         </code>\n         method (retrieve current users), and register\nfor presence events by calling\n         <code>\n          $rootScope.$on\n         </code>\n         with the event string\nreturned by\n         <code>\n          PubNub.ngPrsEv(channel)\n         </code>\n         .\n        </p>\n        <pre class="well">$scope.subscribe = function() {\n  ...\n  PubNub.ngSubscribe({ channel: theChannel })\n  $rootScope.$on(PubNub.ngMsgEv(theChannel), function(event, payload) { ... })\n  ...\n  $rootScope.$on(PubNub.ngPrsEv(theChannel), function(event, payload) {\n    // payload contains message, channel, env...\n    console.log(\'got a presence event:\', payload);\n  })\n\n  PubNub.ngHereNow { channel: theChannel }</pre>\n        <p>\n         Using the presence event as a trigger, we retrieve the Presence\nlist for a channel using the\n         <code>\n          PubNub.ngListPresence(channel)\n         </code>\n         function.\n        </p>\n        <pre class="well">$rootScope.$on(PubNub.ngPrsEv(theChannel), function(event, payload) {\n  $scope.users = PubNub.ngListPresence(theChannel);\n})</pre>\n        <p>\n         It\'s also possible to retrieve the extended Presence state data\nfor a channel using the\n         <code>\n          PubNub.ngPresenceData(channel)\n         </code>\n         function.\n        </p>\n        <pre class="well">$rootScope.$on(PubNub.ngPrsEv(theChannel), function(event, payload) {\n  $scope.userData = PubNub.ngPresenceData(theChannel);\n})</pre>\n        <h4>\n         Retrieving History\n        </h4>\n        <p>\n         It can be super-handy to gather the previous several hundred messages\nfrom the PubNub channel history. The PubNub Angular API makes this easy\nby bridging the event model of the PubNub JS history API and the AngularJS\nevent broadcast model so that historical messages come through the same\nevent interface.\n        </p>\n        <pre class="well">PubNub.ngHistory({channel:theChannel, count:500});\n// messages will be broadcast via $rootScope...</pre>\n        <h4>\n         Listing &amp; Unsubscribing from Channels\n        </h4>\n        <p>\n         The PubNub Angular API takes care of keeping track of currently subscribed\nchannels. Call the\n         <code>\n          PubNub.ngListChannels()\n         </code>\n         method to return a\nlist of presently subscribed channels.\n        </p>\n        <pre class="well">$scope.channels = PubNub.ngListChannels()</pre>\n        <p>\n         Unsubscribing is as easy as calling the\n         <code>\n          PubNub.ngUnsubscribe()\n         </code>\n         method. The library even takes care of removing the Angular event handlers\nfor you to prevent unsightly memory leaks!\n        </p>\n        <pre class="well">PubNub.ngUnsubscribe({channel:theChannel})</pre>\n        <h4>\n         Restricting Access (Advanced)\n        </h4>\n        <p>\n         Often times, it\'s desirable to lock down applications and channels.\nWith PAM (PubNub Access Manager), it\'s easy. There are 2 calls:\n         <code>\n          grant\n         </code>\n         which grants access for users having a specified\nauth key, and\n         <code>\n          audit\n         </code>\n         which returns the current policy\nconfiguration.\n        </p>\n        <p>\n         Note: to perform access control operations, the PubNub client must\nbe initialized with the secret key (which should always be protected\nby server-only access).\n        </p>\n        <pre class="well">PubNub.ngGrant({channel:theChannel,auth_key:\'readers_must_have_this_secret\',read:true,write:false,callback:function(){...}});\n# now clients providing the auth key can read...\n\nPubNub.ngAudit({channel:theChannel,auth_key:\'readers_must_have_this_secret\',callback:function(policy){...}});\n# calls back with the policy description as a JSON object...</pre>\n        <p>\n         If this is interesting to you, see http://www.pubnub.com/docs/javascript/overview/security.html\nfor more details!\n        </p>\n       </div>\n       <hr/>\n       <section id="angular_api_reference">\n        <h2>\n         PubNub Angular API Reference\n        </h2>\n        <h4>\n         Core Angular API Methods\n        </h4>\n        <ul>\n         <li>\n          <code>\n           PubNub.init({publish_key:\'your_key\',subscribe_key:\'your_key\',uuid:\'an_optional_user_uuid\'})\n          </code>\n          : initialize the PubNub Angular API with the specified values\n         </li>\n         <li>\n          <code>\n           PubNub.ngSubscribe({channel:aChannel,message:aCallback,presence:anotherCallback})\n          </code>\n          : subscribe to the specified channel; the provided callbacks (if any) will be invoked by wrapper functions that also maintain the Angular data structures for channels list and presence\n         </li>\n         <li>\n          <code>\n           PubNub.ngUnsubscribe({channel:aChannel})\n          </code>\n          : unsubscribe from the specified channel including any message/presence events\n         </li>\n         <li>\n          <code>\n           PubNub.ngPublish({channel:aChannel,message:aMessage})\n          </code>\n          : publish a message to the specified channel\n         </li>\n         <li>\n          <code>\n           PubNub.ngHistory({channel:aChannel})\n          </code>\n          : calls PUBNUB.history with the specified channel to produce root scope message broadcast events (make sure the code is subscribed to the channel and channel message events)\n         </li>\n         <li>\n          <code>\n           PubNub.ngHereNow({channel:aChannel})\n          </code>\n          : calls PUBNUB.here_now with the specified channel to produce root scope presence broadcast events (make sure the code is subscribed to the channel and channel presence events)\n         </li>\n         <li>\n          <code>\n           PubNub.ngWhereNow()\n          </code>\n          : returns user/channel subscription data\n         </li>\n         <li>\n          <code>\n           PubNub.ngAuth()\n          </code>\n          : updates the auth_key associated with the PubNub session\n         </li>\n         <li>\n          <code>\n           PubNub.ngAudit()\n          </code>\n          : displays PAM (PubNub Access Manager) settings, see http://www.pubnub.com/docs/javascript/api/reference.html#access\n         </li>\n         <li>\n          <code>\n           PubNub.ngGrant()\n          </code>\n          : grants acccess via PAM (PubNub Access Manager), see http://www.pubnub.com/docs/javascript/api/reference.html#grant\n         </li>\n         <li>\n          <code>\n           PubNub.ngRevoke()\n          </code>\n          : revokes acccess via PAM (PubNub Access Manager), see http://www.pubnub.com/docs/javascript/api/reference.html#grant\n         </li>\n         <li>\n          <code>\n           PubNub.ngListPresence(channel)\n          </code>\n          : returns the list of subscribers for a channel\n         </li>\n         <li>\n          <code>\n           PubNub.ngPresenceData(channel)\n          </code>\n          : returns the map of uuid to extended state data for a channel\n         </li>\n         <li>\n          <code>\n           PubNub.ngListChannels()\n          </code>\n          : returns the list of channels that the PubNub Angular API is connected to\n         </li>\n         <li>\n          <code>\n           PubNub.ngListPresence(channel)\n          </code>\n          : returns the list of subscribers for a channel\n         </li>\n         <li>\n          <code>\n           PubNub.ngState({channel:channel})\n          </code>\n          : retrieves extended user state for a channel\n         </li>\n         <li>\n          <code>\n           PubNub.ngState({channel:channel,state:newState})\n          </code>\n          : updates extended user state for a channel\n         </li>\n         <li>\n          <code>\n           PubNub.ngMsgEv(channel)\n          </code>\n          : returns the root scope broadcast event name for message events for a given channel\n         </li>\n         <li>\n          <code>\n           PubNub.ngPrsEv(channel)\n          </code>\n          : returns the root scope broadcast event name for presence events for a given channel\n         </li>\n        </ul>\n        <h4>\n         Using the PubNub JS API directly (advanced)\n        </h4>\n        <p>\n         In unusual cases where you need to access the PubNub API directly, we make it\neasy by exposing the PUBNUB methods via the\n         <code>\n          PubNub.jsapi.*\n         </code>\n         . So if\nyou really need to call\n         <code>\n          PUBNUB.each()\n         </code>\n         , you can do it by calling\n         <code>\n          PubNub.jsapi.each()\n         </code>\n         .\n        </p>\n        <p>\n         For example:\n        </p>\n        <ul>\n         <li>\n          <code>\n           PubNub.jsapi.publish\n          </code>\n         </li>\n         <li>\n          <code>\n           PubNub.jsapi.subscribe\n          </code>\n         </li>\n         <li>\n          <code>\n           PubNub.jsapi.unsubscribe\n          </code>\n         </li>\n         <li>\n          <code>\n           PubNub.jsapi.here_now\n          </code>\n         </li>\n         <li>\n          <code>\n           PubNub.jsapi.history\n          </code>\n         </li>\n        </ul>\n        <p>\n         <span class="label label-info">\n          NOTE\n         </span>\n         These methods do not call the internal AngularJS bookkeeping methods\nto make sure the channel lists and rootScope broadcast events\nget propagated - make sure you know what you\'re doing!\n        </p>\n        <p>\n         And... Stay tuned! We\'re adding support for more PubNub APIs all the\ntime.\n        </p>\n       </section>\n      </section>\n     </article>\n    </div>\n   </div>\n   <div class="ng-scope" ng-include="" src="\'views/_footer.html\'">\n    <div class="bottom-menu ng-scope">\n     <div class="container">\n      <div class="row">\n       <div class="col-md-7">\n        <h6 class="footer-title">\n         More with PubNub Real-time Network\n        </h6>\n        <p>\n         Do you like this freebie?\nWant to get more stuff like this?\n         <br/>\n         Subscribe to\n         <a href="http://twitter.com/PubNub" target="pntwitter">\n          @PubNub\n         </a>\n         news and updates to stay tuned on great designs.\n         <br/>\n         <a href="http://www.pubnub.com/free-trial" target="signup">\n          PubNub Real-Time Network\n         </a>\n         .\n        </p>\n        <p>\n         <a href="http://twitter.com/PubNub" target="pntwitter2">\n          <i class="fa fa-twitter">\n          </i>\n          Follow us on Twitter\n         </a>\n        </p>\n       </div>\n       <div class="col-md-5">\n        <div class="footer-banner">\n         <h6>\n          <i class="fa fa-comments">\n          </i>\n          PubNub Network\n         </h6>\n         <a alt="PubNub Real-Time Network" class="btn btn-info btn-large btn-block" href="http://www.pubnub.com/free-trial" target="freetrial">\n          Try PubNub Today!\n         </a>\n         <br/>\n        </div>\n        <ul>\n         <li>\n          Core Building Blocks for Secure Real-Time\n         </li>\n         <li>\n          A Lot of Useful Samples\n         </li>\n         <li>\n          Real-Time on a Redundant, Global Network\n         </li>\n         <li>\n          Rapid Development and On-Demand Scaling\n         </li>\n         <li>\n          Drops into Mobile and Web by Default\n         </li>\n         <li>\n          Over 50 Supported SDKs\n         </li>\n        </ul>\n       </div>\n      </div>\n     </div>\n    </div>\n    <!-- .menu.terms -->\n    <!-- %ul -->\n    <!-- %li -->\n    <!-- %a(href="#") \xc2\xa9 2009-13 PubNub Inc. -->\n    <!-- %li -->\n    <!-- %a(href="http://pubnub.com/terms" id="terms") Terms &amp; Conditions -->\n    <!-- %li -->\n    <!-- %a(href="http://pubnub.com/privacy-policy" id="privacy") Privacy Policy -->\n   </div>\n  </div>\n  <script id="" type="text/javascript">\n   "undefined"!==typeof FB&amp;&amp;FB.Event.subscribe("edge.create",function(a){dataLayer.push({event:"socialInt",socialNetwork:"Facebook",socialAction:"Share",socialTarget:a})});\n  </script>\n </body>\n</html>'