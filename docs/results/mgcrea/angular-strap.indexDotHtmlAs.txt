b'<!DOCTYPE html>\n<html lang="en" ng-app="mgcrea.ngStrapDocs" xmlns="http://www.w3.org/1999/xhtml">\n <head>\n  <style type="text/css">\n   @charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}\n  </style>\n  <meta charset="utf-8"/>\n  <meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"/>\n  <title>\n   AngularStrap - AngularJS 1.2+ native directives for Twitter Bootstrap 3.\n  </title>\n  <meta content="AngularJS 1.2+ native directives for Twitter Bootstrap 3." name="description"/>\n  <!-- Sets initial viewport load and disables zooming  -->\n  <meta content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no, minimal-ui" name="viewport"/>\n  <!-- Makes your prototype chrome-less once bookmarked to your phone\'s home screen -->\n  <meta content="yes" name="apple-mobile-web-app-capable"/>\n  <!-- Set a shorter title for iOS6 devices when saved to home screen -->\n  <meta content="AngularStrap" name="apple-mobile-web-app-title"/>\n  <!-- Properties for Google+ snippets -->\n  <meta content="AngularStrap" property="og:title"/>\n  <meta content="AngularJS 1.2+ native directives for Twitter Bootstrap 3." property="og:description"/>\n  <meta content="http://mgcrea.github.io/angular-strap/static/images/snippet-logo.png" property="og:image"/>\n  <!--[if lt IE 9]>\n  <script src="//cdnjs.cloudflare.com/ajax/libs/es5-shim/4.0.3/es5-shim.min.js"></script>\n  <script src="//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.2/html5shiv.min.js"></script>\n<![endif]-->\n  <link href="https://plus.google.com/103156582871250188205" rel="author"/>\n  <link href="http://angularjs.org/favicon.ico" rel="icon" type="image/x-icon"/>\n  <link href="http://angularjs.org/favicon.ico" rel="shortcut icon" type="image/x-icon"/>\n  <!-- bower:css -->\n  <link href="//cdn.jsdelivr.net/fontawesome/4.5.0/css/font-awesome.css" rel="stylesheet"/>\n  <link href="//cdn.jsdelivr.net/highlight.js/9.2.0/styles/default.min.css" rel="stylesheet"/>\n  <link href="styles/libs.min.css" rel="stylesheet"/>\n  <!-- endinject -->\n  <link href="bower_components/highlightjs/styles/github.css" rel="stylesheet"/>\n  <!-- inject:css -->\n  <link href="styles/docs.min.css" rel="stylesheet"/>\n  <!-- endinject -->\n  <script async="" src="https://apis.google.com/_/scs/apps-static/_/js/k=oz.gapi.en_US.HdvhyCxp9wc.O/m=auth/exm=plusone/rt=j/sv=1/d=1/ed=1/am=AQ/rs=AGLTcCPLfzn4Ik3j72jUMX8o_0rWowChyw/cb=gapi.loaded_1">\n  </script>\n  <script async="" src="https://apis.google.com/_/scs/apps-static/_/js/k=oz.gapi.en_US.HdvhyCxp9wc.O/m=plusone/rt=j/sv=1/d=1/ed=1/am=AQ/rs=AGLTcCPLfzn4Ik3j72jUMX8o_0rWowChyw/cb=gapi.loaded_0">\n  </script>\n  <script async="" charset="utf-8" src="https://platform.twitter.com/js/button.80ba267f37d7093ec36703643939b173.js" type="text/javascript">\n  </script>\n </head>\n <body ng-controller="MainCtrl" ontouchstart="">\n  <div>\n   <!-- ngInclude: \'views/partials/navbar.html\' -->\n   <header class="navbar navbar-inverse navbar-fixed-top bs-docs-nav" role="banner">\n    <div class="container">\n     <div class="navbar-header">\n      <button bs-aside="" class="navbar-toggle" data-animation="am-fade-and-slide-left" data-container="body" data-placement="left" data-template="views/partials/aside.tpl.html" title="Menu" type="button">\n       <span class="sr-only">\n        Toggle navigation\n       </span>\n       <span class="icon-bar">\n       </span>\n       <span class="icon-bar">\n       </span>\n       <span class="icon-bar">\n       </span>\n      </button>\n      <a class="navbar-brand" href="./">\n       AngularStrap\n      </a>\n     </div>\n     <nav class="collapse navbar-collapse bs-navbar-collapse" role="navigation">\n      <ul class="nav navbar-nav">\n       <!--         <li>\n          <a href="./getting-started">Getting started</a>\n        </li> -->\n       <li>\n        <a href="#directives">\n         Directives\n        </a>\n       </li>\n       <!--         <li>\n          <a href="./customize">Customize</a>\n        </li> -->\n      </ul>\n      <ul class="nav navbar-nav navbar-right">\n       <!--         <li>\n          <a href="./about">About</a>\n        </li> -->\n       <li>\n        <a class="github-badge" href="//travis-ci.org/mgcrea/angular-strap" target="_blank">\n         <img src="//img.shields.io/travis/mgcrea/angular-strap/master.svg?style=flat"/>\n        </a>\n       </li>\n       <li>\n        <a class="github-badge" href="//codeclimate.com/github/mgcrea/angular-strap" target="_blank">\n         <img src="//img.shields.io/codeclimate/coverage/github/mgcrea/angular-strap.svg?style=flat"/>\n        </a>\n       </li>\n       <li>\n        <a href="//github.com/mgcrea/angular-strap" target="_blank">\n         <i class="fa fa-github">\n         </i>\n         GitHub\n         <!-- <img src="//badge.fury.io/bo/angular-strap.png"/> -->\n        </a>\n       </li>\n       <!-- <li class="muted">\xc2\xb7</li> -->\n       <li>\n        <a href="//github.com/mgcrea/angular-strap/releases" target="_blank">\n         <i class="fa fa-download">\n         </i>\n         <span ng-bind="version">\n          v2.3.8\n         </span>\n         <!-- <img src="//badge.fury.io/bo/angular-strap.png"/> -->\n        </a>\n       </li>\n      </ul>\n     </nav>\n    </div>\n   </header>\n   <!--/ngInclude: \'views/partials/navbar.html\' -->\n  </div>\n  <div>\n   <!-- ngInclude: \'views/partials/header.html\' -->\n   <div class="bs-header" id="content">\n    <div class="container">\n     <div class="col-md-9">\n      <h1>\n       AngularStrap\n      </h1>\n      <p>\n       AngularJS 1.2+ native directives for Bootstrap 3.\n      </p>\n     </div>\n     <div class="bs-docs-social col-md-3">\n      <ul>\n       <li class="github-btn">\n        <iframe allowtransparency="true" frameborder="0" height="20" scrolling="0" src="http://ghbtns.com/github-btn.html?user=mgcrea&amp;repo=angular-strap&amp;type=star&amp;count=true" width="100">\n        </iframe>\n       </li>\n       <li class="github-btn">\n        <iframe allowtransparency="true" frameborder="0" height="20" scrolling="0" src="http://ghbtns.com/github-btn.html?user=mgcrea&amp;repo=angular-strap&amp;type=fork&amp;count=true" width="100">\n        </iframe>\n       </li>\n       <li class="github-btn">\n        <iframe allowtransparency="true" frameborder="0" height="20" scrolling="0" src="http://ghbtns.com/github-btn.html?user=mgcrea&amp;type=follow&amp;count=true" width="160">\n        </iframe>\n       </li>\n       <li class="twitter-btn">\n        <iframe allowtransparency="true" class="twitter-share-button twitter-share-button-rendered twitter-tweet-button" data-url="http://mgcrea.github.io/angular-strap" frameborder="0" id="twitter-widget-1" scrolling="no" src="http://platform.twitter.com/widgets/tweet_button.4ca9f1d9cb5a373a2f7d0969f5b40084.en.html#dnt=false&amp;id=twitter-widget-1&amp;lang=en&amp;original_referer=http%3A%2F%2Fmgcrea.github.io%2Fangular-strap%2Findex.html&amp;related=olouv&amp;size=m&amp;text=AngularStrap%20-%20AngularJS%201.2%2B%20directives%20for%20Twitter%20Bootstrap%203.&amp;time=1492313054770&amp;type=share&amp;url=http%3A%2F%2Fmgcrea.github.io%2Fangular-strap" style="position: static; visibility: visible; width: 61px; height: 20px;" title="Twitter Tweet Button">\n        </iframe>\n       </li>\n       <li>\n        <div id="___plusone_0" style="text-indent: 0px; margin: 0px; padding: 0px; background: transparent; border-style: none; float: none; line-height: normal; font-size: 1px; vertical-align: baseline; display: inline-block; width: 90px; height: 20px;">\n         <iframe data-gapiattached="true" frameborder="0" hspace="0" id="I0_1492313054746" marginheight="0" marginwidth="0" name="I0_1492313054746" ng-non-bindable="" scrolling="no" src="https://apis.google.com/se/0/_/+1/fastbutton?usegapi=1&amp;size=medium&amp;origin=http%3A%2F%2Fmgcrea.github.io&amp;url=http%3A%2F%2Fmgcrea.github.io%2Fangular-strap&amp;gsrc=3p&amp;ic=1&amp;jsh=m%3B%2F_%2Fscs%2Fapps-static%2F_%2Fjs%2Fk%3Doz.gapi.en_US.HdvhyCxp9wc.O%2Fm%3D__features__%2Fam%3DAQ%2Frt%3Dj%2Fd%3D1%2Frs%3DAGLTcCPLfzn4Ik3j72jUMX8o_0rWowChyw#_methods=onPlusOne%2C_ready%2C_close%2C_open%2C_resizeMe%2C_renderstart%2Concircled%2Cdrefresh%2Cerefresh%2Conload&amp;id=I0_1492313054746&amp;parent=http%3A%2F%2Fmgcrea.github.io&amp;pfname=&amp;rpctoken=28965837" style="position: static; top: 0px; width: 90px; margin: 0px; border-style: none; left: 0px; visibility: visible; height: 20px;" tabindex="0" title="+1" vspace="0" width="100%">\n         </iframe>\n        </div>\n       </li>\n      </ul>\n     </div>\n    </div>\n   </div>\n   <!--/ngInclude: \'views/partials/header.html\' -->\n  </div>\n  <div>\n   <!-- ngInclude: \'views/home.html\' -->\n   <div class="container bs-docs-container">\n    <div class="row">\n     <div class="col-md-2 hidden-sm hidden-xs">\n      <div>\n       <!-- ngInclude: \'views/partials/affixed-sidebar.html\' -->\n       <div bs-affix="" bs-scrollspy-list="" class="bs-sidebar hidden-print affix-top" data-offset-top="-100" role="complementary" style="position: relative;">\n        <ul class="nav bs-sidenav">\n         <!--     <li>\n      <a href="#js-overview">Overview</a>\n      <ul class="nav">\n        <li><a href="#js-individual-compiled">Individual or compiled</a>\n        </li>\n        <li><a href="#js-data-attrs">Data attributes</a>\n        </li>\n        <li><a href="#js-programmatic-api">Programmatic API</a>\n        </li>\n        <li><a href="#js-noconflict">No conflict</a>\n        </li>\n        <li><a href="#js-events">Events</a>\n        </li>\n      </ul>\n    </li>\n    <li><a href="#transitions">Transitions</a>\n    </li> -->\n         <li bs-scrollspy="" class="active" data-target="#getting-started">\n          <a href="#getting-started">\n           Getting started\n          </a>\n          <!--       <ul class="nav">\n        <li><a href="#modals-examples">Examples</a></li>\n        <li><a href="#modals-usage">Usage</a></li>\n      </ul> -->\n         </li>\n         <hr style="margin: 2px 0;"/>\n         <li bs-scrollspy="" data-target="#modals">\n          <a href="#modals">\n           Modal\n          </a>\n          <ul class="nav">\n           <li bs-scrollspy="" data-target="#modals-examples">\n            <a href="#modals-examples">\n             Examples\n            </a>\n           </li>\n           <li bs-scrollspy="" data-target="#modals-usage">\n            <a href="#modals-usage">\n             Usage\n            </a>\n           </li>\n          </ul>\n         </li>\n         <li bs-scrollspy="" data-target="#asides">\n          <a href="#asides">\n           Aside\n          </a>\n          <ul class="nav">\n           <li bs-scrollspy="" data-target="#asides-examples">\n            <a href="#asides-examples">\n             Examples\n            </a>\n           </li>\n           <li bs-scrollspy="" data-target="#asides-usage">\n            <a href="#asides-usage">\n             Usage\n            </a>\n           </li>\n          </ul>\n         </li>\n         <li bs-scrollspy="" data-target="#alerts">\n          <a href="#alerts">\n           Alert\n          </a>\n          <ul class="nav">\n           <li bs-scrollspy="" data-target="#alerts-examples">\n            <a href="#alerts-examples">\n             Examples\n            </a>\n           </li>\n           <li bs-scrollspy="" data-target="#alerts-usage">\n            <a href="#alerts-usage">\n             Usage\n            </a>\n           </li>\n          </ul>\n         </li>\n         <li bs-scrollspy="" data-target="#tooltips">\n          <a href="#tooltips">\n           Tooltip\n          </a>\n          <ul class="nav">\n           <li bs-scrollspy="" data-target="#tooltips-examples">\n            <a href="#tooltips-examples">\n             Examples\n            </a>\n           </li>\n           <li bs-scrollspy="" data-target="#tooltips-usage">\n            <a href="#tooltips-usage">\n             Usage\n            </a>\n           </li>\n          </ul>\n         </li>\n         <li bs-scrollspy="" data-target="#popovers">\n          <a href="#popovers">\n           Popover\n          </a>\n          <ul class="nav">\n           <li bs-scrollspy="" data-target="#popovers-examples">\n            <a href="#popovers-examples">\n             Examples\n            </a>\n           </li>\n           <li bs-scrollspy="" data-target="#popovers-usage">\n            <a href="#popovers-usage">\n             Usage\n            </a>\n           </li>\n          </ul>\n         </li>\n         <li bs-scrollspy="" data-target="#typeaheads">\n          <a href="#typeaheads">\n           Typeahead\n          </a>\n          <ul class="nav">\n           <li bs-scrollspy="" data-target="#typeaheads-examples">\n            <a href="#typeaheads-examples">\n             Examples\n            </a>\n           </li>\n           <li bs-scrollspy="" data-target="#typeaheads-usage">\n            <a href="#typeaheads-usage">\n             Usage\n            </a>\n           </li>\n          </ul>\n         </li>\n         <li bs-scrollspy="" data-target="#datepickers">\n          <a href="#datepickers">\n           Datepicker\n          </a>\n          <ul class="nav">\n           <li bs-scrollspy="" data-target="#datepickers-examples">\n            <a href="#datepickers-examples">\n             Examples\n            </a>\n           </li>\n           <li bs-scrollspy="" data-target="#datepickers-usage">\n            <a href="#datepickers-usage">\n             Usage\n            </a>\n           </li>\n          </ul>\n         </li>\n         <li bs-scrollspy="" data-target="#timepickers">\n          <a href="#timepickers">\n           Timepicker\n          </a>\n          <ul class="nav">\n           <li bs-scrollspy="" data-target="#timepickers-examples">\n            <a href="#timepickers-examples">\n             Examples\n            </a>\n           </li>\n           <li bs-scrollspy="" data-target="#timepickers-usage">\n            <a href="#timepickers-usage">\n             Usage\n            </a>\n           </li>\n          </ul>\n         </li>\n         <li bs-scrollspy="" data-target="#buttons">\n          <a href="#buttons">\n           Button\n          </a>\n          <ul class="nav">\n           <li bs-scrollspy="" data-target="#buttons-examples">\n            <a href="#buttons-examples">\n             Examples\n            </a>\n           </li>\n           <li bs-scrollspy="" data-target="#buttons-usage">\n            <a href="#buttons-usage">\n             Usage\n            </a>\n           </li>\n          </ul>\n         </li>\n         <li bs-scrollspy="" data-target="#selects">\n          <a href="#selects">\n           Select\n          </a>\n          <ul class="nav">\n           <li bs-scrollspy="" data-target="#selects-examples">\n            <a href="#selects-examples">\n             Examples\n            </a>\n           </li>\n           <li bs-scrollspy="" data-target="#selects-usage">\n            <a href="#selects-usage">\n             Usage\n            </a>\n           </li>\n          </ul>\n         </li>\n         <li bs-scrollspy="" data-target="#tabs">\n          <a href="#tabs">\n           Tab\n          </a>\n          <ul class="nav">\n           <li bs-scrollspy="" data-target="#tabs-examples">\n            <a href="#tabs-examples">\n             Examples\n            </a>\n           </li>\n           <li bs-scrollspy="" data-target="#tabs-usage">\n            <a href="#tabs-usage">\n             Usage\n            </a>\n           </li>\n          </ul>\n         </li>\n         <li bs-scrollspy="" data-target="#collapses">\n          <a href="#collapses">\n           Collapse\n          </a>\n          <ul class="nav">\n           <li bs-scrollspy="" data-target="#collapses-examples">\n            <a href="#collapses-examples">\n             Examples\n            </a>\n           </li>\n           <li bs-scrollspy="" data-target="#collapses-usage">\n            <a href="#collapses-usage">\n             Usage\n            </a>\n           </li>\n          </ul>\n         </li>\n         <li bs-scrollspy="" data-target="#dropdowns">\n          <a href="#dropdowns">\n           Dropdown\n          </a>\n          <ul class="nav">\n           <li bs-scrollspy="" data-target="#dropdowns-examples">\n            <a href="#dropdowns-examples">\n             Examples\n            </a>\n           </li>\n           <li bs-scrollspy="" data-target="#dropdowns-usage">\n            <a href="#dropdowns-usage">\n             Usage\n            </a>\n           </li>\n          </ul>\n         </li>\n         <li bs-scrollspy="" data-target="#navbars">\n          <a href="#navbars">\n           Navbar\n          </a>\n          <ul class="nav">\n           <li bs-scrollspy="" data-target="#navbars-examples">\n            <a href="#navbars-examples">\n             Examples\n            </a>\n           </li>\n           <li bs-scrollspy="" data-target="#navbars-usage">\n            <a href="#navbars-usage">\n             Usage\n            </a>\n           </li>\n          </ul>\n         </li>\n         <li bs-scrollspy="" data-target="#scrollspy">\n          <a href="#scrollspy">\n           Scrollspy\n          </a>\n          <ul class="nav">\n           <li bs-scrollspy="" data-target="#scrollspy-examples">\n            <a href="#scrollspy-examples">\n             Examples\n            </a>\n           </li>\n           <li bs-scrollspy="" data-target="#scrollspy-usage">\n            <a href="#scrollspy-usage">\n             Usage\n            </a>\n           </li>\n          </ul>\n         </li>\n         <li bs-scrollspy="" data-target="#affix">\n          <a href="#affix">\n           Affix\n          </a>\n          <ul class="nav">\n           <li bs-scrollspy="" data-target="#affix-examples">\n            <a href="#affix-examples">\n             Examples\n            </a>\n           </li>\n           <li bs-scrollspy="" data-target="#affix-usage">\n            <a href="#affix-usage">\n             Usage\n            </a>\n           </li>\n          </ul>\n         </li>\n         <!--\n\n    <li>\n      <a href="#carousel">Carousel</a>\n      <ul class="nav">\n        <li><a href="#carousel-examples">Examples</a>\n        </li>\n        <li><a href="#carousel-usage">Usage</a>\n        </li>\n      </ul>\n    </li> -->\n        </ul>\n       </div>\n       <!--/ngInclude: \'views/partials/affixed-sidebar.html\' -->\n      </div>\n     </div>\n     <div class="col-md-10">\n      <div>\n       <!-- ngInclude: \'views/sections/getting-started.html\' -->\n       <div class="bs-docs-section">\n        <div class="page-header">\n         <h1 id="getting-started">\n          Getting started\n          <a class="small" href="//github.com/mgcrea/angular-strap/blob/master/README.md" target="_blank">\n           readme.md\n          </a>\n         </h1>\n         <code>\n          mgcrea.ngStrap\n         </code>\n        </div>\n        <div class="callout callout-info">\n         <h4 id="project-history">\n          About the project\n         </h4>\n         <p>\n          AngularStrap is a set of native directives that enables seamless integration of Bootstrap#^3.0 into your AngularJS#^1.2 application.\n         </p>\n         <p>\n          With no external dependency except the Bootstrap CSS styles, AngularStrap is light and fast. It has been built from the ground up to leverage ngAnimate!\n         </p>\n         <p>\n          AngularStrap is tested against the latest patch release of the 1.2, 1.3 and 1.4 branches.\n         </p>\n        </div>\n        <h2 id="project-quickstart">\n         Quick Start\n        </h2>\n        <p>\n         Install and manage AngularStrap with\n         <a href="http://bower.io">\n          Bower\n         </a>\n         .\n         <small>\n          You can also use\n          <a href="https://www.nuget.org/packages/angular-strap">\n           NuGet\n          </a>\n          .\n         </small>\n         A\n         <a href="http://cdnjs.com/libraries/angular-strap">\n          CDN\n         </a>\n         is also provided by cdnjs.com.\n        </p>\n        <div class="highlight">\n         <pre>      <code class="bash hljs" highlight-block="">$ bower install angular-strap --save\n</code>\n    </pre>\n        </div>\n        <p>\n         Load the required javascript libraries (Bootstrap scripts files are not needed).\n        </p>\n        <div class="highlight">\n         <pre>      <div class="code html">\n        &lt;script src="//ajax.googleapis.com/ajax/libs/angularjs/1.5.8/angular.min.js"&gt;&lt;/script&gt;<br/>\n        &lt;script src="//cdnjs.cloudflare.com/ajax/libs/angular-strap/v2.3.8/angular-strap.min.js"&gt;&lt;/script&gt;<br/>\n        &lt;script src="//cdnjs.cloudflare.com/ajax/libs/angular-strap/v2.3.8/angular-strap.tpl.min.js"&gt;&lt;/script&gt;\n      </div>\n    </pre>\n        </div>\n        <p>\n         Inject the\n         <code>\n          mgcrea.ngStrap\n         </code>\n         module into your application.\n        </p>\n        <div class="highlight">\n         <pre>      <code class="javascript hljs" highlight-block="">angular.module(<span class="hljs-string">\'myApp\'</span>, [<span class="hljs-string">\'mgcrea.ngStrap\'</span>]);\n</code>\n    </pre>\n        </div>\n        <div class="callout callout-info">\n         <h4>\n          Why are there two angular-strap files?\n         </h4>\n         <p>\n          AngularStrap provides two different files:\n         </p>\n         <ul>\n          <li>\n           angular-strap.js: library javascript code\n          </li>\n          <li>\n           angular-strap.tpl.js: default HTML inline templates used by the directives\n          </li>\n         </ul>\n         <p>\n          By keeping the HTML template definitions in a separate file, it makes it easier to customize the templates used by the directives by creating a custom copy of the file or by overriding some of the templates.\n         </p>\n        </div>\n        <div class="callout callout-info">\n         <h4>\n          Custom builds\n         </h4>\n         <p>\n          AngularStrap provides independently built modules that can be loaded separately\n         </p>\n         <div class="highlight">\n          <pre>        <code class="javascript hljs" highlight-block="">angular.module(<span class="hljs-string">\'myApp\'</span>, [ <span class="hljs-string">\'mgcrea.ngStrap.modal\'</span>, <span class="hljs-string">\'mgcrea.ngStrap.aside\'</span>, <span class="hljs-string">\'mgcrea.ngStrap.tooltip\'</span> ]);\n</code>\n      </pre>\n         </div>\n        </div>\n        <h2 id="project-contribute">\n         Contribute\n        </h2>\n        <p>\n         Build and work on AngularStrap with\n         <a href="http://gulpjs.com">\n          Gulp\n         </a>\n         .\n        </p>\n        <div class="highlight">\n         <pre>      <code class="bash hljs" highlight-block="">// Serve and watch docs, ideal to hack!\n$ gulp serve\n// Continuous integration\n$ gulp karma:server\n// Build AngularS<span class="hljs-built_in">trap</span>\n$ gulp build\n</code>\n    </pre>\n        </div>\n        <h2 id="project-animations">\n         Animations\n        </h2>\n        <p>\n         AngularStrap leverages AngularJS\n         <code>\n          ngAnimate\n         </code>\n         module to provide animations to the directives. Therefore, it requires to load custom CSS code as\n         <code>\n          ngAnimate\n         </code>\n         comes with a very specific markup.\n        </p>\n        <div class="callout callout-info">\n         <h4>\n          AngularMotion\n         </h4>\n         <p>\n          Theses docs rely on the\n          <code>\n           angular-motion.css\n          </code>\n          stylesheet from the\n          <a href="//github.com/mgcrea/angular-motion" target="_blank">\n           AngularMotion\n          </a>\n          project.\n         </p>\n         <div class="highlight">\n          <pre>        <code class="bash hljs" highlight-block="">$ bower install angular-motion --save\n</code>\n      </pre>\n         </div>\n        </div>\n       </div>\n       <!--/ngInclude: \'views/sections/getting-started.html\' -->\n      </div>\n      <div id="directives">\n       <div>\n        <!-- ngInclude: \'modal/docs/modal.demo.html\' -->\n        <div class="bs-docs-section" ng-controller="ModalDemoCtrl">\n         <div class="page-header">\n          <h1 id="modals">\n           Modals\n           <a class="small" href="//github.com/mgcrea/angular-strap/blob/master/src/modal/modal.js" target="_blank">\n            modal.js\n           </a>\n          </h1>\n          <code>\n           mgcrea.ngStrap.modal\n          </code>\n         </div>\n         <h2 id="modals-examples">\n          Examples\n         </h2>\n         <p>\n          Modals are streamlined, but flexible, dialog prompts with the minimum required functionality and smart defaults.\n         </p>\n         <h3>\n          Live demo\n          <a bs-tooltip="" class="small edit-plunkr" data-content-html-url="modal/docs/modal.demo.html" data-content-js-url="modal/docs/modal.demo.js" data-module-name="mgcrea.ngStrapDocs" data-placement="right" data-title="edit in plunker" ng-plunkr="">\n           <i class="fa fa-edit">\n           </i>\n           <small>\n            plunker\n           </small>\n          </a>\n         </h3>\n         <pre class="bs-example-scope">$scope.modal = {\n  "title": "Title",\n  "content": "Hello Modal&lt;br /&gt;This is a multiline message!"\n};</pre>\n         <div append-source="" class="bs-example" style="padding-bottom: 24px;">\n          <!-- Button to trigger a default modal with a scope as an object {title:\'\', content:\'\', etc.} -->\n          <button bs-modal="modal" class="btn btn-lg btn-primary" data-animation="am-fade-and-scale" data-placement="center" type="button">\n           Click to toggle modal\n           <br/>\n           <small>\n            (using an object)\n           </small>\n          </button>\n          <!-- You can use a custom html template with the `data-template` attr -->\n          <button bs-modal="modal" class="btn btn-lg btn-danger" data-animation="am-fade-and-slide-top" data-template-url="modal/docs/modal.demo.tpl.html" type="button">\n           Custom Modal\n           <br/>\n           <small>\n            (using data-template)\n           </small>\n          </button>\n          <!-- You can use a custom html template with the `data-template` attr -->\n          <button class="btn btn-lg btn-danger" ng-click="showModal()" type="button">\n           Modal\n           <br/>\n           <small>\n            (using service)\n           </small>\n          </button>\n         </div>\n         <div class="highlight" ng-non-bindable="">\n          <pre><code class="html hljs xml" style="margin:0"><span class="hljs-comment">&lt;!-- Button to trigger a default modal with a scope as an object {title:\'\', content:\'\', etc.} --&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-lg btn-primary"</span> <span class="hljs-attr">data-animation</span>=<span class="hljs-string">"am-fade-and-scale"</span> <span class="hljs-attr">data-placement</span>=<span class="hljs-string">"center"</span> <span class="hljs-attr">bs-modal</span>=<span class="hljs-string">"modal"</span>&gt;</span>Click to toggle modal\n  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">small</span>&gt;</span>(using an object)<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- You can use a custom html template with the `data-template` attr --&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-lg btn-danger"</span> <span class="hljs-attr">data-animation</span>=<span class="hljs-string">"am-fade-and-slide-top"</span> <span class="hljs-attr">data-template-url</span>=<span class="hljs-string">"modal/docs/modal.demo.tpl.html"</span> <span class="hljs-attr">bs-modal</span>=<span class="hljs-string">"modal"</span>&gt;</span>Custom Modal\n  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">small</span>&gt;</span>(using data-template)<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- You can use a custom html template with the `data-template` attr --&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-lg btn-danger"</span> <span class="hljs-attr">ng-click</span>=<span class="hljs-string">"showModal()"</span>&gt;</span>Modal\n  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">small</span>&gt;</span>(using service)<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n</code></pre>\n         </div>\n         <div class="callout callout-info">\n          <h4>\n           Backdrop animation\n          </h4>\n          <p>\n           Backdrop animation being powered by\n           <code>\n            ngAnimate\n           </code>\n           , it requires custom CSS.\n          </p>\n          <pre class="bs-exemple-code">      <code class="css hljs" highlight-block=""><span class="hljs-selector-class">.modal-backdrop</span><span class="hljs-selector-class">.am-fade</span> {\n  <span class="hljs-attribute">opacity</span>: .<span class="hljs-number">5</span>;\n  <span class="hljs-attribute">transition</span>: opacity .<span class="hljs-number">15s</span> linear;\n  &amp;.ng-enter {\n    <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;\n    &amp;.ng-enter-active {\n      <span class="hljs-attribute">opacity</span>: .<span class="hljs-number">5</span>;\n    }\n  }\n  &amp;<span class="hljs-selector-class">.ng-leave</span> {\n    <span class="hljs-attribute">opacity</span>: .<span class="hljs-number">5</span>;\n    &amp;.ng-leave-active {\n      <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;\n    }\n  }\n}\n</code>\n    </pre>\n         </div>\n         <h2 id="modals-usage">\n          Usage\n         </h2>\n         <p>\n          Append a\n          <code>\n           bs-modal\n          </code>\n          attribute to any element to activate the directive.\n         </p>\n         <div class="callout callout-info">\n          <h4>\n           The module also exposes a\n           <code>\n            $modal\n           </code>\n           service\n          </h4>\n          <p>\n           Available for programmatic use (inside a directive/controller).\n          </p>\n          <div class="highlight">\n           <pre>        <code class="javascript hljs" highlight-block="">angular.module(<span class="hljs-string">\'myApp\'</span>)\n.controller(<span class="hljs-string">\'DemoCtrl\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">$scope, $modal</span>) </span>{\n  <span class="hljs-comment">// Show a basic modal from a controller</span>\n  <span class="hljs-keyword">var</span> myModal = $modal({title: <span class="hljs-string">\'My Title\'</span>, content: <span class="hljs-string">\'My Content\'</span>, show: <span class="hljs-literal">true</span>});\n\n  <span class="hljs-comment">// Pre-fetch an external template populated with a custom scope</span>\n  <span class="hljs-keyword">var</span> myOtherModal = $modal({scope: $scope, template: <span class="hljs-string">\'modal/docs/modal.demo.tpl.html\'</span>, show: <span class="hljs-literal">false</span>});\n  <span class="hljs-comment">// Show when some event occurs (use $promise property to ensure the template has been loaded)</span>\n  $scope.showModal = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n    myOtherModal.$promise.then(myOtherModal.show);\n  };\n})\n</code>\n      </pre>\n          </div>\n         </div>\n         <h3>\n          Options\n         </h3>\n         <p>\n          Options can be passed via data-attributes on the directive or as an object hash to configure the service. For data attributes, append the option name to\n          <code>\n           data-\n          </code>\n          , as in\n          <code>\n           data-animation=""\n          </code>\n          .\n         </p>\n         <p>\n          For directives, you can naturally inherit the contextual\n          <code>\n           $scope\n          </code>\n          or leverage a custom one with an\n          <a href="http://docs.angularjs.org/guide/expression">\n           AngularJS expression\n          </a>\n          to evaluate as an object directly on the\n          <code>\n           bs-modal\n          </code>\n          attribute\n         </p>\n         <div class="table-responsive">\n          <table class="table table-bordered table-striped">\n           <thead>\n            <tr>\n             <th style="width: 100px;">\n              Name\n             </th>\n             <th style="width: 50px;">\n              type\n             </th>\n             <th style="width: 50px;">\n              default\n             </th>\n             <th>\n              description\n             </th>\n            </tr>\n           </thead>\n           <tbody>\n            <tr>\n             <td>\n              animation\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              am-fade\n             </td>\n             <td>\n              apply a CSS animation powered by ngAnimate\n             </td>\n            </tr>\n            <tr>\n             <td>\n              backdropAnimation\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              am-fade\n             </td>\n             <td>\n              apply a CSS animation to backdrop powered by ngAnimate\n             </td>\n            </tr>\n            <tr>\n             <td>\n              placement\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              \'top\'\n             </td>\n             <td>\n              how to position the modal - top | bottom | center\n              <small>\n               (requires custom CSS)\n              </small>\n              .\n             </td>\n            </tr>\n            <tr>\n             <td>\n              title\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              \'\'\n             </td>\n             <td>\n              default title value if\n              <code>\n               title\n              </code>\n              attribute isn\'t present\n             </td>\n            </tr>\n            <tr>\n             <td>\n              content\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              \'\'\n             </td>\n             <td>\n              default content value if\n              <code>\n               data-content\n              </code>\n              attribute isn\'t present\n             </td>\n            </tr>\n            <tr>\n             <td>\n              html\n             </td>\n             <td>\n              boolean\n             </td>\n             <td>\n              false\n             </td>\n             <td>\n              replace\n              <code>\n               ng-bind\n              </code>\n              with\n              <code>\n               ng-bind-html\n              </code>\n              , requires\n              <code>\n               ngSanitize\n              </code>\n              to be loaded\n             </td>\n            </tr>\n            <tr>\n             <td>\n              backdrop\n             </td>\n             <td>\n              boolean or the string\n              <code>\n               \'static\'\n              </code>\n             </td>\n             <td>\n              true\n             </td>\n             <td>\n              Includes a modal-backdrop element. Alternatively, specify\n              <code>\n               static\n              </code>\n              for a backdrop which doesn\'t close the modal on click.\n             </td>\n            </tr>\n            <tr>\n             <td>\n              keyboard\n             </td>\n             <td>\n              boolean\n             </td>\n             <td>\n              true\n             </td>\n             <td>\n              Closes the modal when escape key is pressed\n             </td>\n            </tr>\n            <tr>\n             <td>\n              show\n             </td>\n             <td>\n              boolean\n             </td>\n             <td>\n              true\n             </td>\n             <td>\n              Shows the modal when initialized.\n             </td>\n            </tr>\n            <tr>\n             <td>\n              container\n             </td>\n             <td>\n              string | false\n             </td>\n             <td>\n              false\n             </td>\n             <td>\n              <p>\n               Appends the popover to a specific element. Example:\n               <code>\n                container: \'body\'\n               </code>\n               . This option is particularly useful in that it allows you to position the popover in the flow of the document near the triggering element -\xc2\xa0which will prevent the popover from floating away from the triggering element during a window resize.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              controller\n             </td>\n             <td>\n              string|function\n             </td>\n             <td>\n              false\n             </td>\n             <td>\n              <p>\n               Controller fn that should be associated with newly created scope or the name of a registered controller if passed as a string.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              controllerAs\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              false\n             </td>\n             <td>\n              <p>\n               A controller alias name. If present the controller will be published to scope under the `controllerAs` name.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              resolve\n             </td>\n             <td>\n              object\n             </td>\n             <td>\n              false\n             </td>\n             <td>\n              <p>\n               Object containing dependencies that will be injected into the controller\'s constructor when all the dependencies have resolved. The controller won\'t load if the promise is rejected.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              locals\n             </td>\n             <td>\n              object\n             </td>\n             <td>\n              false\n             </td>\n             <td>\n              <p>\n               Object containing dependencies that will be injected into the controller\'s constructor. Similar to resolve but expects literal values instead of promises.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              template\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              \'\'\n             </td>\n             <td>\n              <p>\n               Provide an html template as a string (when templateUrl is falsy).\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              templateUrl\n             </td>\n             <td>\n              path\n             </td>\n             <td>\n              \'modal/modal.tpl.html\'\n             </td>\n             <td>\n              <p>\n               If provided, overrides the default template, can be either a remote URL or a cached template id.\n              </p>\n              <p>\n               It should be a\n               <code>\n                div.modal\n               </code>\n               element following Bootstrap styles conventions (\n               <a href="//github.com/mgcrea/angular-strap/blob/master/src/modal/modal.tpl.html" target="_blank">\n                like this\n               </a>\n               ).\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              contentTemplate\n             </td>\n             <td>\n              path\n             </td>\n             <td>\n              false\n             </td>\n             <td>\n              <p>\n               If provided, fetches the partial and includes it as the inner content, can be either a remote URL or a cached template id.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              prefixEvent\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              \'modal\'\n             </td>\n             <td>\n              <p>\n               If provided, prefixes the events \'.hide.before\' \'.hide\' \'.show.before\' and \'.show\' with the passed in value. With the default value these events are \'modal.hide.before\' \'modal.hide\' \'modal.show.before\' and \'modal.show\'\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              id\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              \'\'\n             </td>\n             <td>\n              The modal instance id for usage in event handlers.\n             </td>\n            </tr>\n            <tr>\n             <td>\n              onShow\n             </td>\n             <td>\n              function\n             </td>\n             <td>\n             </td>\n             <td>\n              <p>\n               If provided, this function will be invoked after the modal is shown.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              onBeforeShow\n             </td>\n             <td>\n              function\n             </td>\n             <td>\n             </td>\n             <td>\n              <p>\n               If provided, this function will be invoked before the modal is shown.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              onHide\n             </td>\n             <td>\n              function\n             </td>\n             <td>\n             </td>\n             <td>\n              <p>\n               If provided, this function will be invoked after the modal is hidden.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              onBeforeHide\n             </td>\n             <td>\n              function\n             </td>\n             <td>\n             </td>\n             <td>\n              <p>\n               If provided, this function will be invoked before the modal is hidden.\n              </p>\n             </td>\n            </tr>\n           </tbody>\n          </table>\n         </div>\n         <div class="callout callout-info">\n          <h4>\n           Default options\n          </h4>\n          <p>\n           You can override global defaults for the plugin with\n           <code>\n            $modalProvider.defaults\n           </code>\n          </p>\n          <div class="highlight">\n           <pre class="bs-exemple-code">        <code class="javascript hljs" highlight-block="">angular.module(<span class="hljs-string">\'myApp\'</span>)\n.config(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">$modalProvider</span>) </span>{\n  angular.extend($modalProvider.defaults, {\n    animation: <span class="hljs-string">\'am-flip-x\'</span>\n  });\n})\n</code>\n      </pre>\n          </div>\n         </div>\n         <h3>\n          Scope methods\n         </h3>\n         <p>\n          Methods available inside the directive scope to toggle visibility.\n         </p>\n         <h4>\n          $show()\n         </h4>\n         <p>\n          Reveals the modal.\n         </p>\n         <h4>\n          $hide()\n         </h4>\n         <p>\n          Hides the modal.\n         </p>\n         <h4>\n          $toggle()\n         </h4>\n         <p>\n          Toggles the modal.\n         </p>\n        </div>\n        <!--/ngInclude: \'modal/docs/modal.demo.html\' -->\n       </div>\n       <div>\n        <!-- ngInclude: \'aside/docs/aside.demo.html\' -->\n        <div class="bs-docs-section" ng-controller="AsideDemoCtrl">\n         <div class="page-header">\n          <h1 id="asides">\n           Asides\n           <a class="small" href="//github.com/mgcrea/angular-strap/blob/master/src/aside/aside.js" target="_blank">\n            aside.js\n           </a>\n          </h1>\n          <code>\n           mgcrea.ngStrap.aside\n          </code>\n         </div>\n         <h2 id="asides-examples">\n          Examples\n         </h2>\n         <p>\n          Asides are custom panels, drawers that inherit the behavior of modals.\n         </p>\n         <div class="callout callout-danger">\n          <h4>\n           Plugin dependency\n          </h4>\n          <p>\n           Asides require the\n           <a href="#modals">\n            modal plugin\n           </a>\n           to be included.\n          </p>\n         </div>\n         <h3>\n          Live demo\n          <a bs-tooltip="" class="small edit-plunkr" data-content-html-url="aside/docs/aside.demo.html" data-content-js-url="aside/docs/aside.demo.js" data-module-name="mgcrea.ngStrapDocs" data-placement="right" data-title="edit in plunker" ng-plunkr="">\n           <i class="fa fa-edit">\n           </i>\n           <small>\n            plunker\n           </small>\n          </a>\n         </h3>\n         <pre class="bs-example-scope">$scope.aside = {\n  "title": "Title",\n  "content": "Hello Aside&lt;br /&gt;This is a multiline message!"\n};</pre>\n         <div append-source="" class="bs-example">\n          <!-- Button to trigger a default aside with a scope as an object {title:\'\', content:\'\', etc.} -->\n          <button bs-aside="aside" class="btn btn-lg btn-primary" type="button">\n           Click to toggle aside\n           <br/>\n           <small>\n            (using an object)\n           </small>\n          </button>\n          <!-- You can use a custom html template with the `data-template` attr -->\n          <button bs-aside="aside" class="btn btn-lg btn-danger" data-animation="am-slide-left" data-container="body" data-placement="left" data-template-url="aside/docs/aside.demo.tpl.html" type="button">\n           Custom aside\n           <br/>\n           <small>\n            (using data-template)\n           </small>\n          </button>\n         </div>\n         <div class="highlight" ng-non-bindable="">\n          <pre><code class="html hljs xml" style="margin:0"><span class="hljs-comment">&lt;!-- Button to trigger a default aside with a scope as an object {title:\'\', content:\'\', etc.} --&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-lg btn-primary"</span> <span class="hljs-attr">bs-aside</span>=<span class="hljs-string">"aside"</span>&gt;</span>Click to toggle aside\n  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">small</span>&gt;</span>(using an object)<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- You can use a custom html template with the `data-template` attr --&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-lg btn-danger"</span> <span class="hljs-attr">data-template-url</span>=<span class="hljs-string">"aside/docs/aside.demo.tpl.html"</span> <span class="hljs-attr">data-placement</span>=<span class="hljs-string">"left"</span> <span class="hljs-attr">data-animation</span>=<span class="hljs-string">"am-slide-left"</span> <span class="hljs-attr">bs-aside</span>=<span class="hljs-string">"aside"</span> <span class="hljs-attr">data-container</span>=<span class="hljs-string">"body"</span>&gt;</span>Custom aside\n  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">small</span>&gt;</span>(using data-template)<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n</code></pre>\n         </div>\n         <div class="callout callout-info">\n          <h4>\n           Custom styles required\n          </h4>\n          <p>\n           Asides are not part of the Bootstrap\'s core, to use them you must use\n           <code>\n            bootstrap-additions.css\n           </code>\n           from the\n           <a href="//github.com/mgcrea/bootstrap-additions" target="_blank">\n            BootstrapAdditions\n           </a>\n           project. This project being not yet fully released, meanwhile, you can use the\n           <a href="//mgcrea.github.io/angular-strap/static/styles/bootstrap-additions.min.css" target="_blank">\n            development snapshot\n           </a>\n           compiled for theses docs.\n          </p>\n         </div>\n         <h2 id="asides-usage">\n          Usage\n         </h2>\n         <p>\n          Append a\n          <code>\n           bs-aside\n          </code>\n          attribute to any element to enable the plugin.\n         </p>\n         <div class="callout callout-info">\n          <h4>\n           The module also exposes an\n           <code>\n            $aside\n           </code>\n           service\n          </h4>\n          <p>\n           Available for programmatic use.\n          </p>\n          <div class="highlight">\n           <pre>        <code class="javascript hljs" highlight-block="">angular.module(<span class="hljs-string">\'myApp\'</span>)\n.controller(<span class="hljs-string">\'DemoCtrl\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">$scope, $aside</span>) </span>{\n  <span class="hljs-comment">// Show a basic aside from a controller</span>\n  <span class="hljs-keyword">var</span> myAside = $aside({title: <span class="hljs-string">\'My Title\'</span>, content: <span class="hljs-string">\'My Content\'</span>, show: <span class="hljs-literal">true</span>});\n\n  <span class="hljs-comment">// Pre-fetch an external template populated with a custom scope</span>\n  <span class="hljs-keyword">var</span> myOtherAside = $aside({scope: $scope, template: <span class="hljs-string">\'aside/docs/aside.demo.tpl.html\'</span>});\n  <span class="hljs-comment">// Show when some event occurs (use $promise property to ensure the template has been loaded)</span>\n  myOtherAside.$promise.then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n    myOtherAside.show();\n  })\n})\n</code>\n      </pre>\n          </div>\n         </div>\n         <h3>\n          Options\n         </h3>\n         <p>\n          Options can be passed via data-attributes on the directive or as an object hash to configure the service. For data attributes, append the option name to\n          <code>\n           data-\n          </code>\n          , as in\n          <code>\n           data-animation=""\n          </code>\n          .\n         </p>\n         <p>\n          For directives, you can naturally inherit the contextual\n          <code>\n           $scope\n          </code>\n          or leverage a custom one with an\n          <a href="http://docs.angularjs.org/guide/expression">\n           AngularJS expression\n          </a>\n          to evaluate as an object directly on the\n          <code>\n           bs-aside\n          </code>\n          attribute\n         </p>\n         <div class="table-responsive">\n          <table class="table table-bordered table-striped">\n           <thead>\n            <tr>\n             <th style="width: 100px;">\n              Name\n             </th>\n             <th style="width: 50px;">\n              type\n             </th>\n             <th style="width: 50px;">\n              default\n             </th>\n             <th>\n              description\n             </th>\n            </tr>\n           </thead>\n           <tbody>\n            <tr>\n             <td>\n              animation\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              am-fade-and-slide-right\n             </td>\n             <td>\n              apply a CSS animation powered by ngAnimate\n             </td>\n            </tr>\n            <tr>\n             <td>\n              placement\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              \'top\'\n             </td>\n             <td>\n              how to position the modal - top | bottom | center\n              <small>\n               (requires custom CSS)\n              </small>\n              .\n             </td>\n            </tr>\n            <tr>\n             <td>\n              title\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              \'\'\n             </td>\n             <td>\n              default title value if\n              <code>\n               title\n              </code>\n              attribute isn\'t present\n             </td>\n            </tr>\n            <tr>\n             <td>\n              content\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              \'\'\n             </td>\n             <td>\n              default content value if\n              <code>\n               data-content\n              </code>\n              attribute isn\'t present\n             </td>\n            </tr>\n            <tr>\n             <td>\n              html\n             </td>\n             <td>\n              boolean\n             </td>\n             <td>\n              false\n             </td>\n             <td>\n              replace\n              <code>\n               ng-bind\n              </code>\n              with\n              <code>\n               ng-bind-html\n              </code>\n              , requires\n              <code>\n               ngSanitize\n              </code>\n              to be loaded\n             </td>\n            </tr>\n            <tr>\n             <td>\n              backdrop\n             </td>\n             <td>\n              boolean or the string\n              <code>\n               \'static\'\n              </code>\n             </td>\n             <td>\n              true\n             </td>\n             <td>\n              Includes a modal-backdrop element. Alternatively, specify\n              <code>\n               static\n              </code>\n              for a backdrop which doesn\'t close the modal on click.\n             </td>\n            </tr>\n            <tr>\n             <td>\n              keyboard\n             </td>\n             <td>\n              boolean\n             </td>\n             <td>\n              true\n             </td>\n             <td>\n              Closes the modal when escape key is pressed\n             </td>\n            </tr>\n            <tr>\n             <td>\n              show\n             </td>\n             <td>\n              boolean\n             </td>\n             <td>\n              true\n             </td>\n             <td>\n              Shows the modal when initialized.\n             </td>\n            </tr>\n            <tr>\n             <td>\n              container\n             </td>\n             <td>\n              string | false\n             </td>\n             <td>\n              false\n             </td>\n             <td>\n              <p>\n               Appends the popover to a specific element. Example:\n               <code>\n                container: \'body\'\n               </code>\n               . This option is particularly useful in that it allows you to position the popover in the flow of the document near the triggering element -\xc2\xa0which will prevent the popover from floating away from the triggering element during a window resize.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              controller\n             </td>\n             <td>\n              string|function\n             </td>\n             <td>\n              false\n             </td>\n             <td>\n              <p>\n               Controller fn that should be associated with newly created scope or the name of a registered controller if passed as a string.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              controllerAs\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              false\n             </td>\n             <td>\n              <p>\n               A controller alias name. If present the controller will be published to scope under the `controllerAs` name.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              template\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              \'\'\n             </td>\n             <td>\n              <p>\n               Provide an html template as a string (when templateUrl is falsy).\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              templateUrl\n             </td>\n             <td>\n              path\n             </td>\n             <td>\n              \'aside/aside.tpl.html\'\n             </td>\n             <td>\n              <p>\n               If provided, overrides the default template, can be either a remote URL or a cached template id.\n              </p>\n              <p>\n               It should be a\n               <code>\n                div.aside\n               </code>\n               element following Bootstrap Additions styles conventions (\n               <a href="//github.com/mgcrea/angular-strap/blob/master/src/aside/aside.tpl.html" target="_blank">\n                like this\n               </a>\n               ).\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              contentTemplate\n             </td>\n             <td>\n              path\n             </td>\n             <td>\n              false\n             </td>\n             <td>\n              <p>\n               If provided, fetches the partial and includes it as the inner content, can be either a remote URL or a cached template id.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              onShow\n             </td>\n             <td>\n              function\n             </td>\n             <td>\n             </td>\n             <td>\n              <p>\n               If provided, this function will be invoked after the aside is shown.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              onBeforeShow\n             </td>\n             <td>\n              function\n             </td>\n             <td>\n             </td>\n             <td>\n              <p>\n               If provided, this function will be invoked before the aside is shown.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              onHide\n             </td>\n             <td>\n              function\n             </td>\n             <td>\n             </td>\n             <td>\n              <p>\n               If provided, this function will be invoked after the aside is hidden.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              onBeforeHide\n             </td>\n             <td>\n              function\n             </td>\n             <td>\n             </td>\n             <td>\n              <p>\n               If provided, this function will be invoked before the aside is hidden.\n              </p>\n             </td>\n            </tr>\n           </tbody>\n          </table>\n         </div>\n         <div class="callout callout-info">\n          <h4>\n           Default options\n          </h4>\n          <p>\n           You can override global defaults for the plugin with\n           <code>\n            $asideProvider.defaults\n           </code>\n          </p>\n          <div class="highlight">\n           <pre class="bs-exemple-code">        <code class="javascript hljs" highlight-block="">angular.module(<span class="hljs-string">\'myApp\'</span>)\n.config(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">$asideProvider</span>) </span>{\n  angular.extend($asideProvider.defaults, {\n    animation: <span class="hljs-string">\'am-fadeAndSlideLeft\'</span>,\n    placement: <span class="hljs-string">\'left\'</span>\n  });\n})\n</code>\n      </pre>\n          </div>\n         </div>\n         <h3>\n          Scope methods\n         </h3>\n         <p>\n          Methods available inside the directive scope to toggle visibility.\n         </p>\n         <h4>\n          $show()\n         </h4>\n         <p>\n          Reveals the aside.\n         </p>\n         <h4>\n          $hide()\n         </h4>\n         <p>\n          Hides the aside.\n         </p>\n         <h4>\n          $toggle()\n         </h4>\n         <p>\n          Toggles the aside.\n         </p>\n        </div>\n        <!--/ngInclude: \'aside/docs/aside.demo.html\' -->\n       </div>\n       <div>\n        <!-- ngInclude: \'alert/docs/alert.demo.html\' -->\n        <div class="bs-docs-section" ng-controller="AlertDemoCtrl">\n         <div class="page-header">\n          <h1 id="alerts">\n           Alerts\n           <a class="small" href="//github.com/mgcrea/angular-strap/blob/master/src/alert/alert.js" target="_blank">\n            alert.js\n           </a>\n          </h1>\n          <code>\n           mgcrea.ngStrap.alert\n          </code>\n         </div>\n         <h2 id="alerts-examples">\n          Examples\n         </h2>\n         <p>\n          Alerts are styled tiny dialogs that inherit the behavior of modals.\n         </p>\n         <div class="callout callout-danger">\n          <h4>\n           Plugin dependency\n          </h4>\n          <p>\n           Alerts require the\n           <a href="#modals">\n            modal plugin\n           </a>\n           to be included.\n          </p>\n         </div>\n         <h3>\n          Live demo\n          <a bs-tooltip="" class="small edit-plunkr" data-content-html-url="alert/docs/alert.demo.html" data-content-js-url="alert/docs/alert.demo.js" data-module-name="mgcrea.ngStrapDocs" data-placement="right" data-title="edit in plunker" ng-plunkr="">\n           <i class="fa fa-edit">\n           </i>\n           <small>\n            plunker\n           </small>\n          </a>\n         </h3>\n         <pre class="bs-example-scope">$scope.alert = {\n  "title": "Holy guacamole!",\n  "content": "Best check yo self, you\'re not looking too good.",\n  "type": "info"\n};</pre>\n         <div append-source="" class="bs-example" style="padding-bottom: 24px;">\n          <!-- Button to trigger a default alert with a scope as an object {title:\'\', content:\'\', etc.} -->\n          <button bs-alert="alert" class="btn btn-lg btn-primary" data-container="body" data-duration="3" data-placement="top-right">\n           Click to toggle alert\n           <br/>\n           <small>\n            (using an object)\n           </small>\n          </button>\n          <!-- You can also use data-attrs to assign scope variables -->\n          <button bs-alert="" class="btn btn-lg btn-primary" data-container="#alerts-container" data-content="Best check yo self, you\'re not looking too good." data-type="success" title="Holy guacamole!">\n           Click to toggle alert\n           <br/>\n           <small>\n            (using data-attrs)\n           </small>\n          </button>\n          <!-- You can use a custom html template with the `data-template` attr -->\n          <button bs-alert="alert" class="btn btn-lg btn-danger" data-animation="am-fade-and-slide-top" data-container="body" data-duration="3" data-keyboard="true" data-placement="top" data-template="alert/docs/alert.demo.tpl.html">\n           Custom alert\n           <br/>\n           <small>\n            (using data-template)\n           </small>\n          </button>\n          <!-- Element container to append the first alert -->\n          <hr/>\n          <div id="alerts-container">\n          </div>\n         </div>\n         <div class="highlight" ng-non-bindable="">\n          <pre><code class="html hljs xml" style="margin:0"><span class="hljs-comment">&lt;!-- Button to trigger a default alert with a scope as an object {title:\'\', content:\'\', etc.} --&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-lg btn-primary"</span> <span class="hljs-attr">data-placement</span>=<span class="hljs-string">"top-right"</span> <span class="hljs-attr">data-container</span>=<span class="hljs-string">"body"</span> <span class="hljs-attr">data-duration</span>=<span class="hljs-string">"3"</span> <span class="hljs-attr">bs-alert</span>=<span class="hljs-string">"alert"</span>&gt;</span>Click to toggle alert\n  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">small</span>&gt;</span>(using an object)<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- You can also use data-attrs to assign scope variables --&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-lg btn-primary"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"{{alert.title}}"</span> <span class="hljs-attr">data-content</span>=<span class="hljs-string">"{{alert.content}}"</span> <span class="hljs-attr">data-type</span>=<span class="hljs-string">"success"</span> <span class="hljs-attr">data-container</span>=<span class="hljs-string">"#alerts-container"</span> <span class="hljs-attr">bs-alert</span>&gt;</span>Click to toggle alert\n  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">small</span>&gt;</span>(using data-attrs)<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- You can use a custom html template with the `data-template` attr --&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-lg btn-danger"</span> <span class="hljs-attr">data-template</span>=<span class="hljs-string">"alert/docs/alert.demo.tpl.html"</span> <span class="hljs-attr">data-placement</span>=<span class="hljs-string">"top"</span> <span class="hljs-attr">data-duration</span>=<span class="hljs-string">"3"</span> <span class="hljs-attr">data-animation</span>=<span class="hljs-string">"am-fade-and-slide-top"</span> <span class="hljs-attr">data-container</span>=<span class="hljs-string">"body"</span> <span class="hljs-attr">data-keyboard</span>=<span class="hljs-string">"true"</span> <span class="hljs-attr">bs-alert</span>=<span class="hljs-string">"alert"</span>&gt;</span>Custom alert\n  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">small</span>&gt;</span>(using data-template)<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- Element container to append the first alert --&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"alerts-container"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n</code></pre>\n         </div>\n         <h2 id="alerts-usage">\n          Usage\n         </h2>\n         <p>\n          Append a\n          <code>\n           bs-alert\n          </code>\n          attribute to any element to enable the plugin.\n         </p>\n         <div class="callout callout-info">\n          <h4>\n           The module also exposes an\n           <code>\n            $alert\n           </code>\n           service\n          </h4>\n          <p>\n           Available for programmatic use (inside a controller/directive).\n          </p>\n          <div class="highlight">\n           <pre>        <code class="javascript hljs" highlight-block="">angular.module(<span class="hljs-string">\'myApp\'</span>)\n.controller(<span class="hljs-string">\'DemoCtrl\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">$scope, $alert</span>) </span>{\n  <span class="hljs-keyword">var</span> myAlert = $alert({title: <span class="hljs-string">\'Holy guacamole!\'</span>, content: <span class="hljs-string">\'Best check yo self, you\\\'re not looking too good.\'</span>, placement: <span class="hljs-string">\'top\'</span>, type: <span class="hljs-string">\'info\'</span>, show: <span class="hljs-literal">true</span>});\n})\n</code>\n      </pre>\n          </div>\n         </div>\n         <h3>\n          Options\n         </h3>\n         <p>\n          Options can be passed via data-attributes on the directive or as an object hash to configure the service. For data attributes, append the option name to\n          <code>\n           data-\n          </code>\n          , as in\n          <code>\n           data-animation=""\n          </code>\n          .\n         </p>\n         <p>\n          For directives, you can naturally inherit the contextual\n          <code>\n           $scope\n          </code>\n          or leverage a custom one with an\n          <a href="http://docs.angularjs.org/guide/expression">\n           AngularJS expression\n          </a>\n          to evaluate as an object directly on the\n          <code>\n           bs-aside\n          </code>\n          attribute\n         </p>\n         <div class="table-responsive">\n          <table class="table table-bordered table-striped">\n           <thead>\n            <tr>\n             <th style="width: 100px;">\n              Name\n             </th>\n             <th style="width: 50px;">\n              type\n             </th>\n             <th style="width: 50px;">\n              default\n             </th>\n             <th>\n              description\n             </th>\n            </tr>\n           </thead>\n           <tbody>\n            <tr>\n             <td>\n              animation\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              am-fade\n             </td>\n             <td>\n              apply a CSS animation powered by ngAnimate\n             </td>\n            </tr>\n            <tr>\n             <td>\n              placement\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              \'\'\n             </td>\n             <td>\n              how to position the alert - top | top-left | top-right\n              <small>\n               (requires custom CSS)\n              </small>\n              .\n             </td>\n            </tr>\n            <tr>\n             <td>\n              title\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              \'\'\n             </td>\n             <td>\n              default title value if\n              <code>\n               title\n              </code>\n              attribute isn\'t present\n             </td>\n            </tr>\n            <tr>\n             <td>\n              content\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              \'\'\n             </td>\n             <td>\n              default content value if\n              <code>\n               data-content\n              </code>\n              attribute isn\'t present\n             </td>\n            </tr>\n            <tr>\n             <td>\n              type\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              \'info\'\n             </td>\n             <td>\n              default content value if\n              <code>\n               data-type\n              </code>\n              attribute isn\'t present\n             </td>\n            </tr>\n            <!--\nRemoving keyboard from the docs. Our template doesn\'t have tabindex for focus stealing issues, keyboard won\'t work\nso remove the option then. Just looks bad to have an option that doesn\'t work\n        <tr>\n          <td>keyboard</td>\n          <td>boolean</td>\n          <td>true</td>\n          <td>Closes the alert when escape key is pressed</td>\n        </tr>\n-->\n            <tr>\n             <td>\n              show\n             </td>\n             <td>\n              boolean\n             </td>\n             <td>\n              true\n             </td>\n             <td>\n              Shows the alert when initialized.\n             </td>\n            </tr>\n            <tr>\n             <td>\n              container\n             </td>\n             <td>\n              string | false\n             </td>\n             <td>\n              false\n             </td>\n             <td>\n              <p>\n               Appends the alert to a specific element. Example:\n               <code>\n                container: \'body\'\n               </code>\n               . This option is particularly useful in that it allows you to position the alert in the flow of the document near the triggering element -\xc2\xa0which will prevent the alert from floating away from the triggering element during a window resize.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              controller\n             </td>\n             <td>\n              string|function\n             </td>\n             <td>\n              false\n             </td>\n             <td>\n              <p>\n               Controller fn that should be associated with newly created scope or the name of a registered controller if passed as a string.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              controllerAs\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              false\n             </td>\n             <td>\n              <p>\n               A controller alias name. If present the controller will be published to scope under the `controllerAs` name.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              template\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              \'\'\n             </td>\n             <td>\n              <p>\n               Provide an html template as a string (when templateUrl is falsy).\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              templateUrl\n             </td>\n             <td>\n              path\n             </td>\n             <td>\n              \'alert/alert.tpl.html\'\n             </td>\n             <td>\n              <p>\n               If provided, overrides the default template, can be either a remote URL or a cached template id.\n              </p>\n              <p>\n               It should be a\n               <code>\n                div.alert\n               </code>\n               element following Bootstrap styles conventions (\n               <a href="//github.com/mgcrea/angular-strap/blob/master/src/alert/alert.tpl.html" target="_blank">\n                like this\n               </a>\n               ).\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              duration\n             </td>\n             <td>\n              number | false\n             </td>\n             <td>\n              false\n             </td>\n             <td>\n              <p>\n               If provided, the number of seconds the alert should be displayed for before it is automatically closed. Default keeps alert open until explicity closed.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              dismissable\n             </td>\n             <td>\n              boolean\n             </td>\n             <td>\n              true\n             </td>\n             <td>\n              <p>\n               Make the alert dismissable by adding a close button (\xc3\x97).\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              onShow\n             </td>\n             <td>\n              function\n             </td>\n             <td>\n             </td>\n             <td>\n              <p>\n               If provided, this function will be invoked after the alert is shown.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              onBeforeShow\n             </td>\n             <td>\n              function\n             </td>\n             <td>\n             </td>\n             <td>\n              <p>\n               If provided, this function will be invoked before the alert is shown.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              onHide\n             </td>\n             <td>\n              function\n             </td>\n             <td>\n             </td>\n             <td>\n              <p>\n               If provided, this function will be invoked after the alert is hidden.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              onBeforeHide\n             </td>\n             <td>\n              function\n             </td>\n             <td>\n             </td>\n             <td>\n              <p>\n               If provided, this function will be invoked before the alert is hidden.\n              </p>\n             </td>\n            </tr>\n           </tbody>\n          </table>\n         </div>\n         <div class="callout callout-info">\n          <h4>\n           Default options\n          </h4>\n          <p>\n           You can override global defaults for the plugin with\n           <code>\n            $alertProvider.defaults\n           </code>\n          </p>\n          <div class="highlight">\n           <pre class="bs-exemple-code">        <code class="javascript hljs" highlight-block="">angular.module(<span class="hljs-string">\'myApp\'</span>)\n.config(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">$alertProvider</span>) </span>{\n  angular.extend($alertProvider.defaults, {\n    animation: <span class="hljs-string">\'am-fade-and-slide-top\'</span>,\n    placement: <span class="hljs-string">\'top\'</span>\n  });\n})\n</code>\n      </pre>\n          </div>\n         </div>\n         <h3>\n          Scope methods\n         </h3>\n         <p>\n          Methods available inside the directive scope to toggle visibility.\n         </p>\n         <h4>\n          $show()\n         </h4>\n         <p>\n          Reveals the alert.\n         </p>\n         <h4>\n          $hide()\n         </h4>\n         <p>\n          Hides the alert.\n         </p>\n         <h4>\n          $toggle()\n         </h4>\n         <p>\n          Toggles the alert.\n         </p>\n        </div>\n        <!--/ngInclude: \'alert/docs/alert.demo.html\' -->\n       </div>\n       <div>\n        <!-- ngInclude: \'tooltip/docs/tooltip.demo.html\' -->\n        <div class="bs-docs-section" ng-controller="TooltipDemoCtrl">\n         <div class="page-header">\n          <h1 id="tooltips">\n           Tooltips\n           <a class="small" href="//github.com/mgcrea/angular-strap/blob/master/src/tooltip/tooltip.js" target="_blank">\n            tooltip.js\n           </a>\n          </h1>\n          <code>\n           mgcrea.ngStrap.tooltip\n          </code>\n         </div>\n         <h2 id="tooltips-examples">\n          Examples\n         </h2>\n         <p>\n          Add small overlays of content on hover, to any element for housing secondary information.\n         </p>\n         <div class="callout callout-warning">\n          <h4>\n           Plugin dependency\n          </h4>\n          <p>\n           Tooltip require the\n           <a href="//github.com/mgcrea/angular-strap/blob/master/src/helpers/dimensions.js" target="_blank">\n            helpers.dimensions\n           </a>\n           module to be loaded.\n          </p>\n         </div>\n         <h3>\n          Live demo\n          <a bs-tooltip="" class="small edit-plunkr" data-content-html-url="tooltip/docs/tooltip.demo.html" data-content-js-url="tooltip/docs/tooltip.demo.js" data-module-name="mgcrea.ngStrapDocs" data-placement="right" data-title="edit in plunker" ng-plunkr="">\n           <i class="fa fa-edit">\n           </i>\n           <small>\n            plunker\n           </small>\n          </a>\n         </h3>\n         <div class="form-group hide">\n          <label>\n           Title\n          </label>\n          <input class="form-control ng-pristine ng-untouched ng-valid ng-not-empty" ng-model="tooltip.title" placeholder="Title" type="text"/>\n         </div>\n         <pre class="bs-example-scope">$scope.tooltip = {\n  "title": "Hello Tooltip&lt;br /&gt;This is a multiline message!",\n  "checked": false\n};</pre>\n         <div append-source="" class="bs-example" style="padding-bottom: 24px;">\n          <!-- Markup for a default tooltip with a scope passed as an object {title:\'\'} -->\n          <p>\n           Tight pants next level keffiyeh\n           <a bs-tooltip="tooltip" data-animation="am-flip-x" href="">\n            you probably\n           </a>\n           haven\'t heard of them. Photo booth beard raw denim letterpress vegan messenger bag stumptown.\n          </p>\n          <div class="input-group col-xs-5">\n           <span class="input-group-btn">\n            <!-- You can also use data-attrs to assign scope variables -->\n            <button bs-tooltip="" class="btn btn-primary" data-title="Hello Tooltip&lt;br /&gt;This is a multiline message!" data-trigger="click" data-type="success" type="button">\n             Click me\n            </button>\n           </span>\n           <input bs-tooltip="tooltip" class="form-control" data-container="body" data-placement="right" data-trigger="focus" data-type="info" placeholder="Focus to toggle tooltip" type="text"/>\n          </div>\n          <div class="checkbox">\n           <label bs-enabled="tooltip.checked" bs-tooltip="tooltip" data-animation="am-fade-and-scale" data-placement="bottom-left" data-type="info">\n            <input class="ng-pristine ng-untouched ng-valid ng-empty" ng-model="tooltip.checked" type="checkbox"/>\n            Check me to enable my tooltip\n           </label>\n          </div>\n         </div>\n         <div class="highlight" ng-non-bindable="">\n          <pre><code class="html hljs xml" style="margin:0"><span class="hljs-comment">&lt;!-- Markup for a default tooltip with a scope passed as an object {title:\'\'} --&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Tight pants next level keffiyeh <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span> <span class="hljs-attr">data-animation</span>=<span class="hljs-string">"am-flip-x"</span> <span class="hljs-attr">bs-tooltip</span>=<span class="hljs-string">"tooltip"</span>&gt;</span>you probably<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> haven\'t heard of them. Photo booth beard raw denim letterpress vegan messenger bag stumptown.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"input-group col-xs-5"</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"input-group-btn"</span>&gt;</span>\n    <span class="hljs-comment">&lt;!-- You can also use data-attrs to assign scope variables --&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-primary"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">data-trigger</span>=<span class="hljs-string">"click"</span> <span class="hljs-attr">data-type</span>=<span class="hljs-string">"success"</span> <span class="hljs-attr">data-title</span>=<span class="hljs-string">"{{tooltip.title}}"</span> <span class="hljs-attr">bs-tooltip</span>&gt;</span>Click me<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-control"</span> <span class="hljs-attr">data-placement</span>=<span class="hljs-string">"right"</span> <span class="hljs-attr">data-type</span>=<span class="hljs-string">"info"</span> <span class="hljs-attr">data-container</span>=<span class="hljs-string">"body"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"Focus to toggle tooltip"</span> <span class="hljs-attr">data-trigger</span>=<span class="hljs-string">"focus"</span> <span class="hljs-attr">bs-tooltip</span>=<span class="hljs-string">"tooltip"</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"checkbox"</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">data-placement</span>=<span class="hljs-string">"bottom-left"</span> <span class="hljs-attr">data-type</span>=<span class="hljs-string">"info"</span> <span class="hljs-attr">data-animation</span>=<span class="hljs-string">"am-fade-and-scale"</span> <span class="hljs-attr">bs-tooltip</span>=<span class="hljs-string">"tooltip"</span> <span class="hljs-attr">bs-enabled</span>=<span class="hljs-string">"tooltip.checked"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">ng-model</span>=<span class="hljs-string">"tooltip.checked"</span>&gt;</span> Check me to enable my tooltip\n  <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n</code></pre>\n         </div>\n         <h2 id="tooltips-usage">\n          Usage\n         </h2>\n         <p>\n          Append a\n          <code>\n           bs-tooltip\n          </code>\n          attribute to any element to enable the directive.\n         </p>\n         <div class="callout callout-info">\n          <h4>\n           The module exposes a\n           <code>\n            $tooltip\n           </code>\n           service\n          </h4>\n          <p>\n           Available for programmatic use (mainly in directives as it requires a DOM element).\n          </p>\n          <div class="highlight">\n           <pre>        <code class="javascript hljs" highlight-block=""><span class="hljs-keyword">var</span> myTooltip = $tooltip(element, {title: <span class="hljs-string">\'My Title\'</span>});\n</code>\n      </pre>\n          </div>\n         </div>\n         <h3>\n          Options\n         </h3>\n         <p>\n          Options can be passed via data-attributes on the directive or as an object hash to configure the service. For data attributes, append the option name to\n          <code>\n           data-\n          </code>\n          , as in\n          <code>\n           data-animation=""\n          </code>\n          .\n         </p>\n         <p>\n          For directives, you can naturally inherit the contextual\n          <code>\n           $scope\n          </code>\n          or leverage a custom one with an\n          <a href="http://docs.angularjs.org/guide/expression">\n           AngularJS expression\n          </a>\n          to evaluate as an object directly on the\n          <code>\n           bs-tooltip\n          </code>\n          attribute\n         </p>\n         <div class="callout callout-info">\n          <h4>\n           This module supports exotic placement options!\n          </h4>\n          <p>\n           You can position your popover in corners (such as\n           <code>\n            bottom-left\n           </code>\n           ) or any other combination two.\n          </p>\n          <p>\n           Exotic placement options are not part of the Bootstrap\'s core, to use them you must use\n           <code>\n            bootstrap-additions.css\n           </code>\n           from the\n           <a href="//github.com/mgcrea/bootstrap-additions" target="_blank">\n            BootstrapAdditions\n           </a>\n           project. This project being not yet fully released, meanwhile, you can use the\n           <a href="//mgcrea.github.io/angular-strap/static/styles/bootstrap-additions.min.css" target="_blank">\n            development snapshot\n           </a>\n           compiled for theses docs.\n          </p>\n         </div>\n         <div class="table-responsive">\n          <table class="table table-bordered table-striped">\n           <thead>\n            <tr>\n             <th style="width: 100px;">\n              Name\n             </th>\n             <th style="width: 100px;">\n              type\n             </th>\n             <th style="width: 50px;">\n              default\n             </th>\n             <th>\n              description\n             </th>\n            </tr>\n           </thead>\n           <tbody>\n            <tr>\n             <td>\n              animation\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              am-fade\n             </td>\n             <td>\n              apply a CSS animation powered by\n              <code>\n               ngAnimate\n              </code>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              placement\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              \'top\'\n             </td>\n             <td>\n              how to position the tooltip - top | bottom | left | right | auto, or any combination like bottom-left or auto bottom-left.\n              <br/>\n              When "auto" is specified, it will dynamically reorient the tooltip. For example, if placement is "auto left", the tooltip will display to the left when possible, otherwise it will display right.\n             </td>\n            </tr>\n            <tr>\n             <td>\n              trigger\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              \'hover focus\'\n             </td>\n             <td>\n              how tooltip is triggered - click | hover | focus | contextmenu | manual\n             </td>\n            </tr>\n            <tr>\n             <td>\n              title\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              \'\'\n             </td>\n             <td>\n              default title value if\n              <code>\n               title\n              </code>\n              attribute isn\'t present\n             </td>\n            </tr>\n            <tr>\n             <td>\n              html\n             </td>\n             <td>\n              boolean\n             </td>\n             <td>\n              false\n             </td>\n             <td>\n              replace\n              <code>\n               ng-bind\n              </code>\n              with\n              <code>\n               ng-bind-html\n              </code>\n              , requires\n              <code>\n               ngSanitize\n              </code>\n              to be loaded\n             </td>\n            </tr>\n            <tr>\n             <td>\n              delay\n             </td>\n             <td>\n              number | object\n             </td>\n             <td>\n              0\n             </td>\n             <td>\n              <p>\n               delay showing and hiding the tooltip (ms) - does not apply to manual trigger type\n              </p>\n              <p>\n               If a number is supplied, delay is applied to both hide/show\n              </p>\n              <p>\n               Object structure is:\n               <code>\n                delay: { show: 500, hide: 100 }\n               </code>\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              container\n             </td>\n             <td>\n              string | false\n             </td>\n             <td>\n              false\n             </td>\n             <td>\n              <p>\n               Appends the tooltip to a specific element. Example:\n               <code>\n                container: \'body\'\n               </code>\n               . This option is particularly useful in that it allows you to position the tooltip in the flow of the document near the triggering element -\xc2\xa0which will prevent the tooltip from floating away from the triggering element during a window resize.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              target\n             </td>\n             <td>\n              string | DOMElement |\xc2\xa0false\n             </td>\n             <td>\n              false\n             </td>\n             <td>\n              <p>\n               Position the tooltip relative to a specific target element.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              template\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              \'\'\n             </td>\n             <td>\n              <p>\n               Provide an html template as a string (when templateUrl is falsy).\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              templateUrl\n             </td>\n             <td>\n              path\n             </td>\n             <td>\n              \'tooltip/tooltip.tpl.html\'\n             </td>\n             <td>\n              <p>\n               If provided, overrides the default template, can be either a remote URL or a cached template id.\n              </p>\n              <p>\n               It should be a\n               <code>\n                div.tooltip\n               </code>\n               element following Bootstrap styles conventions (\n               <a href="//github.com/mgcrea/angular-strap/blob/master/src/tooltip/tooltip.tpl.html" target="_blank">\n                like this\n               </a>\n               ).\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              titleTemplate\n             </td>\n             <td>\n              path\n             </td>\n             <td>\n              false\n             </td>\n             <td>\n              <p>\n               If provided, fetches the partial and includes it as the inner content, can be either a remote URL or a cached template id.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              prefixEvent\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              \'tooltip\'\n             </td>\n             <td>\n              <p>\n               If provided, prefixes the events \'.hide.before\' \'.hide\' \'.show.before\' and \'.show\' with the passed in value. With the default value these events are \'tooltip.hide.before\' \'tooltip.hide\' \'tooltip.show.before\' and \'tooltip.show\'\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              id\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              \'\'\n             </td>\n             <td>\n              The tooltip instance id for usage in event handlers.\n             </td>\n            </tr>\n            <tr>\n             <td>\n              onShow\n             </td>\n             <td>\n              function\n             </td>\n             <td>\n             </td>\n             <td>\n              <p>\n               If provided, this function will be invoked after the tooltip is shown.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              onBeforeShow\n             </td>\n             <td>\n              function\n             </td>\n             <td>\n             </td>\n             <td>\n              <p>\n               If provided, this function will be invoked before the tooltip is shown.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              onHide\n             </td>\n             <td>\n              function\n             </td>\n             <td>\n             </td>\n             <td>\n              <p>\n               If provided, this function will be invoked after the tooltip is hidden.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              onBeforeHide\n             </td>\n             <td>\n              function\n             </td>\n             <td>\n             </td>\n             <td>\n              <p>\n               If provided, this function will be invoked before the tooltip is hidden.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              viewport\n             </td>\n             <td>\n              string | object\n             </td>\n             <td>\n              { selector: \'body\', padding: 0 }\n             </td>\n             <td>\n              <p>\n               Keeps the tooltip within the bounds of this element. Example: viewport: \'#viewport\' or { "selector": "#viewport", "padding": 0 }\n              </p>\n             </td>\n            </tr>\n           </tbody>\n          </table>\n         </div>\n         <div class="callout callout-info">\n          <h4>\n           Default options\n          </h4>\n          <p>\n           You can override global defaults for the plugin with\n           <code>\n            $tooltipProvider.defaults\n           </code>\n          </p>\n          <div class="highlight">\n           <pre class="bs-exemple-code">        <code class="javascript hljs" highlight-block="">angular.module(<span class="hljs-string">\'myApp\'</span>)\n.config(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">$tooltipProvider</span>) </span>{\n  angular.extend($tooltipProvider.defaults, {\n    animation: <span class="hljs-string">\'am-flip-x\'</span>,\n    trigger: <span class="hljs-string">\'hover\'</span>\n  });\n})\n</code>\n      </pre>\n          </div>\n         </div>\n         <h3>\n          Helper attributes\n         </h3>\n         <p>\n          Helper attributes can be used together with the directive via data-attributes to support specific functionality. Helper attributes support data binding. To use helper attributes, append the helper attribute name to\n          <code>\n           data-\n          </code>\n          , as in\n          <code>\n           data-bs-show="true"\n          </code>\n          .\n         </p>\n         <div class="table-responsive">\n          <table class="table table-bordered table-striped">\n           <thead>\n            <tr>\n             <th style="width: 100px;">\n              Name\n             </th>\n             <th style="width: 100px;">\n              type\n             </th>\n             <th style="width: 50px;">\n              default\n             </th>\n             <th>\n              description\n             </th>\n            </tr>\n           </thead>\n           <tbody>\n            <tr>\n             <td>\n              bsShow\n             </td>\n             <td>\n              boolean | string\n             </td>\n             <td>\n              false\n             </td>\n             <td>\n              <p>\n               shows or hides the tooltip. Supports boolean values or "true"/"false" string values.\n              </p>\n              <p>\n               You can also specify "tooltip" to show just the tooltip when using several angular-strap directives on the same element.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              bsEnabled\n             </td>\n             <td>\n              boolean | string\n             </td>\n             <td>\n              true\n             </td>\n             <td>\n              <p>\n               enables or disables the tooltip trigger. When the tooltip is disabled, calling show() will have no effect.\n              </p>\n              <p>\n               Supports boolean values or "true" "false" "1" "0" string values.\n              </p>\n             </td>\n            </tr>\n           </tbody>\n          </table>\n         </div>\n         <h3>\n          Scope methods\n         </h3>\n         <p>\n          Methods available inside the directive scope to toggle visibility.\n         </p>\n         <h4>\n          $show()\n         </h4>\n         <p>\n          Reveals the tooltip.\n         </p>\n         <h4>\n          $hide()\n         </h4>\n         <p>\n          Hides the tooltip.\n         </p>\n         <h4>\n          $toggle()\n         </h4>\n         <p>\n          Toggles the tooltip.\n         </p>\n         <h4>\n          $setEnabled(isEnabled)\n         </h4>\n         <p>\n          Enables or disables the tooltip.\n         </p>\n        </div>\n        <!--/ngInclude: \'tooltip/docs/tooltip.demo.html\' -->\n       </div>\n       <div>\n        <!-- ngInclude: \'popover/docs/popover.demo.html\' -->\n        <div class="bs-docs-section" ng-controller="PopoverDemoCtrl">\n         <div class="page-header">\n          <h1 id="popovers">\n           Popovers\n           <a class="small" href="//github.com/mgcrea/angular-strap/blob/master/src/popover/popover.js" target="_blank">\n            popover.js\n           </a>\n          </h1>\n          <code>\n           mgcrea.ngStrap.popover\n          </code>\n         </div>\n         <h2 id="popovers-examples">\n          Examples\n         </h2>\n         <p>\n          Add small overlays of content on tap, like those on the iPad, to any element for housing secondary information.\n         </p>\n         <div class="callout callout-danger">\n          <h4>\n           Plugin dependency\n          </h4>\n          <p>\n           Popovers require the\n           <a href="#tooltips">\n            tooltip module\n           </a>\n           to be loaded.\n          </p>\n         </div>\n         <h3>\n          Live demo\n          <a bs-tooltip="" class="small edit-plunkr" data-content-html-url="popover/docs/popover.demo.html" data-content-js-url="popover/docs/popover.demo.js" data-module-name="mgcrea.ngStrapDocs" data-placement="right" data-title="edit in plunker" ng-plunkr="">\n           <i class="fa fa-edit">\n           </i>\n           <small>\n            plunker\n           </small>\n          </a>\n         </h3>\n         <div class="form-group hide">\n          <label>\n           Title\n          </label>\n          <input class="form-control ng-pristine ng-untouched ng-valid ng-not-empty" ng-model="popover.title" placeholder="Title" type="text"/>\n          <label>\n           Content\n          </label>\n          <textarea class="form-control ng-pristine ng-untouched ng-valid ng-not-empty" ng-model="popover.content" rows="3"></textarea>\n         </div>\n         <pre class="bs-example-scope">$scope.popover = {\n  "title": "Title",\n  "content": "Hello Popover&lt;br /&gt;This is a multiline message!"\n};</pre>\n         <div append-source="" class="bs-example" style="padding-bottom: 24px;">\n          <!-- Button to trigger a default popover with a scope as an object {title:\'\', content:\'\', etc.} -->\n          <button bs-popover="popover" class="btn btn-lg btn-primary" data-animation="am-flip-x" data-placement="bottom" type="button">\n           Click to toggle popover\n           <br/>\n           <small>\n            (using an object)\n           </small>\n          </button>\n          <!-- You can also use data-attrs to assign scope variables -->\n          <button bs-popover="" class="btn btn-lg btn-primary" data-content="Hello Popover&lt;br /&gt;This is a multiline message!" data-placement="top-right" data-trigger="focus" title="Title" type="button">\n           Click to toggle popover\n           <br/>\n           <small>\n            (using data-attrs)\n           </small>\n          </button>\n          <!-- You can use a custom html template with the `data-template` attr -->\n          <button bs-popover="" class="btn btn-lg btn-danger" data-animation="am-flip-x" data-auto-close="1" data-content="Hello Popover&lt;br /&gt;This is a multiline message!" data-template-url="popover/docs/popover.demo.tpl.html" title="Title" type="button">\n           Custom Popover\n           <br/>\n           <small>\n            (using data-template)\n           </small>\n          </button>\n          <!-- A popover can also be triggered programmatically using the $popover service -->\n          <button class="btn btn-lg btn-primary" id="popover-as-service" ng-click="togglePopover()" title="Title" type="button">\n           Click to toggle popover\n           <br/>\n           <small>\n            (using $popover service)\n           </small>\n          </button>\n         </div>\n         <div class="highlight" ng-non-bindable="">\n          <pre><code class="html hljs xml" style="margin:0"><span class="hljs-comment">&lt;!-- Button to trigger a default popover with a scope as an object {title:\'\', content:\'\', etc.} --&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-lg btn-primary"</span> <span class="hljs-attr">data-placement</span>=<span class="hljs-string">"bottom"</span> <span class="hljs-attr">data-animation</span>=<span class="hljs-string">"am-flip-x"</span> <span class="hljs-attr">bs-popover</span>=<span class="hljs-string">"popover"</span>&gt;</span>Click to toggle popover\n  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">small</span>&gt;</span>(using an object)<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- You can also use data-attrs to assign scope variables --&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-lg btn-primary"</span> <span class="hljs-attr">data-placement</span>=<span class="hljs-string">"top-right"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"{{popover.title}}"</span> <span class="hljs-attr">data-content</span>=<span class="hljs-string">"{{popover.content}}"</span> <span class="hljs-attr">data-trigger</span>=<span class="hljs-string">"focus"</span> <span class="hljs-attr">bs-popover</span>&gt;</span>Click to toggle popover\n  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">small</span>&gt;</span>(using data-attrs)<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- You can use a custom html template with the `data-template` attr --&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-lg btn-danger"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"{{popover.title}}"</span> <span class="hljs-attr">data-content</span>=<span class="hljs-string">"{{popover.content}}"</span> <span class="hljs-attr">data-template-url</span>=<span class="hljs-string">"popover/docs/popover.demo.tpl.html"</span> <span class="hljs-attr">data-animation</span>=<span class="hljs-string">"am-flip-x"</span> <span class="hljs-attr">data-auto-close</span>=<span class="hljs-string">"1"</span> <span class="hljs-attr">bs-popover</span>&gt;</span>Custom Popover\n  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">small</span>&gt;</span>(using data-template)<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- A popover can also be triggered programmatically using the $popover service --&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"popover-as-service"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-lg btn-primary"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"{{popover.title}}"</span> <span class="hljs-attr">ng-click</span>=<span class="hljs-string">"togglePopover()"</span>&gt;</span>Click to toggle popover\n  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">small</span>&gt;</span>(using $popover service)<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n</code></pre>\n         </div>\n         <h2 id="popovers-usage">\n          Usage\n         </h2>\n         <p>\n          Append a\n          <code>\n           bs-popover\n          </code>\n          attribute to any element to enable the directive.\n         </p>\n         <div class="callout callout-info">\n          <h4>\n           The module exposes a\n           <code>\n            $popover\n           </code>\n           service\n          </h4>\n          <p>\n           Available for programmatic use (mainly in directives as it requires a DOM element).\n          </p>\n          <div class="highlight">\n           <pre>        <code class="javascript hljs" highlight-block=""><span class="hljs-keyword">var</span> myPopover = $popover(element, {title: <span class="hljs-string">\'My Title\'</span>, content: <span class="hljs-string">\'My Content\'</span>, trigger: <span class="hljs-string">\'manual\'</span>});\n</code>\n      </pre>\n          </div>\n         </div>\n         <h3>\n          Options\n         </h3>\n         <p>\n          Options can be passed via data-attributes on the directive or as an object hash to configure the service. For data attributes, append the option name to\n          <code>\n           data-\n          </code>\n          , as in\n          <code>\n           data-animation=""\n          </code>\n          .\n         </p>\n         <p>\n          For directives, you can naturally inherit the contextual\n          <code>\n           $scope\n          </code>\n          or leverage a custom one with an\n          <a href="http://docs.angularjs.org/guide/expression">\n           AngularJS expression\n          </a>\n          to evaluate as an object directly on the\n          <code>\n           bs-popover\n          </code>\n          attribute\n         </p>\n         <div class="callout callout-info">\n          <h4>\n           This module supports exotic placement options!\n          </h4>\n          <p>\n           You can position your popover in corners (such as\n           <code>\n            bottom-left\n           </code>\n           ) or any other combination two.\n          </p>\n          <p>\n           Exotic placement options are not part of the Bootstrap\'s core, to use them you must use\n           <code>\n            bootstrap-additions.css\n           </code>\n           from the\n           <a href="//github.com/mgcrea/bootstrap-additions" target="_blank">\n            BootstrapAdditions\n           </a>\n           project. This project being not yet fully released, meanwhile, you can use the\n           <a href="//mgcrea.github.io/angular-strap/static/styles/bootstrap-additions.min.css" target="_blank">\n            development snapshot\n           </a>\n           compiled for theses docs.\n          </p>\n         </div>\n         <div class="table-responsive">\n          <table class="table table-bordered table-striped">\n           <thead>\n            <tr>\n             <th style="width: 100px;">\n              Name\n             </th>\n             <th style="width: 100px;">\n              type\n             </th>\n             <th style="width: 50px;">\n              default\n             </th>\n             <th>\n              description\n             </th>\n            </tr>\n           </thead>\n           <tbody>\n            <tr>\n             <td>\n              animation\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              am-fade\n             </td>\n             <td>\n              apply a CSS animation powered by\n              <code>\n               ngAnimate\n              </code>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              placement\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              \'right\'\n             </td>\n             <td>\n              how to position the popover - top | bottom | left | right | auto, or any combination like bottom-left or auto bottom-left.\n              <br/>\n              When "auto" is specified, it will dynamically reorient the popover. For example, if placement is "auto left", the popover will display to the left when possible, otherwise it will display right.\n             </td>\n            </tr>\n            <tr>\n             <td>\n              trigger\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              \'click\'\n             </td>\n             <td>\n              how popover is triggered - click | hover | focus | manual\n             </td>\n            </tr>\n            <tr>\n             <td>\n              title\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              \'\'\n             </td>\n             <td>\n              default title value if\n              <code>\n               title\n              </code>\n              attribute isn\'t present\n             </td>\n            </tr>\n            <tr>\n             <td>\n              content\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              \'\'\n             </td>\n             <td>\n              default content value if\n              <code>\n               data-content\n              </code>\n              attribute isn\'t present\n             </td>\n            </tr>\n            <tr>\n             <td>\n              html\n             </td>\n             <td>\n              boolean\n             </td>\n             <td>\n              false\n             </td>\n             <td>\n              replace\n              <code>\n               ng-bind\n              </code>\n              with\n              <code>\n               ng-bind-html\n              </code>\n              , requires\n              <code>\n               ngSanitize\n              </code>\n              to be loaded\n             </td>\n            </tr>\n            <tr>\n             <td>\n              delay\n             </td>\n             <td>\n              number | object\n             </td>\n             <td>\n              0\n             </td>\n             <td>\n              <p>\n               delay showing and hiding the popover (ms) - does not apply to manual trigger type\n              </p>\n              <p>\n               If a number is supplied, delay is applied to both hide/show\n              </p>\n              <p>\n               Object structure is:\n               <code>\n                delay: { show: 500, hide: 100 }\n               </code>\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              container\n             </td>\n             <td>\n              string | false\n             </td>\n             <td>\n              false\n             </td>\n             <td>\n              <p>\n               Appends the popover to a specific element. Example:\n               <code>\n                container: \'body\'\n               </code>\n               . This option is particularly useful in that it allows you to position the popover in the flow of the document near the triggering element -\xc2\xa0which will prevent the popover from floating away from the triggering element during a window resize.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              target\n             </td>\n             <td>\n              string | DOMElement |\xc2\xa0false\n             </td>\n             <td>\n              false\n             </td>\n             <td>\n              <p>\n               Position the tooltip relative to a specific target element.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              template\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              \'\'\n             </td>\n             <td>\n              <p>\n               Provide an html template as a string (when templateUrl is falsy).\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              templateUrl\n             </td>\n             <td>\n              path\n             </td>\n             <td>\n              \'popover/popover.tpl.html\'\n             </td>\n             <td>\n              <p>\n               If provided, overrides the default template, can be either a remote URL or a cached template id.\n              </p>\n              <p>\n               It should be a\n               <code>\n                div.popover\n               </code>\n               element following Bootstrap styles conventions (\n               <a href="//github.com/mgcrea/angular-strap/blob/master/src/popover/popover.tpl.html" target="_blank">\n                like this\n               </a>\n               ).\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              contentTemplate\n             </td>\n             <td>\n              path\n             </td>\n             <td>\n              false\n             </td>\n             <td>\n              <p>\n               If provided, fetches the partial and includes it as the inner content, can be either a remote URL or a cached template id.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              autoClose\n             </td>\n             <td>\n              boolean\n             </td>\n             <td>\n              false\n             </td>\n             <td>\n              If provided, auto closes the tooltip when clicking outside of it.\n             </td>\n            </tr>\n            <tr>\n             <td>\n              id\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              \'\'\n             </td>\n             <td>\n              The popover instance id for usage in event handlers.\n             </td>\n            </tr>\n            <tr>\n             <td>\n              onShow\n             </td>\n             <td>\n              function\n             </td>\n             <td>\n             </td>\n             <td>\n              <p>\n               If provided, this function will be invoked after the popover is shown.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              onBeforeShow\n             </td>\n             <td>\n              function\n             </td>\n             <td>\n             </td>\n             <td>\n              <p>\n               If provided, this function will be invoked before the popover is shown.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              onHide\n             </td>\n             <td>\n              function\n             </td>\n             <td>\n             </td>\n             <td>\n              <p>\n               If provided, this function will be invoked after the popover is hidden.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              onBeforeHide\n             </td>\n             <td>\n              function\n             </td>\n             <td>\n             </td>\n             <td>\n              <p>\n               If provided, this function will be invoked before the popover is hidden.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              viewport\n             </td>\n             <td>\n              string | object\n             </td>\n             <td>\n              { selector: \'body\', padding: 0 }\n             </td>\n             <td>\n              <p>\n               Keeps the popover within the bounds of this element. Example: viewport: \'#viewport\' or { "selector": "#viewport", "padding": 0 }\n              </p>\n             </td>\n            </tr>\n           </tbody>\n          </table>\n         </div>\n         <div class="callout callout-info">\n          <h4>\n           Default options\n          </h4>\n          <p>\n           You can override global defaults for the plugin with\n           <code>\n            $popoverProvider.defaults\n           </code>\n          </p>\n          <div class="highlight">\n           <pre class="bs-exemple-code">        <code class="javascript hljs" highlight-block="">angular.module(<span class="hljs-string">\'myApp\'</span>)\n.config(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">$popoverProvider</span>) </span>{\n  angular.extend($popoverProvider.defaults, {\n    animation: <span class="hljs-string">\'am-flip-x\'</span>,\n    trigger: <span class="hljs-string">\'hover\'</span>\n  });\n})\n</code>\n      </pre>\n          </div>\n         </div>\n         <h3>\n          Scope methods\n         </h3>\n         <p>\n          Methods available inside the directive scope to toggle visibility.\n         </p>\n         <h4>\n          $show()\n         </h4>\n         <p>\n          Reveals the popover.\n         </p>\n         <h4>\n          $hide()\n         </h4>\n         <p>\n          Hides the popover.\n         </p>\n         <h4>\n          $toggle()\n         </h4>\n         <p>\n          Toggles the popover.\n         </p>\n        </div>\n        <!--/ngInclude: \'popover/docs/popover.demo.html\' -->\n       </div>\n       <div>\n        <!-- ngInclude: \'typeahead/docs/typeahead.demo.html\' -->\n        <div class="bs-docs-section" ng-controller="TypeaheadDemoCtrl">\n         <div class="page-header">\n          <h1 id="typeaheads">\n           Typeaheads\n           <a class="small" href="//github.com/mgcrea/angular-strap/blob/master/src/typeahead/typeahead.js" target="_blank">\n            typeahead.js\n           </a>\n          </h1>\n          <code>\n           mgcrea.ngStrap.typeahead\n          </code>\n         </div>\n         <h2 id="typeaheads-examples">\n          Examples\n         </h2>\n         <p>\n          Add quick, dynamic typeahead functionality with any form text input.\n         </p>\n         <div class="callout callout-danger">\n          <h4>\n           Plugin dependency\n          </h4>\n          <p>\n           Selects require the\n           <a href="#tooltips">\n            tooltip module\n           </a>\n           and\n           <a href="//github.com/mgcrea/angular-strap/blob/master/src/helpers/parse-options.js" target="_blank">\n            parseOptions helper\n           </a>\n           module to be loaded.\n          </p>\n         </div>\n         <h3>\n          Live demo\n          <a bs-tooltip="" class="small edit-plunkr" data-content-html-url="typeahead/docs/typeahead.demo.html" data-content-js-url="typeahead/docs/typeahead.demo.js" data-module-name="mgcrea.ngStrapDocs" data-placement="right" data-title="edit in plunker" ng-plunkr="">\n           <i class="fa fa-edit">\n           </i>\n           <small>\n            plunker\n           </small>\n          </a>\n         </h3>\n         <pre class="bs-example-scope">$scope.selectedState = "";\n$scope.states = ["Alabama","Alaska","Arizona","Arkansas","California","Colorado","Connecticut","Delaware","Florida","Georgia","Hawaii","Idaho","Illinois","Indiana","Iowa","Kansas","Kentucky","Louisiana","Maine","Maryland","Massachusetts","Michigan","Minnesota","Mississippi","Missouri","Montana","Nebraska","Nevada","New Hampshire","New Jersey","New Mexico","New York","North Dakota","North Carolina","Ohio","Oklahoma","Oregon","Pennsylvania","Rhode Island","South Carolina","South Dakota","Tennessee","Texas","Utah","Vermont","Virginia","Washington","West Virginia","Wisconsin","Wyoming"];\n\n$scope.selectedIcon = "";\n$scope.icons = "[{"value":"Gear","label":"&lt;i class=\\"fa fa-gear\\"&gt;&lt;/i&gt; Gear"},{"value":"Globe","label":"&lt;i class=\\"fa fa-globe\\"&gt;&lt;/i&gt; Globe"},{"value":"Heart","label":"&lt;i class=\\"fa fa-heart\\"&gt;&lt;/i&gt; Heart"},{"value":"Camera","label":"&lt;i class=\\"fa fa-camera\\"&gt;&lt;/i&gt; Camera"}]";\n\n$scope.selectedAddress = "";\n</pre>\n         <div append-source="" class="bs-example" style="padding-bottom: 24px;">\n          <form class="form-inline ng-pristine ng-valid" role="form">\n           <div class="form-group">\n            <label>\n             <i class="fa fa-globe">\n             </i>\n             State\n            </label>\n            <input autocomplete="off" bs-options="state for state in states" bs-typeahead="" class="form-control ng-pristine ng-untouched ng-valid ng-empty" ng-model="selectedState" placeholder="Enter state" type="text"/>\n           </div>\n           <div class="form-group">\n            <label>\n             Icon\n            </label>\n            <input autocomplete="off" bs-options="icon as icon.label for icon in icons" bs-typeahead="" class="form-control ng-pristine ng-untouched ng-valid ng-empty" data-animation="am-flip-x" data-auto-select="true" data-html="1" data-min-length="0" ng-model="selectedIcon" placeholder="Enter icon" type="text"/>\n           </div>\n           <hr/>\n           <!-- Using an async data provider -->\n           <div class="form-group">\n            <label>\n             <i class="fa fa-home">\n             </i>\n             Address\n             <small>\n              (async via maps.googleapis.com)\n             </small>\n            </label>\n            <input autocomplete="off" bs-options="address.formatted_address as address.formatted_address for address in getAddress($viewValue)" bs-typeahead="" class="form-control ng-pristine ng-untouched ng-valid ng-empty" data-animation="am-flip-x" ng-model="selectedAddress" placeholder="Enter address" type="text"/>\n           </div>\n          </form>\n         </div>\n         <div class="highlight" ng-non-bindable="">\n          <pre><code class="html hljs xml" style="margin:0"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-inline"</span> <span class="hljs-attr">role</span>=<span class="hljs-string">"form"</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-group"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"fa fa-globe"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> State<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-control"</span> <span class="hljs-attr">ng-model</span>=<span class="hljs-string">"selectedState"</span> <span class="hljs-attr">bs-options</span>=<span class="hljs-string">"state for state in states"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"Enter state"</span> <span class="hljs-attr">bs-typeahead</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-group"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Icon<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-control"</span> <span class="hljs-attr">ng-model</span>=<span class="hljs-string">"selectedIcon"</span> <span class="hljs-attr">data-min-length</span>=<span class="hljs-string">"0"</span> <span class="hljs-attr">data-html</span>=<span class="hljs-string">"1"</span> <span class="hljs-attr">data-auto-select</span>=<span class="hljs-string">"true"</span> <span class="hljs-attr">data-animation</span>=<span class="hljs-string">"am-flip-x"</span> <span class="hljs-attr">bs-options</span>=<span class="hljs-string">"icon as icon.label for icon in icons"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"Enter icon"</span> <span class="hljs-attr">bs-typeahead</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span>\n  <span class="hljs-comment">&lt;!-- Using an async data provider --&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-group"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"fa fa-home"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> Address <span class="hljs-tag">&lt;<span class="hljs-name">small</span>&gt;</span>(async via maps.googleapis.com)<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-control"</span> <span class="hljs-attr">ng-model</span>=<span class="hljs-string">"selectedAddress"</span> <span class="hljs-attr">data-animation</span>=<span class="hljs-string">"am-flip-x"</span> <span class="hljs-attr">bs-options</span>=<span class="hljs-string">"address.formatted_address as address.formatted_address for address in getAddress($viewValue)"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"Enter address"</span> <span class="hljs-attr">bs-typeahead</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span>\n</code></pre>\n         </div>\n         <h2 id="typeaheads-usage">\n          Usage\n         </h2>\n         <p>\n          Append a\n          <code>\n           bs-typeahead\n          </code>\n          attribute to any element to enable the directive.\n         </p>\n         <p>\n          Available items are specified using the\n          <code>\n           bs-options\n          </code>\n          attribute. This attribute uses AngularJS\n          <a href="https://docs.angularjs.org/api/ng/directive/ngOptions" target="_blank">\n           ngOptions\n          </a>\n          array data source syntax.\n         </p>\n         <div class="callout callout-danger">\n          <h4>\n           Breaking Change\n          </h4>\n          <p>\n           If you are using AngularStrap prior to version 2.2.0, please use\n           <code>\n            ng-options\n           </code>\n           instead of\n           <code>\n            bs-options\n           </code>\n           .\n          </p>\n         </div>\n         <div class="callout callout-info">\n          <h4>\n           The module exposes a\n           <code>\n            $typeahead\n           </code>\n           service\n          </h4>\n          <p>\n           Available for programmatic use (mainly in directives as it requires a DOM element).\n          </p>\n          <div class="highlight">\n           <pre>        <code class="javascript hljs" highlight-block=""><span class="hljs-keyword">var</span> myTypeahead = $typeahead(element, {controller: someModelController});\n</code>\n      </pre>\n          </div>\n         </div>\n         <h3>\n          Options\n         </h3>\n         <p>\n          Options can be passed via data-attributes on the directive or as an object hash to configure the service. For data attributes, append the option name to\n          <code>\n           data-\n          </code>\n          , as in\n          <code>\n           data-animation=""\n          </code>\n          .\n         </p>\n         <div class="callout callout-info">\n          <h4>\n           This module supports exotic placement options!\n          </h4>\n          <p>\n           You can position your typeahead in corners (such as\n           <code>\n            bottom-left\n           </code>\n           ) or any other combination two.\n          </p>\n          <p>\n           Exotic placement options are not part of the Bootstrap\'s core, to use them you must use\n           <code>\n            bootstrap-additions.css\n           </code>\n           from the\n           <a href="//github.com/mgcrea/bootstrap-additions" target="_blank">\n            BootstrapAdditions\n           </a>\n           project. This project being not yet fully released, meanwhile, you can use the\n           <a href="//mgcrea.github.io/angular-strap/static/styles/bootstrap-additions.min.css" target="_blank">\n            development snapshot\n           </a>\n           compiled for theses docs.\n          </p>\n         </div>\n         <div class="table-responsive">\n          <table class="table table-bordered table-striped">\n           <thead>\n            <tr>\n             <th style="width: 100px;">\n              Name\n             </th>\n             <th style="width: 100px;">\n              type\n             </th>\n             <th style="width: 50px;">\n              default\n             </th>\n             <th>\n              description\n             </th>\n            </tr>\n           </thead>\n           <tbody>\n            <tr>\n             <td>\n              animation\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              am-fade\n             </td>\n             <td>\n              apply a CSS animation powered by\n              <code>\n               ngAnimate\n              </code>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              placement\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              \'bottom-left\'\n             </td>\n             <td>\n              how to position the typeahead - top | bottom | left | right | auto, or any combination like bottom-left or auto bottom-left.\n              <br/>\n              When "auto" is specified, it will dynamically reorient the typeahead. For example, if placement is "auto left", the typeahead will display to the left when possible, otherwise it will display right.\n             </td>\n            </tr>\n            <tr>\n             <td>\n              trigger\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              \'focus\'\n             </td>\n             <td>\n              how typeahead is triggered - click | hover | focus | manual\n             </td>\n            </tr>\n            <tr>\n             <td>\n              html\n             </td>\n             <td>\n              boolean\n             </td>\n             <td>\n              false\n             </td>\n             <td>\n              replace\n              <code>\n               ng-bind\n              </code>\n              with\n              <code>\n               ng-bind-html\n              </code>\n              , requires\n              <code>\n               ngSanitize\n              </code>\n              to be loaded\n             </td>\n            </tr>\n            <tr>\n             <td>\n              delay\n             </td>\n             <td>\n              number | object\n             </td>\n             <td>\n              0\n             </td>\n             <td>\n              <p>\n               delay showing and hiding the typeahead (ms) - does not apply to manual trigger type\n              </p>\n              <p>\n               If a number is supplied, delay is applied to both hide/show\n              </p>\n              <p>\n               Object structure is:\n               <code>\n                delay: { show: 500, hide: 100 }\n               </code>\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              container\n             </td>\n             <td>\n              string | false\n             </td>\n             <td>\n              false\n             </td>\n             <td>\n              <p>\n               Appends the typeahead to a specific element. Example:\n               <code>\n                container: \'body\'\n               </code>\n               . This option is particularly useful in that it allows you to position the typeahead in the flow of the document near the triggering element -\xc2\xa0which will prevent the typeahead from floating away from the triggering element during a window resize.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              template\n             </td>\n             <td>\n              path | id\n             </td>\n             <td>\n              \'$typeahead\'\n             </td>\n             <td>\n              <p>\n               If provided, overrides the default template, can be either a remote URL or a cached template id.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              limit\n             </td>\n             <td>\n              number\n             </td>\n             <td>\n              6\n             </td>\n             <td>\n              <p>\n               The max number of items to display in the dropdown.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              minLength\n             </td>\n             <td>\n              number\n             </td>\n             <td>\n              1\n             </td>\n             <td>\n              <p>\n               The minimum character length needed before triggering autocomplete suggestions.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              autoSelect\n             </td>\n             <td>\n              boolean\n             </td>\n             <td>\n              false\n             </td>\n             <td>\n              <p>\n               Whether or not the first match will automatically be selected upon typing.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              comparator\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              \'\'\n             </td>\n             <td>\n              <p>\n               The name of the comparator function which is used in determining a match.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              id\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              \'\'\n             </td>\n             <td>\n              The typeahead instance id for usage in event handlers.\n             </td>\n            </tr>\n            <tr>\n             <td>\n              watchOptions\n             </td>\n             <td>\n              boolean\n             </td>\n             <td>\n              false\n             </td>\n             <td>\n              Whether or not the suggestions collection should be watched for changes.\n             </td>\n            </tr>\n            <tr>\n             <td>\n              trimValue\n             </td>\n             <td>\n              boolean\n             </td>\n             <td>\n              true\n             </td>\n             <td>\n              If provided and set to false, overrides the default behavior of automatically trimming spaces from inputs. (Added in 2.2.4)\n             </td>\n            </tr>\n            <tr>\n             <td>\n              onShow\n             </td>\n             <td>\n              function\n             </td>\n             <td>\n             </td>\n             <td>\n              <p>\n               If provided, this function will be invoked after the typeahead dropdown is shown.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              onBeforeShow\n             </td>\n             <td>\n              function\n             </td>\n             <td>\n             </td>\n             <td>\n              <p>\n               If provided, this function will be invoked before the typeahead dropdown is shown.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              onHide\n             </td>\n             <td>\n              function\n             </td>\n             <td>\n             </td>\n             <td>\n              <p>\n               If provided, this function will be invoked after the typeahead dropdown is hidden.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              onBeforeHide\n             </td>\n             <td>\n              function\n             </td>\n             <td>\n             </td>\n             <td>\n              <p>\n               If provided, this function will be invoked before the typeahead dropdown is hidden.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              onSelect\n             </td>\n             <td>\n              function\n             </td>\n             <td>\n             </td>\n             <td>\n              <p>\n               If provided, this function will be invoked when an item is selected.\n              </p>\n             </td>\n            </tr>\n           </tbody>\n          </table>\n         </div>\n         <div class="callout callout-info">\n          <h4>\n           Default options\n          </h4>\n          <p>\n           You can override global defaults for the plugin with\n           <code>\n            $typeaheadProvider.defaults\n           </code>\n          </p>\n          <div class="highlight">\n           <pre class="bs-exemple-code">        <code class="javascript hljs" highlight-block="">angular.module(<span class="hljs-string">\'myApp\'</span>)\n.config(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">$typeaheadProvider</span>) </span>{\n  angular.extend($typeaheadProvider.defaults, {\n    animation: <span class="hljs-string">\'am-flip-x\'</span>,\n    minLength: <span class="hljs-number">2</span>,\n    limit: <span class="hljs-number">8</span>\n  });\n})\n</code>\n      </pre>\n          </div>\n         </div>\n        </div>\n        <!--/ngInclude: \'typeahead/docs/typeahead.demo.html\' -->\n       </div>\n       <div>\n        <!-- ngInclude: \'datepicker/docs/datepicker.demo.html\' -->\n        <div class="bs-docs-section" ng-controller="DatepickerDemoCtrl">\n         <div class="page-header">\n          <h1 id="datepickers">\n           Datepickers\n           <a class="small" href="//github.com/mgcrea/angular-strap/blob/master/src/datepicker/datepicker.js" target="_blank">\n            datepicker.js\n           </a>\n          </h1>\n          <code>\n           mgcrea.ngStrap.datepicker\n          </code>\n         </div>\n         <h2 id="datepickers-examples">\n          Examples\n         </h2>\n         <p>\n          Add datepicker functionality with any form text input.\n         </p>\n         <div class="callout callout-danger">\n          <h4>\n           Plugin dependency\n          </h4>\n          <p>\n           Datepickers require the\n           <a href="#tooltips">\n            tooltip module\n           </a>\n           and\n           <a href="//github.com/mgcrea/angular-strap/blob/master/src/helpers/date-parser.js" target="_blank">\n            dateParser helper\n           </a>\n           module to be loaded.\n          </p>\n          <p>\n           These docs currently use\n           <a href="//github.com/mgcrea/bootstrap-additions/blob/master/src/datepicker/datepicker.less" target="_blank">\n            bootstrap-additions\n           </a>\n           for styling purposes.\n          </p>\n         </div>\n         <div class="callout callout-info">\n          <h4>\n           Support for locales\n          </h4>\n          <p>\n           This module leverages the\n           <a href="http://docs.angularjs.org/api/ng.$locale">\n            $locale\n           </a>\n           service. You just have to load the proper\n           <a href="http://docs.angularjs.org/guide/i18n">\n            i18n\n           </a>\n           file to seamlessly translate your datepickers.\n          </p>\n         </div>\n         <h3>\n          Live demo\n          <a bs-tooltip="" class="small edit-plunkr" data-content-html-url="datepicker/docs/datepicker.demo.html" data-content-js-url="datepicker/docs/datepicker.demo.js" data-module-name="mgcrea.ngStrapDocs" data-placement="right" ng-plunkr="" title="edit in plunker">\n           <i class="fa fa-edit">\n           </i>\n           <small>\n            plunker\n           </small>\n          </a>\n         </h3>\n         <pre class="bs-example-scope">$scope.selectedDate = "2017-04-16T03:24:14.191Z"; // &lt;- [object Date]\n$scope.selectedDateAsNumber = 509414400000; // &lt;- [object Number]\n$scope.fromDate = ; // &lt;- [object Undefined]\n$scope.untilDate = ; // &lt;- [object Undefined]\n</pre>\n         <div append-source="" class="bs-example" style="padding-bottom: 24px;">\n          <form class="form-inline ng-pristine ng-valid" name="datepickerForm" role="form">\n           <!-- Basic example -->\n           <div class="form-group" ng-class="{\'has-error\': datepickerForm.date.$invalid}">\n            <label class="control-label">\n             <i class="fa fa-calendar">\n             </i>\n             Date\n             <small>\n              (as date)\n             </small>\n            </label>\n            <input bs-datepicker="" class="form-control ng-pristine ng-untouched ng-valid ng-not-empty" name="date" ng-model="selectedDate" type="text"/>\n           </div>\n           <!-- Custom example -->\n           <div class="form-group" ng-class="{\'has-error\': datepickerForm.date2.$invalid}">\n            <label class="control-label">\n             <i class="fa fa-calendar">\n             </i>\n             Date\n             <small>\n              (as number)\n             </small>\n            </label>\n            <input bs-datepicker="" class="form-control ng-pristine ng-untouched ng-valid ng-not-empty" data-autoclose="1" data-date-format="yyyy-MM-dd" data-date-type="number" data-max-date="today" data-min-date="02/10/86" name="date2" ng-model="selectedDateAsNumber" type="text"/>\n           </div>\n           <hr/>\n           <!-- Date range example -->\n           <div class="form-group">\n            <label class="control-label">\n             <i class="fa fa-calendar">\n             </i>\n             <i class="fa fa-arrows-h">\n             </i>\n             <i class="fa fa-calendar">\n             </i>\n             Date range\n             <small>\n              (dynamic)\n             </small>\n            </label>\n            <br/>\n            <div class="form-group col-xs-6">\n             <input bs-datepicker="" class="form-control ng-pristine ng-untouched ng-valid ng-empty" data-max-date="" ng-model="fromDate" placeholder="From" type="text"/>\n            </div>\n            <div class="form-group col-xs-6">\n             <input bs-datepicker="" class="form-control ng-pristine ng-untouched ng-valid ng-empty" data-min-date="" ng-model="untilDate" placeholder="Until" type="text"/>\n            </div>\n           </div>\n          </form>\n         </div>\n         <div class="highlight" ng-non-bindable="">\n          <pre><code class="html hljs xml" style="margin:0"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"datepickerForm"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-inline"</span> <span class="hljs-attr">role</span>=<span class="hljs-string">"form"</span>&gt;</span>\n  <span class="hljs-comment">&lt;!-- Basic example --&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-group"</span> <span class="hljs-attr">ng-class</span>=<span class="hljs-string">"{\'has-error\': datepickerForm.date.$invalid}"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"control-label"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"fa fa-calendar"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> Date <span class="hljs-tag">&lt;<span class="hljs-name">small</span>&gt;</span>(as date)<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-control"</span> <span class="hljs-attr">ng-model</span>=<span class="hljs-string">"selectedDate"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"date"</span> <span class="hljs-attr">bs-datepicker</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-comment">&lt;!-- Custom example --&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-group"</span> <span class="hljs-attr">ng-class</span>=<span class="hljs-string">"{\'has-error\': datepickerForm.date2.$invalid}"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"control-label"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"fa fa-calendar"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> Date <span class="hljs-tag">&lt;<span class="hljs-name">small</span>&gt;</span>(as number)<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-control"</span> <span class="hljs-attr">ng-model</span>=<span class="hljs-string">"selectedDateAsNumber"</span> <span class="hljs-attr">data-date-format</span>=<span class="hljs-string">"yyyy-MM-dd"</span> <span class="hljs-attr">data-date-type</span>=<span class="hljs-string">"number"</span> <span class="hljs-attr">data-min-date</span>=<span class="hljs-string">"02/10/86"</span> <span class="hljs-attr">data-max-date</span>=<span class="hljs-string">"today"</span> <span class="hljs-attr">data-autoclose</span>=<span class="hljs-string">"1"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"date2"</span> <span class="hljs-attr">bs-datepicker</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span>\n  <span class="hljs-comment">&lt;!-- Date range example --&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-group"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"control-label"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"fa fa-calendar"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"fa fa-arrows-h"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"fa fa-calendar"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> Date range <span class="hljs-tag">&lt;<span class="hljs-name">small</span>&gt;</span>(dynamic)<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-group col-xs-6"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-control"</span> <span class="hljs-attr">ng-model</span>=<span class="hljs-string">"fromDate"</span> <span class="hljs-attr">data-max-date</span>=<span class="hljs-string">"{{untilDate}}"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"From"</span> <span class="hljs-attr">bs-datepicker</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-group col-xs-6"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-control"</span> <span class="hljs-attr">ng-model</span>=<span class="hljs-string">"untilDate"</span> <span class="hljs-attr">data-min-date</span>=<span class="hljs-string">"{{fromDate}}"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"Until"</span> <span class="hljs-attr">bs-datepicker</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span>\n</code></pre>\n         </div>\n         <h2 id="datepickers-usage">\n          Usage\n         </h2>\n         <p>\n          Append a\n          <code>\n           bs-datepicker\n          </code>\n          attribute to any element to enable the directive.\n         </p>\n         <div class="callout callout-info">\n          <h4>\n           The module exposes a\n           <code>\n            $datepicker\n           </code>\n           service\n          </h4>\n          <p>\n           Available for programmatic use (mainly in directives as it requires a DOM element).\n          </p>\n          <div class="highlight">\n           <pre>        <code class="javascript hljs" highlight-block=""><span class="hljs-keyword">var</span> myDatepicker = $datepicker(element, ngModelController);\n</code>\n      </pre>\n          </div>\n         </div>\n         <h3>\n          Options\n         </h3>\n         <p>\n          Options can be passed via data-attributes on the directive or as an object hash to configure the service. For data attributes, append the option name to\n          <code>\n           data-\n          </code>\n          , as in\n          <code>\n           data-animation=""\n          </code>\n          .\n         </p>\n         <div class="callout callout-info">\n          <h4>\n           This module supports exotic placement options!\n          </h4>\n          <p>\n           You can position your datepicker in corners (such as\n           <code>\n            bottom-left\n           </code>\n           ) or any other combination two.\n          </p>\n          <p>\n           Exotic placement options are not part of the Bootstrap\'s core, to use them you must use\n           <code>\n            bootstrap-additions.css\n           </code>\n           from the\n           <a href="//github.com/mgcrea/bootstrap-additions" target="_blank">\n            BootstrapAdditions\n           </a>\n           project. This project being not yet fully released, meanwhile, you can use the\n           <a href="//mgcrea.github.io/angular-strap/static/styles/bootstrap-additions.min.css" target="_blank">\n            development snapshot\n           </a>\n           compiled for these docs.\n          </p>\n         </div>\n         <div class="table-responsive">\n          <table class="table table-bordered table-striped">\n           <thead>\n            <tr>\n             <th style="width: 100px;">\n              Name\n             </th>\n             <th style="width: 100px;">\n              type\n             </th>\n             <th style="width: 50px;">\n              default\n             </th>\n             <th>\n              description\n             </th>\n            </tr>\n           </thead>\n           <tbody>\n            <tr>\n             <td>\n              animation\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              am-fade\n             </td>\n             <td>\n              apply a CSS animation powered by\n              <code>\n               ngAnimate\n              </code>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              placement\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              \'bottom-left\'\n             </td>\n             <td>\n              how to position the datepicker - top | bottom | left | right | auto, or any combination like bottom-left or auto bottom-left.\n              <br/>\n              When "auto" is specified, it will dynamically reorient the datepicker. For example, if placement is "auto left", the datepicker will display to the left when possible, otherwise it will display right.\n             </td>\n            </tr>\n            <tr>\n             <td>\n              trigger\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              \'focus\'\n             </td>\n             <td>\n              how datepicker is triggered - click | hover | focus | manual\n             </td>\n            </tr>\n            <tr>\n             <td>\n              html\n             </td>\n             <td>\n              boolean\n             </td>\n             <td>\n              false\n             </td>\n             <td>\n              replace\n              <code>\n               ng-bind\n              </code>\n              with\n              <code>\n               ng-bind-html\n              </code>\n              , requires\n              <code>\n               ngSanitize\n              </code>\n              to be loaded\n             </td>\n            </tr>\n            <tr>\n             <td>\n              delay\n             </td>\n             <td>\n              number | object\n             </td>\n             <td>\n              0\n             </td>\n             <td>\n              <p>\n               delay showing and hiding the datepicker (ms) - does not apply to manual trigger type\n              </p>\n              <p>\n               If a number is supplied, delay is applied to both hide/show\n              </p>\n              <p>\n               Object structure is:\n               <code>\n                delay: { show: 500, hide: 100 }\n               </code>\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              container\n             </td>\n             <td>\n              string | false\n             </td>\n             <td>\n              false\n             </td>\n             <td>\n              <p>\n               Appends the datepicker to a specific element. Example:\n               <code>\n                container: \'body\'\n               </code>\n               . This option is particularly useful in that it allows you to position the datepicker in the flow of the document near the triggering element -\xc2\xa0which will prevent the datepicker from floating away from the triggering element during a window resize.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              template\n             </td>\n             <td>\n              path | id\n             </td>\n             <td>\n              \'$datepicker\'\n             </td>\n             <td>\n              <p>\n               If provided, overrides the default template, can be either a remote URL or a cached template id.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              onShow\n             </td>\n             <td>\n              function\n             </td>\n             <td>\n             </td>\n             <td>\n              <p>\n               If provided, this function will be invoked after the datepicker is shown.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              onBeforeShow\n             </td>\n             <td>\n              function\n             </td>\n             <td>\n             </td>\n             <td>\n              <p>\n               If provided, this function will be invoked before the datepicker is shown.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              onHide\n             </td>\n             <td>\n              function\n             </td>\n             <td>\n             </td>\n             <td>\n              <p>\n               If provided, this function will be invoked after the datepicker is hidden.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              onBeforeHide\n             </td>\n             <td>\n              function\n             </td>\n             <td>\n             </td>\n             <td>\n              <p>\n               If provided, this function will be invoked before the datepicker is hidden.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              dateFormat\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              \'shortDate\'\n             </td>\n             <td>\n              <p>\n               Rendering format of your date, leverages\n               <a href="http://docs.angularjs.org/api/ng.filter:date">\n                ng.filter:date\n               </a>\n               .\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              modelDateFormat\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              null\n             </td>\n             <td>\n              <p>\n               Model format of your date, leverages\n               <a href="http://docs.angularjs.org/api/ng.filter:date">\n                ng.filter:date\n               </a>\n               . You should also set dateType to\n               <code>\n                string\n               </code>\n               to use this option.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              dateType\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              \'date\'\n             </td>\n             <td>\n              <p>\n               Expected model type of your date - date | number | unix | iso | string\n              </p>\n              <p>\n               If type is "number" then datepicker uses milliseconds to set date, if "unix" - seconds\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              timezone\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              null\n             </td>\n             <td>\n              <p>\n               Timezone of your date - null, UTC\n              </p>\n              <p>\n               "UTC" for UTC or null for local timezone.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              autoclose\n             </td>\n             <td>\n              boolean\n             </td>\n             <td>\n              false\n             </td>\n             <td>\n              <p>\n               Whether the picker should close itself upon select.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              useNative\n             </td>\n             <td>\n              boolean\n             </td>\n             <td>\n              false\n             </td>\n             <td>\n              <p>\n               Whether to use a native component if available (iOS/Android).\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              minDate\n             </td>\n             <td>\n              date*\n             </td>\n             <td>\n              -Infinity\n             </td>\n             <td>\n              <p>\n               Minimum allowed date for selection\n               <small>\n                (* fed into the\n                <code>\n                 Date\n                </code>\n                constructor)\n               </small>\n               . You can set this to the current date by passing the string "today" into the \'data-min-date\' attribute, or by setting minDate to\n               <code>\n                new Date()\n               </code>\n               when configuring the provider defaults.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              maxDate\n             </td>\n             <td>\n              date*\n             </td>\n             <td>\n              +Infinity\n             </td>\n             <td>\n              <p>\n               Maximum allowed date for selection\n               <small>\n                (* fed into the\n                <code>\n                 Date\n                </code>\n                constructor)\n               </small>\n               . You can set this to the current date by passing the string "today" into the \'data-max-date\' attribute, or by setting maxDate to\n               <code>\n                new Date()\n               </code>\n               when configuring the provider defaults.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              startView\n             </td>\n             <td>\n              number\n             </td>\n             <td>\n              0\n             </td>\n             <td>\n              <p>\n               View that sould be opened by default - 0 | 1 | 2.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              minView\n             </td>\n             <td>\n              number\n             </td>\n             <td>\n              0\n             </td>\n             <td>\n              <p>\n               Minimum allowed view - 0 | 1 | 2. 1 will only allow month selection.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              startWeek\n             </td>\n             <td>\n              number\n             </td>\n             <td>\n              0\n             </td>\n             <td>\n              <p>\n               First day of the week (0 - Sunday, 1 - Monday, 2 - Tuesday, etc.)\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              startDate\n             </td>\n             <td>\n              date*\n             </td>\n             <td>\n              today\n             </td>\n             <td>\n              <p>\n               Date that should be opened by default.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              iconLeft\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              \'glyphicon glyphicon-chevron-left\'\n             </td>\n             <td>\n              <p>\n               CSS class for \'left\' icon.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              iconRight\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              \'glyphicon glyphicon-chevron-right\'\n             </td>\n             <td>\n              <p>\n               CSS class for \'right\' icon.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              daysOfWeekDisabled\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              \'\'\n             </td>\n             <td>\n              <p>\n               List of decimal days of the week values that are disabled and hence cannot be selected. For example, \'06\' disables Sunday and Saturday, \'12345\' disables Monday to Friday.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              disabledDates\n             </td>\n             <td>\n              array of date ranges\n             </td>\n             <td>\n              []\n             </td>\n             <td>\n              <p>\n               Array of date ranges to disable.\n              </p>\n              <p>\n               Example date range:\n               <code>\n                { start: new Date(2010, 11, 24), end: new Date(2010, 11, 25) }\n               </code>\n              </p>\n             </td>\n            </tr>\n           </tbody>\n          </table>\n         </div>\n         <div class="callout callout-info">\n          <h4>\n           Default options\n          </h4>\n          <p>\n           You can override global defaults for the plugin with\n           <code>\n            $datepickerProvider.defaults\n           </code>\n          </p>\n          <div class="highlight">\n           <pre class="bs-exemple-code">        <code class="javascript hljs" highlight-block="">angular.module(<span class="hljs-string">\'myApp\'</span>)\n.config(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">$datepickerProvider</span>) </span>{\n  angular.extend($datepickerProvider.defaults, {\n    dateFormat: <span class="hljs-string">\'dd/MM/yyyy\'</span>,\n    startWeek: <span class="hljs-number">1</span>\n  });\n})\n</code>\n      </pre>\n          </div>\n         </div>\n        </div>\n        <!--/ngInclude: \'datepicker/docs/datepicker.demo.html\' -->\n       </div>\n       <div>\n        <!-- ngInclude: \'timepicker/docs/timepicker.demo.html\' -->\n        <div class="bs-docs-section" ng-controller="TimepickerDemoCtrl">\n         <div class="page-header">\n          <h1 id="timepickers">\n           Timepickers\n           <a class="small" href="//github.com/mgcrea/angular-strap/blob/master/src/timepicker/timepicker.js" target="_blank">\n            timepicker.js\n           </a>\n          </h1>\n          <code>\n           mgcrea.ngStrap.timepicker\n          </code>\n         </div>\n         <h2 id="timepickers-examples">\n          Examples\n         </h2>\n         <p>\n          Add quick, dynamic timepicker functionality with any form text input.\n         </p>\n         <div class="callout callout-danger">\n          <h4>\n           Plugin dependency\n          </h4>\n          <p>\n           Timepickers require the\n           <a href="#tooltips">\n            tooltip module\n           </a>\n           and\n           <a href="//github.com/mgcrea/angular-strap/blob/master/src/helpers/date-parser.js" target="_blank">\n            dateParser helper\n           </a>\n           module to be loaded.\n          </p>\n          <p>\n           Theses docs currently use\n           <a href="//github.com/mgcrea/bootstrap-additions/blob/master/src/timepicker/timepicker.less" target="_blank">\n            bootstrap-additions\n           </a>\n           for styling purposes.\n          </p>\n         </div>\n         <div class="callout callout-info">\n          <h4>\n           Support for locales\n          </h4>\n          <p>\n           This module leverages the\n           <a href="http://docs.angularjs.org/api/ng.$locale">\n            $locale\n           </a>\n           service. You just have to load the proper\n           <a href="http://docs.angularjs.org/guide/i18n">\n            i18n\n           </a>\n           file to seamlessly translate your timepickers.\n          </p>\n         </div>\n         <h3>\n          Live demo\n          <a bs-tooltip="" class="small edit-plunkr" data-content-html-url="timepicker/docs/timepicker.demo.html" data-content-js-url="timepicker/docs/timepicker.demo.js" data-module-name="mgcrea.ngStrapDocs" data-placement="right" data-title="edit in plunker" ng-plunkr="">\n           <i class="fa fa-edit">\n           </i>\n           <small>\n            plunker\n           </small>\n          </a>\n         </h3>\n         <pre class="bs-example-scope">$scope.time = "1970-01-01T15:30:40.000Z"; // (formatted: 10:30 AM)\n$scope.selectedTimeAsNumber = 37840000; // (formatted: 5:30 AM)\n$scope.sharedDate = "2017-04-16T03:00:00.199Z"; // (formatted: 4/15/17 11:00 PM)\n  </pre>\n         <div append-source="" class="bs-example" style="padding-bottom: 24px;">\n          <form class="form-inline ng-pristine ng-valid" name="timepickerForm" role="form">\n           <!-- Basic example -->\n           <div class="form-group" ng-class="{\'has-error\': timepickerForm.time.$invalid}">\n            <label class="control-label">\n             <i class="fa fa-clock-o">\n             </i>\n             Time\n             <small>\n              (as date)\n             </small>\n            </label>\n            <input bs-timepicker="" class="form-control ng-pristine ng-untouched ng-valid ng-not-empty" name="time" ng-model="time" size="8" type="text"/>\n           </div>\n           <!-- Custom example -->\n           <div class="form-group" ng-class="{\'has-error\': timepickerForm.time2.$invalid}">\n            <label class="control-label">\n             <i class="fa fa-clock-o">\n             </i>\n             Time\n             <small>\n              (as number)\n             </small>\n            </label>\n            <input bs-timepicker="" class="form-control ng-pristine ng-untouched ng-valid ng-not-empty" data-autoclose="1" data-max-time="13:30:00" data-min-time="10:00:00" data-time-format="HH:mm:ss" data-time-type="number" name="time2" ng-model="selectedTimeAsNumber" size="8" type="text"/>\n           </div>\n           <hr/>\n           <!-- Time picker with arrows example -->\n           <div class="form-group">\n            <label class="control-label">\n             <i class="fa fa-clock-o">\n             </i>\n             Time picker with arrows\n            </label>\n            <br/>\n            <div class="form-group">\n             <input bs-timepicker="" class="form-control ng-pristine ng-untouched ng-valid ng-not-empty" data-arrow-behavior="picker" data-length="1" data-minute-step="1" data-time-format="HH:mm" name="time" ng-model="time" size="8" type="text"/>\n            </div>\n           </div>\n           <hr/>\n           <!-- Datetime example -->\n           <div class="form-group">\n            <label class="control-label">\n             <i class="fa fa-calendar">\n             </i>\n             Datetime picker\n            </label>\n            <br/>\n            <div class="form-group">\n             <input bs-datepicker="" class="form-control ng-pristine ng-untouched ng-valid ng-not-empty" data-autoclose="1" ng-model="sharedDate" placeholder="Date" size="10" type="text"/>\n            </div>\n            <div class="form-group">\n             <input bs-timepicker="" class="form-control ng-pristine ng-untouched ng-valid ng-not-empty" data-autoclose="1" data-time-format="h:mm:ss a" ng-model="sharedDate" placeholder="Time" size="8" type="text"/>\n            </div>\n           </div>\n          </form>\n         </div>\n         <div class="highlight" ng-non-bindable="">\n          <pre><code class="html hljs xml" style="margin:0"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"timepickerForm"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-inline"</span> <span class="hljs-attr">role</span>=<span class="hljs-string">"form"</span>&gt;</span>\n\n  <span class="hljs-comment">&lt;!-- Basic example --&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-group"</span> <span class="hljs-attr">ng-class</span>=<span class="hljs-string">"{\'has-error\': timepickerForm.time.$invalid}"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"control-label"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"fa fa-clock-o"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> Time <span class="hljs-tag">&lt;<span class="hljs-name">small</span>&gt;</span>(as date)<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-control"</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"8"</span> <span class="hljs-attr">ng-model</span>=<span class="hljs-string">"time"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"time"</span> <span class="hljs-attr">bs-timepicker</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n  <span class="hljs-comment">&lt;!-- Custom example --&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-group"</span> <span class="hljs-attr">ng-class</span>=<span class="hljs-string">"{\'has-error\': timepickerForm.time2.$invalid}"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"control-label"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"fa fa-clock-o"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> Time <span class="hljs-tag">&lt;<span class="hljs-name">small</span>&gt;</span>(as number)<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-control"</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"8"</span> <span class="hljs-attr">ng-model</span>=<span class="hljs-string">"selectedTimeAsNumber"</span> <span class="hljs-attr">data-time-format</span>=<span class="hljs-string">"HH:mm:ss"</span> <span class="hljs-attr">data-time-type</span>=<span class="hljs-string">"number"</span> <span class="hljs-attr">data-min-time</span>=<span class="hljs-string">"10:00:00"</span> <span class="hljs-attr">data-max-time</span>=<span class="hljs-string">"13:30:00"</span> <span class="hljs-attr">data-autoclose</span>=<span class="hljs-string">"1"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"time2"</span> <span class="hljs-attr">bs-timepicker</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span>\n\n  <span class="hljs-comment">&lt;!-- Time picker with arrows example --&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-group"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"control-label"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"fa fa-clock-o"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> Time picker with arrows<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-group"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-control"</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"8"</span> <span class="hljs-attr">ng-model</span>=<span class="hljs-string">"time"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"time"</span> <span class="hljs-attr">bs-timepicker</span> <span class="hljs-attr">data-time-format</span>=<span class="hljs-string">"HH:mm"</span> <span class="hljs-attr">data-length</span>=<span class="hljs-string">"1"</span> <span class="hljs-attr">data-minute-step</span>=<span class="hljs-string">"1"</span> <span class="hljs-attr">data-arrow-behavior</span>=<span class="hljs-string">"picker"</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span>\n\n  <span class="hljs-comment">&lt;!-- Datetime example --&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-group"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"control-label"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"fa fa-calendar"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> Datetime picker<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-group"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"10"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-control"</span> <span class="hljs-attr">ng-model</span>=<span class="hljs-string">"sharedDate"</span> <span class="hljs-attr">data-autoclose</span>=<span class="hljs-string">"1"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"Date"</span> <span class="hljs-attr">bs-datepicker</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-group"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"8"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-control"</span> <span class="hljs-attr">ng-model</span>=<span class="hljs-string">"sharedDate"</span> <span class="hljs-attr">data-time-format</span>=<span class="hljs-string">"h:mm:ss a"</span> <span class="hljs-attr">data-autoclose</span>=<span class="hljs-string">"1"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"Time"</span> <span class="hljs-attr">bs-timepicker</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span>\n</code></pre>\n         </div>\n         <h2 id="timepickers-usage">\n          Usage\n         </h2>\n         <p>\n          Append a\n          <code>\n           bs-timepicker\n          </code>\n          attribute to any element to enable the directive.\n         </p>\n         <div class="callout callout-info">\n          <h4>\n           The module exposes a\n           <code>\n            $timepicker\n           </code>\n           service\n          </h4>\n          <p>\n           Available for programmatic use (mainly in directives as it requires a DOM element).\n          </p>\n          <div class="highlight">\n           <pre>        <code class="javascript hljs" highlight-block=""><span class="hljs-keyword">var</span> myTimepicker = $timepicker(element, ngModelController);\n</code>\n      </pre>\n          </div>\n         </div>\n         <h3>\n          Options\n         </h3>\n         <p>\n          Options can be passed via data-attributes on the directive or as an object hash to configure the service. For data attributes, append the option name to\n          <code>\n           data-\n          </code>\n          , as in\n          <code>\n           data-animation=""\n          </code>\n          .\n         </p>\n         <div class="callout callout-info">\n          <h4>\n           This module supports exotic placement options!\n          </h4>\n          <p>\n           You can position your select in corners (such as\n           <code>\n            bottom-left\n           </code>\n           ) or any other combination two.\n          </p>\n          <p>\n           Exotic placement options are not part of the Bootstrap\'s core, to use them you must use\n           <code>\n            bootstrap-additions.css\n           </code>\n           from the\n           <a href="//github.com/mgcrea/bootstrap-additions" target="_blank">\n            BootstrapAdditions\n           </a>\n           project. This project being not yet fully released, meanwhile, you can use the\n           <a href="//mgcrea.github.io/angular-strap/static/styles/bootstrap-additions.min.css" target="_blank">\n            development snapshot\n           </a>\n           compiled for theses docs.\n          </p>\n         </div>\n         <div class="table-responsive">\n          <table class="table table-bordered table-striped">\n           <thead>\n            <tr>\n             <th style="width: 100px;">\n              Name\n             </th>\n             <th style="width: 100px;">\n              type\n             </th>\n             <th style="width: 50px;">\n              default\n             </th>\n             <th>\n              description\n             </th>\n            </tr>\n           </thead>\n           <tbody>\n            <tr>\n             <td>\n              animation\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              am-fade\n             </td>\n             <td>\n              apply a CSS animation powered by\n              <code>\n               ngAnimate\n              </code>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              placement\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              \'bottom-left\'\n             </td>\n             <td>\n              how to position the timepicker - top | bottom | left | right | auto, or any combination like bottom-left or auto bottom-left.\n              <br/>\n              When "auto" is specified, it will dynamically reorient the timepicker. For example, if placement is "auto left", the timepicker will display to the left when possible, otherwise it will display right.\n             </td>\n            </tr>\n            <tr>\n             <td>\n              trigger\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              \'focus\'\n             </td>\n             <td>\n              how timepicker is triggered - click | hover | focus | manual\n             </td>\n            </tr>\n            <tr>\n             <td>\n              html\n             </td>\n             <td>\n              boolean\n             </td>\n             <td>\n              false\n             </td>\n             <td>\n              replace\n              <code>\n               ng-bind\n              </code>\n              with\n              <code>\n               ng-bind-html\n              </code>\n              , requires\n              <code>\n               ngSanitize\n              </code>\n              to be loaded\n             </td>\n            </tr>\n            <tr>\n             <td>\n              delay\n             </td>\n             <td>\n              number | object\n             </td>\n             <td>\n              0\n             </td>\n             <td>\n              <p>\n               delay showing and hiding the timepicker (ms) - does not apply to manual trigger type\n              </p>\n              <p>\n               If a number is supplied, delay is applied to both hide/show\n              </p>\n              <p>\n               Object structure is:\n               <code>\n                delay: { show: 500, hide: 100 }\n               </code>\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              container\n             </td>\n             <td>\n              string | false\n             </td>\n             <td>\n              false\n             </td>\n             <td>\n              <p>\n               Appends the timepicker to a specific element. Example:\n               <code>\n                container: \'body\'\n               </code>\n               . This option is particularly useful in that it allows you to position the timepicker in the flow of the document near the triggering element -\xc2\xa0which will prevent the timepicker from floating away from the triggering element during a window resize.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              template\n             </td>\n             <td>\n              path | id\n             </td>\n             <td>\n              \'$timepicker\'\n             </td>\n             <td>\n              <p>\n               If provided, overrides the default template, can be either a remote URL or a cached template id.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              onShow\n             </td>\n             <td>\n              function\n             </td>\n             <td>\n             </td>\n             <td>\n              <p>\n               If provided, this function will be invoked after the timepicker is shown.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              onBeforeShow\n             </td>\n             <td>\n              function\n             </td>\n             <td>\n             </td>\n             <td>\n              <p>\n               If provided, this function will be invoked before the timepicker is shown.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              onHide\n             </td>\n             <td>\n              function\n             </td>\n             <td>\n             </td>\n             <td>\n              <p>\n               If provided, this function will be invoked after the timepicker is hidden.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              onBeforeHide\n             </td>\n             <td>\n              function\n             </td>\n             <td>\n             </td>\n             <td>\n              <p>\n               If provided, this function will be invoked before the timepicker is hidden.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              timeFormat\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              \'shortTime\'\n             </td>\n             <td>\n              <p>\n               Rendering format of your time, leverages\n               <a href="http://docs.angularjs.org/api/ng.filter:date">\n                ng.filter:date\n               </a>\n               .\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              modelTimeFormat\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              null\n             </td>\n             <td>\n              <p>\n               Model format of your time, leverages\n               <a href="http://docs.angularjs.org/api/ng.filter:date">\n                ng.filter:date\n               </a>\n               .\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              timeType\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              \'date\'\n             </td>\n             <td>\n              <p>\n               Expected model type of your time - date | number | unix | iso | string\n              </p>\n              <p>\n               If type is "number" then timepicker uses milliseconds to set date, if "unix" - seconds\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              autoclose\n             </td>\n             <td>\n              boolean\n             </td>\n             <td>\n              false\n             </td>\n             <td>\n              <p>\n               Whether the picker should close itself upon select.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              useNative\n             </td>\n             <td>\n              boolean\n             </td>\n             <td>\n              true\n             </td>\n             <td>\n              <p>\n               Whether to use a native component if available (iOS/Android).\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              minTime\n             </td>\n             <td>\n              date*\n             </td>\n             <td>\n              -Infinity\n             </td>\n             <td>\n              <p>\n               Minimum allowed time for selection\n               <small>\n                (parsed against current format)\n               </small>\n               . You can use the string "now" that will resolve the current time.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              maxTime\n             </td>\n             <td>\n              date*\n             </td>\n             <td>\n              +Infinity\n             </td>\n             <td>\n              <p>\n               Maximum allowed time for selection\n               <small>\n                (parsed against current format)\n               </small>\n               . You can use the string "now" that will resolve the current time.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              length\n             </td>\n             <td>\n              number\n             </td>\n             <td>\n              5\n             </td>\n             <td>\n              <p>\n               Length of the timepicker (should be an odd number).\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              hourStep\n             </td>\n             <td>\n              number\n             </td>\n             <td>\n              1\n             </td>\n             <td>\n              <p>\n               Default step for hours.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              minuteStep\n             </td>\n             <td>\n              number\n             </td>\n             <td>\n              5\n             </td>\n             <td>\n              <p>\n               Default step for minutes.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              secondStep\n             </td>\n             <td>\n              number\n             </td>\n             <td>\n              5\n             </td>\n             <td>\n              <p>\n               Default step for seconds.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              roundDisplay\n             </td>\n             <td>\n              boolean\n             </td>\n             <td>\n              false\n             </td>\n             <td>\n              <p>\n               Whether the picker should round the minute values displayed when no initial time is specified. The rounding is made by dividing time in minuteStep intervals and flooring the current time to the nearest.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              iconUp\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              \'glyphicon glyphicon-chevron-up\'\n             </td>\n             <td>\n              <p>\n               CSS class for \'up\' icon.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              iconDown\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              \'glyphicon glyphicon-chevron-down\'\n             </td>\n             <td>\n              <p>\n               CSS class for \'down\' icon.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              arrowBehavior\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              \'pager\'\n             </td>\n             <td>\n              <p>\n               Sets the behavior of the arrow buttons in the picker. \'pager\' to move the displayed hour/minute options, \'picker\' to change the current time hours/minutes value.\n              </p>\n             </td>\n            </tr>\n           </tbody>\n          </table>\n         </div>\n         <div class="callout callout-info">\n          <h4>\n           Default options\n          </h4>\n          <p>\n           You can override global defaults for the plugin with\n           <code>\n            $timepickerProvider.defaults\n           </code>\n          </p>\n          <div class="highlight">\n           <pre class="bs-exemple-code">        <code class="javascript hljs" highlight-block="">angular.module(<span class="hljs-string">\'myApp\'</span>)\n.config(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">$timepickerProvider</span>) </span>{\n  angular.extend($timepickerProvider.defaults, {\n    timeFormat: <span class="hljs-string">\'HH:mm\'</span>,\n    length: <span class="hljs-number">7</span>\n  });\n})\n</code>\n      </pre>\n          </div>\n         </div>\n        </div>\n        <!--/ngInclude: \'timepicker/docs/timepicker.demo.html\' -->\n       </div>\n       <div>\n        <!-- ngInclude: \'button/docs/button.demo.html\' -->\n        <div class="bs-docs-section" ng-controller="ButtonDemoCtrl">\n         <div class="page-header">\n          <h1 id="buttons">\n           Buttons\n           <a class="small" href="//github.com/mgcrea/angular-strap/blob/master/src/button/button.js" target="_blank">\n            button.js\n           </a>\n          </h1>\n          <code>\n           mgcrea.ngStrap.button\n          </code>\n         </div>\n         <h2 id="buttons-examples">\n          Examples\n         </h2>\n         <p>\n          Do more with buttons. Control button states or create groups of buttons for more components like toolbars.\n         </p>\n         <p>\n          This modules exposes two directives:\n          <code>\n           bs-checkbox\n          </code>\n          and\n          <code>\n           bs-radio\n          </code>\n          that can be used as attributes to trigger toggle, checkbox or radio behavior.\n         </p>\n         <div class="callout callout-info">\n          <h4>\n           Group directives are also available as shortcuts\n          </h4>\n          <p>\n           Use\n           <code>\n            bs-checkbox-group\n           </code>\n           and\n           <code>\n            bs-radio-group\n           </code>\n           to easily setup the proper markup at compile time.\n          </p>\n         </div>\n         <h3 id="buttons-usage">\n          Live demo\n          <a bs-tooltip="" class="small edit-plunkr" data-content-html-url="button/docs/button.demo.html" data-content-js-url="button/docs/button.demo.js" data-module-name="mgcrea.ngStrapDocs" data-placement="right" data-title="edit in plunker" ng-plunkr="">\n           <i class="fa fa-edit">\n           </i>\n           <small>\n            plunker\n           </small>\n          </a>\n         </h3>\n         <pre class="bs-example-scope">$scope.button = {\n  "toggle": false,\n  "checkbox": {\n    "left": false,\n    "middle": true,\n    "right": false\n  },\n  "radio": "left"\n};</pre>\n         <div append-source="" class="bs-example" style="padding-bottom: 24px;">\n          <label>\n           Toggle:\n          </label>\n          <button bs-checkbox="" class="btn btn-default ng-pristine ng-untouched ng-valid ng-not-empty" ng-model="button.toggle" type="button">\n           Toggle\n          </button>\n          <!-- You can also use custom values with the `data-true-value` & `data-false-value` attributes -->\n          <hr/>\n          <label>\n           Checkboxes:\n          </label>\n          <div bs-checkbox-group="" class="btn-group ng-pristine ng-untouched ng-valid ng-not-empty" data-toggle="buttons">\n           <label class="btn btn-default">\n            <input bs-checkbox="" class="ng-pristine ng-untouched ng-valid ng-empty" ng-model="button.checkbox.left" type="checkbox" value="left"/>\n            Left\n           </label>\n           <label class="btn btn-default active">\n            <input bs-checkbox="" class="ng-pristine ng-untouched ng-valid ng-not-empty" ng-model="button.checkbox.middle" type="checkbox" value="middle"/>\n            Middle\n           </label>\n           <label class="btn btn-default">\n            <input bs-checkbox="" class="ng-pristine ng-untouched ng-valid ng-empty" ng-model="button.checkbox.right" type="checkbox" value="right"/>\n            Right\n           </label>\n           <!-- Children get compiled by `bs-checkbox-group` to :\n        <label class="btn btn-default"><input type="checkbox" value="left" ng-model="button.checkbox.left" bs-checkbox> Left</label>\n        ...\n        -->\n          </div>\n          <hr/>\n          <label>\n           Radios:\n          </label>\n          <div bs-radio-group="" class="btn-group ng-pristine ng-untouched ng-valid ng-not-empty" data-toggle="buttons">\n           <label class="btn btn-default">\n            <input bs-radio="" class="btn btn-default ng-pristine ng-untouched ng-valid ng-not-empty" name="84" ng-model="button.radio" type="radio" value="0"/>\n            First\n           </label>\n           <label class="btn btn-default">\n            <input bs-radio="" class="btn btn-default ng-pristine ng-untouched ng-valid ng-not-empty" name="85" ng-model="button.radio" type="radio" value="1"/>\n            Second\n           </label>\n           <label class="btn btn-default">\n            <input bs-radio="" class="btn btn-default ng-pristine ng-untouched ng-valid ng-not-empty" name="86" ng-model="button.radio" type="radio" value="2"/>\n            Third\n           </label>\n           <!-- Children get compiled by `bs-radio-group` to :\n        <label class="btn btn-default"><input type="radio" class="btn btn-default" value="left" ng-model="button.radio" bs-radio> Left</label>\n        ...\n        -->\n          </div>\n         </div>\n         <div class="highlight" ng-non-bindable="">\n          <pre><code class="html hljs xml" style="margin:0"><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Toggle:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-default"</span> <span class="hljs-attr">ng-model</span>=<span class="hljs-string">"button.toggle"</span> <span class="hljs-attr">bs-checkbox</span>&gt;</span>Toggle<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n<span class="hljs-comment">&lt;!-- You can also use custom values with the `data-true-value` &amp; `data-false-value` attributes --&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Checkboxes:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn-group"</span> <span class="hljs-attr">ng-model</span>=<span class="hljs-string">"button.checkbox"</span> <span class="hljs-attr">bs-checkbox-group</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-default"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"left"</span>&gt;</span> Left<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-default"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"middle"</span>&gt;</span> Middle<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-default"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"right"</span>&gt;</span> Right<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n  <span class="hljs-comment">&lt;!-- Children get compiled by `bs-checkbox-group` to :\n  &lt;label class="btn btn-default"&gt;&lt;input type="checkbox" value="left" ng-model="button.checkbox.left" bs-checkbox&gt; Left&lt;/label&gt;\n  ...\n  --&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Radios:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn-group"</span> <span class="hljs-attr">ng-model</span>=<span class="hljs-string">"button.radio"</span> <span class="hljs-attr">bs-radio-group</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-default"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"radio"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-default"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"0"</span>&gt;</span> First<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-default"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"radio"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-default"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"1"</span>&gt;</span> Second<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-default"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"radio"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-default"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"2"</span>&gt;</span> Third<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n  <span class="hljs-comment">&lt;!-- Children get compiled by `bs-radio-group` to :\n  &lt;label class="btn btn-default"&gt;&lt;input type="radio" class="btn btn-default" value="left" ng-model="button.radio" bs-radio&gt; Left&lt;/label&gt;\n  ...\n  --&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n</code></pre>\n         </div>\n         <div class="callout callout-info">\n          <h4>\n           Type support\n          </h4>\n          <p>\n           Theses directives can handle both\n           <code>\n            strings\n           </code>\n           ,\n           <code>\n            numbers\n           </code>\n           and\n           <code>\n            booleans\n           </code>\n           values.\n          </p>\n         </div>\n        </div>\n        <!--/ngInclude: \'button/docs/button.demo.html\' -->\n       </div>\n       <div>\n        <!-- ngInclude: \'select/docs/select.demo.html\' -->\n        <div class="bs-docs-section" ng-controller="SelectDemoCtrl">\n         <div class="page-header">\n          <h1 id="selects">\n           Selects\n           <a class="small" href="//github.com/mgcrea/angular-strap/blob/master/src/select/select.js" target="_blank">\n            select.js\n           </a>\n          </h1>\n          <code>\n           mgcrea.ngStrap.select\n          </code>\n         </div>\n         <h2 id="selects-examples">\n          Examples\n         </h2>\n         <p>\n          Add quick, dynamic select functionality with any form text input.\n         </p>\n         <div class="callout callout-danger">\n          <h4>\n           Plugin dependency\n          </h4>\n          <p>\n           Selects require the\n           <a href="#tooltips">\n            tooltip module\n           </a>\n           and\n           <a href="//github.com/mgcrea/angular-strap/blob/master/src/helpers/parse-options.js" target="_blank">\n            parseOptions helper\n           </a>\n           module to be loaded.\n          </p>\n         </div>\n         <h3>\n          Live demo\n          <a bs-tooltip="" class="small edit-plunkr" data-content-html-url="select/docs/select.demo.html" data-content-js-url="select/docs/select.demo.js" data-module-name="mgcrea.ngStrapDocs" data-placement="right" data-title="edit in plunker" ng-plunkr="">\n           <i class="fa fa-edit">\n           </i>\n           <small>\n            plunker\n           </small>\n          </a>\n         </h3>\n         <pre class="bs-example-scope">$scope.selectedIcon = "";\n$scope.selectedIcons = ["Globe","Heart"];\n$scope.icons = [{"value":"Gear","label":"&lt;i class=\\"fa fa-gear\\"&gt;&lt;/i&gt; Gear"},{"value":"Globe","label":"&lt;i class=\\"fa fa-globe\\"&gt;&lt;/i&gt; Globe"},{"value":"Heart","label":"&lt;i class=\\"fa fa-heart\\"&gt;&lt;/i&gt; Heart"},{"value":"Camera","label":"&lt;i class=\\"fa fa-camera\\"&gt;&lt;/i&gt; Camera"}];\n</pre>\n         <div append-source="" class="bs-example" style="padding-bottom: 24px;">\n          <label>\n           Single select:\n          </label>\n          <button bs-options="icon.value as icon.label for icon in icons" bs-select="" class="btn btn-default ng-pristine ng-untouched ng-valid ng-empty" data-html="1" data-toggle="true" ng-model="selectedIcon" type="button">\n           Choose among the following...\n           <span class="caret">\n           </span>\n          </button>\n          <hr/>\n          <label>\n           Multiple select:\n          </label>\n          <button bs-options="icon.value as icon.label for icon in icons" bs-select="" class="btn btn-default ng-pristine ng-untouched ng-valid ng-not-empty" data-animation="am-flip-x" data-html="1" data-multiple="1" ng-model="selectedIcons" type="button">\n           <i class="fa fa-globe">\n           </i>\n           Globe,\n           <i class="fa fa-heart">\n           </i>\n           Heart\n           <span class="caret">\n           </span>\n          </button>\n         </div>\n         <div class="highlight" ng-non-bindable="">\n          <pre><code class="html hljs xml" style="margin:0"><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Single select:&amp;nbsp;<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-default"</span> <span class="hljs-attr">ng-model</span>=<span class="hljs-string">"selectedIcon"</span> <span class="hljs-attr">data-html</span>=<span class="hljs-string">"1"</span> <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">"true"</span> <span class="hljs-attr">bs-options</span>=<span class="hljs-string">"icon.value as icon.label for icon in icons"</span> <span class="hljs-attr">bs-select</span>&gt;</span>\n  Action <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"caret"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Multiple select:&amp;nbsp;<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-default"</span> <span class="hljs-attr">ng-model</span>=<span class="hljs-string">"selectedIcons"</span> <span class="hljs-attr">data-html</span>=<span class="hljs-string">"1"</span> <span class="hljs-attr">data-multiple</span>=<span class="hljs-string">"1"</span> <span class="hljs-attr">data-animation</span>=<span class="hljs-string">"am-flip-x"</span> <span class="hljs-attr">bs-options</span>=<span class="hljs-string">"icon.value as icon.label for icon in icons"</span> <span class="hljs-attr">bs-select</span>&gt;</span>\n  Action <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"caret"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n</code></pre>\n         </div>\n         <h2 id="selects-usage">\n          Usage\n         </h2>\n         <p>\n          Append a\n          <code>\n           bs-select\n          </code>\n          attribute to any element to enable the directive.\n         </p>\n         <p>\n          Available items are specified using the\n          <code>\n           bs-options\n          </code>\n          attribute. This attribute uses AngularJS\n          <a href="https://docs.angularjs.org/api/ng/directive/ngOptions" target="_blank">\n           ngOptions\n          </a>\n          array data source syntax.\n         </p>\n         <div class="callout callout-danger">\n          <h4>\n           Breaking Change\n          </h4>\n          <p>\n           If you are using AngularStrap prior to version 2.2.0, please use\n           <code>\n            ng-options\n           </code>\n           instead of\n           <code>\n            bs-options\n           </code>\n           .\n          </p>\n         </div>\n         <div class="callout callout-info">\n          <h4>\n           The module exposes a\n           <code>\n            $select\n           </code>\n           service\n          </h4>\n          <p>\n           Available for programmatic use (mainly in directives as it requires a DOM element).\n          </p>\n          <div class="highlight">\n           <pre>        <code class="javascript hljs" highlight-block=""><span class="hljs-keyword">var</span> mySelect = $select(element, controller);\n</code>\n      </pre>\n          </div>\n         </div>\n         <h3>\n          Options\n         </h3>\n         <p>\n          Options can be passed via data-attributes on the directive or as an object hash to configure the service. For data attributes, append the option name to\n          <code>\n           data-\n          </code>\n          , as in\n          <code>\n           data-animation=""\n          </code>\n          .\n         </p>\n         <div class="callout callout-info">\n          <h4>\n           This module supports exotic placement options!\n          </h4>\n          <p>\n           You can position your select in corners (such as\n           <code>\n            bottom-left\n           </code>\n           ) or any other combination two.\n          </p>\n          <p>\n           Exotic placement options are not part of the Bootstrap\'s core, to use them you must use\n           <code>\n            bootstrap-additions.css\n           </code>\n           from the\n           <a href="//github.com/mgcrea/bootstrap-additions" target="_blank">\n            BootstrapAdditions\n           </a>\n           project. This project being not yet fully released, meanwhile, you can use the\n           <a href="//mgcrea.github.io/angular-strap/static/styles/bootstrap-additions.min.css" target="_blank">\n            development snapshot\n           </a>\n           compiled for theses docs.\n          </p>\n         </div>\n         <div class="table-responsive">\n          <table class="table table-bordered table-striped">\n           <thead>\n            <tr>\n             <th style="width: 100px;">\n              Name\n             </th>\n             <th style="width: 100px;">\n              type\n             </th>\n             <th style="width: 50px;">\n              default\n             </th>\n             <th>\n              description\n             </th>\n            </tr>\n           </thead>\n           <tbody>\n            <tr>\n             <td>\n              animation\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              am-fade\n             </td>\n             <td>\n              apply a CSS animation powered by\n              <code>\n               ngAnimate\n              </code>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              placement\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              \'bottom-left\'\n             </td>\n             <td>\n              how to position the select - top | bottom | left | right | auto, or any combination like bottom-left or auto bottom-left.\n              <br/>\n              When "auto" is specified, it will dynamically reorient the select. For example, if placement is "auto left", the select will display to the left when possible, otherwise it will display right.\n             </td>\n            </tr>\n            <tr>\n             <td>\n              trigger\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              \'focus\'\n             </td>\n             <td>\n              how select is triggered - click | hover | focus | manual\n             </td>\n            </tr>\n            <tr>\n             <td>\n              html\n             </td>\n             <td>\n              boolean\n             </td>\n             <td>\n              false\n             </td>\n             <td>\n              replace\n              <code>\n               ng-bind\n              </code>\n              with\n              <code>\n               ng-bind-html\n              </code>\n              , requires\n              <code>\n               ngSanitize\n              </code>\n              to be loaded\n             </td>\n            </tr>\n            <tr>\n             <td>\n              delay\n             </td>\n             <td>\n              number | object\n             </td>\n             <td>\n              0\n             </td>\n             <td>\n              <p>\n               delay showing and hiding the select (ms) - does not apply to manual trigger type\n              </p>\n              <p>\n               If a number is supplied, delay is applied to both hide/show\n              </p>\n              <p>\n               Object structure is:\n               <code>\n                delay: { show: 500, hide: 100 }\n               </code>\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              container\n             </td>\n             <td>\n              string | false\n             </td>\n             <td>\n              false\n             </td>\n             <td>\n              <p>\n               Appends the select to a specific element. Example:\n               <code>\n                container: \'body\'\n               </code>\n               . This option is particularly useful in that it allows you to position the select in the flow of the document near the triggering element -\xc2\xa0which will prevent the select from floating away from the triggering element during a window resize.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              template\n             </td>\n             <td>\n              path | id\n             </td>\n             <td>\n              \'$select\'\n             </td>\n             <td>\n              <p>\n               If provided, overrides the default template, can be either a remote URL or a cached template id.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              toggle\n             </td>\n             <td>\n              boolean\n             </td>\n             <td>\n              false\n             </td>\n             <td>\n              <p>\n               When true, an item can be deselected.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              onShow\n             </td>\n             <td>\n              function\n             </td>\n             <td>\n             </td>\n             <td>\n              <p>\n               If provided, this function will be invoked after the select is shown.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              onBeforeShow\n             </td>\n             <td>\n              function\n             </td>\n             <td>\n             </td>\n             <td>\n              <p>\n               If provided, this function will be invoked before the select is shown.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              onHide\n             </td>\n             <td>\n              function\n             </td>\n             <td>\n             </td>\n             <td>\n              <p>\n               If provided, this function will be invoked after the select is hidden.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              onBeforeHide\n             </td>\n             <td>\n              function\n             </td>\n             <td>\n             </td>\n             <td>\n              <p>\n               If provided, this function will be invoked before the select is hidden.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              onSelect\n             </td>\n             <td>\n              function\n             </td>\n             <td>\n             </td>\n             <td>\n              <p>\n               If provided, this function will be invoked when an item is selected.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              multiple\n             </td>\n             <td>\n              boolean\n             </td>\n             <td>\n              false\n             </td>\n             <td>\n              <p>\n               Whether multiple selections should be allowed.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              all-none-buttons\n             </td>\n             <td>\n              boolean\n             </td>\n             <td>\n              false\n             </td>\n             <td>\n              <p>\n               Show the buttons to select and deselect all items at once.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              allText\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              \'All\'\n             </td>\n             <td>\n              <p>\n               Sets the text for the select all button.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              noneText\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              \'None\'\n             </td>\n             <td>\n              <p>\n               Sets the text for the select none button.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              max-length\n             </td>\n             <td>\n              number\n             </td>\n             <td>\n              3\n             </td>\n             <td>\n              <p>\n               Maximum number of selected values that can be displayed inline.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              max-length-html\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              \'selected\'\n             </td>\n             <td>\n              <p>\n               Placeholder to append to an overflowed multiple selection.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              sort\n             </td>\n             <td>\n              boolean\n             </td>\n             <td>\n              true\n             </td>\n             <td>\n              <p>\n               Sort the order of the displayed labels.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              placeholder\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              \'Choose among the following...\'\n             </td>\n             <td>\n              <p>\n               Placeholder text when no value is selected.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              iconCheckmark\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              \'glyphicon glyphicon-ok\'\n             </td>\n             <td>\n              <p>\n               CSS class for \'checkmark\' icon.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              id\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              \'\'\n             </td>\n             <td>\n              The select instance id for usage in event handlers.\n             </td>\n            </tr>\n           </tbody>\n          </table>\n         </div>\n         <div class="callout callout-info">\n          <h4>\n           Default options\n          </h4>\n          <p>\n           You can override global defaults for the plugin with\n           <code>\n            $selectProvider.defaults\n           </code>\n          </p>\n          <div class="highlight">\n           <pre class="bs-exemple-code">        <code class="javascript hljs" highlight-block="">angular.module(<span class="hljs-string">\'myApp\'</span>)\n.config(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">$selectProvider</span>) </span>{\n  angular.extend($selectProvider.defaults, {\n    animation: <span class="hljs-string">\'am-flip-x\'</span>,\n    sort: <span class="hljs-literal">false</span>\n  });\n})\n</code>\n      </pre>\n          </div>\n         </div>\n        </div>\n        <!--/ngInclude: \'select/docs/select.demo.html\' -->\n       </div>\n       <div>\n        <!-- ngInclude: \'tab/docs/tab.demo.html\' -->\n        <div class="bs-docs-section" ng-controller="TabDemoCtrl">\n         <div class="page-header">\n          <h1 id="tabs">\n           Tabs\n           <a class="small" href="//github.com/mgcrea/angular-strap/blob/master/src/tab/tab.js" target="_blank">\n            tab.js\n           </a>\n          </h1>\n          <code>\n           mgcrea.ngStrap.tab\n          </code>\n         </div>\n         <h2 id="tabs-examples">\n          Examples\n         </h2>\n         <p>\n          Add quick, dynamic tab functionality to transition through panes of local content.\n         </p>\n         <h3>\n          Live demo\n          <a bs-tooltip="" class="small edit-plunkr" data-content-html-url="tab/docs/tab.demo.html" data-content-js-url="tab/docs/tab.demo.js" data-module-name="mgcrea.ngStrapDocs" data-placement="right" data-title="edit in plunker" ng-plunkr="">\n           <i class="fa fa-edit">\n           </i>\n           <small>\n            plunker\n           </small>\n          </a>\n         </h3>\n         <pre class="bs-example-scope">$scope.tabs = [\n  {\n    "title": "Home",\n    "content": "Raw denim you probably haven\'t heard of them jean shorts Austin. Nesciunt tofu stumptown aliqua, retro synth master cleanse. Mustache cliche tempor, williamsburg carles vegan helvetica."\n  },\n  {\n    "title": "Profile",\n    "content": "Food truck fixie locavore, accusamus mcsweeney\'s marfa nulla single-origin coffee squid. Exercitation +1 labore velit, blog sartorial PBR leggings next level wes anderson artisan four loko farm-to-table craft beer twee."\n  },\n  {\n    "title": "About",\n    "content": "Etsy mixtape wayfarers, ethical wes anderson tofu before they sold out mcsweeney\'s organic lomo retro fanny pack lo-fi farm-to-table readymade.",\n    "disabled": true\n  }\n];\n$scope.tabs.activeTab = "Home";\n  </pre>\n         <div append-source="" class="bs-example">\n          <div class="btn btn-default" ng-click="toggleThirdTab()">\n           Enable third tab\n          </div>\n          <div class="btn btn-default" ng-click="tabs.activeTab=\'Profile\'">\n           Select "Profile" tab\n          </div>\n          <hr/>\n          <!-- bsActivePane is optional -->\n          <div bs-active-pane="tabs.activeTab" bs-tabs="">\n           <ul class="nav nav-tabs" ng-class="$navClass" role="tablist">\n            <!-- -->\n            <li class="active" ng-class="[ $isActive($pane, $index) ? $activeClass : \'\', $pane.disabled ? \'disabled\' : \'\' ]" ng-repeat="$pane in $panes track by $index" role="presentation">\n             <a aria-controls="$pane.title" data-index="0" data-toggle="tab" href="" ng-bind-html="$pane.title" ng-click="!$pane.disabled &amp;&amp; $setActive($pane.name || $index)" role="tab">\n              Home\n             </a>\n            </li>\n            <!-- -->\n            <li ng-class="[ $isActive($pane, $index) ? $activeClass : \'\', $pane.disabled ? \'disabled\' : \'\' ]" ng-repeat="$pane in $panes track by $index" role="presentation">\n             <a aria-controls="$pane.title" data-index="1" data-toggle="tab" href="" ng-bind-html="$pane.title" ng-click="!$pane.disabled &amp;&amp; $setActive($pane.name || $index)" role="tab">\n              Profile\n             </a>\n            </li>\n            <!-- -->\n            <li class="disabled" ng-class="[ $isActive($pane, $index) ? $activeClass : \'\', $pane.disabled ? \'disabled\' : \'\' ]" ng-repeat="$pane in $panes track by $index" role="presentation">\n             <a aria-controls="$pane.title" data-index="2" data-toggle="tab" href="" ng-bind-html="$pane.title" ng-click="!$pane.disabled &amp;&amp; $setActive($pane.name || $index)" role="tab">\n              About\n             </a>\n            </li>\n            <!-- -->\n           </ul>\n           <div class="tab-content" ng-transclude="">\n            <!-- -->\n            <div bs-pane="" class="tab-pane am-fade active" data-title="Home" name="Home" ng-bind="tab.content" ng-repeat="tab in tabs">\n             Raw denim you probably haven\'t heard of them jean shorts Austin. Nesciunt tofu stumptown aliqua, retro synth master cleanse. Mustache cliche tempor, williamsburg carles vegan helvetica.\n            </div>\n            <!-- -->\n            <div bs-pane="" class="tab-pane am-fade" data-title="Profile" name="Profile" ng-bind="tab.content" ng-repeat="tab in tabs">\n             Food truck fixie locavore, accusamus mcsweeney\'s marfa nulla single-origin coffee squid. Exercitation +1 labore velit, blog sartorial PBR leggings next level wes anderson artisan four loko farm-to-table craft beer twee.\n            </div>\n            <!-- -->\n            <div bs-pane="" class="tab-pane am-fade" data-title="About" disabled="disabled" name="About" ng-bind="tab.content" ng-repeat="tab in tabs">\n             Etsy mixtape wayfarers, ethical wes anderson tofu before they sold out mcsweeney\'s organic lomo retro fanny pack lo-fi farm-to-table readymade.\n            </div>\n            <!-- -->\n           </div>\n          </div>\n         </div>\n         <div class="highlight" ng-non-bindable="">\n          <pre><code class="html hljs xml" style="margin:0"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-default"</span> <span class="hljs-attr">ng-click</span>=<span class="hljs-string">"toggleThirdTab()"</span>&gt;</span>\n  {{ tabs[2].disabled ? \'Enable\' : \'Disable\' }} third tab\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-default"</span> <span class="hljs-attr">ng-click</span>=<span class="hljs-string">"tabs.activeTab=\'Profile\'"</span>&gt;</span>\n  Select "Profile" tab\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span>\n<span class="hljs-comment">&lt;!-- bsActivePane is optional --&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">bs-active-pane</span>=<span class="hljs-string">"tabs.activeTab"</span> <span class="hljs-attr">bs-tabs</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">ng-repeat</span>=<span class="hljs-string">"tab in tabs"</span> <span class="hljs-attr">data-title</span>=<span class="hljs-string">"{{ tab.title }}"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"{{ tab.title }}"</span> <span class="hljs-attr">disabled</span>=<span class="hljs-string">"{{ tab.disabled }}"</span> <span class="hljs-attr">ng-bind</span>=<span class="hljs-string">"tab.content"</span> <span class="hljs-attr">bs-pane</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n</code></pre>\n         </div>\n         <div append-source="" class="bs-example" style="padding-bottom: 24px;">\n          <!-- control a tab with bsActivePane binding -->\n          <div bs-radio-group="" class="btn-group ng-pristine ng-untouched ng-valid ng-not-empty" data-toggle="buttons">\n           <!-- -->\n           <label class="btn btn-default" ng-repeat="tab in tabs">\n            <input bs-radio="" class="btn btn-default ng-pristine ng-untouched ng-valid ng-not-empty" name="121" ng-model="tabs.activeTab" type="radio" value="0"/>\n            Tab n\xc2\xb01\n           </label>\n           <!-- -->\n           <label class="btn btn-default" ng-repeat="tab in tabs">\n            <input bs-radio="" class="btn btn-default ng-pristine ng-untouched ng-valid ng-not-empty" name="123" ng-model="tabs.activeTab" type="radio" value="1"/>\n            Tab n\xc2\xb02\n           </label>\n           <!-- -->\n           <label class="btn btn-default" ng-repeat="tab in tabs">\n            <input bs-radio="" class="btn btn-default ng-pristine ng-untouched ng-valid ng-not-empty" name="125" ng-model="tabs.activeTab" type="radio" value="2"/>\n            Tab n\xc2\xb03\n           </label>\n           <!-- -->\n          </div>\n          <div class="btn btn-default" ng-click="pushTab()">\n           Add new tab\n          </div>\n         </div>\n         <div class="highlight" ng-non-bindable="">\n          <pre><code class="html hljs xml" style="margin:0"><span class="hljs-comment">&lt;!-- control a tab with bsActivePane binding --&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn-group"</span> <span class="hljs-attr">ng-model</span>=<span class="hljs-string">"tabs.activeTab"</span> <span class="hljs-attr">bs-radio-group</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-default"</span> <span class="hljs-attr">ng-repeat</span>=<span class="hljs-string">"tab in tabs"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"radio"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-default"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"{{ $index }}"</span>&gt;</span>Tab n\xc2\xb0{{ $index + 1 }}\n  <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-default"</span> <span class="hljs-attr">ng-click</span>=<span class="hljs-string">"pushTab()"</span>&gt;</span>Add new tab<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n</code></pre>\n         </div>\n         <h2 id="tabs-usage">\n          Usage\n         </h2>\n         <p>\n          Append a\n          <code>\n           bs-tabs\n          </code>\n          attribute to any element and several children\n          <code>\n           bs-pane\n          </code>\n          attributes to children elements to enable the directive.\n         </p>\n         <div class="callout callout-warning">\n          <h4>\n           ngModel binding\n          </h4>\n          <p>\n           Using\n           <code>\n            ngModel\n           </code>\n           to bind to the active tab pane index is deprecated and may be removed in future versions, due to issues with validation when using the Tabs directive inside a\n           <code>\n            form\n           </code>\n           element.\n          </p>\n          <p>\n           Please use the helper attribute\n           <code>\n            bsActivePane\n           </code>\n           instead.\n          </p>\n         </div>\n         <div class="callout callout-info row">\n          <h4>\n           Custom animations\n          </h4>\n          <p>\n           Pane animation is done with the\n           <code>\n            active\n           </code>\n           class and requires custom CSS. You can change the default\n           <code>\n            am-fade\n           </code>\n           animation class by including the\n           <code>\n            animation\n           </code>\n           option.\n          </p>\n          <p>\n           Here is a sample definition for the default\n           <code>\n            am-fade\n           </code>\n           animation class:\n          </p>\n          <div class="col-md-5">\n           <p>\n            LESS:\n           </p>\n           <pre class="bs-exemple-code">        <code class="css hljs" highlight-block=""><span class="hljs-selector-class">.tab-pane</span><span class="hljs-selector-class">.am-fade</span> {\n  <span class="hljs-attribute">animation-duration</span>: .<span class="hljs-number">3s</span>;\n  <span class="hljs-attribute">animation-timing-function</span>: ease;\n  <span class="hljs-attribute">animation-fill-mode</span>: backwards;\n  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;\n\n  &amp;.active-remove {\n    <span class="hljs-attribute">display</span>: none <span class="hljs-meta">!important</span>;\n  }\n  &amp;<span class="hljs-selector-class">.active-add</span> {\n    <span class="hljs-attribute">animation-name</span>: fadeIn;\n  }\n}\n</code>\n      </pre>\n          </div>\n          <div class="col-md-5 col-md-offset-1">\n           <p>\n            CSS:\n           </p>\n           <pre class="bs-exemple-code">        <code class="css hljs" highlight-block=""><span class="hljs-selector-class">.tab-pane</span><span class="hljs-selector-class">.am-fade</span> {\n  <span class="hljs-attribute">animation-duration</span>: .<span class="hljs-number">3s</span>;\n  <span class="hljs-attribute">animation-timing-function</span>: ease;\n  <span class="hljs-attribute">animation-fill-mode</span>: backwards;\n  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;\n}\n\n<span class="hljs-selector-class">.tab-pane</span><span class="hljs-selector-class">.am-fade</span><span class="hljs-selector-class">.active-remove</span> {\n  <span class="hljs-attribute">display</span>: none <span class="hljs-meta">!important</span>;\n}\n\n<span class="hljs-selector-class">.tab-pane</span><span class="hljs-selector-class">.am-fade</span><span class="hljs-selector-class">.active-add</span> {\n  <span class="hljs-attribute">animation-name</span>: fadeIn;\n}\n</code>\n      </pre>\n          </div>\n         </div>\n         <h3>\n          Options\n         </h3>\n         <p>\n          Options can be passed via data attributes or as an\n          <a href="http://docs.angularjs.org/guide/expression">\n           AngularJS expression\n          </a>\n          to evaluate as an object on\n          <code>\n           bs-tabs\n          </code>\n          or\n          <code>\n           bs-pane\n          </code>\n          . For data attributes, append the option name to\n          <code>\n           data-\n          </code>\n          , as in\n          <code>\n           data-animation=""\n          </code>\n          .\n         </p>\n         <div class="table-responsive">\n          <h4>\n           bs-tabs options\n          </h4>\n          <table class="table table-bordered table-striped">\n           <thead>\n            <tr>\n             <th style="width: 100px;">\n              Name\n             </th>\n             <th style="width: 100px;">\n              type\n             </th>\n             <th style="width: 50px;">\n              default\n             </th>\n             <th>\n              description\n             </th>\n            </tr>\n           </thead>\n           <tbody>\n            <tr>\n             <td>\n              animation\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              am-fade\n             </td>\n             <td>\n              Apply a CSS animation to tab panes with\n              <code>\n               ngAnimate\n              </code>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              template\n             </td>\n             <td>\n              path\n             </td>\n             <td>\n              false\n             </td>\n             <td>\n              <p>\n               If a remote URL is provided, overrides the default template\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              navClass\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              nav-tabs\n             </td>\n             <td>\n              <p>\n               Classes to be applied to the tab navigation (bootstrap supports\n               <code>\n                nav-pills\n               </code>\n               ,\n               <code>\n                nav-stacked\n               </code>\n               )\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              activeClass\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              active\n             </td>\n             <td>\n              <p>\n               Class to be applied to the animated element\n              </p>\n             </td>\n            </tr>\n           </tbody>\n          </table>\n          <h4>\n           bs-pane options\n          </h4>\n          <table class="table table-bordered table-striped">\n           <thead>\n            <tr>\n             <th style="width: 100px;">\n              Name\n             </th>\n             <th style="width: 100px;">\n              type\n             </th>\n             <th style="width: 50px;">\n              default\n             </th>\n             <th>\n              description\n             </th>\n            </tr>\n           </thead>\n           <tbody>\n            <tr>\n             <td>\n              disabled\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              false\n             </td>\n             <td>\n              <p>\n               Disable pane\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              name\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              \'\'\n             </td>\n             <td>\n              <p>\n               Tab name. If provided, it will be used for `bsActivePane` instead of number\n              </p>\n             </td>\n            </tr>\n           </tbody>\n          </table>\n         </div>\n         <div class="callout callout-info">\n          <h4>\n           Default options\n          </h4>\n          <p>\n           You can override global defaults for the plugin with\n           <code>\n            $tabProvider.defaults\n           </code>\n          </p>\n          <div class="highlight">\n           <pre class="bs-exemple-code">        <code class="javascript hljs" highlight-block="">angular.module(<span class="hljs-string">\'myApp\'</span>)\n.config(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">$tabProvider</span>) </span>{\n  angular.extend($tabProvider.defaults, {\n    animation: <span class="hljs-string">\'am-flip-x\'</span>\n  });\n})\n</code>\n      </pre>\n          </div>\n         </div>\n         <h3>\n          Helper attributes\n         </h3>\n         <p>\n          Helper attributes can be used together with the directive via data-attributes to support specific functionality. Helper attributes support data binding. To use helper attributes, append the helper attribute name to\n          <code>\n           data-\n          </code>\n          , as in\n          <code>\n           data-bs-active-pane="tabs.activeTab"\n          </code>\n          .\n         </p>\n         <div class="table-responsive">\n          <table class="table table-bordered table-striped">\n           <thead>\n            <tr>\n             <th style="width: 100px;">\n              Name\n             </th>\n             <th style="width: 100px;">\n              type\n             </th>\n             <th>\n              description\n             </th>\n            </tr>\n           </thead>\n           <tbody>\n            <tr>\n             <td>\n              bsActivePane\n             </td>\n             <td>\n              number\n             </td>\n             <td>\n              <p>\n               Info about current selected tab. If it has the name, it will be here, otherwise \xe2\x80\x93 active tab pane index (zero based).\n              </p>\n              <p>\n               You can use it to set the active tab pane from code or to get the currently active tab pane.\n              </p>\n             </td>\n            </tr>\n           </tbody>\n          </table>\n         </div>\n        </div>\n        <!--/ngInclude: \'tab/docs/tab.demo.html\' -->\n       </div>\n       <div>\n        <!-- ngInclude: \'collapse/docs/collapse.demo.html\' -->\n        <div class="bs-docs-section" ng-controller="CollapseDemoCtrl">\n         <div class="page-header">\n          <h1 id="collapses">\n           Collapses\n           <a class="small" href="//github.com/mgcrea/angular-strap/blob/master/src/collapse/collapse.js" target="_blank">\n            collapse.js\n           </a>\n          </h1>\n          <code>\n           mgcrea.ngStrap.collapse\n          </code>\n         </div>\n         <h2 id="collapses-examples">\n          Examples\n         </h2>\n         <p>\n          Add quick, dynamic collapsable functionality to transition through panels of local content.\n         </p>\n         <h3>\n          Live demo\n          <a bs-tooltip="" class="small edit-plunkr" data-content-html-url="collapse/docs/collapse.demo.html" data-content-js-url="collapse/docs/collapse.demo.js" data-module-name="mgcrea.ngStrapDocs" data-placement="right" data-title="edit in plunker" ng-plunkr="">\n           <i class="fa fa-edit">\n           </i>\n           <small>\n            plunker\n           </small>\n          </a>\n         </h3>\n         <pre class="bs-example-scope">$scope.panels = [\n  {\n    "title": "Collapsible Group Item #1",\n    "body": "Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch."\n  },\n  {\n    "title": "Collapsible Group Item #2",\n    "body": "Food truck fixie locavore, accusamus mcsweeney\'s marfa nulla single-origin coffee squid. Exercitation +1 labore velit, blog sartorial PBR leggings next level wes anderson artisan four loko farm-to-table craft beer twee."\n  },\n  {\n    "title": "Collapsible Group Item #3",\n    "body": "Etsy mixtape wayfarers, ethical wes anderson tofu before they sold out mcsweeney\'s organic lomo retro fanny pack lo-fi farm-to-table readymade."\n  }\n];\n$scope.panels.activePanel = 1;\n  </pre>\n         <div append-source="" class="bs-example">\n          <!-- ngModel is optional -->\n          <div aria-multiselectable="true" bs-collapse="" class="panel-group ng-untouched ng-valid ng-not-empty ng-dirty ng-valid-parse" ng-model="panels.activePanel" role="tablist">\n           <!-- -->\n           <div class="panel panel-default" ng-repeat="panel in panels">\n            <div class="panel-heading" role="tab">\n             <h4 class="panel-title">\n              <a bs-collapse-toggle="" data-toggle="collapse">\n               Collapsible Group Item #1\n              </a>\n             </h4>\n            </div>\n            <div bs-collapse-target="" class="panel-collapse collapse am-collapse" role="tabpanel">\n             <div class="panel-body">\n              Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch.\n             </div>\n            </div>\n           </div>\n           <!-- -->\n           <div class="panel panel-default" ng-repeat="panel in panels">\n            <div class="panel-heading" role="tab">\n             <h4 class="panel-title">\n              <a bs-collapse-toggle="" data-toggle="collapse">\n               Collapsible Group Item #2\n              </a>\n             </h4>\n            </div>\n            <div bs-collapse-target="" class="panel-collapse collapse am-collapse in" role="tabpanel">\n             <div class="panel-body">\n              Food truck fixie locavore, accusamus mcsweeney\'s marfa nulla single-origin coffee squid. Exercitation +1 labore velit, blog sartorial PBR leggings next level wes anderson artisan four loko farm-to-table craft beer twee.\n             </div>\n            </div>\n           </div>\n           <!-- -->\n           <div class="panel panel-default" ng-repeat="panel in panels">\n            <div class="panel-heading" role="tab">\n             <h4 class="panel-title">\n              <a bs-collapse-toggle="" data-toggle="collapse">\n               Collapsible Group Item #3\n              </a>\n             </h4>\n            </div>\n            <div bs-collapse-target="" class="panel-collapse collapse am-collapse" role="tabpanel">\n             <div class="panel-body">\n              Etsy mixtape wayfarers, ethical wes anderson tofu before they sold out mcsweeney\'s organic lomo retro fanny pack lo-fi farm-to-table readymade.\n             </div>\n            </div>\n           </div>\n           <!-- -->\n          </div>\n         </div>\n         <div class="highlight" ng-non-bindable="">\n          <pre><code class="html hljs xml" style="margin:0"><span class="hljs-comment">&lt;!-- ngModel is optional --&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"panel-group"</span> <span class="hljs-attr">ng-model</span>=<span class="hljs-string">"panels.activePanel"</span> <span class="hljs-attr">role</span>=<span class="hljs-string">"tablist"</span> <span class="hljs-attr">aria-multiselectable</span>=<span class="hljs-string">"true"</span> <span class="hljs-attr">bs-collapse</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"panel panel-default"</span> <span class="hljs-attr">ng-repeat</span>=<span class="hljs-string">"panel in panels"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"panel-heading"</span> <span class="hljs-attr">role</span>=<span class="hljs-string">"tab"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">h4</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"panel-title"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">bs-collapse-toggle</span>&gt;</span>\n          {{ panel.title }}\n        <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"panel-collapse"</span> <span class="hljs-attr">role</span>=<span class="hljs-string">"tabpanel"</span> <span class="hljs-attr">bs-collapse-target</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"panel-body"</span>&gt;</span>\n        {{ panel.body }}\n      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n</code></pre>\n         </div>\n         <div append-source="" class="bs-example" style="padding-bottom: 24px;">\n          <!-- control a collapse panel with ngModel -->\n          <div bs-radio-group="" class="btn-group ng-pristine ng-untouched ng-valid ng-not-empty" data-toggle="buttons">\n           <!-- -->\n           <label class="btn btn-default" ng-repeat="panel in panels">\n            <input bs-radio="" class="btn btn-default ng-pristine ng-untouched ng-valid ng-not-empty" name="139" ng-model="panels.activePanel" type="radio" value="0"/>\n            Panel n\xc2\xb01\n           </label>\n           <!-- -->\n           <label class="btn btn-default active" ng-repeat="panel in panels">\n            <input bs-radio="" class="btn btn-default ng-pristine ng-untouched ng-valid ng-not-empty" name="141" ng-model="panels.activePanel" type="radio" value="1"/>\n            Panel n\xc2\xb02\n           </label>\n           <!-- -->\n           <label class="btn btn-default" ng-repeat="panel in panels">\n            <input bs-radio="" class="btn btn-default ng-pristine ng-untouched ng-valid ng-not-empty" name="143" ng-model="panels.activePanel" type="radio" value="2"/>\n            Panel n\xc2\xb03\n           </label>\n           <!-- -->\n          </div>\n          <div class="btn btn-default" ng-click="pushPanel()">\n           Add new panel\n          </div>\n         </div>\n         <div class="highlight" ng-non-bindable="">\n          <pre><code class="html hljs xml" style="margin:0"><span class="hljs-comment">&lt;!-- control a collapse panel with ngModel --&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn-group"</span> <span class="hljs-attr">ng-model</span>=<span class="hljs-string">"panels.activePanel"</span> <span class="hljs-attr">bs-radio-group</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-default"</span> <span class="hljs-attr">ng-repeat</span>=<span class="hljs-string">"panel in panels"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"radio"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-default"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"{{ $index }}"</span>&gt;</span>Panel n\xc2\xb0{{ $index + 1 }}\n  <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-default"</span> <span class="hljs-attr">ng-click</span>=<span class="hljs-string">"pushPanel()"</span>&gt;</span>Add new panel<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n</code></pre>\n         </div>\n         <h3>\n          Multiple open panels sample\n         </h3>\n         <p>\n          By using the\n          <code>\n           allowMultiple\n          </code>\n          option, you can have multiple open panels at the same time. When using\n          <code>\n           allowMultiple\n          </code>\n          option,\n          <code>\n           ngModel\n          </code>\n          binds to an array with the open panel indexes.\n         </p>\n         <pre class="bs-example-scope">$scope.multiplePanels.activePanels = [0,1];\n  </pre>\n         <div append-source="" class="bs-example">\n          <!-- ngModel is optional -->\n          <div aria-multiselectable="true" bs-collapse="" class="panel-group ng-untouched ng-valid ng-not-empty ng-dirty ng-valid-parse" data-allow-multiple="true" ng-model="multiplePanels.activePanels" role="tablist">\n           <!-- -->\n           <div class="panel panel-default" ng-repeat="panel in panels">\n            <div class="panel-heading" role="tab">\n             <h4 class="panel-title">\n              <a bs-collapse-toggle="" data-toggle="collapse">\n               Collapsible Group Item #1\n              </a>\n             </h4>\n            </div>\n            <div bs-collapse-target="" class="panel-collapse collapse am-collapse in" role="tabpanel">\n             <div class="panel-body">\n              Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch.\n             </div>\n            </div>\n           </div>\n           <!-- -->\n           <div class="panel panel-default" ng-repeat="panel in panels">\n            <div class="panel-heading" role="tab">\n             <h4 class="panel-title">\n              <a bs-collapse-toggle="" data-toggle="collapse">\n               Collapsible Group Item #2\n              </a>\n             </h4>\n            </div>\n            <div bs-collapse-target="" class="panel-collapse collapse am-collapse in" role="tabpanel">\n             <div class="panel-body">\n              Food truck fixie locavore, accusamus mcsweeney\'s marfa nulla single-origin coffee squid. Exercitation +1 labore velit, blog sartorial PBR leggings next level wes anderson artisan four loko farm-to-table craft beer twee.\n             </div>\n            </div>\n           </div>\n           <!-- -->\n           <div class="panel panel-default" ng-repeat="panel in panels">\n            <div class="panel-heading" role="tab">\n             <h4 class="panel-title">\n              <a bs-collapse-toggle="" data-toggle="collapse">\n               Collapsible Group Item #3\n              </a>\n             </h4>\n            </div>\n            <div bs-collapse-target="" class="panel-collapse collapse am-collapse" role="tabpanel">\n             <div class="panel-body">\n              Etsy mixtape wayfarers, ethical wes anderson tofu before they sold out mcsweeney\'s organic lomo retro fanny pack lo-fi farm-to-table readymade.\n             </div>\n            </div>\n           </div>\n           <!-- -->\n          </div>\n         </div>\n         <div class="highlight" ng-non-bindable="">\n          <pre><code class="html hljs xml" style="margin:0"><span class="hljs-comment">&lt;!-- ngModel is optional --&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"panel-group"</span> <span class="hljs-attr">ng-model</span>=<span class="hljs-string">"multiplePanels.activePanels"</span> <span class="hljs-attr">data-allow-multiple</span>=<span class="hljs-string">"true"</span> <span class="hljs-attr">role</span>=<span class="hljs-string">"tablist"</span> <span class="hljs-attr">aria-multiselectable</span>=<span class="hljs-string">"true"</span> <span class="hljs-attr">bs-collapse</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"panel panel-default"</span> <span class="hljs-attr">ng-repeat</span>=<span class="hljs-string">"panel in panels"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"panel-heading"</span> <span class="hljs-attr">role</span>=<span class="hljs-string">"tab"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">h4</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"panel-title"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">bs-collapse-toggle</span>&gt;</span>\n          {{ panel.title }}\n        <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"panel-collapse"</span> <span class="hljs-attr">role</span>=<span class="hljs-string">"tabpanel"</span> <span class="hljs-attr">bs-collapse-target</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"panel-body"</span>&gt;</span>\n        {{ panel.body }}\n      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n</code></pre>\n         </div>\n         <h2 id="collapses-usage">\n          Usage\n         </h2>\n         <p>\n          Append a\n          <code>\n           bs-collapse\n          </code>\n          attribute to any element and several\n          <code>\n           bs-collapse-toggle\n          </code>\n          ,\n          <code>\n           bs-collapse-target\n          </code>\n          attributes to children elements to enable the directive.\n         </p>\n         <div class="callout callout-info">\n          <h4>\n           Custom animations\n          </h4>\n          <p>\n           Pane animation is done with the\n           <code>\n            active\n           </code>\n           class and requires custom CSS.\n          </p>\n          <pre class="bs-exemple-code">      <code class="css hljs" highlight-block=""><span class="hljs-selector-class">.collapse</span><span class="hljs-selector-class">.am-collapse</span> {\n  <span class="hljs-attribute">animation-duration</span>: .<span class="hljs-number">3s</span>;\n  <span class="hljs-attribute">animation-timing-function</span>: ease;\n  <span class="hljs-attribute">animation-fill-mode</span>: backwards;\n  <span class="hljs-attribute">overflow</span>: hidden;\n  &amp;.in-remove {\n    <span class="hljs-attribute">animation-name</span>: collapse;\n    <span class="hljs-attribute">display</span>: block;\n  }\n  &amp;<span class="hljs-selector-class">.in-add</span> {\n    <span class="hljs-attribute">animation-name</span>: expand;\n  }\n}\n</code>\n    </pre>\n         </div>\n         <h3>\n          Options\n         </h3>\n         <p>\n          Options can be passed via data attributes or as an\n          <a href="http://docs.angularjs.org/guide/expression">\n           AngularJS expression\n          </a>\n          to evaluate as an object on\n          <code>\n           bs-collapse\n          </code>\n          . For data attributes, append the option name to\n          <code>\n           data-\n          </code>\n          , as in\n          <code>\n           data-animation=""\n          </code>\n          .\n         </p>\n         <p>\n          <code>\n           bs-collapse-toggle\n          </code>\n          can be hard mapped to a\n          <code>\n           bs-collapse-target\n          </code>\n          by passing its target index to the attribute (\n          <code>\n           bs-collapse-toggle="1"\n          </code>\n          )\n         </p>\n         <div class="table-responsive">\n          <table class="table table-bordered table-striped">\n           <thead>\n            <tr>\n             <th style="width: 100px;">\n              Name\n             </th>\n             <th style="width: 100px;">\n              type\n             </th>\n             <th style="width: 50px;">\n              default\n             </th>\n             <th>\n              description\n             </th>\n            </tr>\n           </thead>\n           <tbody>\n            <tr>\n             <td>\n              animation\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              am-fade\n             </td>\n             <td>\n              apply a CSS animation to the popover with\n              <code>\n               ngAnimate\n              </code>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              activeClass\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              in\n             </td>\n             <td>\n              <p>\n               Class to be applied to the animated element\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              disallowToggle\n             </td>\n             <td>\n              boolean\n             </td>\n             <td>\n              false\n             </td>\n             <td>\n              <p>\n               Prevents elements from being collapsed by clicking its toggle element, i.e., a panel can only be closed by opening another panel.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              startCollapsed\n             </td>\n             <td>\n              boolean\n             </td>\n             <td>\n              false\n             </td>\n             <td>\n              <p>\n               Start with all elements collapsed\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              allowMultiple\n             </td>\n             <td>\n              boolean\n             </td>\n             <td>\n              false\n             </td>\n             <td>\n              <p>\n               Allow multiple open panels\n              </p>\n             </td>\n            </tr>\n           </tbody>\n          </table>\n         </div>\n         <div class="callout callout-info">\n          <h4>\n           Default options\n          </h4>\n          <p>\n           You can override global defaults for the plugin with\n           <code>\n            $collapseProvider.defaults\n           </code>\n          </p>\n          <div class="highlight">\n           <pre class="bs-exemple-code">        <code class="javascript hljs" highlight-block="">angular.module(<span class="hljs-string">\'myApp\'</span>)\n.config(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">$collapseProvider</span>) </span>{\n  angular.extend($collapseProvider.defaults, {\n    animation: <span class="hljs-string">\'am-flip-x\'</span>\n  });\n})\n</code>\n      </pre>\n          </div>\n         </div>\n        </div>\n        <!--/ngInclude: \'collapse/docs/collapse.demo.html\' -->\n       </div>\n       <div>\n        <!-- ngInclude: \'dropdown/docs/dropdown.demo.html\' -->\n        <div class="bs-docs-section" ng-controller="DropdownDemoCtrl">\n         <div class="page-header">\n          <h1 id="dropdowns">\n           Dropdowns\n           <a class="small" href="//github.com/mgcrea/angular-strap/blob/master/src/dropdown/dropdown.js" target="_blank">\n            dropdown.js\n           </a>\n          </h1>\n          <code>\n           mgcrea.ngStrap.dropdown\n          </code>\n         </div>\n         <h2 id="dropdowns-examples">\n          Examples\n         </h2>\n         <p>\n          Add dropdown menus to nearly anything with this simple plugin, including the navbar, tabs, and pills.\n         </p>\n         <p>\n          Append a\n          <code>\n           bs-dropdown\n          </code>\n          attribute to any element to enable the plugin.\n         </p>\n         <div class="callout callout-danger">\n          <h4>\n           Plugin dependency\n          </h4>\n          <p>\n           Dropdowns require the\n           <a href="#tooltips">\n            tooltip plugin\n           </a>\n           to be included.\n          </p>\n         </div>\n         <h3>\n          Live demo\n          <a bs-tooltip="" class="small edit-plunkr" data-content-html-url="dropdown/docs/dropdown.demo.html" data-content-js-url="dropdown/docs/dropdown.demo.js" data-module-name="mgcrea.ngStrapDocs" data-placement="right" data-title="edit in plunker" ng-plunkr="">\n           <i class="fa fa-edit">\n           </i>\n           <small>\n            plunker\n           </small>\n          </a>\n         </h3>\n         <pre class="bs-example-scope">$scope.dropdown = [\n  {\n    "text": "&lt;i class=\\"fa fa-download\\"&gt;&lt;/i&gt;&amp;nbsp;Another action",\n    "href": "#anotherAction",\n    "active": true\n  },\n  {\n    "text": "&lt;i class=\\"fa fa-globe\\"&gt;&lt;/i&gt;&amp;nbsp;Display an alert",\n    "click": "$alert(\\"Holy guacamole!\\")"\n  },\n  {\n    "text": "&lt;i class=\\"fa fa-external-link\\"&gt;&lt;/i&gt;&amp;nbsp;External link",\n    "href": "/auth/facebook",\n    "target": "_self"\n  },\n  {\n    "divider": true\n  },\n  {\n    "text": "Separated link",\n    "href": "#separatedLink"\n  }\n];</pre>\n         <div append-source="" class="bs-example" style="padding-bottom: 24px;">\n          <!-- Button to trigger a default dropdown from an array ($scope.dropdown) [{text:\'foo\', href:\'\', click:\'\'}, ...] -->\n          <button aria-expanded="false" aria-haspopup="true" bs-dropdown="dropdown" class="btn btn-lg btn-primary" data-animation="am-flip-x" type="button">\n           Click to toggle dropdown\n           <br/>\n           <small>\n            (using an object)\n           </small>\n          </button>\n          <!-- Inlined sibling dropdown -->\n          <button aria-expanded="false" aria-haspopup="true" bs-dropdown="" class="btn btn-lg btn-primary" data-animation="am-flip-x" type="button">\n           Click to toggle dropdown\n           <br/>\n           <small>\n            (using inlined sibling template)\n           </small>\n          </button>\n         </div>\n         <div class="highlight" ng-non-bindable="">\n          <pre><code class="html hljs xml" style="margin:0"><span class="hljs-comment">&lt;!-- Button to trigger a default dropdown from an array ($scope.dropdown) [{text:\'foo\', href:\'\', click:\'\'}, ...] --&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-lg btn-primary"</span> <span class="hljs-attr">data-animation</span>=<span class="hljs-string">"am-flip-x"</span> <span class="hljs-attr">bs-dropdown</span>=<span class="hljs-string">"dropdown"</span> <span class="hljs-attr">aria-haspopup</span>=<span class="hljs-string">"true"</span> <span class="hljs-attr">aria-expanded</span>=<span class="hljs-string">"false"</span>&gt;</span>Click to toggle dropdown\n  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">small</span>&gt;</span>(using an object)<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- Inlined sibling dropdown --&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-lg btn-primary"</span> <span class="hljs-attr">data-animation</span>=<span class="hljs-string">"am-flip-x"</span> <span class="hljs-attr">bs-dropdown</span> <span class="hljs-attr">aria-haspopup</span>=<span class="hljs-string">"true"</span> <span class="hljs-attr">aria-expanded</span>=<span class="hljs-string">"false"</span>&gt;</span>Click to toggle dropdown\n  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">small</span>&gt;</span>(using inlined sibling template)<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"dropdown-menu"</span> <span class="hljs-attr">role</span>=<span class="hljs-string">"menu"</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#anotherAction"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"fa fa-download"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>&amp;nbsp;Some action<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">ng-click</span>=<span class="hljs-string">"$alert(\'Holy guacamole\')"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"fa fa-globe"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>&amp;nbsp;Display an alert<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">ng-repeat</span>=<span class="hljs-string">"i in [\'Foo\', \'Bar\', \'Baz\']"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">ng-href</span>=<span class="hljs-string">"#action{{i}}"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"fa fa-chevron-right"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>&amp;nbsp;{{i}}<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>\n</code></pre>\n         </div>\n         <h2 id="dropdowns-usage">\n          Usage\n         </h2>\n         <p>\n          Append a\n          <code>\n           bs-dropdown\n          </code>\n          attribute to any element to enable the directive.\n         </p>\n         <div class="callout callout-info">\n          <h4>\n           The module exposes a\n           <code>\n            $dropdown\n           </code>\n           service\n          </h4>\n          <p>\n           Available for programmatic use (mainly in directives as it requires a DOM element).\n          </p>\n          <div class="highlight">\n           <pre>        <code class="javascript hljs" highlight-block=""><span class="hljs-keyword">var</span> myDropdown = $dropdown(element, {scope: {content: [{text:<span class="hljs-string">\'foo\'</span>, href:<span class="hljs-string">\'\'</span>, click:<span class="hljs-string">\'\'</span>}, ...]});\n</code>\n      </pre>\n          </div>\n         </div>\n         <h3>\n          Options\n         </h3>\n         <p>\n          Options can be passed via data-attributes on the directive or as an object hash to configure the service. For data attributes, append the option name to\n          <code>\n           data-\n          </code>\n          , as in\n          <code>\n           data-animation=""\n          </code>\n          .\n         </p>\n         <p>\n          For directives, you can naturally inherit the contextual\n          <code>\n           $scope\n          </code>\n          or leverage a custom one with an\n          <a href="http://docs.angularjs.org/guide/expression">\n           AngularJS expression\n          </a>\n          to evaluate as an object directly on the\n          <code>\n           bs-dropdown\n          </code>\n          attribute\n         </p>\n         <div class="callout callout-info">\n          <h4>\n           This module supports exotic placement options!\n          </h4>\n          <p>\n           You can position your dropdown in corners (such as\n           <code>\n            bottom-left\n           </code>\n           ) or any other combination two.\n          </p>\n          <p>\n           Exotic placement options are not part of the Bootstrap\'s core, to use them you must use\n           <code>\n            bootstrap-additions.css\n           </code>\n           from the\n           <a href="//github.com/mgcrea/bootstrap-additions" target="_blank">\n            BootstrapAdditions\n           </a>\n           project. This project being not yet fully released, meanwhile, you can use the\n           <a href="//mgcrea.github.io/angular-strap/static/styles/bootstrap-additions.min.css" target="_blank">\n            development snapshot\n           </a>\n           compiled for theses docs.\n          </p>\n         </div>\n         <div class="table-responsive">\n          <table class="table table-bordered table-striped">\n           <thead>\n            <tr>\n             <th style="width: 100px;">\n              Name\n             </th>\n             <th style="width: 100px;">\n              type\n             </th>\n             <th style="width: 50px;">\n              default\n             </th>\n             <th>\n              description\n             </th>\n            </tr>\n           </thead>\n           <tbody>\n            <tr>\n             <td>\n              animation\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              am-fade\n             </td>\n             <td>\n              apply a CSS animation powered by\n              <code>\n               ngAnimate\n              </code>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              placement\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              \'bottom-left\'\n             </td>\n             <td>\n              how to position the dropdown - top | bottom | left | right | auto, or any combination like bottom-left or auto bottom-left.\n              <br/>\n              When "auto" is specified, it will dynamically reorient the dropdown. For example, if placement is "auto left", the dropdown will display to the left when possible, otherwise it will display right.\n             </td>\n            </tr>\n            <tr>\n             <td>\n              trigger\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              \'click\'\n             </td>\n             <td>\n              how dropdown is triggered - click | hover | focus | contextmenu | manual\n             </td>\n            </tr>\n            <tr>\n             <td>\n              html\n             </td>\n             <td>\n              boolean\n             </td>\n             <td>\n              false\n             </td>\n             <td>\n              replace\n              <code>\n               ng-bind\n              </code>\n              with\n              <code>\n               ng-bind-html\n              </code>\n              , requires\n              <code>\n               ngSanitize\n              </code>\n              to be loaded\n             </td>\n            </tr>\n            <tr>\n             <td>\n              delay\n             </td>\n             <td>\n              number | object\n             </td>\n             <td>\n              0\n             </td>\n             <td>\n              <p>\n               delay showing and hiding the dropdown (ms) - does not apply to manual trigger type\n              </p>\n              <p>\n               If a number is supplied, delay is applied to both hide/show\n              </p>\n              <p>\n               Object structure is:\n               <code>\n                delay: { show: 500, hide: 100 }\n               </code>\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              container\n             </td>\n             <td>\n              string | false\n             </td>\n             <td>\n              false\n             </td>\n             <td>\n              <p>\n               Appends the dropdown to a specific element. Example:\n               <code>\n                container: \'body\'\n               </code>\n               . This option is particularly useful in that it allows you to position the dropdown in the flow of the document near the triggering element -\xc2\xa0which will prevent the dropdown from floating away from the triggering element during a window resize.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              template\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              \'\'\n             </td>\n             <td>\n              <p>\n               Provide an html template as a string (when templateUrl is falsy).\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              templateUrl\n             </td>\n             <td>\n              path\n             </td>\n             <td>\n              \'dropdown/dropdown.tpl.html\'\n             </td>\n             <td>\n              <p>\n               If provided, overrides the default template, can be either a remote URL or a cached template id.\n              </p>\n              <p>\n               It should be a\n               <code>\n                div.dropdown-menu\n               </code>\n               element following Bootstrap styles conventions (\n               <a href="//github.com/mgcrea/angular-strap/blob/master/src/dropdown/dropdown.tpl.html" target="_blank">\n                like this\n               </a>\n               ).\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              onShow\n             </td>\n             <td>\n              function\n             </td>\n             <td>\n             </td>\n             <td>\n              <p>\n               If provided, this function will be invoked after the dropdown is shown.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              onBeforeShow\n             </td>\n             <td>\n              function\n             </td>\n             <td>\n             </td>\n             <td>\n              <p>\n               If provided, this function will be invoked before the dropdown is shown.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              onHide\n             </td>\n             <td>\n              function\n             </td>\n             <td>\n             </td>\n             <td>\n              <p>\n               If provided, this function will be invoked after the dropdown is hidden.\n              </p>\n             </td>\n            </tr>\n            <tr>\n             <td>\n              onBeforeHide\n             </td>\n             <td>\n              function\n             </td>\n             <td>\n             </td>\n             <td>\n              <p>\n               If provided, this function will be invoked before the dropdown is hidden.\n              </p>\n             </td>\n            </tr>\n           </tbody>\n          </table>\n         </div>\n         <div class="callout callout-info">\n          <h4>\n           Default options\n          </h4>\n          <p>\n           You can override global defaults for the plugin with\n           <code>\n            $dropdownProvider.defaults\n           </code>\n          </p>\n          <div class="highlight">\n           <pre class="bs-exemple-code">        <code class="javascript hljs" highlight-block="">angular.module(<span class="hljs-string">\'myApp\'</span>)\n.config(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">$dropdownProvider</span>) </span>{\n  angular.extend($dropdownProvider.defaults, {\n    animation: <span class="hljs-string">\'am-flip-x\'</span>,\n    trigger: <span class="hljs-string">\'hover\'</span>\n  });\n})\n</code>\n      </pre>\n          </div>\n         </div>\n        </div>\n        <!--/ngInclude: \'dropdown/docs/dropdown.demo.html\' -->\n       </div>\n       <div>\n        <!-- ngInclude: \'navbar/docs/navbar.demo.html\' -->\n        <div class="bs-docs-section" ng-controller="NavbarDemoCtrl">\n         <div class="page-header">\n          <h1 id="navbars">\n           Navbar\n           <a class="small" href="//github.com/mgcrea/angular-strap/blob/master/src/navbar/navbar.js" target="_blank">\n            navbar.js\n           </a>\n          </h1>\n          <code>\n           mgcrea.ngStrap.navbar\n          </code>\n         </div>\n         <h2 id="navbars-examples">\n          Examples\n         </h2>\n         <p>\n          Add quick, dynamic navbar functionality to transition through active/inactive states.\n         </p>\n         <h3>\n          Live demo\n          <a bs-tooltip="" class="small edit-plunkr" data-content-html-url="navbar/docs/navbar.demo.html" data-content-js-url="navbar/docs/navbar.demo.js" data-module-name="mgcrea.ngStrapDocs" data-placement="right" data-title="edit in plunker" ng-plunkr="">\n           <i class="fa fa-edit">\n           </i>\n           <small>\n            plunker\n           </small>\n          </a>\n         </h3>\n         <pre class="bs-example-scope">$location.path() = "";</pre>\n         <div append-source="" class="bs-example">\n          <nav bs-navbar="" class="navbar navbar-default" role="navigation">\n           <div class="navbar-header">\n            <a class="navbar-brand" href="#">\n             Brand\n            </a>\n           </div>\n           <ul class="nav navbar-nav">\n            <li class="" data-match-route="/$">\n             <a href="#/">\n              Home\n             </a>\n            </li>\n            <li class="" data-match-route="/page-one">\n             <a href="#/page-one">\n              Page One\n             </a>\n            </li>\n            <li class="" data-match-route="/page-two.*">\n             <a href="#/page-two/sub-a">\n              Page Two\n             </a>\n            </li>\n           </ul>\n          </nav>\n         </div>\n         <div class="highlight" ng-non-bindable="">\n          <pre><code class="html hljs xml" style="margin:0"><span class="hljs-tag">&lt;<span class="hljs-name">nav</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"navbar navbar-default"</span> <span class="hljs-attr">role</span>=<span class="hljs-string">"navigation"</span> <span class="hljs-attr">bs-navbar</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"navbar-header"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"navbar-brand"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#"</span>&gt;</span>Brand<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"nav navbar-nav"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">data-match-route</span>=<span class="hljs-string">"/$"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#/"</span>&gt;</span>Home<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">data-match-route</span>=<span class="hljs-string">"/page-one"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#/page-one"</span>&gt;</span>Page One<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">data-match-route</span>=<span class="hljs-string">"/page-two.*"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#/page-two/sub-a"</span>&gt;</span>Page Two<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span>\n</code></pre>\n         </div>\n         <h2 id="navbars-usage">\n          Usage\n         </h2>\n         <p>\n          Append a\n          <code>\n           bs-navbar\n          </code>\n          attribute to any element to activate the directive.\n         </p>\n         <p>\n          Use\n          <code>\n           data-match-route\n          </code>\n          attributes to any children navigation item that should be toggled active.\n         </p>\n         <div class="callout callout-info">\n          <h4>\n           Heads up!\n          </h4>\n          <p>\n           The directives also supports\n           <code>\n            HTML5 mode\n           </code>\n           , you just have to drop the\n           <code>\n            hash symbol\n           </code>\n           from the href.\n          </p>\n         </div>\n         <h3>\n          Options\n         </h3>\n         <p>\n          Options can be passed via data attributes, append the option name to\n          <code>\n           data-\n          </code>\n          , as in\n          <code>\n           data-route-attr=""\n          </code>\n          .\n         </p>\n         <div class="table-responsive">\n          <table class="table table-bordered table-striped">\n           <thead>\n            <tr>\n             <th style="width: 100px;">\n              Name\n             </th>\n             <th style="width: 100px;">\n              type\n             </th>\n             <th style="width: 50px;">\n              default\n             </th>\n             <th>\n              description\n             </th>\n            </tr>\n           </thead>\n           <tbody>\n            <tr>\n             <td>\n              activeClass\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              active\n             </td>\n             <td>\n              Class to apply when the navigation item is active\n             </td>\n            </tr>\n            <tr>\n             <td>\n              routeAttr\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              data-match-route\n             </td>\n             <td>\n              Attribute to test against\n              <code>\n               $location.path()\n              </code>\n             </td>\n            </tr>\n           </tbody>\n          </table>\n         </div>\n         <div class="callout callout-info">\n          <h4>\n           Default options\n          </h4>\n          <p>\n           You can override global defaults for the plugin with\n           <code>\n            $navbarProvider.defaults\n           </code>\n          </p>\n          <div class="highlight">\n           <pre class="bs-exemple-code">        <code class="javascript hljs" highlight-block="">angular.module(<span class="hljs-string">\'myApp\'</span>)\n.config(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">$navbarProvider</span>) </span>{\n  angular.extend($navbarProvider.defaults, {\n    activeClass: <span class="hljs-string">\'in\'</span>\n  });\n})\n</code>\n      </pre>\n          </div>\n         </div>\n        </div>\n        <!--/ngInclude: \'navbar/docs/navbar.demo.html\' -->\n       </div>\n       <div>\n        <!-- ngInclude: \'scrollspy/docs/scrollspy.demo.html\' -->\n        <div class="bs-docs-section">\n         <div class="page-header">\n          <h1 id="scrollspy">\n           Scrollspy\n           <a class="small" href="//github.com/mgcrea/angular-strap/blob/master/src/scrollspy/scrollspy.js" target="_blank">\n            scrollspy.js\n           </a>\n          </h1>\n          <code>\n           mgcrea.ngStrap.scrollspy\n          </code>\n         </div>\n         <h2 id="scrollspy-examples">\n          Examples\n         </h2>\n         <p>\n          The subnavigation on the left is a live demo of the scrollspy plugin.\n         </p>\n         <div class="callout callout-warning">\n          <h4>\n           Plugin dependency\n          </h4>\n          <p>\n           Scrollspy require the\n           <a href="//github.com/mgcrea/angular-strap/blob/master/src/helpers/dimensions.js" target="_blank">\n            helpers.dimensions\n           </a>\n           module to be loaded.\n          </p>\n         </div>\n         <div class="highlight">\n          <pre>      <code class="html hljs xml" highlight-block=""><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"nav bs-sidenav"</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">data-target</span>=<span class="hljs-string">"#modals"</span> <span class="hljs-attr">bs-scrollspy</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#modals"</span>&gt;</span>Modal<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"nav"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">data-target</span>=<span class="hljs-string">"#modals-examples"</span> <span class="hljs-attr">bs-scrollspy</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#modals-examples"</span>&gt;</span>Examples<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">data-target</span>=<span class="hljs-string">"#modals-usage"</span> <span class="hljs-attr">bs-scrollspy</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#modals-usage"</span>&gt;</span>Usage<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>\n\n\n<span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"nav bs-sidenav"</span> <span class="hljs-attr">bs-scrollspy-list</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#modals"</span>&gt;</span>Modal<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"nav"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#modals-examples"</span>&gt;</span>Examples<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#modals-usage"</span>&gt;</span>Usage<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>\n</code>\n    </pre>\n         </div>\n         <h2 id="scrollspy-usage">\n          Usage\n         </h2>\n         <p>\n          Append a\n          <code>\n           bs-scrollspy\n          </code>\n          attribute to any element to enable the plugin.\n         </p>\n         <div class="callout callout-info">\n          <h4>\n           The module also exposes an\n           <code>\n            $scrollspy\n           </code>\n           service\n          </h4>\n          <p>\n           Available for programmatic use (mainly inside a directive as it requires an element).\n          </p>\n          <div class="highlight">\n           <pre>        <code class="javascript hljs" highlight-block=""><span class="hljs-keyword">var</span> scrollspy = $scrollspy(element, options);\n</code>\n      </pre>\n          </div>\n         </div>\n         <h3>\n          Options\n         </h3>\n         <p>\n          Options can be passed via data-attributes on the directive or as an object hash to configure the service. For data attributes, append the option name to\n          <code>\n           data-\n          </code>\n          , as in\n          <code>\n           data-animation=""\n          </code>\n          .\n         </p>\n         <div class="table-responsive">\n          <table class="table table-bordered table-striped">\n           <thead>\n            <tr>\n             <th style="width: 100px;">\n              Name\n             </th>\n             <th style="width: 50px;">\n              type\n             </th>\n             <th style="width: 50px;">\n              default\n             </th>\n             <th>\n              description\n             </th>\n            </tr>\n           </thead>\n           <tbody>\n            <tr>\n             <td>\n              target\n             </td>\n             <td>\n              string\n             </td>\n             <td>\n              \'\'\n             </td>\n             <td>\n              Required target selector.\n             </td>\n            </tr>\n            <tr>\n             <td>\n              offset\n             </td>\n             <td>\n              number\n             </td>\n             <td>\n              0\n             </td>\n             <td>\n              Pixels to offset from top of screen when calculating position of scroll.\n             </td>\n            </tr>\n           </tbody>\n          </table>\n         </div>\n         <div class="callout callout-info">\n          <h4>\n           Default options\n          </h4>\n          <p>\n           You can override global defaults for the plugin with\n           <code>\n            $scrollspyProvider.defaults\n           </code>\n          </p>\n          <div class="highlight">\n           <pre class="bs-exemple-code">        <code class="javascript hljs" highlight-block="">angular.module(<span class="hljs-string">\'myApp\'</span>)\n.config(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">$scrollspyProvider</span>) </span>{\n  angular.extend($scrollspyProvider.defaults, {\n    animation: <span class="hljs-string">\'am-fade-and-slide-top\'</span>,\n    placement: <span class="hljs-string">\'top\'</span>\n  });\n})\n</code>\n      </pre>\n          </div>\n         </div>\n        </div>\n        <!--/ngInclude: \'scrollspy/docs/scrollspy.demo.html\' -->\n       </div>\n       <div>\n        <!-- ngInclude: \'affix/docs/affix.demo.html\' -->\n        <div class="bs-docs-section">\n         <div class="page-header">\n          <h1 id="affix">\n           Affix\n           <a class="small" href="//github.com/mgcrea/angular-strap/blob/master/src/affix/affix.js" target="_blank">\n            affix.js\n           </a>\n          </h1>\n          <code>\n           mgcrea.ngStrap.affix\n          </code>\n         </div>\n         <h2 id="affix-examples">\n          Examples\n         </h2>\n         <p>\n          The subnavigation on the left is a live demo of the affix plugin.\n         </p>\n         <div class="callout callout-warning">\n          <h4>\n           Plugin dependency\n          </h4>\n          <p>\n           Affix require the\n           <a href="//github.com/mgcrea/angular-strap/blob/master/src/helpers/dimensions.js" target="_blank">\n            helpers.dimensions\n           </a>\n           and\n           <a href="//github.com/mgcrea/angular-strap/blob/master/src/helpers/debounce.js" target="_blank">\n            helpers.debounce\n           </a>\n           modules to be loaded.\n          </p>\n         </div>\n         <div class="highlight">\n          <pre>      <code class="html hljs xml" highlight-block=""><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"bs-sidebar hidden-print"</span> <span class="hljs-attr">role</span>=<span class="hljs-string">"complementary"</span> <span class="hljs-attr">data-offset-top</span>=<span class="hljs-string">"-80"</span> <span class="hljs-attr">bs-affix</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n</code>\n    </pre>\n         </div>\n         <h2 id="affix-usage">\n          Usage\n         </h2>\n         <p>\n          Append a\n          <code>\n           bs-affix\n          </code>\n          attribute to any element to enable the plugin.\n         </p>\n         <p>\n          You can affix inside a custom container with the\n          <code>\n           bs-affix-target\n          </code>\n          attribute added to any parent element.\n         </p>\n         <div class="callout callout-info">\n          <h4>\n           The module also exposes an\n           <code>\n            $affix\n           </code>\n           service\n          </h4>\n          <p>\n           Available for programmatic use (mainly inside a directive as it requires an element).\n          </p>\n          <div class="highlight">\n           <pre>        <code class="javascript hljs" highlight-block=""><span class="hljs-keyword">var</span> affix = $affix(element, options);\n</code>\n      </pre>\n          </div>\n         </div>\n         <h3>\n          Options\n         </h3>\n         <p>\n          Options can be passed via data-attributes on the directive or as an object hash to configure the service. For data attributes, append the option name to\n          <code>\n           data-\n          </code>\n          , as in\n          <code>\n           data-offset-top=""\n          </code>\n          .\n         </p>\n         <div class="table-responsive">\n          <table class="table table-bordered table-striped">\n           <thead>\n            <tr>\n             <th style="width: 100px;">\n              Name\n             </th>\n             <th style="width: 50px;">\n              type\n             </th>\n             <th style="width: 50px;">\n              default\n             </th>\n             <th>\n              description\n             </th>\n            </tr>\n           </thead>\n           <tbody>\n            <tr>\n             <td>\n              offsetTop\n             </td>\n             <td>\n              number\n             </td>\n             <td>\n              0\n             </td>\n             <td>\n              Pixels to offset from top of screen when calculating position of scroll.\n             </td>\n            </tr>\n            <tr>\n             <td>\n              offsetBottom\n             </td>\n             <td>\n              number\n             </td>\n             <td>\n              0\n             </td>\n             <td>\n              Pixels to offset from bottom of screen when calculating position of scroll.\n             </td>\n            </tr>\n            <tr>\n             <td>\n              offsetParent\n             </td>\n             <td>\n              number\n             </td>\n             <td>\n              0\n             </td>\n             <td>\n              Pixels to offset from parent when calculating position of scroll.\n             </td>\n            </tr>\n            <tr>\n             <td>\n              offsetUnpin\n             </td>\n             <td>\n              number\n             </td>\n             <td>\n              0\n             </td>\n             <td>\n              Pixels to offset from unpin position when calculating position of scroll.\n             </td>\n            </tr>\n           </tbody>\n          </table>\n         </div>\n         <div class="callout callout-info">\n          <h4>\n           Default options\n          </h4>\n          <p>\n           You can override global defaults for the plugin with\n           <code>\n            $affixProvider.defaults\n           </code>\n          </p>\n          <div class="highlight">\n           <pre class="bs-exemple-code">        <code class="javascript hljs" highlight-block="">angular.module(<span class="hljs-string">\'myApp\'</span>)\n.config(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">$affixProvider</span>) </span>{\n  angular.extend($affixProvider.defaults, {\n    offsetTop: <span class="hljs-number">100</span>\n  });\n})\n</code>\n      </pre>\n          </div>\n         </div>\n        </div>\n        <!--/ngInclude: \'affix/docs/affix.demo.html\' -->\n       </div>\n      </div>\n     </div>\n    </div>\n   </div>\n   <!--/ngInclude: \'views/home.html\' -->\n  </div>\n  <div>\n   <!-- ngInclude: \'views/partials/footer.html\' -->\n   <footer class="bs-footer">\n    <div class="container">\n     <p class="pull-right">\n      <a href="#">\n       Back to top\n      </a>\n     </p>\n     <p>\n      Designed and built by\n      <a href="//plus.google.com/+OlivierLouvignes/posts?rel=author" target="_blank">\n       Olivier Louvignes\n      </a>\n      .\n      <iframe allowtransparency="true" class="twitter-follow-button twitter-follow-button-rendered" data-screen-name="olouv" frameborder="0" id="twitter-widget-0" scrolling="no" src="http://platform.twitter.com/widgets/follow_button.4ca9f1d9cb5a373a2f7d0969f5b40084.en.html#dnt=false&amp;id=twitter-widget-0&amp;lang=en&amp;screen_name=olouv&amp;show_count=true&amp;show_screen_name=true&amp;size=m&amp;time=1492313054768" style="position: static; visibility: visible; width: 187px; height: 20px;" title="Twitter Follow Button">\n      </iframe>\n     </p>\n     <hr/>\n     <p>\n      Using\n      <a href="http://twitter.github.com/bootstrap" target="_blank">\n       Twitter Bootstrap\n      </a>\n      and the\n      <a href="css/docs.css" target="_blank">\n       Bootstrap\'s docs styles\n      </a>\n      designed and built by\n      <a href="http://twitter.com/mdo" target="_blank">\n       @mdo\n      </a>\n      and\n      <a href="http://twitter.com/fat" target="_blank">\n       @fat\n      </a>\n      .\n     </p>\n     <p>\n      Code licensed under\n      <a href="//github.com/mgcrea/angular-strap/blob/master/LICENSE.md" target="_blank">\n       The MIT License\n      </a>\n      , documentation under\n      <a href="http://creativecommons.org/licenses/by/3.0/">\n       CC BY 3.0\n      </a>\n      .\n     </p>\n     <ul class="footer-links">\n      <li>\n       <a href="https://github.com/mgcrea/angular-strap/issues?state=open">\n        Issues\n       </a>\n      </li>\n      <li class="muted">\n       \xc2\xb7\n      </li>\n      <li>\n       <a href="https://github.com/mgcrea/angular-strap/wiki">\n        Roadmap and changelog\n       </a>\n      </li>\n      <li class="muted">\n       \xc2\xb7\n      </li>\n      <li>\n       <a href="https://github.com/mgcrea/angular-strap/releases">\n        Releases\n       </a>\n      </li>\n     </ul>\n    </div>\n   </footer>\n   <!--/ngInclude: \'views/partials/footer.html\' -->\n  </div>\n  <!-- bower:js -->\n  <script id="twitter-wjs" src="//platform.twitter.com/widgets.js">\n  </script>\n  <script async="" gapi_processed="true" src="http://apis.google.com/js/plusone.js" type="text/javascript">\n  </script>\n  <script async="" src="//www.google-analytics.com/analytics.js">\n  </script>\n  <script src="//cdn.jsdelivr.net/angularjs/1.5/angular.min.js">\n  </script>\n  <script src="//cdn.jsdelivr.net/angularjs/1.5/angular-animate.min.js">\n  </script>\n  <script src="//cdn.jsdelivr.net/angularjs/1.5/angular-route.min.js">\n  </script>\n  <script src="//cdn.jsdelivr.net/highlight.js/9.2.0/highlight.min.js">\n  </script>\n  <script src="scripts/libs.min.js">\n  </script>\n  <!-- endinject -->\n  <!-- source:js -->\n  <script src="dist/angular-strap.min.js">\n  </script>\n  <script src="dist/angular-strap.tpl.min.js">\n  </script>\n  <!-- endinject -->\n  <!-- inject:js -->\n  <script src="scripts/docs.min.js">\n  </script>\n  <!-- endinject -->\n  <!-- source-docs:js -->\n  <script src="docs/angular-strap.docs.min.js">\n  </script>\n  <script src="docs/angular-strap.docs.tpl.min.js">\n  </script>\n  <!-- endinject -->\n  <!-- views:js -->\n  <script src="scripts/views.tpl.min.js">\n  </script>\n  <!-- endinject -->\n  <!-- Analytics\n  ================================================== -->\n  <script type="text/javascript">\n   (function(i,s,o,g,r,a,m){i[\'GoogleAnalyticsObject\']=r;i[r]=i[r]||function(){\n    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n    })(window,document,\'script\',\'//www.google-analytics.com/analytics.js\',\'ga\');\n    ga(\'create\', \'UA-1813303-8\', \'mgcrea.github.io\');\n    ga(\'send\', \'pageview\');\n  </script>\n  <!-- Socials\n  ================================================== -->\n  <script type="text/javascript">\n   (function() {\n      var po = document.createElement(\'script\'); po.type = \'text/javascript\'; po.async = true;\n      po.src = (\'https:\' == document.location.protocol ? \'https://\' : \'http://\') + \'apis.google.com/js/plusone.js\';\n      var s = document.getElementsByTagName(\'script\')[0]; s.parentNode.insertBefore(po, s);\n    })();\n  </script>\n  <script>\n   !function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");\n  </script>\n  <iframe aria-hidden="true" id="oauth2relay1590910852" name="oauth2relay1590910852" src="https://accounts.google.com/o/oauth2/postmessageRelay?parent=http%3A%2F%2Fmgcrea.github.io&amp;jsh=m%3B%2F_%2Fscs%2Fapps-static%2F_%2Fjs%2Fk%3Doz.gapi.en_US.HdvhyCxp9wc.O%2Fm%3D__features__%2Fam%3DAQ%2Frt%3Dj%2Fd%3D1%2Frs%3DAGLTcCPLfzn4Ik3j72jUMX8o_0rWowChyw#rpctoken=432764107&amp;forcesecure=1" style="width: 1px; height: 1px; position: absolute; top: -100px;" tabindex="-1">\n  </iframe>\n  <iframe allowfullscreen="true" allowtransparency="true" frameborder="0" id="rufous-sandbox" scrolling="no" style="position: absolute; visibility: hidden; display: none; width: 0px; height: 0px; padding: 0px; border: none;" title="Twitter analytics iframe">\n  </iframe>\n </body>\n</html>'