b'<html lang="en">\n <head>\n  <meta charset="utf-8"/>\n  <meta content="width=device-width,initial-scale=1" name="viewport"/>\n  <title>\n   React Redux Starter Kit\n  </title>\n  <link href="/react-redux-starter-kit/favicon.ico" rel="shortcut icon"/>\n  <link href="/react-redux-starter-kit/static/css/main.6aa2ac26.css" rel="stylesheet"/>\n </head>\n <body>\n  <div id="root">\n   <div class="container-fluid" data-reactroot="">\n    <div class="pos-f-t">\n     <nav class="navbar navbar-light bg-faded navbar-fixed-top">\n      <div class="container-fluid">\n       <button class="navbar-toggle pull-xs-left hidden-sm-up" data-target="#collapsingNavbar" data-toggle="collapse" type="button">\n        \xe2\x98\xb0\n       </button>\n       <div class="collapse navbar-toggleable-xs" id="collapsingNavbar">\n        <a class="navbar-brand" href="#/">\n         <div class="brand" title="Home">\n         </div>\n         <!-- react-text: 9 -->\n         Home\n         <!-- /react-text -->\n        </a>\n        <ul class="nav navbar-nav">\n         <li class="nav-item" title="Github Users with over 1000 Followers">\n          <a class="nav-link" href="#/users">\n           Most Followed Users\n          </a>\n         </li>\n         <li class="nav-item" title="Github Repos with over 10000 Stars">\n          <a class="nav-link" href="#/repos">\n           Most Starred Repos\n          </a>\n         </li>\n         <li class="nav-item" title="About">\n          <a class="nav-link" href="#/about">\n           About Us\n          </a>\n         </li>\n        </ul>\n        <ul class="nav navbar-nav pull-xs-right">\n         <li class="dropdown nav-item">\n          <a aria-expanded="false" aria-haspopup="true" class="dropdown-toggle nav-link" data-toggle="dropdown" href="#" role="button">\n           <span class="fa fa-user header_fa">\n           </span>\n           <!-- react-text: 21 -->\n           Anonymous\n           <!-- /react-text -->\n           <span class="caret">\n           </span>\n          </a>\n          <ul class="dropdown-menu">\n           <a class="dropdown-item" href="#">\n            <i class="fa fa-sign-out header_fa">\n            </i>\n            <!-- react-text: 26 -->\n            Log out\n            <!-- /react-text -->\n           </a>\n           <div class="dropdown-divider">\n           </div>\n           <a class="dropdown-item" href="https://github.com/cloudmu/react-redux-starter-kit" target="_blank" title="View on Github">\n            <i class="fa fa-github header_fa">\n            </i>\n            <!-- react-text: 30 -->\n            Github\n            <!-- /react-text -->\n           </a>\n          </ul>\n         </li>\n        </ul>\n       </div>\n      </div>\n     </nav>\n    </div>\n    <div class="appContent">\n     <div>\n      <div class="jumbotron">\n       <div class="container">\n        <h1 class="display-3">\n         Yet Another Web App Starter Kit\n        </h1>\n        <p class="lead">\n         <!-- react-text: 37 -->\n         This is yet another React based web application starter kit. However, this one attempts to go beyond the typical simple boilerplates, by showcasing several great technologies (such as\n         <!-- /react-text -->\n         <a href="https://github.com/facebook/react" target="_blank">\n          React\n         </a>\n         <!-- react-text: 39 -->\n         ,\n         <!-- /react-text -->\n         <a href="https://github.com/gaearon/redux" target="_blank">\n          Redux\n         </a>\n         <!-- react-text: 41 -->\n         ,\n         <!-- /react-text -->\n         <a href="https://github.com/rackt/react-router" target="_blank">\n          React-Router\n         </a>\n         <!-- react-text: 43 -->\n         ,\n         <!-- /react-text -->\n         <a href="https://github.com/twbs/bootstrap " target="_blank">\n          Bootstrap\n         </a>\n         <!-- react-text: 45 -->\n         , and\n         <!-- /react-text -->\n         <a href="https:// https://jwt.io" target="_blank">\n          JSON Web Token\n         </a>\n         <!-- react-text: 47 -->\n         ) used together to develop a more complex web application, with features such as authentication, navigation, asynchronous data fetching, error handling, caching and pagination, etc.\n         <!-- /react-text -->\n        </p>\n        <div class="home-humility">\n         <a href="https://github.com/cloudmu/react-redux-starter-kit" target="_blank">\n          <i class="fa fa-github">\n          </i>\n          <!-- react-text: 51 -->\n          View on Github\n          <!-- /react-text -->\n         </a>\n         <a href="https://twitter.com/_cloudmu" target="_blank">\n          <i class="fa fa-twitter home-fa-twitter">\n          </i>\n          <!-- react-text: 54 -->\n          _cloudmu\n          <!-- /react-text -->\n         </a>\n        </div>\n       </div>\n      </div>\n      <div class="container">\n       <h3>\n        What\'s New\n       </h3>\n       <p>\n        <!-- react-text: 58 -->\n        When I started the project, I had to wrestle with Webpack and Babel to have the dev/build process work well.  Recently I ported the starter kit to use\n        <!-- /react-text -->\n        <a href="https://github.com/facebookincubator/create-react-app/" target="_blank">\n         create-react-app\n        </a>\n        <!-- react-text: 60 -->\n        . I hope you will enjoy the "zero build configuration" experience as much as I do.\n        <!-- /react-text -->\n       </p>\n       <h3>\n        Technologies used:\n       </h3>\n       <ul>\n        <li>\n         <a href="https://github.com/facebook/react" target="_blank">\n          React\n         </a>\n        </li>\n        <li>\n         <a href="https://github.com/rackt/redux" target="_blank">\n          Redux\n         </a>\n        </li>\n        <li>\n         <a href="https://github.com/rackt/react-router" target="_blank">\n          React Router\n         </a>\n        </li>\n        <li>\n         <a href="https://github.com/twbs/bootstrap " target="_blank">\n          Bootstrap\n         </a>\n        </li>\n        <li>\n         <a href="https://jwt.io" target="_blank">\n          JSON Web Token\n         </a>\n        </li>\n        <li>\n         <a href="https://github.com/facebookincubator/create-react-app/" target="_blank">\n          create-react-app\n         </a>\n        </li>\n        <li>\n         <a href="http://babeljs.io" target="_blank">\n          Babel\n         </a>\n         <!-- react-text: 77 -->\n         and\n         <!-- /react-text -->\n         <a href="http://webpack.github.io" target="_blank">\n          Webpack\n         </a>\n         <!-- react-text: 79 -->\n         (now behind the scene thanks to create-react-app)\n         <!-- /react-text -->\n        </li>\n       </ul>\n       <h3>\n        Feature highlights:\n       </h3>\n       <br/>\n       <dl>\n        <dt>\n         <!-- react-text: 84 -->\n         Best React practice by separating\n         <!-- /react-text -->\n         <!-- react-text: 85 -->\n         <!-- /react-text -->\n         <a href="https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0" target="_blank">\n          "smart" and "dumb" components\n         </a>\n        </dt>\n        <dd>\n         <!-- react-text: 88 -->\n         This design pattern makes even more sense when using React along with Redux, where top-level smart components (a.k.a. containers in this codebase such as\n         <!-- /react-text -->\n         <code>\n          UsersPage\n         </code>\n         <!-- react-text: 90 -->\n         and\n         <!-- /react-text -->\n         <code>\n          ReposPage\n         </code>\n         <!-- react-text: 92 -->\n         ) subscribe to Redux state and dispatch Redux actions, while low level components (such as\n         <!-- /react-text -->\n         <code>\n          User\n         </code>\n         <!-- react-text: 94 -->\n         ,\n         <!-- /react-text -->\n         <code>\n          Repo\n         </code>\n         <!-- react-text: 96 -->\n         , and\n         <!-- /react-text -->\n         <code>\n          Header\n         </code>\n         <!-- react-text: 98 -->\n         ) read data and invoke callbacks passed in as props.\n         <!-- /react-text -->\n        </dd>\n        <br/>\n        <dt>\n         Async Data fetching with caching and pagination\n        </dt>\n        <dd>\n         <!-- react-text: 102 -->\n         The\n         <!-- /react-text -->\n         <code>\n          UsersPage\n         </code>\n         <!-- react-text: 104 -->\n         and\n         <!-- /react-text -->\n         <code>\n          ReposPage\n         </code>\n         <!-- react-text: 106 -->\n         would show most followed Github users (with 1000+ followers) and most starred Github repos (with 10000+ stars).  The async actions (see\n         <!-- /react-text -->\n         <code>\n          users\n         </code>\n         <!-- react-text: 108 -->\n         , and\n         <!-- /react-text -->\n         <code>\n          repos\n         </code>\n         <!-- react-text: 110 -->\n         under actions) fetch data from the following Github APIs:\n         <!-- /react-text -->\n         <br/>\n         <code>\n          https://api.github.com/search/users?q=followers:&gt;1000&amp;order=desc&amp;page=1\n         </code>\n         <!-- react-text: 113 -->\n         <!-- /react-text -->\n         <br/>\n         <code>\n          https://api.github.com/search/repositories?q=stars:&gt;10000&amp;order=desc&amp;page=1\n         </code>\n         <!-- react-text: 116 -->\n         <!-- /react-text -->\n         <br/>\n         <!-- react-text: 118 -->\n         The fetched data are stored with the page number as the lookup key, so that the local copy can be shown without the need to re-fetch the same data remotely each time. However cached data can be invalidated if desired.\n         <!-- /react-text -->\n        </dd>\n        <br/>\n        <dt>\n         Data fetching error handling\n        </dt>\n        <dd>\n         <!-- react-text: 122 -->\n         You can test this by disabling your internet connection. Or even better, you can page through\n         <!-- /react-text -->\n         <code>\n          UsersPage\n         </code>\n         <!-- react-text: 124 -->\n         or\n         <!-- /react-text -->\n         <code>\n          ReposPage\n         </code>\n         <!-- react-text: 126 -->\n         very quickly and hopefully invoke Github\'s API rate limit for your IP address.\n         <!-- /react-text -->\n         <br/>\n         <!-- react-text: 128 -->\n         The application would fail gracefully with the error message if data fetching (for a particular page) fails. However, the application can still show cached data for other pages, which is very desirable behavior.\n         <!-- /react-text -->\n        </dd>\n        <br/>\n        <dt>\n         Authentication and Page Restrictions\n        </dt>\n        <dd>\n         <!-- react-text: 132 -->\n         Certain UI pages (\n         <!-- /react-text -->\n         <code>\n          UsersPage\n         </code>\n         <!-- react-text: 134 -->\n         and\n         <!-- /react-text -->\n         <code>\n          ReposPage\n         </code>\n         <!-- react-text: 136 -->\n         ) are restricted.  You can only access them after signing in to the Application. When accessing restricted pages without signing in first, the application would redirect to the\n         <!-- /react-text -->\n         <code>\n          Login\n         </code>\n         <!-- react-text: 138 -->\n         page. You can log in as user "admin" and password "password".  The authentication is based on JSON Web Token (JWT).\n         <!-- /react-text -->\n        </dd>\n        <br/>\n        <dt>\n         Non-Univeral\n        </dt>\n        <dd>\n         This should probably be listed under "issues" or "wish list" instead, since these days a web application is not "cutting edge" or "cool" if it\'s not universal (isomorphic). However there are many cases where universal rendering is simply not applicable or feasible (e.g. due to lack of node.js backend support in my case).\n        </dd>\n       </dl>\n       <h3>\n        Wish List / Known Issues\n       </h3>\n       <dl>\n        <dt>\n         DRY issues in async actions\n        </dt>\n        <del>\n         <dd>\n          <!-- react-text: 147 -->\n          The two sets of aync actions (\n          <!-- /react-text -->\n          <code>\n           users\n          </code>\n          <!-- react-text: 149 -->\n          and\n          <!-- /react-text -->\n          <code>\n           repos\n          </code>\n          <!-- react-text: 151 -->\n          ) apparently can/should be refactored to extract and re-use the common code.\n          <!-- /react-text -->\n          <br/>\n          <!-- react-text: 153 -->\n          The most obvious is the middleware approach illustrated in the excellent Redux documentation. But I am still digesting it.\n          <!-- /react-text -->\n         </dd>\n        </del>\n        <dd>\n         <!-- react-text: 155 -->\n         [New]: The async actions (involving restful api calls for authentication and fetching Github users and repos) are now refactored to go through a common utility\n         <!-- /react-text -->\n         <code>\n          callApi\n         </code>\n         <!-- react-text: 157 -->\n         .\n         <!-- /react-text -->\n        </dd>\n        <br/>\n        <dt>\n         WebSocket\n        </dt>\n        <dd>\n         It would be interesting to show a use case of WebSocket, which is common for a real-world web application.\n        </dd>\n       </dl>\n       <h3>\n        Credits\n       </h3>\n       <p>\n        <!-- react-text: 163 -->\n        As a long-time backend developer (who enjoys writing obscure number-crunching "optimzation" algorithms in Java), I would never have thought of developing (let alone posting) a web application using javascript on Github, were it not for the fateful summer 2015 when I stumbled upon\n        <!-- /react-text -->\n        <a href="https://www.youtube.com/watch?v=xsSnOQynTHs" target="_blank">\n         a 30 minutes video\n        </a>\n        <!-- react-text: 165 -->\n        by\n        <!-- /react-text -->\n        <a href="https://twitter.com/dan_abramov" target="_blank">\n         Dan Abramov\n        </a>\n        <!-- react-text: 167 -->\n        , and his inspiring work on\n        <!-- /react-text -->\n        <a href="https://github.com/rackt/redux" target="_blank">\n         Redux\n        </a>\n        <!-- react-text: 169 -->\n        .\n        <!-- /react-text -->\n       </p>\n       <p>\n        Thank you!\n       </p>\n      </div>\n     </div>\n    </div>\n    <footer class="footer">\n     <p class="text-xs-center text-muted">\n      <!-- react-text: 173 -->\n      Have questions or suggestions? Please file them on the\n      <!-- /react-text -->\n      <a href="https://github.com/cloudmu/react-redux-starter-kit/issues" target="_blank">\n       Github\n      </a>\n      <!-- react-text: 175 -->\n      or tweet\n      <!-- /react-text -->\n      <a href="http://www.twitter.com/_cloudmu" target="_blank">\n       me\n      </a>\n      <!-- react-text: 177 -->\n      .\n      <!-- /react-text -->\n     </p>\n    </footer>\n   </div>\n  </div>\n  <script src="/react-redux-starter-kit/static/js/main.33595b0b.js" type="text/javascript">\n  </script>\n </body>\n</html>'