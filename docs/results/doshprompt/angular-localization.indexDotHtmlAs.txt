b'<!DOCTYPE html>\n<html lang="en" xmlns="http://www.w3.org/1999/xhtml">\n <head>\n  <style type="text/css">\n   @charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide{display:none !important;}ng\\:form{display:block;}.ng-animate-block-transitions{transition:0s all!important;-webkit-transition:0s all!important;}.ng-hide-add-active,.ng-hide-remove{display:block!important;}\n  </style>\n  <title>\n   ngLocalize Docs\n  </title>\n  <meta charset="utf-8"/>\n  <meta content="IE=edge" http-equiv="X-UA-Compatible"/>\n  <meta content="width=device-width, initial-scale=1" name="viewport"/>\n  <meta content="Documentation for the ngLocalize module, aka angular-localization." name="description"/>\n  <meta content="Rahul Doshi" name="author"/>\n  <!-- social media tags -->\n  <meta content="summary" name="twitter:card"/>\n  <!-- Card type -->\n  <meta content="@doshprompt" name="twitter:site"/>\n  <meta content="ngLocalize Docs" name="twitter:title"/>\n  <meta content="ngLocalize - A complete AngularJS localization service with core service and accompanying filters, directives etc." name="twitter:description"/>\n  <meta content="@doshprompt" name="twitter:creator"/>\n  <meta content="https://a248.e.akamai.net/assets.github.com/images/modules/logos_page/Octocat.png" name="twitter:image:src"/>\n  <meta content="doshprompt.github.io" name="twitter:domain"/>\n  <meta content="ngLocalize Docs" property="og:title"/>\n  <meta content="website" property="og:type"/>\n  <meta content="http://doshprompt.github.io/angular-localization/" property="og:url"/>\n  <meta content="https://a248.e.akamai.net/assets.github.com/images/modules/logos_page/Octocat.png" property="og:image"/>\n  <meta content="ngLocalize - A complete AngularJS localization service with core service and accompanying filters, directives etc." property="og:description"/>\n  <meta content="angular-localization" property="og:site_name"/>\n  <meta content="509585594" property="fb:admins"/>\n  <!-- Bootstrap core CSS -->\n  <link href="assets/css/bootstrap.min.css" rel="stylesheet"/>\n  <link href="assets/css/docs.min.css" rel="stylesheet"/>\n  <link href="assets/css/font-awesome.min.css" rel="stylesheet"/>\n  <link href="assets/css/flags.css" rel="stylesheet"/>\n  <link href="assets/css/custom.css" rel="stylesheet"/>\n  <link href="favicon.ico" rel="shortcut icon" type="image/x-icon"/>\n </head>\n <body class="ng-scope" data-ng-app="ngLocalize.docs">\n  <!-- ngInclude: \'app/views/navbar.html\' -->\n  <div class="ng-scope" data-ng-include="\'app/views/navbar.html\'">\n   <!-- Docs master nav -->\n   <header class="navbar navbar-fixed-top bs-docs-nav ng-scope" data-ng-controller="NavControl" role="banner">\n    <div class="container">\n     <div class="navbar-header">\n      <button class="navbar-toggle" data-target=".bs-navbar-collapse" data-toggle="collapse" type="button">\n       <span class="sr-only">\n        Toggle navigation\n       </span>\n       <span class="icon-bar">\n       </span>\n       <span class="icon-bar">\n       </span>\n       <span class="icon-bar">\n       </span>\n      </button>\n      <a class="navbar-brand" href="#">\n       ngLocalize\n      </a>\n     </div>\n     <nav class="collapse navbar-collapse bs-navbar-collapse" role="navigation">\n      <ul class="nav navbar-nav navbar-right">\n       <li class="dropdown">\n        <a class="dropdown-toggle" data-toggle="dropdown" href="">\n         <i class="flag-us" ng-class="flagClass">\n         </i>\n         <span class="ng-binding">\n          English\n         </span>\n         <b class="caret">\n         </b>\n        </a>\n        <ul class="dropdown-menu">\n         <!-- ngRepeat: lang in supportedLang -->\n         <li class="ng-scope" data-ng-repeat="lang in supportedLang">\n          <a data-target=".bs-navbar-collapse" data-toggle="collapse" href="" ng-click="setLocale(lang)">\n           <i class="flag-us" ng-class="localeData[lang].flagClass">\n           </i>\n           <span class="ng-binding">\n            English\n           </span>\n          </a>\n         </li>\n         <!-- end ngRepeat: lang in supportedLang -->\n         <li class="ng-scope" data-ng-repeat="lang in supportedLang">\n          <a data-target=".bs-navbar-collapse" data-toggle="collapse" href="" ng-click="setLocale(lang)">\n           <i class="flag-fr" ng-class="localeData[lang].flagClass">\n           </i>\n           <span class="ng-binding">\n            Fran\xc3\xa7ais\n           </span>\n          </a>\n         </li>\n         <!-- end ngRepeat: lang in supportedLang -->\n        </ul>\n       </li>\n      </ul>\n     </nav>\n    </div>\n   </header>\n  </div>\n  <!-- ngInclude: \'app/views/mainContent.html\' -->\n  <div class="ng-scope" data-ng-include="\'app/views/mainContent.html\'">\n   <!-- ngInclude: \'app/views/header.html\' -->\n   <div class="ng-scope" data-ng-include="\'app/views/header.html\'">\n    <!-- Page content of course! -->\n    <main class="bs-docs-masthead ng-scope" data-ng-controller="HeadControl" id="content" role="main">\n     <span id="forkongithub">\n      <a href="https://github.com/doshprompt/angular-localization">\n       Fork me on GitHub\n      </a>\n     </span>\n     <div class="container">\n      <span class="bs-docs-booticon bs-docs-booticon-lg bs-docs-booticon-outline">\n       <span class="fa fa-globe fa-lg">\n       </span>\n      </span>\n      <p class="lead">\n       A complete AngularJS localization service with core service and accompanying filters, directives etc.\n      </p>\n      <p class="lead">\n       <a class="btn btn-outline-inverse btn-lg" href="//github.com/doshprompt/angular-localization#getting-started">\n        Download angular-localization\n       </a>\n      </p>\n      <p class="version ng-binding">\n       Currently 1.2.1\n      </p>\n     </div>\n    </main>\n    <!-- <div class="bs-docs-featurette">\n    <div class="container">\n        <h2 class="bs-docs-featurette-title">Site localization example using the <code>ngLocalize</code> module.</h2>\n    </div>\n</div> -->\n    <!-- Docs page layout -->\n    <!-- <div class="bs-docs-header" id="content">\n    <div class="container">\n        <h1>angular-localization</h1>\n        <p>A complete AngularJS localization service with core service and accompanying filters, directives etc.</p>\n    </div>\n</div> -->\n   </div>\n   <div class="container bs-docs-container ng-scope" data-ng-controller="DemoControl">\n    <div class="row">\n     <div class="col-md-10" role="main">\n      <!-- Quickstart\n            ================================================== -->\n      <!-- ngInclude: \'app/views/quickstart.html\' -->\n      <div class="bs-docs-section ng-scope" data-ng-include="\'app/views/quickstart.html\'">\n       <h1 class="page-header ng-scope" id="quickstart">\n        Quickstart\n       </h1>\n       <p class="lead ng-scope">\n        The easiest way to install the ngLocalize module is via\n        <a href="http://bower.io/">\n         Bower\n        </a>\n       </p>\n       <div class="highlight ng-scope">\n        <pre><code class="language-bash" data-lang="bash"><span class="gp">$ </span>bower install angular-localization --save</code></pre>\n       </div>\n       <p class="ng-scope">\n        Two alternative options are available:\n       </p>\n       <ul class="ng-scope">\n        <li>\n         <a href="https://github.com/doshprompt/angular-localization/archive/master.zip">\n          Download the latest release\n         </a>\n         .\n        </li>\n        <li>\n         Clone the repo:\n         <a href="https://github.com/doshprompt/angular-localization.git">\n          git clone https://github.com/doshprompt/angular-localization.git\n         </a>\n         .\n        </li>\n       </ul>\n       <p class="ng-scope">\n        You can then include angular-localization after its dependencies, angular and angular-cookies:\n       </p>\n       <div class="highlight ng-scope">\n        <pre><code class="html"><span class="nt">&lt;script</span> <span class="na">src=</span><span class="s">"bower_components/angular/angular.js"</span>&gt;<span class="nt">&lt;/script&gt;</span>\n<span class="nt">&lt;script</span> <span class="na">src=</span><span class="s">"bower_components/angular-cookies/angular-cookies.js"</span>&gt;<span class="nt">&lt;/script&gt;</span>\n<span class="nt">&lt;script</span> <span class="na">src=</span><span class="s">"bower_components/angular-sanitize/angular-sanitize.js"</span>&gt;<span class="nt">&lt;/script&gt;</span>\n<span class="nt">&lt;script</span> <span class="na">src=</span><span class="s">"bower_components/angular-localization/angular-localization.js"</span>&gt;<span class="nt">&lt;/script&gt;</span></code>\n</pre>\n       </div>\n      </div>\n      <!-- i18n directive\n            ================================================== -->\n      <!-- ngInclude: \'app/views/i18nDirective.html\' -->\n      <div class="bs-docs-section ng-scope" data-ng-include="\'app/views/i18nDirective.html\'">\n       <h1 class="page-header ng-scope" id="i18nDirective">\n        i18n Directive\n       </h1>\n       <p class="lead ng-scope">\n        The localization key can be defined as the value of the\n        <code>\n         i18n\n        </code>\n        attribute.\n    If the attribute value is not a valid token, then it will itself be used as the element\'s content.\n       </p>\n       <div class="bs-callout bs-callout-warning ng-scope">\n        <h4>\n         Attribute localizations cannot contain HTML tags\n        </h4>\n        <p>\n         Localizations defined by the\n         <code>\n          i18n\n         </code>\n         attribute cannot contain HTML tags, as the translation result will be assigned as text, not as HTML.\n        This limitation enables a slightly faster localization, as no sanitization is required.\n        </p>\n       </div>\n       <h3 class="ng-scope" id="i18nDirective-basic">\n        Basic example\n       </h3>\n       <p class="ng-scope">\n        Attach the\n        <code>\n         data-i18n\n        </code>\n        attribute to the element whose text should be localized.\n       </p>\n       <div class="bs-example ng-scope">\n        <div class="panel panel-default">\n         <div class="panel-body" data-i18n="demo.basicExampleText">\n          basic example\n         </div>\n        </div>\n       </div>\n       <div class="highlight ng-scope">\n        <pre><code class="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"panel panel-default"</span><span class="nt">&gt;</span>\n    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"panel-body"</span> <span class="na">data-i18n=</span><span class="s">"demo.basicExampleText"</span><span class="nt">&gt;</span><span class="nt">&lt;/div&gt;</span>\n<span class="nt">&lt;/div&gt;</span></code></pre>\n       </div>\n       <h3 class="ng-scope" id="i18nDirective-dynamic">\n        Dynamic user data\n       </h3>\n       <p class="ng-scope">\n        The i18n directive observes all non-directive\n        <code>\n         data-*\n        </code>\n        attributes.\n       </p>\n       <div class="bs-example ng-scope">\n        <div class="panel panel-default">\n         <div class="panel-body" data-i18n="demo.dynamicExampleText" data-name="Rahul Doshi">\n          Hello Rahul Doshi\n         </div>\n        </div>\n       </div>\n       <div class="highlight ng-scope">\n        <pre><code class="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"panel panel-default"</span><span class="nt">&gt;</span>\n    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"panel-body"</span> <span class="na">data-i18n=</span><span class="s">"demo.dynamicExampleText"</span> <span class="na">data-name=</span><span class="s ng-binding">"Rahul Doshi"</span><span class="nt">&gt;</span><span class="nt">&lt;/div&gt;</span>\n<span class="nt">&lt;/div&gt;</span></code></pre>\n       </div>\n      </div>\n      <!-- i18nAttr directive\n            ================================================== -->\n      <!-- ngInclude: \'app/views/i18nAttrDirective.html\' -->\n      <div class="bs-docs-section ng-scope" data-ng-include="\'app/views/i18nAttrDirective.html\'">\n       <h1 class="page-header anchor ng-scope" id="i18nAttrDirective">\n        i18nAttr Directive\n       </h1>\n       <p class="lead ng-scope">\n        It works the same way as the original\n        <code>\n         i18n\n        </code>\n        directive,\n    but instead of updating the element content,\n    it updates their associated HTML attribute(s).\n       </p>\n       <h3 class="ng-scope" id="i18nAttrDirective-inputs">\n        Input Placeholders\n       </h3>\n       <p class="ng-scope">\n       </p>\n       <div class="bs-example ng-scope">\n        <form class="form-horizontal ng-pristine ng-valid" role="form">\n         <div class="form-group">\n          <label class="col-sm-2 control-label" data-i18n="demo.emailAddress" for="exampleInputEmail">\n           Email Address\n          </label>\n          <div class="col-sm-10">\n           <input class="form-control" data-i18n-attr="{placeholder: \'demo.emailPlaceholder\'}" id="exampleInputEmail" placeholder="Enter Email" type="email"/>\n          </div>\n         </div>\n         <div class="form-group">\n          <label class="col-sm-2 control-label" data-i18n="demo.password" for="exampleInputPassword">\n           Password\n          </label>\n          <div class="col-sm-10">\n           <input class="form-control" data-i18n-attr="{placeholder: \'demo.password\'}" id="exampleInputPassword" placeholder="Password" type="password"/>\n          </div>\n         </div>\n         <div class="form-group">\n          <div class="col-sm-offset-2 col-sm-10">\n           <div class="checkbox">\n            <label class="ng-binding">\n             <input type="checkbox"/>\n             Remember Me\n            </label>\n           </div>\n          </div>\n         </div>\n         <div class="form-group">\n          <div class="col-sm-offset-2 col-sm-10">\n           <button class="btn btn-default" data-i18n="demo.submit" type="submit">\n            Submit\n           </button>\n          </div>\n         </div>\n        </form>\n       </div>\n       <!-- /.bs-example -->\n       <div class="highlight ng-scope">\n        <pre><code class="html"><span class="nt">&lt;form</span> <span class="na">class=</span><span class="s">"form-horizontal"</span> <span class="na">role=</span><span class="s">"form"</span><span class="nt">&gt;</span>\n    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"form-group"</span><span class="nt">&gt;</span>\n        <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"exampleInputEmail"</span> <span class="na">class=</span><span class="s">"col-sm-2 control-label"</span> <span class="na">data-i18n=</span><span class="s">"demo.emailAddress"</span><span class="nt">&gt;</span><span class="nt">&lt;/label&gt;</span>\n        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-sm-10"</span><span class="nt">&gt;</span>\n            <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"email"</span> <span class="na">class=</span><span class="s">"form-control"</span> <span class="na">id=</span><span class="s">"exampleInputEmail"</span> <span class="na">data-i18n-attr=</span><span class="s">"{placeholder: \'demo.emailPlaceholder\'}"</span><span class="nt">&gt;</span>\n        <span class="nt">&lt;/div&gt;</span>\n    <span class="nt">&lt;/div&gt;</span>\n    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"form-group"</span><span class="nt">&gt;</span>\n        <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"exampleInputPassword"</span> <span class="na">class=</span><span class="s">"col-sm-2 control-label"</span> <span class="na">data-i18n=</span><span class="s">"demo.password"</span><span class="nt">&gt;</span><span class="nt">&lt;/label&gt;</span>\n        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-sm-10"</span><span class="nt">&gt;</span>\n            <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"password"</span> <span class="na">class=</span><span class="s">"form-control"</span> <span class="na">id=</span><span class="s">"exampleInputPassword"</span> <span class="na">data-i18n-attr=</span><span class="s">"{placeholder: \'demo.password\'}"</span><span class="nt">&gt;</span>\n        <span class="nt">&lt;/div&gt;</span>\n    <span class="nt">&lt;/div&gt;</span>\n    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"form-group"</span><span class="nt">&gt;</span>\n        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-sm-offset-2 col-sm-10"</span><span class="nt">&gt;</span>\n            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"checkbox"</span><span class="nt">&gt;</span>\n                <span class="nt">&lt;label&gt;</span>\n                    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"checkbox"</span><span class="nt">&gt;</span>\n                    <span>{{</span> <span>\'demo.rememberMe\' | i18n</span> <span>}}</span>\n                <span class="nt">&lt;/label&gt;</span>\n            <span class="nt">&lt;/div&gt;</span>\n        <span class="nt">&lt;/div&gt;</span>\n    <span class="nt">&lt;/div&gt;</span>\n    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"form-group"</span><span class="nt">&gt;</span>\n        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-sm-offset-2 col-sm-10"</span><span class="nt">&gt;</span>\n            <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"submit"</span> <span class="na">class=</span><span class="s">"btn btn-default"</span> <span class="na">data-i18n=</span><span class="s">"demo.submit"</span><span class="nt">&gt;</span><span class="nt">&lt;/button&gt;</span>\n        <span class="nt">&lt;/div&gt;</span>\n    <span class="nt">&lt;/div&gt;</span>\n<span class="nt">&lt;/form&gt;</span></code></pre>\n       </div>\n       <div class="bs-callout bs-callout-info ng-scope">\n        <h4>\n         Form data will remain when changing languages\n        </h4>\n        <p>\n         Your form data will remain intact when switching back and forth between languages.\n        The page does not and never will refresh because all changes are handled in place.\n        So what are you waiting for \xe2\x80\x94 go ahead and try it out!\n        </p>\n       </div>\n      </div>\n      <!-- locale service\n            ================================================== -->\n      <!-- ngInclude: \'app/views/localeService.html\' -->\n      <div class="bs-docs-section ng-scope" data-ng-include="\'app/views/localeService.html\'">\n       <h1 class="page-header ng-scope" id="localeService">\n        locale Service\n       </h1>\n       <p class="lead ng-scope">\n        The\n        <code>\n         locale\n        </code>\n        service is equivalent to the\n        <code>\n         i18n\n        </code>\n        directive in all aspects and can be used to generate localized results in situations where the directive cannot be used.\n       </p>\n       <div class="bs-callout bs-callout-danger ng-scope">\n        <h4>\n         Race conditions\n        </h4>\n        <p>\n         Always use\n         <code>\n          locale.ready()\n         </code>\n         passing in the filename(s) in which the token(s) exists in that context, \n        and enclose any other relevant calls to\n         <code>\n          locale.getString()\n         </code>\n         within this promise\'s callback function block.\n        Failure to do so may cause unexpected (empty) results due to the asynchronous nature of your entire JavaScript application.\n        </p>\n        <p>\n         You may use\n         <code>\n          locale.getPath()\n         </code>\n         to find the filename for any given token.\n        </p>\n       </div>\n       <h3 class="ng-scope" id="localeService-within">\n        Within locale.ready\n       </h3>\n       <p class="ng-scope">\n        Wrap in a call to\n        <code>\n         locale.ready()\n        </code>\n        to ensure that the value will be updated if and only if the filepath has been loaded into memory.\n       </p>\n       <div class="highlight ng-scope">\n        <pre><code class="js"><span class="nx">locale.ready</span><span class="p">(</span><span class="nb"><span class="s1">\'common\'</span></span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="nb">function</span><span class="p">() {</span>\n    <span class="nx">$scope.strings.yes = </span><span class="nx">locale.getString</span><span class="p">(</span><span class="nb"><span class="s1">\'common.yes\'</span></span><span class="p">);</span>\n<span class="p">});</span></code></pre>\n       </div>\n       <div class="bs-example ng-scope">\n        <div class="dropdown clearfix">\n         <button class="btn dropdown-toggle sr-only" data-toggle="dropdown" id="dropdownMenu1" type="button">\n          Dropdown\n          <span class="caret">\n          </span>\n         </button>\n         <ul aria-labelledby="dropdownMenu1" class="dropdown-menu" role="menu">\n          <li role="presentation">\n           <a class="ng-binding" href="#" role="menuitem" tabindex="-1">\n            Yes\n           </a>\n          </li>\n         </ul>\n        </div>\n       </div>\n       <!-- /example -->\n       <div class="highlight ng-scope">\n        <pre><code class="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"dropdown"</span><span class="nt">&gt;</span>\n    <span class="nt">&lt;button</span> <span class="na">class=</span><span class="s">"btn dropdown-toggle sr-only"</span> <span class="na">type=</span><span class="s">"button"</span> <span class="na">id=</span><span class="s">"dropdownMenu1"</span> <span class="na">data-toggle=</span><span class="s">"dropdown"</span><span class="nt">&gt;</span>\nDropdown\n        <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"caret"</span><span class="nt">&gt;&lt;/span&gt;</span>\n    <span class="nt">&lt;/button&gt;</span>\n    <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">"dropdown-menu"</span> <span class="na">role=</span><span class="s">"menu"</span> <span class="na">aria-labelledby=</span><span class="s">"dropdownMenu1"</span><span class="nt">&gt;</span>\n        <span class="nt">&lt;li</span> <span class="na">role=</span><span class="s">"presentation"</span><span class="nt">&gt;&lt;a</span> <span class="na">role=</span><span class="s">"menuitem"</span> <span class="na">tabindex=</span><span class="s">"-1"</span> <span class="na">href=</span><span class="s">"#"</span><span class="nt">&gt;</span><span>{{</span> <span>strings.yes</span> <span>}}</span><span class="nt">&lt;/a&gt;&lt;/li&gt;</span>\n    <span class="nt">&lt;/ul&gt;</span>\n<span class="nt">&lt;/div&gt;</span></code></pre>\n       </div>\n       <h3 class="ng-scope" id="localeService-without">\n        Without locale.ready\n       </h3>\n       <p class="ng-scope">\n        Missing\n        <code>\n         locale.ready()\n        </code>\n        causes the value to be updated immediately, before the service has time to fetch the file.\n       </p>\n       <div class="highlight ng-scope">\n        <pre><code class="js"><span class="nx">$scope.strings = {</span>\n    <span class="nx">no: locale.getString</span><span class="p">(</span><span class="nb"><span class="s1">\'common.no\'</span></span><span class="p">)</span>\n<span class="p">};</span></code></pre>\n       </div>\n       <div class="bs-example ng-scope">\n        <div class="dropdown clearfix">\n         <button class="btn dropdown-toggle sr-only" data-toggle="dropdown" id="dropdownMenu2" type="button">\n          Dropdown\n          <span class="caret">\n          </span>\n         </button>\n         <ul aria-labelledby="dropdownMenu2" class="dropdown-menu" role="menu">\n          <li role="presentation">\n           <a class="ng-binding" href="#" role="menuitem" tabindex="-1">\n           </a>\n          </li>\n         </ul>\n        </div>\n       </div>\n       <!-- /example -->\n       <div class="highlight ng-scope">\n        <pre><code class="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"dropdown"</span><span class="nt">&gt;</span>\n    <span class="nt">&lt;button</span> <span class="na">class=</span><span class="s">"btn dropdown-toggle sr-only"</span> <span class="na">type=</span><span class="s">"button"</span> <span class="na">id=</span><span class="s">"dropdownMenu1"</span> <span class="na">data-toggle=</span><span class="s">"dropdown"</span><span class="nt">&gt;</span>\nDropdown\n        <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"caret"</span><span class="nt">&gt;&lt;/span&gt;</span>\n    <span class="nt">&lt;/button&gt;</span>\n    <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">"dropdown-menu"</span> <span class="na">role=</span><span class="s">"menu"</span> <span class="na">aria-labelledby=</span><span class="s">"dropdownMenu1"</span><span class="nt">&gt;</span>\n        <span class="nt">&lt;li</span> <span class="na">role=</span><span class="s">"presentation"</span><span class="nt">&gt;&lt;a</span> <span class="na">role=</span><span class="s">"menuitem"</span> <span class="na">tabindex=</span><span class="s">"-1"</span> <span class="na">href=</span><span class="s">"#"</span><span class="nt">&gt;</span><span>{{</span> <span>strings.no</span> <span>}}</span><span class="nt">&lt;/a&gt;&lt;/li&gt;</span>\n    <span class="nt">&lt;/ul&gt;</span>\n<span class="nt">&lt;/div&gt;</span></code></pre>\n       </div>\n      </div>\n      <!-- i18n filter\n            ================================================== -->\n      <!-- ngInclude: \'app/views/i18nFilter.html\' -->\n      <div class="bs-docs-section ng-scope" data-ng-include="\'app/views/i18nFilter.html\'">\n       <h1 class="page-header ng-scope" id="i18nFilter">\n        i18n Filter\n       </h1>\n       <p class="lead ng-scope">\n        The\n        <code>\n         i18n\n        </code>\n        filter provides the same functionality as the service.\n    It can be useful in templates where the localization strings are dynamic, e.g. for error messages\n       </p>\n       <h3 class="ng-scope" id="i18nFilter-simple">\n        Simple Example\n       </h3>\n       <p class="ng-scope">\n        Pipe a generated error message to be processed.\n       </p>\n       <div class="bs-example ng-scope">\n        <div class="alert alert-danger ng-binding">\n         <span class="glyphicon glyphicon-remove">\n         </span>\n         file not found :(\n        </div>\n       </div>\n       <div class="highlight ng-scope">\n        <pre><code class="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"alert alert-danger"</span><span class="nt">&gt;</span>\n    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"glyphicon glyphicon-remove"</span><span class="nt">&gt;</span><span class="nt">&lt;/span&gt;</span>\n    <span>{{</span> <span>messages.error | i18n<span> <span>}}</span>\n<span class="nt">&lt;/div&gt;</span></span></span></code></pre>\n       </div>\n       <h3 class="ng-scope" id="i18nFilter-args">\n        Parameterized Arguments\n       </h3>\n       <p class="ng-scope">\n        Give it an array, map (object) or even a single string\n       </p>\n       <div class="bs-example ng-scope">\n        <div class="alert alert-danger ng-binding">\n         <span class="glyphicon glyphicon-remove">\n         </span>\n         test.json not found \xe2\x80\x94 no longer a generic error message :)\n        </div>\n        <div class="alert alert-success ng-binding">\n         <span class="glyphicon glyphicon-ok">\n         </span>\n         Running 5 tests ... encountered 0 failures!\n        </div>\n        <div class="alert alert-info ng-binding">\n         \xc2\xa9 2017 Rahul Doshi\n        </div>\n        <div class="alert alert-info ng-binding">\n         <span class="glyphicon glyphicon-info-sign">\n         </span>\n         Currently 1.2.1\n        </div>\n       </div>\n       <div class="highlight ng-scope">\n        <pre><code class="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"alert alert-danger"</span><span class="nt">&gt;</span>\n    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"glyphicon glyphicon-remove"</span><span class="nt">&gt;</span><span class="nt">&lt;/span&gt;</span>\n    <span>{{</span> <span>messages.targeted | i18n:\'test.json\'<span> <span>}}</span>\n<span class="nt">&lt;/div&gt;</span>\n<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"alert alert-success"</span><span class="nt">&gt;</span>\n    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"glyphicon glyphicon-ok"</span><span class="nt">&gt;</span><span class="nt">&lt;/span&gt;</span>\n    <span>{{</span> <span>messages.tests | i18n:filtArgs.tests<span> <span>}}</span>\n<span class="nt">&lt;/div&gt;</span>\n<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"alert alert-info"</span><span class="nt">&gt;</span>\n    <span>{{</span> <span>messages.copyright | i18n:filtArgs.copyright<span> <span>}}</span>\n<span class="nt">&lt;/div&gt;</span>\n<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"alert alert-info"</span><span class="nt">&gt;</span>\n    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"glyphicon glyphicon-info-sign"</span><span class="nt">&gt;</span><span class="nt">&lt;/span&gt;</span>\n    <span>{{</span> <span>messages.version | i18n:filtArgs.version<span> <span>}}</span>\n<span class="nt">&lt;/div&gt;</span></span></span></span></span></span></span></span></span></code></pre>\n       </div>\n       <h3 class="ng-scope" id="i18nFilter-special">\n        Special Use-case\n       </h3>\n       <p class="ng-scope">\n        Use a delimiter when it is not possible to follow the standardized conventional syntax for passing in additional information.\n    Because of the way that is has been designed, it will not work in markup and must be called programatically i.e. either\n        <code>\n         locale.getString()\n        </code>\n        or\n        <code>\n         $filter(\'i18n\')\n        </code>\n        and the string following the separator has to be valid JSON formatted.\n       </p>\n       <div class="bs-example ng-scope">\n        <div class="alert alert-danger ng-binding">\n         <span class="glyphicon glyphicon-remove">\n         </span>\n         test.json not found \xe2\x80\x94 no longer a generic error message :)\n        </div>\n        <div class="alert alert-success ng-binding">\n         <span class="glyphicon glyphicon-ok">\n         </span>\n         Running 5 tests ... encountered 0 failures!\n        </div>\n        <div class="alert alert-info ng-binding">\n         \xc2\xa9 2017 Rahul Doshi\n        </div>\n        <div class="alert alert-info ng-binding">\n         <span class="glyphicon glyphicon-info-sign">\n         </span>\n         Currently 1.2.1\n        </div>\n       </div>\n       <div class="highlight ng-scope">\n        <pre><code class="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"alert alert-danger"</span><span class="nt">&gt;</span>\n    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"glyphicon glyphicon-remove"</span><span class="nt">&gt;</span><span class="nt">&lt;/span&gt;</span>\n    <span>{{</span> <span>specials.targeted<span> <span>}}</span>\n<span class="nt">&lt;/div&gt;</span>\n<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"alert alert-success"</span><span class="nt">&gt;</span>\n    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"glyphicon glyphicon-ok"</span><span class="nt">&gt;</span><span class="nt">&lt;/span&gt;</span>\n    <span>{{</span> <span>specials.tests<span> <span>}}</span>\n<span class="nt">&lt;/div&gt;</span>\n<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"alert alert-info"</span><span class="nt">&gt;</span>\n    <span>{{</span> <span>specials.copyright<span> <span>}}</span>\n<span class="nt">&lt;/div&gt;</span>\n<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"alert alert-info"</span><span class="nt">&gt;</span>\n    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"glyphicon glyphicon-info-sign"</span><span class="nt">&gt;</span><span class="nt">&lt;/span&gt;</span>\n    <span>{{</span> <span>specials.version<span> <span>}}</span>\n<span class="nt">&lt;/div&gt;</span></span></span></span></span></span></span></span></span></code></pre>\n       </div>\n      </div>\n      <!-- Using with ngPluralize\n            ================================================== -->\n      <div class="bs-docs-section">\n       <h1 id="ngLocalize-ngPluralize">\n        Using ngPluralize\n       </h1>\n       <p class="lead">\n        Partially compatible with native ngPluralize directive.\n       </p>\n       <div class="highlight">\n        <pre><code class="js"><span class="nx">$scope.pluralization</span> <span class="o">=</span> <span class="p">{</span>\n    <span class="nx">numCount:</span> <span class="s1">1</span>\n<span class="p">};</span></code></pre>\n       </div>\n       <div class="bs-example">\n        <div class="form-group">\n         <input class="form-control ng-pristine ng-valid ng-valid-number ng-valid-min" data-i18n-attr="{placeholder: \'demo.numberPrompt\'}" data-ng-model="pluralization.numCount" min="0" placeholder="Please enter a number" type="number"/>\n        </div>\n        <div class="alert alert-warning">\n         <span class="glyphicon glyphicon-question-sign">\n         </span>\n         <span data-count="pluralization.numCount" data-ng-pluralize="" data-when="{ \'0\': \'Nobody is viewing.\', \'1\': \'A person is viewing.\', \'other\': \'Lots of people are watching.\' }">\n          A person is viewing.\n         </span>\n        </div>\n       </div>\n       <div class="highlight">\n        <pre><code class="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"form-group"</span><span class="nt">&gt;</span>\n    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"number"</span> <span class="na">min=</span><span class="s">"0"</span> <span class="na">class=</span><span class="s">"form-control"</span> <span class="na">data-ng-model=</span><span class="s">"pluralization.numCount"</span> <span class="na">data-i18n-attr=</span><span class="s">"{placeholder: \'demo.numberPrompt\'}"</span><span class="nt">&gt;</span>\n    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"alert alert-warning"</span><span class="nt">&gt;</span>\n        <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"glyphicon glyphicon-question-sign"</span><span class="nt">&gt;</span><span class="nt">&lt;/span&gt;</span>\n        <span class="nt">&lt;span</span> <span class="na">data-ng-pluralize</span> <span class="na">data-count=</span><span class="s">"pluralization.numCount"</span> <span class="na">data-when=</span><span class="s">"{ \'0\': \'<span>{{</span> pluralization.options.zero | i18n <span>}}</span>\', \'1\': \'<span>{{</span> pluralization.options.one | i18n <span>}}</span>\', \'other\': \'<span>{{</span> pluralization.options.many | i18n <span>}}</span>\' }"</span> <span class="nt">&gt;</span><span class="nt">&lt;/span&gt;</span>\n    <span class="nt">&lt;/div&gt;</span>\n<span class="nt">&lt;/div&gt;</span></code></pre>\n       </div>\n       <div class="bs-callout bs-callout-warning">\n        <h4>\n         Limitations\n        </h4>\n        <p>\n         Full compatibility cannot be reached due to limitations of the ng-framework.\n                        Right now it is impossible to place the\n         <code>\n          data-count\n         </code>\n         attribute anywhere in the resultant string.\n                        There exists a known workaround using\n         <code>\n          $filter(\'i18n\')\n         </code>\n         or\n         <code>\n          locale.getString()\n         </code>\n         directly in your controller or else you could expose a\n         <code>\n          getPlurals()\n         </code>\n         function to the\n         <code>\n          ngPluralize\n         </code>\n         directive.\n                        The newly created function should internally address the value of\n         <code>\n          count\n         </code>\n         .\n        </p>\n        <p>\n         This is somewhat wieldy and cumbersome as it requires you to track offsets manually,\n                        the same can also be achieved thru the\n         <code>\n          i18n\n         </code>\n         directive albeit with one extra degree of complexity; the caveat being that of interpolation along with\n         <code>\n          $watchers\n         </code>\n         and/or\n         <code>\n          ng-bind\n         </code>\n        </p>\n        <p>\n         In such situations it is good to note that\n         <code>\n          locale.ready()\n         </code>\n         is not mandatory as angular\'s page\n         <code>\n          $digest\n         </code>\n         cycle will fire periodically and take care of it for you.\n        </p>\n        <p>\n         Also, strings may not be passed to the\n         <code>\n          i18n\n         </code>\n         filter(s) of the\n         <code>\n          ngPluralize\n         </code>\n         directive as is, in the markup.\n        </p>\n       </div>\n       <div class="highlight">\n        <pre><code class="js"><span class="nx">$scope.pluralization</span> <span clas="o">=</span> <span class="p">{</span>\n    <span class="nx">numCount:</span> <span class="s1">1</span>\n    <span class="nx">options:</span> <span class="p">{</span>\n        <span class="nx">zero:</span> <span class="s1">\'plurals.zeroPluralized\'</span>,\n        <span class="nx">one: <span class="s1">\'plurals.onePluralized\'</span>,\n        <span class="nx">many: <span class="s1">\'plurals.manyPluralized\'</span>\n    <span class="p">},</span>\n    <span class="nb">getPlural</span><span class="nb">:</span> <span class="kd">function</span> <span class="p">() {</span>\n        <span class="kd">var</span> <span class="nx">n</span> <span class="o">=</span> <span class="nx">$scope.pluralization.numCount</span> <span class="p">,</span>\n            <span class="nx">s</span><span class="p">;</span>\n        <span class="k">switch</span> <span class="p">(</span><span class="nx">n</span><span class="p">) {</span>\n        <span class="k">case</span> <span class="nb">null</span><span class="p">:</span>\n        <span class="k">case</span> <span class="nb">undefined</span><span class="p">:</span>\n        <span class="k">case</span> <span class="nb">0</span><span class="p">:</span>\n            <span class="nx">s</span> <span class="o">=</span> <span class="nx">$scope.pluralization.options.zero</span><span class="p">;</span>\n            <span class="k">break</span><span class="p">;</span>\n        <span class="k">case</span> <span class="nb">1</span>:\n            <span class="nx">s</span> <span class="o">=</span> <span class="s1">\'plurals.onePluralizedNum::\'</span> <span class="p">+</span> <span class="nx">n</span><span class="p">;</span>\n            <span class="k">break</span><span class="p">;</span>\n        <span class="k">default</span><span class="p">:</span>\n            <span class="nx">s</span> <span class="o">=</span> <span class="s1">\'plurals.manyPluralizedNum::\'</span> <span class="p">+</span> <span class="nx">n</span><span class="p">;</span>\n            <span class="k">break</span><span class="p">;</span>\n        <span class="p">}</span>\n        <span class="kd">return</span> <span class="nx">s</span><span class="p">;</span>\n    <span class="p">},</span>\n    <span class="nb">getPlurals</span><span class="nb">:</span> <span class="kd">function</span> <span class="p">() {</span>\n        <span class="kd">var</span> <span class="nx">n</span> <span class="o">=</span> <span class="nx">$scope.pluralization.numCount</span> <span class="p">,</span>\n            <span class="nx">s</span><span class="p">;</span>\n        <span class="k">switch</span> <span class="p">(</span><span class="nx">n</span><span class="p">) {</span>\n        <span class="k">case</span> <span class="nb">null</span><span class="p">:</span>\n        <span class="k">case</span> <span class="nb">undefined</span><span class="p">:</span>\n            <span class="nx">s</span> <span class="o">=</span> <span class="s1">\'\'</span><span class="p">;</span>\n            <span class="k">break</span><span class="p">;</span>\n        <span class="k">case</span> <span class="nb">0</span>:\n            <span class="nx">s</span> <span class="o">=</span> <span class="nx">$filter</span><span class="p">(<span class="s1">\'i18n\'</span><span class="p">)</span><span class="p">(<span class="nx">$scope.pluralization.options.zero</span><span class="p">)</span><span class="p">;</span>\n            <span class="k">break</span><span class="p">;</span>\n        <span class="k">case</span> <span class="nb">1</span>:\n            <span class="nx">s</span> <span class="o">=</span> <span class="nx">$filter</span><span class="p">(<span class="s1">\'i18n\'</span><span class="p">)</span><span class="p">(<span class="s1">\'plurals.onePluralizedNum\'</span><span class="p">,</span> <span class="nx">n</span><span class="p">)</span><span class="p">;</span>\n            <span class="k">break</span><span class="p">;</span>\n        <span class="k">default</span><span class="p">:</span>\n            <span class="nx">s</span> <span class="o">=</span> <span class="nx">$filter</span><span class="p">(<span class="s1">\'i18n\'</span><span class="p">)</span><span class="p">(<span class="s1">\'plurals.ManyPluralizedNum\'</span><span class="p">,</span> <span class="nx">n</span><span class="p">)</span><span class="p">;</span>\n            <span class="k">break</span><span class="p">;</span>\n        <span class="p">}</span>\n        <span class="kd">return</span> <span class="nx">s</span><span class="p">;</span>\n    <span class="p">},</span>\n    <span class="nb">getWithOffs</span><span class="nb">:</span> <span class="kd">function</span> <span class="p">() {</span>\n        <span class="kd">var</span> <span class="nx">n</span> <span class="o">=</span> <span class="nx">$scope.pluralization.numCount</span> <span class="p">,</span>\n            <span class="nx">s</span><span class="p">;</span>\n        <span class="k">switch</span> <span class="p">(</span><span class="nx">n</span><span class="p">) {</span>\n        <span class="k">case</span> <span class="nb">0</span>:\n            <span class="nx">s</span> <span class="o">=</span> <span class="nx">$scope.pluralization.options.zero</span><span class="p">;</span>\n            <span class="k">break</span><span class="p">;</span>\n        <span class="k">case</span> <span class="nb">1</span>:\n            <span class="nx">s</span> <span class="o">=</span> <span class="s1">\'plurals.onePluralizedOfs\'</span><span class="p">;</span>\n            <span class="k">break</span><span class="p">;</span>\n        <span class="k">case</span> <span class="nb">2</span>:\n            <span class="nx">s</span> <span class="o">=</span> <span class="nx">locale.getString</span><span class="p">(</span><span class="s1">\'plurals.twoPluralizedOfs\'</span><span class="p">,</span> <span class="nx">$scope.user.name</span><span class="p">);</span>\n            <span class="k">break</span><span class="p">;</span>\n        <span class="k">case</span> <span class="nb">3</span>:\n            <span class="nx">s</span> <span class="o">=</span> <span class="nx">locale.getString</span><span class="p">(</span><span class="s1">\'plurals.threePluralizedOfs\'</span><span class="p">,</span> <span class="nx">$scope.user.name</span><span class="p">);</span>\n            <span class="k">break</span><span class="p">;</span>\n        <span class="k">default</span>:\n            <span class="nx">s</span> <span class="o">=</span> <span class="nx">locale.getString</span><span class="p">(</span><span class="s1">\'plurals.morePluralizedOfs\'</span><span class="p">,</span> <span class="p">[</span><span class="nx">$scope.user.name</span><span class="p">, (</span><span class="nx">n <span class="p">-</span> <span class="nx">2</span><span class="p">)]);</span>\n            <span class="k">break</span><span class="p">;</span>\n        <span class="p">}</span>\n        <span class="kd">return</span> <span class="nx">s</span><span class="p">;</span>\n    <span class="p">}</span>\n<span class="p">};</span></span></span></span></span></span></span></span></span></span></code></pre>\n       </div>\n       <div class="bs-example">\n        <div class="form-group">\n         <input class="form-control ng-pristine ng-valid ng-valid-number ng-valid-min" data-i18n-attr="{placeholder: \'demo.numberPrompt\'}" data-ng-model="pluralization.numCount" min="0" placeholder="Please enter a number" type="number"/>\n        </div>\n        <div class="alert alert-warning">\n         <span class="glyphicon glyphicon-warning-sign">\n         </span>\n         <span data-i18n="plurals.onePluralizedNum::1">\n          1 person is viewing.\n         </span>\n        </div>\n        <div class="alert alert-warning">\n         <span class="glyphicon glyphicon-warning-sign">\n         </span>\n         <span class="ng-binding" data-ng-bind="pluralization.getPlurals()">\n          1 person is viewing.\n         </span>\n        </div>\n        <div class="alert alert-warning">\n         <span class="glyphicon glyphicon-warning-sign">\n         </span>\n         <ng-pluralize data-count="pluralization.numCount" data-offset="2" data-when="{ \'0\': \'You are viewing.\', \'1\': \'You are viewing.\', \'2\': \'plurals.onePluralizedOfs\', \'one\': \'plurals.onePluralizedOfs\', \'other\': \'plurals.onePluralizedOfs\' }">\n          You are viewing.\n         </ng-pluralize>\n        </div>\n       </div>\n       <div class="highlight">\n        <pre><code class="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"form-group"</span><span class="nt">&gt;</span>\n    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"number"</span> <span class="na">min=</span><span class="s">"0"</span> <span class="na">class=</span><span class="s">"form-control"</span> <span class="na">data-ng-model=</span><span class="s">"pluralization.numCount"</span> <span class="na">data-i18n-attr=</span><span class="s">"{placeholder: \'demo.numberPrompt\'}"</span><span class="nt">&gt;</span>\n    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"alert alert-warning"</span><span class="nt">&gt;</span>\n        <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"glyphicon glyphicon-warning-sign"</span><span class="nt">&gt;</span><span class="nt">&lt;/span&gt;</span>\n        <span class="nt">&lt;span</span> <span class="na">data-i18n=</span><span class="s">"<span>{{</span> pluralization.getPlural() <span>}}</span>"</span><span class="nt">&lt;/span&gt;</span>\n    <span class="nt">&lt;/div&gt;</span>\n    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"alert alert-warning"</span><span class="nt">&gt;</span>\n        <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"glyphicon glyphicon-warning-sign"</span><span class="nt">&gt;</span><span class="nt">&lt;/span&gt;</span>\n        <span class="nt">&lt;span</span> <span class="na">data-ng-bind=</span><span class="s">"pluralization.getPlurals()"</span><span class="nt">&lt;/span&gt;</span>\n    <span class="nt">&lt;/div&gt;</span>\n    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"alert alert-warning"</span><span class="nt">&gt;</span>\n        <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"glyphicon glyphicon-question-sign"</span><span class="nt">&gt;</span><span class="nt">&lt;/span&gt;</span>\n        <span class="nt">&lt;ng-pluralize</span> <span class="na">data-count=</span><span class="s">"pluralization.numCount"</span> <span class="na">data-offset=</span><span class="s">"2"</span> <span class="na">data-when=</span><span class="s">"{ \'0\': \'<span>{{</span> pluralization.getWithOffs() | i18n <span>}}</span>\', \'1\': \'<span>{{</span> pluralization.getWithOffs() | i18n <span>}}</span>\', \'2\': \'<span>{{</span> pluralization.getWithOffs() <span>}}</span>\', \'one\': \'<span>{{</span> pluralization.getWithOffs() <span>}}</span>\', \'other\': \'<span>{{</span> pluralization.getWithOffs() <span>}}</span>\' }"</span> <span class="nt">&gt;</span><span class="nt">&lt;/ng-pluralize&gt;</span>\n    <span class="nt">&lt;/div&gt;</span>\n<span class="nt">&lt;/div&gt;</span></code></pre>\n       </div>\n      </div>\n      <!-- Events Emitted\n            ================================================== -->\n      <!-- ngInclude: \'app/views/eventsEmitted.html\' -->\n      <div class="bs-docs-section ng-scope" data-ng-include="\'app/views/eventsEmitted.html\'">\n       <h1 class="page-header ng-scope" id="events">\n        Events Emitted\n       </h1>\n       <p class="lead ng-scope">\n        The base service exposes certain events which may be listened to, captured and acted upon.\n    There are part of the\n        <code>\n         ngLocalize.Events\n        </code>\n        module\n    which must first be injected as a dependency either at the application-level or in your controller/services enclosing module.\n    Since these are emitted by\n        <code>\n         $rootScope\n        </code>\n        they are available to all descendent\n        <code>\n         $scopes\n        </code>\n        in controllers, services and/or directives.\n       </p>\n       <h3 class="ng-scope" id="events-updates">\n        On Resource Updates\n       </h3>\n       <p class="ng-scope">\n        You must listen for\n        <code>\n         localeEvents.resourceUpdates\n        </code>\n        .\n       </p>\n       <div class="highlight ng-scope">\n        <pre><code class="js"><span class="nx">angular.module</span><span class="p">(</span><span class="nb"><span class="s1">\'docs.demo.myModule\'</span></span>, <span class="p">[</span><span class="nb"><span class="s1">\'ngLocalize.Events\'</span></span><span class="p">])</span>\n    <span class="nx">.controller</span><span class="p">(</span><span class="nb"><span class="s1">\'demoControl\'</span></span>, <span class="p">[</span><span class="nb"><span class="s1">\'localeVersion\'</span></span>,\n        <span class="nb">function</span><span class="p">() {</span>\n            <span class="nx">$scope.$on</span><span class="p">(</span><span class="nb"><span class="nb">localeEvents.resourceUpdates</span>, <span class="kd">function</span> </span><span class="p">() {</span>\n                <span class="nx">console.info<span class="p">(</span><span class="s1">\'ngLocalize: A resource was recently updated.\'</span><span class="p">)</span></span>\n            <span class="p">});</span>\n        <span class="p">}</span>\n    <span class="p">]);</span></code></pre>\n       </div>\n       <h3 class="ng-scope" id="events-changes">\n        On Locale Changes\n       </h3>\n       <p class="ng-scope">\n        Triggered by\n        <code>\n         localeEvents.localeChanges\n        </code>\n        .\n       </p>\n       <div class="highlight ng-scope">\n        <pre><code class="js"><span class="nx">angular.module</span><span class="p">(</span><span class="nb"><span class="s1">\'docs.demo.yetAnotherModule\'</span></span>, <span class="p">[</span><span class="nb"><span class="s1">\'ngLocalize.Events\'</span></span><span class="p">])</span>\n    <span class="nx">.controller</span><span class="p">(</span><span class="nb"><span class="s1">\'docsControl\'</span></span>, <span class="p">[</span><span class="nb"><span class="s1">\'localeVersion\'</span></span>,\n        <span class="nb">function</span><span class="p">() {</span>\n            <span class="nx">$scope.$on</span><span class="p">(</span><span class="nb"><span class="nb">localeEvents.localeChanges</span>, <span class="kd">function</span> </span><span class="p">(</span><span class="nb">newLocale</span><span class="p">) {</span>\n                <span class="nx">console.info<span class="p">(</span><span class="s1">\'ngLocalize: Locale Changed to \'</span>  <span class="nx">+ newLocale</span><span class="p">)</span></span>\n            <span class="p">});</span>\n        <span class="p">}</span>\n    <span class="p">]);</span></code></pre>\n       </div>\n      </div>\n      <!-- Custom Configuration\n            ================================================== -->\n      <!-- ngInclude: \'app/views/configurations.html\' -->\n      <div class="bs-docs-section ng-scope" data-ng-include="\'app/views/configurations.html\'">\n       <h1 class="page-header ng-scope" id="config">\n        Custom Configuration\n       </h1>\n       <p class="lead ng-scope">\n        All overridable configuration options are part of\n        <code>\n         localeConf\n        </code>\n        within the\n        <code>\n         ngLocalize.Config\n        </code>\n        module.\n    This has been done to achieve maximum compatibility and configurability\n    with all new as well as any existing small-medium-large-scale applications.\n       </p>\n       <h3 class="ng-scope" id="config-basePath">\n        basePath\n        <small>\n         languages\n        </small>\n       </h3>\n       <p class="ng-scope">\n        The folder off the root of your wb app where the resource files are located\n    (it can also be used as a relative path).\n       </p>\n       <h3 class="ng-scope" id="config-defaultLocale">\n        defaultLocale\n        <small>\n         en-US\n        </small>\n       </h3>\n       <p class="ng-scope">\n        The locale that your app is initialized with for a new user.\n       </p>\n       <h3 class="ng-scope" id="config-sharedDictionary">\n        sharedDictionary\n        <small>\n         common\n        </small>\n       </h3>\n       <p class="ng-scope">\n        Commonly occuring words, phrases, strings etc. are stored in this file\n    (it is used to check whether the service itself is ready or not as it is loaded during bootstrap).\n       </p>\n       <h3 class="ng-scope" id="config-fileExtension">\n        fileExtension\n        <small>\n         .lang.json\n        </small>\n       </h3>\n       <p class="ng-scope">\n        The extension for all resource files spanning across all languages.\n       </p>\n       <h3 class="ng-scope" id="config-persistSelection">\n        persistSelection\n        <small>\n         true\n        </small>\n       </h3>\n       <p class="ng-scope">\n        Whether to save the selected language to cookies for retrieval on later uses of the app.\n       </p>\n       <h3 class="ng-scope" id="config-cookieName">\n        cookieName\n        <small>\n         COOKIE_LOCALE_LANG\n        </small>\n       </h3>\n       <p class="ng-scope">\n        Works in conjuntion with\n        <code>\n         persistSelection\n        </code>\n        and provides the cookie name for storage.\n       </p>\n       <h3 class="ng-scope" id="config-observableAttrs">\n        observableAttrs\n        <small>\n         \\^data-(?!ng-|i18n)\\\n        </small>\n       </h3>\n       <p class="ng-scope">\n        A regular expression which is used to match which custom data attibutes may be watched\n    by the\n        <code>\n         i18n\n        </code>\n        directive for 2-way bindings to replace in a tokenized string.\n       </p>\n       <h3 class="ng-scope" id="config-delimiter">\n        delimiter\n        <small>\n         ::\n        </small>\n       </h3>\n       <p class="ng-scope">\n        The delimiter to be used when passing params along with the string token to the service, filter etc.\n       </p>\n       <div class="highlight ng-scope">\n        <pre><code class="js"><span class="nx">angular.module</span><span class="p">(</span><span class="nb"><span class="s1">\'docs.demo\'</span></span>, <span class="p">[</span><span class="nb"><span class="s1">\'ngLocalize.Config\'</span></span><span class="p">])</span>\n    <span class="nx">.value</span><span class="p">(</span><span class="nb"><span class="s1">\'localeConf\'</span></span>, <span class="p">{</span>\n    <span class="nx">basePath:</span> <span class="s1">\'languages\'</span>,\n    <span class="nx">defaultLocale:</span> <span class="s1">\'en-US\'</span>,\n    <span class="nx">sharedDictionary:</span> <span class="s1">\'common\'</span>,\n    <span class="nx">fileExtension:</span> <span class="s1">\'.lang.json\'</span>,\n    <span class="nx">persistSelection:</span> <span class="nb">true</span>,\n    <span class="nx">cookieName:</span> <span class="s1">\'COOKIE_LOCALE_LANG\'</span>,\n    <span class="nx">observableAttrs:</span> <span class="nb">new</span> <span class="kd">RegExp</span><span class="p">(</span><span class="s1">\'^data-(?!ng-|i18n)\'</span><span class="p">)</span>,\n    <span class="nx">delimiter:</span> <span class="s1">\'::\'</span>,\n<span class="p">});</span></code></pre>\n       </div>\n       <div class="bs-callout bs-callout-warning ng-scope">\n        <h4>\n         Overriding defaults\n        </h4>\n        <p>\n         If you would like to override at least one particular option,\n        then you must explicitly set any other options explicitly to their default values.\n        </p>\n       </div>\n      </div>\n     </div>\n     <div class="col-md-2 hidden-sm">\n      <!-- ngInclude: \'app/views/sidebar.html\' -->\n      <div class="ng-scope" data-ng-include="\'app/views/sidebar.html\'">\n       <div class="bs-docs-sidebar hidden-print ng-scope affix-top" data-bs-affix="" data-data-bs-scrollspy-list="" data-offset="-50" data-offset-top="-50" role="complementary" style="position: relative;">\n        <ul class="nav bs-docs-sidenav">\n         <li class="active" data-bs-scrollspy="" data-target="#quickstart">\n          <a href="##quickstart">\n           Quickstart\n          </a>\n         </li>\n         <li data-bs-scrollspy="" data-target="#i18nDirective">\n          <a href="##i18nDirective">\n           i18n Directive\n          </a>\n          <ul class="nav">\n           <li data-bs-scrollspy="" data-target="#i18nDirective-basic">\n            <a href="##i18nDirective-basic">\n             Basic Example\n            </a>\n           </li>\n           <li data-bs-scrollspy="" data-target="#i18nDirective-dynamic">\n            <a href="##i18nDirective-dynamic">\n             Dynamic User Data\n            </a>\n           </li>\n          </ul>\n         </li>\n         <li data-bs-scrollspy="" data-target="#i18nAttrDirective">\n          <a href="##i18nAttrDirective">\n           i18nAttr Directive\n          </a>\n          <ul class="nav">\n           <li data-bs-scrollspy="" data-target="#i18nDirective-inputs">\n            <a href="##i18nAttrDirective-inputs">\n             Input Placeholders\n            </a>\n           </li>\n          </ul>\n         </li>\n         <li data-bs-scrollspy="" data-target="#localeService">\n          <a href="##localeService">\n           locale Service\n          </a>\n         </li>\n         <li data-bs-scrollspy="" data-target="#i18nFilter">\n          <a href="##i18nFilter">\n           i18n Filter\n          </a>\n          <ul class="nav">\n           <li data-bs-scrollspy="" data-target="#i18nFilter-simple">\n            <a href="##i18nFilter-simple">\n             Simple Example\n            </a>\n           </li>\n           <li data-bs-scrollspy="" data-target="#i18nFilter-args">\n            <a href="##i18nFilter-args">\n             Parameterized Arguments\n            </a>\n           </li>\n           <li data-bs-scrollspy="" data-target="#i18nFilter-special">\n            <a href="##i18nFilter-special">\n             Special Use-case(s)\n            </a>\n           </li>\n          </ul>\n         </li>\n         <li data-bs-scrollspy="" data-target="#ngLocalize-ngPluralize">\n          <a href="##ngLocalize-ngPluralize">\n           Using ngPluralize\n          </a>\n         </li>\n         <li data-bs-scrollspy="" data-target="#events">\n          <a href="##events">\n           Emitted Events\n          </a>\n         </li>\n         <li data-bs-scrollspy="" data-target="#config">\n          <a href="##config">\n           Custom Configuration\n          </a>\n         </li>\n        </ul>\n        <a class="back-to-top" href="#">\n         Back to top\n        </a>\n       </div>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n  <!-- ngInclude: \'app/views/footer.html\' -->\n  <div class="ng-scope" data-ng-include="\'app/views/footer.html\'">\n   <footer class="bs-docs-footer ng-scope" data-ng-controller="FootControl" role="contentinfo">\n    <div class="container">\n     <div class="bs-docs-social">\n      <ul class="bs-docs-social-buttons">\n       <li class="shield-badge">\n        <a href="//travis-ci.org/#!/doshprompt/angular-localization" target="_blank">\n         <img src="//img.shields.io/travis/doshprompt/angular-localization.svg?style=flat"/>\n         <!-- <img src="//secure.travis-ci.org/doshprompt/angular-localization.svg?branch=master"> -->\n        </a>\n       </li>\n       <li class="shield-badge">\n        <a href="//bower.io/search/?q=angular-localization" target="_blank">\n         <img ng-src="//img.shields.io/badge/bower%20package-1.2.1-brightgreen.svg?style=flat" src="//img.shields.io/badge/bower%20package-1.2.1-brightgreen.svg?style=flat"/>\n         <!-- <img src="//badge.fury.io/bo/angular-localization.svg" alt="Bower version"> -->\n        </a>\n       </li>\n       <li class="shield-badge">\n        <a href="//gittip.com/doshprompt" target="_blank">\n         <img src="//img.shields.io/gittip/doshprompt.svg?style=flat"/>\n        </a>\n       </li>\n       <li class="shield-badge">\n        <a href="//gitter.im/doshprompt/angular-localization" target="_blank">\n         <img src="//img.shields.io/badge/gitter-doshprompt%2Fangular--localization-brightgreen.svg?style=flat"/>\n        </a>\n       </li>\n      </ul>\n     </div>\n     <div class="bs-docs-social">\n      <ul class="bs-docs-social-buttons">\n       <li class="github-btn">\n        <iframe class="github-btn" height="20" src="http://ghbtns.com/github-btn.html?user=doshprompt&amp;repo=angular-localization&amp;type=watch&amp;count=true" title="Star on GitHub" width="100">\n        </iframe>\n       </li>\n       <li class="github-btn">\n        <iframe class="github-btn" height="20" src="http://ghbtns.com/github-btn.html?user=doshprompt&amp;repo=angular-localization&amp;type=fork&amp;count=true" title="Fork on GitHub" width="100">\n        </iframe>\n       </li>\n       <li class="github-btn">\n        <iframe class="github-btn" height="20" src="http://ghbtns.com/github-btn.html?user=doshprompt&amp;type=follow&amp;count=true" title="Follow on GitHub" width="165">\n        </iframe>\n       </li>\n       <li class="twitter-btn">\n        <a class="twitter-share-button" data-hashtags="angular,angularjs,i18n" data-related="angularjs" data-text="Check out #ngLocalize\xe2\x80\x94a complete @angularjs localization module done right!" data-url="http://bit.ly/angular-localization" data-via="doshprompt" href="https://twitter.com/share">\n         Tweet\n        </a>\n       </li>\n       <li class="google-btn">\n        <div id="___plusone_0" style="text-indent: 0px; margin: 0px; padding: 0px; background: transparent; border-style: none; float: none; line-height: normal; font-size: 1px; vertical-align: baseline; display: inline-block; width: 90px; height: 20px;">\n         <iframe data-gapiattached="true" frameborder="0" hspace="0" id="I0_1492315351582" marginheight="0" marginwidth="0" name="I0_1492315351582" ng-non-bindable="" scrolling="no" src="https://apis.google.com/se/0/_/+1/fastbutton?usegapi=1&amp;size=medium&amp;annotation=bubble&amp;origin=http%3A%2F%2Fdoshprompt.github.io&amp;url=http%3A%2F%2Fbit.ly%2Fangular-localization&amp;gsrc=3p&amp;ic=1&amp;jsh=m%3B%2F_%2Fscs%2Fapps-static%2F_%2Fjs%2Fk%3Doz.gapi.en_US.HdvhyCxp9wc.O%2Fm%3D__features__%2Fam%3DAQ%2Frt%3Dj%2Fd%3D1%2Frs%3DAGLTcCPLfzn4Ik3j72jUMX8o_0rWowChyw#_methods=onPlusOne%2C_ready%2C_close%2C_open%2C_resizeMe%2C_renderstart%2Concircled%2Cdrefresh%2Cerefresh%2Conload&amp;id=I0_1492315351582&amp;parent=http%3A%2F%2Fdoshprompt.github.io&amp;pfname=&amp;rpctoken=11795991" style="position: static; top: 0px; width: 90px; margin: 0px; border-style: none; left: 0px; visibility: visible; height: 20px;" tabindex="0" title="+1" vspace="0" width="100%">\n         </iframe>\n        </div>\n       </li>\n      </ul>\n     </div>\n     <p>\n      Designed and built with all the love in the world by\n      <a href="http://twitter.com/doshprompt" target="_blank">\n       @doshprompt\n      </a>\n      .\n     </p>\n     <p>\n      Code licensed under\n      <a href="https://github.com/doshprompt/angular-localization/blob/master/LICENSE" target="_blank">\n       MIT\n      </a>\n      ,\n            documentation under\n      <a href="http://creativecommons.org/licenses/by/3.0/">\n       CC BY 3.0\n      </a>\n      .\n     </p>\n     <ul class="bs-docs-footer-links muted">\n      <li class="ng-binding">\n       Currently 1.2.1\n      </li>\n      <li>\n       \xc2\xb7\n      </li>\n      <li>\n       <a href="https://github.com/doshprompt/angular-localization">\n        GitHub\n       </a>\n      </li>\n      <li>\n       \xc2\xb7\n      </li>\n      <li>\n       <a href="https://github.com/doshprompt/angular-localization/issues?state=open">\n        Issues\n       </a>\n      </li>\n      <li>\n       \xc2\xb7\n      </li>\n      <li>\n       <a href="https://github.com/doshprompt/angular-localization/releases">\n        Releases\n       </a>\n      </li>\n     </ul>\n    </div>\n   </footer>\n  </div>\n  <!-- Bootstrap core JavaScript\n        ================================================== -->\n  <!-- Placed at the end of the document so the pages load faster -->\n  <script async="" src="https://apis.google.com/_/scs/apps-static/_/js/k=oz.gapi.en_US.HdvhyCxp9wc.O/m=auth/exm=plusone/rt=j/sv=1/d=1/ed=1/am=AQ/rs=AGLTcCPLfzn4Ik3j72jUMX8o_0rWowChyw/cb=gapi.loaded_1">\n  </script>\n  <script async="" src="https://apis.google.com/_/scs/apps-static/_/js/k=oz.gapi.en_US.HdvhyCxp9wc.O/m=plusone/rt=j/sv=1/d=1/ed=1/am=AQ/rs=AGLTcCPLfzn4Ik3j72jUMX8o_0rWowChyw/cb=gapi.loaded_0">\n  </script>\n  <script id="twitter-wjs" src="//platform.twitter.com/widgets.js">\n  </script>\n  <script async="" gapi_processed="true" src="//apis.google.com/js/platform.js" type="text/javascript">\n  </script>\n  <script src="assets/js/jquery.min.js">\n  </script>\n  <script src="assets/js/bootstrap.min.js">\n  </script>\n  <script src="assets/js/angular.min.js">\n  </script>\n  <script src="assets/js/angular-sanitize.min.js">\n  </script>\n  <script src="https://rawgit.com/doshprompt/bower-angular-localization/master/angular-localization.js">\n  </script>\n  <script src="assets/js/angular-strap.min.js">\n  </script>\n  <script src="app/declarations.js">\n  </script>\n  <script src="app/controllers/navbar.js">\n  </script>\n  <script src="app/controllers/header.js">\n  </script>\n  <script src="app/controllers/demo.js">\n  </script>\n  <script src="app/controllers/footer.js">\n  </script>\n  <!-- Socials\n        ================================================== -->\n  <script type="text/javascript">\n   (function() {\n                var po = document.createElement(\'script\'); po.type = \'text/javascript\'; po.async = true;\n                po.src = \'//apis.google.com/js/platform.js\';\n                var s = document.getElementsByTagName(\'script\')[0]; s.parentNode.insertBefore(po, s);\n            })();\n\n            !function(d,s,id) {\n                var js,\n                fjs = d.getElementsByTagName(s)[0];\n                if(!d.getElementById(id)) { \n                    js = d.createElement(s);\n                    js.id = id;\n                    js.src = \'//platform.twitter.com/widgets.js\';\n                    fjs.parentNode.insertBefore(js, fjs);\n                }\n            }(document, \'script\', \'twitter-wjs\');\n  </script>\n  <iframe allowfullscreen="true" allowtransparency="true" frameborder="0" id="rufous-sandbox" scrolling="no" style="position: absolute; visibility: hidden; display: none; width: 0px; height: 0px; padding: 0px; border: none;" title="Twitter analytics iframe">\n  </iframe>\n  <iframe aria-hidden="true" id="oauth2relay488890100" name="oauth2relay488890100" src="https://accounts.google.com/o/oauth2/postmessageRelay?parent=http%3A%2F%2Fdoshprompt.github.io&amp;jsh=m%3B%2F_%2Fscs%2Fapps-static%2F_%2Fjs%2Fk%3Doz.gapi.en_US.HdvhyCxp9wc.O%2Fm%3D__features__%2Fam%3DAQ%2Frt%3Dj%2Fd%3D1%2Frs%3DAGLTcCPLfzn4Ik3j72jUMX8o_0rWowChyw#rpctoken=502598478&amp;forcesecure=1" style="width: 1px; height: 1px; position: absolute; top: -100px;" tabindex="-1">\n  </iframe>\n </body>\n</html>'b'<!DOCTYPE html>\n<html lang="en" xmlns="http://www.w3.org/1999/xhtml">\n <head>\n  <style type="text/css">\n   @charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide{display:none !important;}ng\\:form{display:block;}.ng-animate-block-transitions{transition:0s all!important;-webkit-transition:0s all!important;}.ng-hide-add-active,.ng-hide-remove{display:block!important;}\n  </style>\n  <title>\n   ngLocalize Docs\n  </title>\n  <meta charset="utf-8"/>\n  <meta content="IE=edge" http-equiv="X-UA-Compatible"/>\n  <meta content="width=device-width, initial-scale=1" name="viewport"/>\n  <meta content="Documentation for the ngLocalize module, aka angular-localization." name="description"/>\n  <meta content="Rahul Doshi" name="author"/>\n  <!-- social media tags -->\n  <meta content="summary" name="twitter:card"/>\n  <!-- Card type -->\n  <meta content="@doshprompt" name="twitter:site"/>\n  <meta content="ngLocalize Docs" name="twitter:title"/>\n  <meta content="ngLocalize - A complete AngularJS localization service with core service and accompanying filters, directives etc." name="twitter:description"/>\n  <meta content="@doshprompt" name="twitter:creator"/>\n  <meta content="https://a248.e.akamai.net/assets.github.com/images/modules/logos_page/Octocat.png" name="twitter:image:src"/>\n  <meta content="doshprompt.github.io" name="twitter:domain"/>\n  <meta content="ngLocalize Docs" property="og:title"/>\n  <meta content="website" property="og:type"/>\n  <meta content="http://doshprompt.github.io/angular-localization/" property="og:url"/>\n  <meta content="https://a248.e.akamai.net/assets.github.com/images/modules/logos_page/Octocat.png" property="og:image"/>\n  <meta content="ngLocalize - A complete AngularJS localization service with core service and accompanying filters, directives etc." property="og:description"/>\n  <meta content="angular-localization" property="og:site_name"/>\n  <meta content="509585594" property="fb:admins"/>\n  <!-- Bootstrap core CSS -->\n  <link href="assets/css/bootstrap.min.css" rel="stylesheet"/>\n  <link href="assets/css/docs.min.css" rel="stylesheet"/>\n  <link href="assets/css/font-awesome.min.css" rel="stylesheet"/>\n  <link href="assets/css/flags.css" rel="stylesheet"/>\n  <link href="assets/css/custom.css" rel="stylesheet"/>\n  <link href="favicon.ico" rel="shortcut icon" type="image/x-icon"/>\n </head>\n <body class="ng-scope" data-ng-app="ngLocalize.docs">\n  <!-- ngInclude: \'app/views/navbar.html\' -->\n  <div class="ng-scope" data-ng-include="\'app/views/navbar.html\'">\n   <!-- Docs master nav -->\n   <header class="navbar navbar-fixed-top bs-docs-nav ng-scope" data-ng-controller="NavControl" role="banner">\n    <div class="container">\n     <div class="navbar-header">\n      <button class="navbar-toggle" data-target=".bs-navbar-collapse" data-toggle="collapse" type="button">\n       <span class="sr-only">\n        Toggle navigation\n       </span>\n       <span class="icon-bar">\n       </span>\n       <span class="icon-bar">\n       </span>\n       <span class="icon-bar">\n       </span>\n      </button>\n      <a class="navbar-brand" href="#">\n       ngLocalize\n      </a>\n     </div>\n     <nav class="collapse navbar-collapse bs-navbar-collapse" role="navigation">\n      <ul class="nav navbar-nav navbar-right">\n       <li class="dropdown">\n        <a class="dropdown-toggle" data-toggle="dropdown" href="">\n         <i class="flag-us" ng-class="flagClass">\n         </i>\n         <span class="ng-binding">\n          English\n         </span>\n         <b class="caret">\n         </b>\n        </a>\n        <ul class="dropdown-menu">\n         <!-- ngRepeat: lang in supportedLang -->\n         <li class="ng-scope" data-ng-repeat="lang in supportedLang">\n          <a data-target=".bs-navbar-collapse" data-toggle="collapse" href="" ng-click="setLocale(lang)">\n           <i class="flag-us" ng-class="localeData[lang].flagClass">\n           </i>\n           <span class="ng-binding">\n            English\n           </span>\n          </a>\n         </li>\n         <!-- end ngRepeat: lang in supportedLang -->\n         <li class="ng-scope" data-ng-repeat="lang in supportedLang">\n          <a data-target=".bs-navbar-collapse" data-toggle="collapse" href="" ng-click="setLocale(lang)">\n           <i class="flag-fr" ng-class="localeData[lang].flagClass">\n           </i>\n           <span class="ng-binding">\n            Fran\xc3\xa7ais\n           </span>\n          </a>\n         </li>\n         <!-- end ngRepeat: lang in supportedLang -->\n        </ul>\n       </li>\n      </ul>\n     </nav>\n    </div>\n   </header>\n  </div>\n  <!-- ngInclude: \'app/views/mainContent.html\' -->\n  <div class="ng-scope" data-ng-include="\'app/views/mainContent.html\'">\n   <!-- ngInclude: \'app/views/header.html\' -->\n   <div class="ng-scope" data-ng-include="\'app/views/header.html\'">\n    <!-- Page content of course! -->\n    <main class="bs-docs-masthead ng-scope" data-ng-controller="HeadControl" id="content" role="main">\n     <span id="forkongithub">\n      <a href="https://github.com/doshprompt/angular-localization">\n       Fork me on GitHub\n      </a>\n     </span>\n     <div class="container">\n      <span class="bs-docs-booticon bs-docs-booticon-lg bs-docs-booticon-outline">\n       <span class="fa fa-globe fa-lg">\n       </span>\n      </span>\n      <p class="lead">\n       A complete AngularJS localization service with core service and accompanying filters, directives etc.\n      </p>\n      <p class="lead">\n       <a class="btn btn-outline-inverse btn-lg" href="//github.com/doshprompt/angular-localization#getting-started">\n        Download angular-localization\n       </a>\n      </p>\n      <p class="version ng-binding">\n       Currently 1.2.1\n      </p>\n     </div>\n    </main>\n    <!-- <div class="bs-docs-featurette">\n    <div class="container">\n        <h2 class="bs-docs-featurette-title">Site localization example using the <code>ngLocalize</code> module.</h2>\n    </div>\n</div> -->\n    <!-- Docs page layout -->\n    <!-- <div class="bs-docs-header" id="content">\n    <div class="container">\n        <h1>angular-localization</h1>\n        <p>A complete AngularJS localization service with core service and accompanying filters, directives etc.</p>\n    </div>\n</div> -->\n   </div>\n   <div class="container bs-docs-container ng-scope" data-ng-controller="DemoControl">\n    <div class="row">\n     <div class="col-md-10" role="main">\n      <!-- Quickstart\n            ================================================== -->\n      <!-- ngInclude: \'app/views/quickstart.html\' -->\n      <div class="bs-docs-section ng-scope" data-ng-include="\'app/views/quickstart.html\'">\n       <h1 class="page-header ng-scope" id="quickstart">\n        Quickstart\n       </h1>\n       <p class="lead ng-scope">\n        The easiest way to install the ngLocalize module is via\n        <a href="http://bower.io/">\n         Bower\n        </a>\n       </p>\n       <div class="highlight ng-scope">\n        <pre><code class="language-bash" data-lang="bash"><span class="gp">$ </span>bower install angular-localization --save</code></pre>\n       </div>\n       <p class="ng-scope">\n        Two alternative options are available:\n       </p>\n       <ul class="ng-scope">\n        <li>\n         <a href="https://github.com/doshprompt/angular-localization/archive/master.zip">\n          Download the latest release\n         </a>\n         .\n        </li>\n        <li>\n         Clone the repo:\n         <a href="https://github.com/doshprompt/angular-localization.git">\n          git clone https://github.com/doshprompt/angular-localization.git\n         </a>\n         .\n        </li>\n       </ul>\n       <p class="ng-scope">\n        You can then include angular-localization after its dependencies, angular and angular-cookies:\n       </p>\n       <div class="highlight ng-scope">\n        <pre><code class="html"><span class="nt">&lt;script</span> <span class="na">src=</span><span class="s">"bower_components/angular/angular.js"</span>&gt;<span class="nt">&lt;/script&gt;</span>\n<span class="nt">&lt;script</span> <span class="na">src=</span><span class="s">"bower_components/angular-cookies/angular-cookies.js"</span>&gt;<span class="nt">&lt;/script&gt;</span>\n<span class="nt">&lt;script</span> <span class="na">src=</span><span class="s">"bower_components/angular-sanitize/angular-sanitize.js"</span>&gt;<span class="nt">&lt;/script&gt;</span>\n<span class="nt">&lt;script</span> <span class="na">src=</span><span class="s">"bower_components/angular-localization/angular-localization.js"</span>&gt;<span class="nt">&lt;/script&gt;</span></code>\n</pre>\n       </div>\n      </div>\n      <!-- i18n directive\n            ================================================== -->\n      <!-- ngInclude: \'app/views/i18nDirective.html\' -->\n      <div class="bs-docs-section ng-scope" data-ng-include="\'app/views/i18nDirective.html\'">\n       <h1 class="page-header ng-scope" id="i18nDirective">\n        i18n Directive\n       </h1>\n       <p class="lead ng-scope">\n        The localization key can be defined as the value of the\n        <code>\n         i18n\n        </code>\n        attribute.\n    If the attribute value is not a valid token, then it will itself be used as the element\'s content.\n       </p>\n       <div class="bs-callout bs-callout-warning ng-scope">\n        <h4>\n         Attribute localizations cannot contain HTML tags\n        </h4>\n        <p>\n         Localizations defined by the\n         <code>\n          i18n\n         </code>\n         attribute cannot contain HTML tags, as the translation result will be assigned as text, not as HTML.\n        This limitation enables a slightly faster localization, as no sanitization is required.\n        </p>\n       </div>\n       <h3 class="ng-scope" id="i18nDirective-basic">\n        Basic example\n       </h3>\n       <p class="ng-scope">\n        Attach the\n        <code>\n         data-i18n\n        </code>\n        attribute to the element whose text should be localized.\n       </p>\n       <div class="bs-example ng-scope">\n        <div class="panel panel-default">\n         <div class="panel-body" data-i18n="demo.basicExampleText">\n          basic example\n         </div>\n        </div>\n       </div>\n       <div class="highlight ng-scope">\n        <pre><code class="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"panel panel-default"</span><span class="nt">&gt;</span>\n    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"panel-body"</span> <span class="na">data-i18n=</span><span class="s">"demo.basicExampleText"</span><span class="nt">&gt;</span><span class="nt">&lt;/div&gt;</span>\n<span class="nt">&lt;/div&gt;</span></code></pre>\n       </div>\n       <h3 class="ng-scope" id="i18nDirective-dynamic">\n        Dynamic user data\n       </h3>\n       <p class="ng-scope">\n        The i18n directive observes all non-directive\n        <code>\n         data-*\n        </code>\n        attributes.\n       </p>\n       <div class="bs-example ng-scope">\n        <div class="panel panel-default">\n         <div class="panel-body" data-i18n="demo.dynamicExampleText" data-name="Rahul Doshi">\n          Hello Rahul Doshi\n         </div>\n        </div>\n       </div>\n       <div class="highlight ng-scope">\n        <pre><code class="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"panel panel-default"</span><span class="nt">&gt;</span>\n    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"panel-body"</span> <span class="na">data-i18n=</span><span class="s">"demo.dynamicExampleText"</span> <span class="na">data-name=</span><span class="s ng-binding">"Rahul Doshi"</span><span class="nt">&gt;</span><span class="nt">&lt;/div&gt;</span>\n<span class="nt">&lt;/div&gt;</span></code></pre>\n       </div>\n      </div>\n      <!-- i18nAttr directive\n            ================================================== -->\n      <!-- ngInclude: \'app/views/i18nAttrDirective.html\' -->\n      <div class="bs-docs-section ng-scope" data-ng-include="\'app/views/i18nAttrDirective.html\'">\n       <h1 class="page-header anchor ng-scope" id="i18nAttrDirective">\n        i18nAttr Directive\n       </h1>\n       <p class="lead ng-scope">\n        It works the same way as the original\n        <code>\n         i18n\n        </code>\n        directive,\n    but instead of updating the element content,\n    it updates their associated HTML attribute(s).\n       </p>\n       <h3 class="ng-scope" id="i18nAttrDirective-inputs">\n        Input Placeholders\n       </h3>\n       <p class="ng-scope">\n       </p>\n       <div class="bs-example ng-scope">\n        <form class="form-horizontal ng-pristine ng-valid" role="form">\n         <div class="form-group">\n          <label class="col-sm-2 control-label" data-i18n="demo.emailAddress" for="exampleInputEmail">\n           Email Address\n          </label>\n          <div class="col-sm-10">\n           <input class="form-control" data-i18n-attr="{placeholder: \'demo.emailPlaceholder\'}" id="exampleInputEmail" placeholder="Enter Email" type="email"/>\n          </div>\n         </div>\n         <div class="form-group">\n          <label class="col-sm-2 control-label" data-i18n="demo.password" for="exampleInputPassword">\n           Password\n          </label>\n          <div class="col-sm-10">\n           <input class="form-control" data-i18n-attr="{placeholder: \'demo.password\'}" id="exampleInputPassword" placeholder="Password" type="password"/>\n          </div>\n         </div>\n         <div class="form-group">\n          <div class="col-sm-offset-2 col-sm-10">\n           <div class="checkbox">\n            <label class="ng-binding">\n             <input type="checkbox"/>\n             Remember Me\n            </label>\n           </div>\n          </div>\n         </div>\n         <div class="form-group">\n          <div class="col-sm-offset-2 col-sm-10">\n           <button class="btn btn-default" data-i18n="demo.submit" type="submit">\n            Submit\n           </button>\n          </div>\n         </div>\n        </form>\n       </div>\n       <!-- /.bs-example -->\n       <div class="highlight ng-scope">\n        <pre><code class="html"><span class="nt">&lt;form</span> <span class="na">class=</span><span class="s">"form-horizontal"</span> <span class="na">role=</span><span class="s">"form"</span><span class="nt">&gt;</span>\n    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"form-group"</span><span class="nt">&gt;</span>\n        <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"exampleInputEmail"</span> <span class="na">class=</span><span class="s">"col-sm-2 control-label"</span> <span class="na">data-i18n=</span><span class="s">"demo.emailAddress"</span><span class="nt">&gt;</span><span class="nt">&lt;/label&gt;</span>\n        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-sm-10"</span><span class="nt">&gt;</span>\n            <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"email"</span> <span class="na">class=</span><span class="s">"form-control"</span> <span class="na">id=</span><span class="s">"exampleInputEmail"</span> <span class="na">data-i18n-attr=</span><span class="s">"{placeholder: \'demo.emailPlaceholder\'}"</span><span class="nt">&gt;</span>\n        <span class="nt">&lt;/div&gt;</span>\n    <span class="nt">&lt;/div&gt;</span>\n    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"form-group"</span><span class="nt">&gt;</span>\n        <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"exampleInputPassword"</span> <span class="na">class=</span><span class="s">"col-sm-2 control-label"</span> <span class="na">data-i18n=</span><span class="s">"demo.password"</span><span class="nt">&gt;</span><span class="nt">&lt;/label&gt;</span>\n        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-sm-10"</span><span class="nt">&gt;</span>\n            <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"password"</span> <span class="na">class=</span><span class="s">"form-control"</span> <span class="na">id=</span><span class="s">"exampleInputPassword"</span> <span class="na">data-i18n-attr=</span><span class="s">"{placeholder: \'demo.password\'}"</span><span class="nt">&gt;</span>\n        <span class="nt">&lt;/div&gt;</span>\n    <span class="nt">&lt;/div&gt;</span>\n    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"form-group"</span><span class="nt">&gt;</span>\n        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-sm-offset-2 col-sm-10"</span><span class="nt">&gt;</span>\n            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"checkbox"</span><span class="nt">&gt;</span>\n                <span class="nt">&lt;label&gt;</span>\n                    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"checkbox"</span><span class="nt">&gt;</span>\n                    <span>{{</span> <span>\'demo.rememberMe\' | i18n</span> <span>}}</span>\n                <span class="nt">&lt;/label&gt;</span>\n            <span class="nt">&lt;/div&gt;</span>\n        <span class="nt">&lt;/div&gt;</span>\n    <span class="nt">&lt;/div&gt;</span>\n    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"form-group"</span><span class="nt">&gt;</span>\n        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-sm-offset-2 col-sm-10"</span><span class="nt">&gt;</span>\n            <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"submit"</span> <span class="na">class=</span><span class="s">"btn btn-default"</span> <span class="na">data-i18n=</span><span class="s">"demo.submit"</span><span class="nt">&gt;</span><span class="nt">&lt;/button&gt;</span>\n        <span class="nt">&lt;/div&gt;</span>\n    <span class="nt">&lt;/div&gt;</span>\n<span class="nt">&lt;/form&gt;</span></code></pre>\n       </div>\n       <div class="bs-callout bs-callout-info ng-scope">\n        <h4>\n         Form data will remain when changing languages\n        </h4>\n        <p>\n         Your form data will remain intact when switching back and forth between languages.\n        The page does not and never will refresh because all changes are handled in place.\n        So what are you waiting for \xe2\x80\x94 go ahead and try it out!\n        </p>\n       </div>\n      </div>\n      <!-- locale service\n            ================================================== -->\n      <!-- ngInclude: \'app/views/localeService.html\' -->\n      <div class="bs-docs-section ng-scope" data-ng-include="\'app/views/localeService.html\'">\n       <h1 class="page-header ng-scope" id="localeService">\n        locale Service\n       </h1>\n       <p class="lead ng-scope">\n        The\n        <code>\n         locale\n        </code>\n        service is equivalent to the\n        <code>\n         i18n\n        </code>\n        directive in all aspects and can be used to generate localized results in situations where the directive cannot be used.\n       </p>\n       <div class="bs-callout bs-callout-danger ng-scope">\n        <h4>\n         Race conditions\n        </h4>\n        <p>\n         Always use\n         <code>\n          locale.ready()\n         </code>\n         passing in the filename(s) in which the token(s) exists in that context, \n        and enclose any other relevant calls to\n         <code>\n          locale.getString()\n         </code>\n         within this promise\'s callback function block.\n        Failure to do so may cause unexpected (empty) results due to the asynchronous nature of your entire JavaScript application.\n        </p>\n        <p>\n         You may use\n         <code>\n          locale.getPath()\n         </code>\n         to find the filename for any given token.\n        </p>\n       </div>\n       <h3 class="ng-scope" id="localeService-within">\n        Within locale.ready\n       </h3>\n       <p class="ng-scope">\n        Wrap in a call to\n        <code>\n         locale.ready()\n        </code>\n        to ensure that the value will be updated if and only if the filepath has been loaded into memory.\n       </p>\n       <div class="highlight ng-scope">\n        <pre><code class="js"><span class="nx">locale.ready</span><span class="p">(</span><span class="nb"><span class="s1">\'common\'</span></span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="nb">function</span><span class="p">() {</span>\n    <span class="nx">$scope.strings.yes = </span><span class="nx">locale.getString</span><span class="p">(</span><span class="nb"><span class="s1">\'common.yes\'</span></span><span class="p">);</span>\n<span class="p">});</span></code></pre>\n       </div>\n       <div class="bs-example ng-scope">\n        <div class="dropdown clearfix">\n         <button class="btn dropdown-toggle sr-only" data-toggle="dropdown" id="dropdownMenu1" type="button">\n          Dropdown\n          <span class="caret">\n          </span>\n         </button>\n         <ul aria-labelledby="dropdownMenu1" class="dropdown-menu" role="menu">\n          <li role="presentation">\n           <a class="ng-binding" href="#" role="menuitem" tabindex="-1">\n            Yes\n           </a>\n          </li>\n         </ul>\n        </div>\n       </div>\n       <!-- /example -->\n       <div class="highlight ng-scope">\n        <pre><code class="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"dropdown"</span><span class="nt">&gt;</span>\n    <span class="nt">&lt;button</span> <span class="na">class=</span><span class="s">"btn dropdown-toggle sr-only"</span> <span class="na">type=</span><span class="s">"button"</span> <span class="na">id=</span><span class="s">"dropdownMenu1"</span> <span class="na">data-toggle=</span><span class="s">"dropdown"</span><span class="nt">&gt;</span>\nDropdown\n        <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"caret"</span><span class="nt">&gt;&lt;/span&gt;</span>\n    <span class="nt">&lt;/button&gt;</span>\n    <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">"dropdown-menu"</span> <span class="na">role=</span><span class="s">"menu"</span> <span class="na">aria-labelledby=</span><span class="s">"dropdownMenu1"</span><span class="nt">&gt;</span>\n        <span class="nt">&lt;li</span> <span class="na">role=</span><span class="s">"presentation"</span><span class="nt">&gt;&lt;a</span> <span class="na">role=</span><span class="s">"menuitem"</span> <span class="na">tabindex=</span><span class="s">"-1"</span> <span class="na">href=</span><span class="s">"#"</span><span class="nt">&gt;</span><span>{{</span> <span>strings.yes</span> <span>}}</span><span class="nt">&lt;/a&gt;&lt;/li&gt;</span>\n    <span class="nt">&lt;/ul&gt;</span>\n<span class="nt">&lt;/div&gt;</span></code></pre>\n       </div>\n       <h3 class="ng-scope" id="localeService-without">\n        Without locale.ready\n       </h3>\n       <p class="ng-scope">\n        Missing\n        <code>\n         locale.ready()\n        </code>\n        causes the value to be updated immediately, before the service has time to fetch the file.\n       </p>\n       <div class="highlight ng-scope">\n        <pre><code class="js"><span class="nx">$scope.strings = {</span>\n    <span class="nx">no: locale.getString</span><span class="p">(</span><span class="nb"><span class="s1">\'common.no\'</span></span><span class="p">)</span>\n<span class="p">};</span></code></pre>\n       </div>\n       <div class="bs-example ng-scope">\n        <div class="dropdown clearfix">\n         <button class="btn dropdown-toggle sr-only" data-toggle="dropdown" id="dropdownMenu2" type="button">\n          Dropdown\n          <span class="caret">\n          </span>\n         </button>\n         <ul aria-labelledby="dropdownMenu2" class="dropdown-menu" role="menu">\n          <li role="presentation">\n           <a class="ng-binding" href="#" role="menuitem" tabindex="-1">\n           </a>\n          </li>\n         </ul>\n        </div>\n       </div>\n       <!-- /example -->\n       <div class="highlight ng-scope">\n        <pre><code class="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"dropdown"</span><span class="nt">&gt;</span>\n    <span class="nt">&lt;button</span> <span class="na">class=</span><span class="s">"btn dropdown-toggle sr-only"</span> <span class="na">type=</span><span class="s">"button"</span> <span class="na">id=</span><span class="s">"dropdownMenu1"</span> <span class="na">data-toggle=</span><span class="s">"dropdown"</span><span class="nt">&gt;</span>\nDropdown\n        <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"caret"</span><span class="nt">&gt;&lt;/span&gt;</span>\n    <span class="nt">&lt;/button&gt;</span>\n    <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">"dropdown-menu"</span> <span class="na">role=</span><span class="s">"menu"</span> <span class="na">aria-labelledby=</span><span class="s">"dropdownMenu1"</span><span class="nt">&gt;</span>\n        <span class="nt">&lt;li</span> <span class="na">role=</span><span class="s">"presentation"</span><span class="nt">&gt;&lt;a</span> <span class="na">role=</span><span class="s">"menuitem"</span> <span class="na">tabindex=</span><span class="s">"-1"</span> <span class="na">href=</span><span class="s">"#"</span><span class="nt">&gt;</span><span>{{</span> <span>strings.no</span> <span>}}</span><span class="nt">&lt;/a&gt;&lt;/li&gt;</span>\n    <span class="nt">&lt;/ul&gt;</span>\n<span class="nt">&lt;/div&gt;</span></code></pre>\n       </div>\n      </div>\n      <!-- i18n filter\n            ================================================== -->\n      <!-- ngInclude: \'app/views/i18nFilter.html\' -->\n      <div class="bs-docs-section ng-scope" data-ng-include="\'app/views/i18nFilter.html\'">\n       <h1 class="page-header ng-scope" id="i18nFilter">\n        i18n Filter\n       </h1>\n       <p class="lead ng-scope">\n        The\n        <code>\n         i18n\n        </code>\n        filter provides the same functionality as the service.\n    It can be useful in templates where the localization strings are dynamic, e.g. for error messages\n       </p>\n       <h3 class="ng-scope" id="i18nFilter-simple">\n        Simple Example\n       </h3>\n       <p class="ng-scope">\n        Pipe a generated error message to be processed.\n       </p>\n       <div class="bs-example ng-scope">\n        <div class="alert alert-danger ng-binding">\n         <span class="glyphicon glyphicon-remove">\n         </span>\n         file not found :(\n        </div>\n       </div>\n       <div class="highlight ng-scope">\n        <pre><code class="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"alert alert-danger"</span><span class="nt">&gt;</span>\n    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"glyphicon glyphicon-remove"</span><span class="nt">&gt;</span><span class="nt">&lt;/span&gt;</span>\n    <span>{{</span> <span>messages.error | i18n<span> <span>}}</span>\n<span class="nt">&lt;/div&gt;</span></span></span></code></pre>\n       </div>\n       <h3 class="ng-scope" id="i18nFilter-args">\n        Parameterized Arguments\n       </h3>\n       <p class="ng-scope">\n        Give it an array, map (object) or even a single string\n       </p>\n       <div class="bs-example ng-scope">\n        <div class="alert alert-danger ng-binding">\n         <span class="glyphicon glyphicon-remove">\n         </span>\n         test.json not found \xe2\x80\x94 no longer a generic error message :)\n        </div>\n        <div class="alert alert-success ng-binding">\n         <span class="glyphicon glyphicon-ok">\n         </span>\n         Running 5 tests ... encountered 0 failures!\n        </div>\n        <div class="alert alert-info ng-binding">\n         \xc2\xa9 2017 Rahul Doshi\n        </div>\n        <div class="alert alert-info ng-binding">\n         <span class="glyphicon glyphicon-info-sign">\n         </span>\n         Currently 1.2.1\n        </div>\n       </div>\n       <div class="highlight ng-scope">\n        <pre><code class="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"alert alert-danger"</span><span class="nt">&gt;</span>\n    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"glyphicon glyphicon-remove"</span><span class="nt">&gt;</span><span class="nt">&lt;/span&gt;</span>\n    <span>{{</span> <span>messages.targeted | i18n:\'test.json\'<span> <span>}}</span>\n<span class="nt">&lt;/div&gt;</span>\n<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"alert alert-success"</span><span class="nt">&gt;</span>\n    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"glyphicon glyphicon-ok"</span><span class="nt">&gt;</span><span class="nt">&lt;/span&gt;</span>\n    <span>{{</span> <span>messages.tests | i18n:filtArgs.tests<span> <span>}}</span>\n<span class="nt">&lt;/div&gt;</span>\n<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"alert alert-info"</span><span class="nt">&gt;</span>\n    <span>{{</span> <span>messages.copyright | i18n:filtArgs.copyright<span> <span>}}</span>\n<span class="nt">&lt;/div&gt;</span>\n<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"alert alert-info"</span><span class="nt">&gt;</span>\n    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"glyphicon glyphicon-info-sign"</span><span class="nt">&gt;</span><span class="nt">&lt;/span&gt;</span>\n    <span>{{</span> <span>messages.version | i18n:filtArgs.version<span> <span>}}</span>\n<span class="nt">&lt;/div&gt;</span></span></span></span></span></span></span></span></span></code></pre>\n       </div>\n       <h3 class="ng-scope" id="i18nFilter-special">\n        Special Use-case\n       </h3>\n       <p class="ng-scope">\n        Use a delimiter when it is not possible to follow the standardized conventional syntax for passing in additional information.\n    Because of the way that is has been designed, it will not work in markup and must be called programatically i.e. either\n        <code>\n         locale.getString()\n        </code>\n        or\n        <code>\n         $filter(\'i18n\')\n        </code>\n        and the string following the separator has to be valid JSON formatted.\n       </p>\n       <div class="bs-example ng-scope">\n        <div class="alert alert-danger ng-binding">\n         <span class="glyphicon glyphicon-remove">\n         </span>\n         test.json not found \xe2\x80\x94 no longer a generic error message :)\n        </div>\n        <div class="alert alert-success ng-binding">\n         <span class="glyphicon glyphicon-ok">\n         </span>\n         Running 5 tests ... encountered 0 failures!\n        </div>\n        <div class="alert alert-info ng-binding">\n         \xc2\xa9 2017 Rahul Doshi\n        </div>\n        <div class="alert alert-info ng-binding">\n         <span class="glyphicon glyphicon-info-sign">\n         </span>\n         Currently 1.2.1\n        </div>\n       </div>\n       <div class="highlight ng-scope">\n        <pre><code class="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"alert alert-danger"</span><span class="nt">&gt;</span>\n    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"glyphicon glyphicon-remove"</span><span class="nt">&gt;</span><span class="nt">&lt;/span&gt;</span>\n    <span>{{</span> <span>specials.targeted<span> <span>}}</span>\n<span class="nt">&lt;/div&gt;</span>\n<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"alert alert-success"</span><span class="nt">&gt;</span>\n    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"glyphicon glyphicon-ok"</span><span class="nt">&gt;</span><span class="nt">&lt;/span&gt;</span>\n    <span>{{</span> <span>specials.tests<span> <span>}}</span>\n<span class="nt">&lt;/div&gt;</span>\n<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"alert alert-info"</span><span class="nt">&gt;</span>\n    <span>{{</span> <span>specials.copyright<span> <span>}}</span>\n<span class="nt">&lt;/div&gt;</span>\n<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"alert alert-info"</span><span class="nt">&gt;</span>\n    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"glyphicon glyphicon-info-sign"</span><span class="nt">&gt;</span><span class="nt">&lt;/span&gt;</span>\n    <span>{{</span> <span>specials.version<span> <span>}}</span>\n<span class="nt">&lt;/div&gt;</span></span></span></span></span></span></span></span></span></code></pre>\n       </div>\n      </div>\n      <!-- Using with ngPluralize\n            ================================================== -->\n      <div class="bs-docs-section">\n       <h1 id="ngLocalize-ngPluralize">\n        Using ngPluralize\n       </h1>\n       <p class="lead">\n        Partially compatible with native ngPluralize directive.\n       </p>\n       <div class="highlight">\n        <pre><code class="js"><span class="nx">$scope.pluralization</span> <span class="o">=</span> <span class="p">{</span>\n    <span class="nx">numCount:</span> <span class="s1">1</span>\n<span class="p">};</span></code></pre>\n       </div>\n       <div class="bs-example">\n        <div class="form-group">\n         <input class="form-control ng-pristine ng-valid ng-valid-number ng-valid-min" data-i18n-attr="{placeholder: \'demo.numberPrompt\'}" data-ng-model="pluralization.numCount" min="0" placeholder="Please enter a number" type="number"/>\n        </div>\n        <div class="alert alert-warning">\n         <span class="glyphicon glyphicon-question-sign">\n         </span>\n         <span data-count="pluralization.numCount" data-ng-pluralize="" data-when="{ \'0\': \'Nobody is viewing.\', \'1\': \'A person is viewing.\', \'other\': \'Lots of people are watching.\' }">\n          A person is viewing.\n         </span>\n        </div>\n       </div>\n       <div class="highlight">\n        <pre><code class="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"form-group"</span><span class="nt">&gt;</span>\n    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"number"</span> <span class="na">min=</span><span class="s">"0"</span> <span class="na">class=</span><span class="s">"form-control"</span> <span class="na">data-ng-model=</span><span class="s">"pluralization.numCount"</span> <span class="na">data-i18n-attr=</span><span class="s">"{placeholder: \'demo.numberPrompt\'}"</span><span class="nt">&gt;</span>\n    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"alert alert-warning"</span><span class="nt">&gt;</span>\n        <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"glyphicon glyphicon-question-sign"</span><span class="nt">&gt;</span><span class="nt">&lt;/span&gt;</span>\n        <span class="nt">&lt;span</span> <span class="na">data-ng-pluralize</span> <span class="na">data-count=</span><span class="s">"pluralization.numCount"</span> <span class="na">data-when=</span><span class="s">"{ \'0\': \'<span>{{</span> pluralization.options.zero | i18n <span>}}</span>\', \'1\': \'<span>{{</span> pluralization.options.one | i18n <span>}}</span>\', \'other\': \'<span>{{</span> pluralization.options.many | i18n <span>}}</span>\' }"</span> <span class="nt">&gt;</span><span class="nt">&lt;/span&gt;</span>\n    <span class="nt">&lt;/div&gt;</span>\n<span class="nt">&lt;/div&gt;</span></code></pre>\n       </div>\n       <div class="bs-callout bs-callout-warning">\n        <h4>\n         Limitations\n        </h4>\n        <p>\n         Full compatibility cannot be reached due to limitations of the ng-framework.\n                        Right now it is impossible to place the\n         <code>\n          data-count\n         </code>\n         attribute anywhere in the resultant string.\n                        There exists a known workaround using\n         <code>\n          $filter(\'i18n\')\n         </code>\n         or\n         <code>\n          locale.getString()\n         </code>\n         directly in your controller or else you could expose a\n         <code>\n          getPlurals()\n         </code>\n         function to the\n         <code>\n          ngPluralize\n         </code>\n         directive.\n                        The newly created function should internally address the value of\n         <code>\n          count\n         </code>\n         .\n        </p>\n        <p>\n         This is somewhat wieldy and cumbersome as it requires you to track offsets manually,\n                        the same can also be achieved thru the\n         <code>\n          i18n\n         </code>\n         directive albeit with one extra degree of complexity; the caveat being that of interpolation along with\n         <code>\n          $watchers\n         </code>\n         and/or\n         <code>\n          ng-bind\n         </code>\n        </p>\n        <p>\n         In such situations it is good to note that\n         <code>\n          locale.ready()\n         </code>\n         is not mandatory as angular\'s page\n         <code>\n          $digest\n         </code>\n         cycle will fire periodically and take care of it for you.\n        </p>\n        <p>\n         Also, strings may not be passed to the\n         <code>\n          i18n\n         </code>\n         filter(s) of the\n         <code>\n          ngPluralize\n         </code>\n         directive as is, in the markup.\n        </p>\n       </div>\n       <div class="highlight">\n        <pre><code class="js"><span class="nx">$scope.pluralization</span> <span clas="o">=</span> <span class="p">{</span>\n    <span class="nx">numCount:</span> <span class="s1">1</span>\n    <span class="nx">options:</span> <span class="p">{</span>\n        <span class="nx">zero:</span> <span class="s1">\'plurals.zeroPluralized\'</span>,\n        <span class="nx">one: <span class="s1">\'plurals.onePluralized\'</span>,\n        <span class="nx">many: <span class="s1">\'plurals.manyPluralized\'</span>\n    <span class="p">},</span>\n    <span class="nb">getPlural</span><span class="nb">:</span> <span class="kd">function</span> <span class="p">() {</span>\n        <span class="kd">var</span> <span class="nx">n</span> <span class="o">=</span> <span class="nx">$scope.pluralization.numCount</span> <span class="p">,</span>\n            <span class="nx">s</span><span class="p">;</span>\n        <span class="k">switch</span> <span class="p">(</span><span class="nx">n</span><span class="p">) {</span>\n        <span class="k">case</span> <span class="nb">null</span><span class="p">:</span>\n        <span class="k">case</span> <span class="nb">undefined</span><span class="p">:</span>\n        <span class="k">case</span> <span class="nb">0</span><span class="p">:</span>\n            <span class="nx">s</span> <span class="o">=</span> <span class="nx">$scope.pluralization.options.zero</span><span class="p">;</span>\n            <span class="k">break</span><span class="p">;</span>\n        <span class="k">case</span> <span class="nb">1</span>:\n            <span class="nx">s</span> <span class="o">=</span> <span class="s1">\'plurals.onePluralizedNum::\'</span> <span class="p">+</span> <span class="nx">n</span><span class="p">;</span>\n            <span class="k">break</span><span class="p">;</span>\n        <span class="k">default</span><span class="p">:</span>\n            <span class="nx">s</span> <span class="o">=</span> <span class="s1">\'plurals.manyPluralizedNum::\'</span> <span class="p">+</span> <span class="nx">n</span><span class="p">;</span>\n            <span class="k">break</span><span class="p">;</span>\n        <span class="p">}</span>\n        <span class="kd">return</span> <span class="nx">s</span><span class="p">;</span>\n    <span class="p">},</span>\n    <span class="nb">getPlurals</span><span class="nb">:</span> <span class="kd">function</span> <span class="p">() {</span>\n        <span class="kd">var</span> <span class="nx">n</span> <span class="o">=</span> <span class="nx">$scope.pluralization.numCount</span> <span class="p">,</span>\n            <span class="nx">s</span><span class="p">;</span>\n        <span class="k">switch</span> <span class="p">(</span><span class="nx">n</span><span class="p">) {</span>\n        <span class="k">case</span> <span class="nb">null</span><span class="p">:</span>\n        <span class="k">case</span> <span class="nb">undefined</span><span class="p">:</span>\n            <span class="nx">s</span> <span class="o">=</span> <span class="s1">\'\'</span><span class="p">;</span>\n            <span class="k">break</span><span class="p">;</span>\n        <span class="k">case</span> <span class="nb">0</span>:\n            <span class="nx">s</span> <span class="o">=</span> <span class="nx">$filter</span><span class="p">(<span class="s1">\'i18n\'</span><span class="p">)</span><span class="p">(<span class="nx">$scope.pluralization.options.zero</span><span class="p">)</span><span class="p">;</span>\n            <span class="k">break</span><span class="p">;</span>\n        <span class="k">case</span> <span class="nb">1</span>:\n            <span class="nx">s</span> <span class="o">=</span> <span class="nx">$filter</span><span class="p">(<span class="s1">\'i18n\'</span><span class="p">)</span><span class="p">(<span class="s1">\'plurals.onePluralizedNum\'</span><span class="p">,</span> <span class="nx">n</span><span class="p">)</span><span class="p">;</span>\n            <span class="k">break</span><span class="p">;</span>\n        <span class="k">default</span><span class="p">:</span>\n            <span class="nx">s</span> <span class="o">=</span> <span class="nx">$filter</span><span class="p">(<span class="s1">\'i18n\'</span><span class="p">)</span><span class="p">(<span class="s1">\'plurals.ManyPluralizedNum\'</span><span class="p">,</span> <span class="nx">n</span><span class="p">)</span><span class="p">;</span>\n            <span class="k">break</span><span class="p">;</span>\n        <span class="p">}</span>\n        <span class="kd">return</span> <span class="nx">s</span><span class="p">;</span>\n    <span class="p">},</span>\n    <span class="nb">getWithOffs</span><span class="nb">:</span> <span class="kd">function</span> <span class="p">() {</span>\n        <span class="kd">var</span> <span class="nx">n</span> <span class="o">=</span> <span class="nx">$scope.pluralization.numCount</span> <span class="p">,</span>\n            <span class="nx">s</span><span class="p">;</span>\n        <span class="k">switch</span> <span class="p">(</span><span class="nx">n</span><span class="p">) {</span>\n        <span class="k">case</span> <span class="nb">0</span>:\n            <span class="nx">s</span> <span class="o">=</span> <span class="nx">$scope.pluralization.options.zero</span><span class="p">;</span>\n            <span class="k">break</span><span class="p">;</span>\n        <span class="k">case</span> <span class="nb">1</span>:\n            <span class="nx">s</span> <span class="o">=</span> <span class="s1">\'plurals.onePluralizedOfs\'</span><span class="p">;</span>\n            <span class="k">break</span><span class="p">;</span>\n        <span class="k">case</span> <span class="nb">2</span>:\n            <span class="nx">s</span> <span class="o">=</span> <span class="nx">locale.getString</span><span class="p">(</span><span class="s1">\'plurals.twoPluralizedOfs\'</span><span class="p">,</span> <span class="nx">$scope.user.name</span><span class="p">);</span>\n            <span class="k">break</span><span class="p">;</span>\n        <span class="k">case</span> <span class="nb">3</span>:\n            <span class="nx">s</span> <span class="o">=</span> <span class="nx">locale.getString</span><span class="p">(</span><span class="s1">\'plurals.threePluralizedOfs\'</span><span class="p">,</span> <span class="nx">$scope.user.name</span><span class="p">);</span>\n            <span class="k">break</span><span class="p">;</span>\n        <span class="k">default</span>:\n            <span class="nx">s</span> <span class="o">=</span> <span class="nx">locale.getString</span><span class="p">(</span><span class="s1">\'plurals.morePluralizedOfs\'</span><span class="p">,</span> <span class="p">[</span><span class="nx">$scope.user.name</span><span class="p">, (</span><span class="nx">n <span class="p">-</span> <span class="nx">2</span><span class="p">)]);</span>\n            <span class="k">break</span><span class="p">;</span>\n        <span class="p">}</span>\n        <span class="kd">return</span> <span class="nx">s</span><span class="p">;</span>\n    <span class="p">}</span>\n<span class="p">};</span></span></span></span></span></span></span></span></span></span></code></pre>\n       </div>\n       <div class="bs-example">\n        <div class="form-group">\n         <input class="form-control ng-pristine ng-valid ng-valid-number ng-valid-min" data-i18n-attr="{placeholder: \'demo.numberPrompt\'}" data-ng-model="pluralization.numCount" min="0" placeholder="Please enter a number" type="number"/>\n        </div>\n        <div class="alert alert-warning">\n         <span class="glyphicon glyphicon-warning-sign">\n         </span>\n         <span data-i18n="plurals.onePluralizedNum::1">\n          1 person is viewing.\n         </span>\n        </div>\n        <div class="alert alert-warning">\n         <span class="glyphicon glyphicon-warning-sign">\n         </span>\n         <span class="ng-binding" data-ng-bind="pluralization.getPlurals()">\n          1 person is viewing.\n         </span>\n        </div>\n        <div class="alert alert-warning">\n         <span class="glyphicon glyphicon-warning-sign">\n         </span>\n         <ng-pluralize data-count="pluralization.numCount" data-offset="2" data-when="{ \'0\': \'You are viewing.\', \'1\': \'You are viewing.\', \'2\': \'plurals.onePluralizedOfs\', \'one\': \'plurals.onePluralizedOfs\', \'other\': \'plurals.onePluralizedOfs\' }">\n          You are viewing.\n         </ng-pluralize>\n        </div>\n       </div>\n       <div class="highlight">\n        <pre><code class="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"form-group"</span><span class="nt">&gt;</span>\n    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"number"</span> <span class="na">min=</span><span class="s">"0"</span> <span class="na">class=</span><span class="s">"form-control"</span> <span class="na">data-ng-model=</span><span class="s">"pluralization.numCount"</span> <span class="na">data-i18n-attr=</span><span class="s">"{placeholder: \'demo.numberPrompt\'}"</span><span class="nt">&gt;</span>\n    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"alert alert-warning"</span><span class="nt">&gt;</span>\n        <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"glyphicon glyphicon-warning-sign"</span><span class="nt">&gt;</span><span class="nt">&lt;/span&gt;</span>\n        <span class="nt">&lt;span</span> <span class="na">data-i18n=</span><span class="s">"<span>{{</span> pluralization.getPlural() <span>}}</span>"</span><span class="nt">&lt;/span&gt;</span>\n    <span class="nt">&lt;/div&gt;</span>\n    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"alert alert-warning"</span><span class="nt">&gt;</span>\n        <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"glyphicon glyphicon-warning-sign"</span><span class="nt">&gt;</span><span class="nt">&lt;/span&gt;</span>\n        <span class="nt">&lt;span</span> <span class="na">data-ng-bind=</span><span class="s">"pluralization.getPlurals()"</span><span class="nt">&lt;/span&gt;</span>\n    <span class="nt">&lt;/div&gt;</span>\n    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"alert alert-warning"</span><span class="nt">&gt;</span>\n        <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"glyphicon glyphicon-question-sign"</span><span class="nt">&gt;</span><span class="nt">&lt;/span&gt;</span>\n        <span class="nt">&lt;ng-pluralize</span> <span class="na">data-count=</span><span class="s">"pluralization.numCount"</span> <span class="na">data-offset=</span><span class="s">"2"</span> <span class="na">data-when=</span><span class="s">"{ \'0\': \'<span>{{</span> pluralization.getWithOffs() | i18n <span>}}</span>\', \'1\': \'<span>{{</span> pluralization.getWithOffs() | i18n <span>}}</span>\', \'2\': \'<span>{{</span> pluralization.getWithOffs() <span>}}</span>\', \'one\': \'<span>{{</span> pluralization.getWithOffs() <span>}}</span>\', \'other\': \'<span>{{</span> pluralization.getWithOffs() <span>}}</span>\' }"</span> <span class="nt">&gt;</span><span class="nt">&lt;/ng-pluralize&gt;</span>\n    <span class="nt">&lt;/div&gt;</span>\n<span class="nt">&lt;/div&gt;</span></code></pre>\n       </div>\n      </div>\n      <!-- Events Emitted\n            ================================================== -->\n      <!-- ngInclude: \'app/views/eventsEmitted.html\' -->\n      <div class="bs-docs-section ng-scope" data-ng-include="\'app/views/eventsEmitted.html\'">\n       <h1 class="page-header ng-scope" id="events">\n        Events Emitted\n       </h1>\n       <p class="lead ng-scope">\n        The base service exposes certain events which may be listened to, captured and acted upon.\n    There are part of the\n        <code>\n         ngLocalize.Events\n        </code>\n        module\n    which must first be injected as a dependency either at the application-level or in your controller/services enclosing module.\n    Since these are emitted by\n        <code>\n         $rootScope\n        </code>\n        they are available to all descendent\n        <code>\n         $scopes\n        </code>\n        in controllers, services and/or directives.\n       </p>\n       <h3 class="ng-scope" id="events-updates">\n        On Resource Updates\n       </h3>\n       <p class="ng-scope">\n        You must listen for\n        <code>\n         localeEvents.resourceUpdates\n        </code>\n        .\n       </p>\n       <div class="highlight ng-scope">\n        <pre><code class="js"><span class="nx">angular.module</span><span class="p">(</span><span class="nb"><span class="s1">\'docs.demo.myModule\'</span></span>, <span class="p">[</span><span class="nb"><span class="s1">\'ngLocalize.Events\'</span></span><span class="p">])</span>\n    <span class="nx">.controller</span><span class="p">(</span><span class="nb"><span class="s1">\'demoControl\'</span></span>, <span class="p">[</span><span class="nb"><span class="s1">\'localeVersion\'</span></span>,\n        <span class="nb">function</span><span class="p">() {</span>\n            <span class="nx">$scope.$on</span><span class="p">(</span><span class="nb"><span class="nb">localeEvents.resourceUpdates</span>, <span class="kd">function</span> </span><span class="p">() {</span>\n                <span class="nx">console.info<span class="p">(</span><span class="s1">\'ngLocalize: A resource was recently updated.\'</span><span class="p">)</span></span>\n            <span class="p">});</span>\n        <span class="p">}</span>\n    <span class="p">]);</span></code></pre>\n       </div>\n       <h3 class="ng-scope" id="events-changes">\n        On Locale Changes\n       </h3>\n       <p class="ng-scope">\n        Triggered by\n        <code>\n         localeEvents.localeChanges\n        </code>\n        .\n       </p>\n       <div class="highlight ng-scope">\n        <pre><code class="js"><span class="nx">angular.module</span><span class="p">(</span><span class="nb"><span class="s1">\'docs.demo.yetAnotherModule\'</span></span>, <span class="p">[</span><span class="nb"><span class="s1">\'ngLocalize.Events\'</span></span><span class="p">])</span>\n    <span class="nx">.controller</span><span class="p">(</span><span class="nb"><span class="s1">\'docsControl\'</span></span>, <span class="p">[</span><span class="nb"><span class="s1">\'localeVersion\'</span></span>,\n        <span class="nb">function</span><span class="p">() {</span>\n            <span class="nx">$scope.$on</span><span class="p">(</span><span class="nb"><span class="nb">localeEvents.localeChanges</span>, <span class="kd">function</span> </span><span class="p">(</span><span class="nb">newLocale</span><span class="p">) {</span>\n                <span class="nx">console.info<span class="p">(</span><span class="s1">\'ngLocalize: Locale Changed to \'</span>  <span class="nx">+ newLocale</span><span class="p">)</span></span>\n            <span class="p">});</span>\n        <span class="p">}</span>\n    <span class="p">]);</span></code></pre>\n       </div>\n      </div>\n      <!-- Custom Configuration\n            ================================================== -->\n      <!-- ngInclude: \'app/views/configurations.html\' -->\n      <div class="bs-docs-section ng-scope" data-ng-include="\'app/views/configurations.html\'">\n       <h1 class="page-header ng-scope" id="config">\n        Custom Configuration\n       </h1>\n       <p class="lead ng-scope">\n        All overridable configuration options are part of\n        <code>\n         localeConf\n        </code>\n        within the\n        <code>\n         ngLocalize.Config\n        </code>\n        module.\n    This has been done to achieve maximum compatibility and configurability\n    with all new as well as any existing small-medium-large-scale applications.\n       </p>\n       <h3 class="ng-scope" id="config-basePath">\n        basePath\n        <small>\n         languages\n        </small>\n       </h3>\n       <p class="ng-scope">\n        The folder off the root of your wb app where the resource files are located\n    (it can also be used as a relative path).\n       </p>\n       <h3 class="ng-scope" id="config-defaultLocale">\n        defaultLocale\n        <small>\n         en-US\n        </small>\n       </h3>\n       <p class="ng-scope">\n        The locale that your app is initialized with for a new user.\n       </p>\n       <h3 class="ng-scope" id="config-sharedDictionary">\n        sharedDictionary\n        <small>\n         common\n        </small>\n       </h3>\n       <p class="ng-scope">\n        Commonly occuring words, phrases, strings etc. are stored in this file\n    (it is used to check whether the service itself is ready or not as it is loaded during bootstrap).\n       </p>\n       <h3 class="ng-scope" id="config-fileExtension">\n        fileExtension\n        <small>\n         .lang.json\n        </small>\n       </h3>\n       <p class="ng-scope">\n        The extension for all resource files spanning across all languages.\n       </p>\n       <h3 class="ng-scope" id="config-persistSelection">\n        persistSelection\n        <small>\n         true\n        </small>\n       </h3>\n       <p class="ng-scope">\n        Whether to save the selected language to cookies for retrieval on later uses of the app.\n       </p>\n       <h3 class="ng-scope" id="config-cookieName">\n        cookieName\n        <small>\n         COOKIE_LOCALE_LANG\n        </small>\n       </h3>\n       <p class="ng-scope">\n        Works in conjuntion with\n        <code>\n         persistSelection\n        </code>\n        and provides the cookie name for storage.\n       </p>\n       <h3 class="ng-scope" id="config-observableAttrs">\n        observableAttrs\n        <small>\n         \\^data-(?!ng-|i18n)\\\n        </small>\n       </h3>\n       <p class="ng-scope">\n        A regular expression which is used to match which custom data attibutes may be watched\n    by the\n        <code>\n         i18n\n        </code>\n        directive for 2-way bindings to replace in a tokenized string.\n       </p>\n       <h3 class="ng-scope" id="config-delimiter">\n        delimiter\n        <small>\n         ::\n        </small>\n       </h3>\n       <p class="ng-scope">\n        The delimiter to be used when passing params along with the string token to the service, filter etc.\n       </p>\n       <div class="highlight ng-scope">\n        <pre><code class="js"><span class="nx">angular.module</span><span class="p">(</span><span class="nb"><span class="s1">\'docs.demo\'</span></span>, <span class="p">[</span><span class="nb"><span class="s1">\'ngLocalize.Config\'</span></span><span class="p">])</span>\n    <span class="nx">.value</span><span class="p">(</span><span class="nb"><span class="s1">\'localeConf\'</span></span>, <span class="p">{</span>\n    <span class="nx">basePath:</span> <span class="s1">\'languages\'</span>,\n    <span class="nx">defaultLocale:</span> <span class="s1">\'en-US\'</span>,\n    <span class="nx">sharedDictionary:</span> <span class="s1">\'common\'</span>,\n    <span class="nx">fileExtension:</span> <span class="s1">\'.lang.json\'</span>,\n    <span class="nx">persistSelection:</span> <span class="nb">true</span>,\n    <span class="nx">cookieName:</span> <span class="s1">\'COOKIE_LOCALE_LANG\'</span>,\n    <span class="nx">observableAttrs:</span> <span class="nb">new</span> <span class="kd">RegExp</span><span class="p">(</span><span class="s1">\'^data-(?!ng-|i18n)\'</span><span class="p">)</span>,\n    <span class="nx">delimiter:</span> <span class="s1">\'::\'</span>,\n<span class="p">});</span></code></pre>\n       </div>\n       <div class="bs-callout bs-callout-warning ng-scope">\n        <h4>\n         Overriding defaults\n        </h4>\n        <p>\n         If you would like to override at least one particular option,\n        then you must explicitly set any other options explicitly to their default values.\n        </p>\n       </div>\n      </div>\n     </div>\n     <div class="col-md-2 hidden-sm">\n      <!-- ngInclude: \'app/views/sidebar.html\' -->\n      <div class="ng-scope" data-ng-include="\'app/views/sidebar.html\'">\n       <div class="bs-docs-sidebar hidden-print ng-scope affix-top" data-bs-affix="" data-data-bs-scrollspy-list="" data-offset="-50" data-offset-top="-50" role="complementary" style="position: relative;">\n        <ul class="nav bs-docs-sidenav">\n         <li class="active" data-bs-scrollspy="" data-target="#quickstart">\n          <a href="##quickstart">\n           Quickstart\n          </a>\n         </li>\n         <li data-bs-scrollspy="" data-target="#i18nDirective">\n          <a href="##i18nDirective">\n           i18n Directive\n          </a>\n          <ul class="nav">\n           <li data-bs-scrollspy="" data-target="#i18nDirective-basic">\n            <a href="##i18nDirective-basic">\n             Basic Example\n            </a>\n           </li>\n           <li data-bs-scrollspy="" data-target="#i18nDirective-dynamic">\n            <a href="##i18nDirective-dynamic">\n             Dynamic User Data\n            </a>\n           </li>\n          </ul>\n         </li>\n         <li data-bs-scrollspy="" data-target="#i18nAttrDirective">\n          <a href="##i18nAttrDirective">\n           i18nAttr Directive\n          </a>\n          <ul class="nav">\n           <li data-bs-scrollspy="" data-target="#i18nDirective-inputs">\n            <a href="##i18nAttrDirective-inputs">\n             Input Placeholders\n            </a>\n           </li>\n          </ul>\n         </li>\n         <li data-bs-scrollspy="" data-target="#localeService">\n          <a href="##localeService">\n           locale Service\n          </a>\n         </li>\n         <li data-bs-scrollspy="" data-target="#i18nFilter">\n          <a href="##i18nFilter">\n           i18n Filter\n          </a>\n          <ul class="nav">\n           <li data-bs-scrollspy="" data-target="#i18nFilter-simple">\n            <a href="##i18nFilter-simple">\n             Simple Example\n            </a>\n           </li>\n           <li data-bs-scrollspy="" data-target="#i18nFilter-args">\n            <a href="##i18nFilter-args">\n             Parameterized Arguments\n            </a>\n           </li>\n           <li data-bs-scrollspy="" data-target="#i18nFilter-special">\n            <a href="##i18nFilter-special">\n             Special Use-case(s)\n            </a>\n           </li>\n          </ul>\n         </li>\n         <li data-bs-scrollspy="" data-target="#ngLocalize-ngPluralize">\n          <a href="##ngLocalize-ngPluralize">\n           Using ngPluralize\n          </a>\n         </li>\n         <li data-bs-scrollspy="" data-target="#events">\n          <a href="##events">\n           Emitted Events\n          </a>\n         </li>\n         <li data-bs-scrollspy="" data-target="#config">\n          <a href="##config">\n           Custom Configuration\n          </a>\n         </li>\n        </ul>\n        <a class="back-to-top" href="#">\n         Back to top\n        </a>\n       </div>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n  <!-- ngInclude: \'app/views/footer.html\' -->\n  <div class="ng-scope" data-ng-include="\'app/views/footer.html\'">\n   <footer class="bs-docs-footer ng-scope" data-ng-controller="FootControl" role="contentinfo">\n    <div class="container">\n     <div class="bs-docs-social">\n      <ul class="bs-docs-social-buttons">\n       <li class="shield-badge">\n        <a href="//travis-ci.org/#!/doshprompt/angular-localization" target="_blank">\n         <img src="//img.shields.io/travis/doshprompt/angular-localization.svg?style=flat"/>\n         <!-- <img src="//secure.travis-ci.org/doshprompt/angular-localization.svg?branch=master"> -->\n        </a>\n       </li>\n       <li class="shield-badge">\n        <a href="//bower.io/search/?q=angular-localization" target="_blank">\n         <img ng-src="//img.shields.io/badge/bower%20package-1.2.1-brightgreen.svg?style=flat" src="//img.shields.io/badge/bower%20package-1.2.1-brightgreen.svg?style=flat"/>\n         <!-- <img src="//badge.fury.io/bo/angular-localization.svg" alt="Bower version"> -->\n        </a>\n       </li>\n       <li class="shield-badge">\n        <a href="//gittip.com/doshprompt" target="_blank">\n         <img src="//img.shields.io/gittip/doshprompt.svg?style=flat"/>\n        </a>\n       </li>\n       <li class="shield-badge">\n        <a href="//gitter.im/doshprompt/angular-localization" target="_blank">\n         <img src="//img.shields.io/badge/gitter-doshprompt%2Fangular--localization-brightgreen.svg?style=flat"/>\n        </a>\n       </li>\n      </ul>\n     </div>\n     <div class="bs-docs-social">\n      <ul class="bs-docs-social-buttons">\n       <li class="github-btn">\n        <iframe class="github-btn" height="20" src="http://ghbtns.com/github-btn.html?user=doshprompt&amp;repo=angular-localization&amp;type=watch&amp;count=true" title="Star on GitHub" width="100">\n        </iframe>\n       </li>\n       <li class="github-btn">\n        <iframe class="github-btn" height="20" src="http://ghbtns.com/github-btn.html?user=doshprompt&amp;repo=angular-localization&amp;type=fork&amp;count=true" title="Fork on GitHub" width="100">\n        </iframe>\n       </li>\n       <li class="github-btn">\n        <iframe class="github-btn" height="20" src="http://ghbtns.com/github-btn.html?user=doshprompt&amp;type=follow&amp;count=true" title="Follow on GitHub" width="165">\n        </iframe>\n       </li>\n       <li class="twitter-btn">\n        <a class="twitter-share-button" data-hashtags="angular,angularjs,i18n" data-related="angularjs" data-text="Check out #ngLocalize\xe2\x80\x94a complete @angularjs localization module done right!" data-url="http://bit.ly/angular-localization" data-via="doshprompt" href="https://twitter.com/share">\n         Tweet\n        </a>\n       </li>\n       <li class="google-btn">\n        <div id="___plusone_0" style="text-indent: 0px; margin: 0px; padding: 0px; background: transparent; border-style: none; float: none; line-height: normal; font-size: 1px; vertical-align: baseline; display: inline-block; width: 90px; height: 20px;">\n         <iframe data-gapiattached="true" frameborder="0" hspace="0" id="I0_1492570129217" marginheight="0" marginwidth="0" name="I0_1492570129217" ng-non-bindable="" scrolling="no" src="https://apis.google.com/se/0/_/+1/fastbutton?usegapi=1&amp;size=medium&amp;annotation=bubble&amp;origin=http%3A%2F%2Fdoshprompt.github.io&amp;url=http%3A%2F%2Fbit.ly%2Fangular-localization&amp;gsrc=3p&amp;ic=1&amp;jsh=m%3B%2F_%2Fscs%2Fapps-static%2F_%2Fjs%2Fk%3Doz.gapi.en_US.DvO4uWOSSgQ.O%2Fm%3D__features__%2Fam%3DAQ%2Frt%3Dj%2Fd%3D1%2Frs%3DAGLTcCNTuSw7sW3KmKIoAW4gvKoLCsPjsQ#_methods=onPlusOne%2C_ready%2C_close%2C_open%2C_resizeMe%2C_renderstart%2Concircled%2Cdrefresh%2Cerefresh%2Conload&amp;id=I0_1492570129217&amp;parent=http%3A%2F%2Fdoshprompt.github.io&amp;pfname=&amp;rpctoken=12119883" style="position: static; top: 0px; width: 90px; margin: 0px; border-style: none; left: 0px; visibility: visible; height: 20px;" tabindex="0" title="+1" vspace="0" width="100%">\n         </iframe>\n        </div>\n       </li>\n      </ul>\n     </div>\n     <p>\n      Designed and built with all the love in the world by\n      <a href="http://twitter.com/doshprompt" target="_blank">\n       @doshprompt\n      </a>\n      .\n     </p>\n     <p>\n      Code licensed under\n      <a href="https://github.com/doshprompt/angular-localization/blob/master/LICENSE" target="_blank">\n       MIT\n      </a>\n      ,\n            documentation under\n      <a href="http://creativecommons.org/licenses/by/3.0/">\n       CC BY 3.0\n      </a>\n      .\n     </p>\n     <ul class="bs-docs-footer-links muted">\n      <li class="ng-binding">\n       Currently 1.2.1\n      </li>\n      <li>\n       \xc2\xb7\n      </li>\n      <li>\n       <a href="https://github.com/doshprompt/angular-localization">\n        GitHub\n       </a>\n      </li>\n      <li>\n       \xc2\xb7\n      </li>\n      <li>\n       <a href="https://github.com/doshprompt/angular-localization/issues?state=open">\n        Issues\n       </a>\n      </li>\n      <li>\n       \xc2\xb7\n      </li>\n      <li>\n       <a href="https://github.com/doshprompt/angular-localization/releases">\n        Releases\n       </a>\n      </li>\n     </ul>\n    </div>\n   </footer>\n  </div>\n  <!-- Bootstrap core JavaScript\n        ================================================== -->\n  <!-- Placed at the end of the document so the pages load faster -->\n  <script async="" src="https://apis.google.com/_/scs/apps-static/_/js/k=oz.gapi.en_US.DvO4uWOSSgQ.O/m=auth/exm=plusone/rt=j/sv=1/d=1/ed=1/am=AQ/rs=AGLTcCNTuSw7sW3KmKIoAW4gvKoLCsPjsQ/cb=gapi.loaded_1">\n  </script>\n  <script async="" src="https://apis.google.com/_/scs/apps-static/_/js/k=oz.gapi.en_US.DvO4uWOSSgQ.O/m=plusone/rt=j/sv=1/d=1/ed=1/am=AQ/rs=AGLTcCNTuSw7sW3KmKIoAW4gvKoLCsPjsQ/cb=gapi.loaded_0">\n  </script>\n  <script id="twitter-wjs" src="//platform.twitter.com/widgets.js">\n  </script>\n  <script async="" gapi_processed="true" src="//apis.google.com/js/platform.js" type="text/javascript">\n  </script>\n  <script src="assets/js/jquery.min.js">\n  </script>\n  <script src="assets/js/bootstrap.min.js">\n  </script>\n  <script src="assets/js/angular.min.js">\n  </script>\n  <script src="assets/js/angular-sanitize.min.js">\n  </script>\n  <script src="https://rawgit.com/doshprompt/bower-angular-localization/master/angular-localization.js">\n  </script>\n  <script src="assets/js/angular-strap.min.js">\n  </script>\n  <script src="app/declarations.js">\n  </script>\n  <script src="app/controllers/navbar.js">\n  </script>\n  <script src="app/controllers/header.js">\n  </script>\n  <script src="app/controllers/demo.js">\n  </script>\n  <script src="app/controllers/footer.js">\n  </script>\n  <!-- Socials\n        ================================================== -->\n  <script type="text/javascript">\n   (function() {\n                var po = document.createElement(\'script\'); po.type = \'text/javascript\'; po.async = true;\n                po.src = \'//apis.google.com/js/platform.js\';\n                var s = document.getElementsByTagName(\'script\')[0]; s.parentNode.insertBefore(po, s);\n            })();\n\n            !function(d,s,id) {\n                var js,\n                fjs = d.getElementsByTagName(s)[0];\n                if(!d.getElementById(id)) { \n                    js = d.createElement(s);\n                    js.id = id;\n                    js.src = \'//platform.twitter.com/widgets.js\';\n                    fjs.parentNode.insertBefore(js, fjs);\n                }\n            }(document, \'script\', \'twitter-wjs\');\n  </script>\n  <iframe allowfullscreen="true" allowtransparency="true" frameborder="0" id="rufous-sandbox" scrolling="no" style="position: absolute; visibility: hidden; display: none; width: 0px; height: 0px; padding: 0px; border: none;" title="Twitter analytics iframe">\n  </iframe>\n  <iframe aria-hidden="true" id="oauth2relay906307836" name="oauth2relay906307836" src="https://accounts.google.com/o/oauth2/postmessageRelay?parent=http%3A%2F%2Fdoshprompt.github.io&amp;jsh=m%3B%2F_%2Fscs%2Fapps-static%2F_%2Fjs%2Fk%3Doz.gapi.en_US.DvO4uWOSSgQ.O%2Fm%3D__features__%2Fam%3DAQ%2Frt%3Dj%2Fd%3D1%2Frs%3DAGLTcCNTuSw7sW3KmKIoAW4gvKoLCsPjsQ#rpctoken=343066999&amp;forcesecure=1" style="width: 1px; height: 1px; position: absolute; top: -100px;" tabindex="-1">\n  </iframe>\n </body>\n</html>'