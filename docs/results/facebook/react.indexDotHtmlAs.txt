b'<!DOCTYPE html>\n<!--[if IE]><![endif]-->\n<html class="wf-proximanova-n7-active wf-proximanova-n4-active wf-proximanova-n3-active wf-sourcecodepro-n4-active wf-proximanova-i4-active wf-proximanova-i7-active wf-proximanova-i3-active wf-sourcecodepro-n7-active wf-active" xmlns="http://www.w3.org/1999/xhtml">\n <head>\n  <meta charset="utf-8"/>\n  <meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"/>\n  <title>\n   A JavaScript library for building user interfaces - React\n  </title>\n  <meta content="width=device-width, initial-scale=1" name="viewport"/>\n  <meta content="A JavaScript library for building user interfaces - React" property="og:title"/>\n  <meta content="website" property="og:type"/>\n  <meta content="https://facebook.github.io/react/" property="og:url"/>\n  <meta content="https://facebook.github.io/react/img/logo_og.png" property="og:image"/>\n  <meta content="A JavaScript library for building user interfaces" property="og:description"/>\n  <meta content="623268441017527" property="fb:app_id"/>\n  <link href="/react/favicon.ico" rel="shortcut icon"/>\n  <link href="https://facebook.github.io/react/feed.xml" rel="alternate" title="React" type="application/rss+xml"/>\n  <link href="https://cdn.jsdelivr.net/docsearch.js/1/docsearch.min.css" rel="stylesheet"/>\n  <link href="/react/css/syntax.css" rel="stylesheet"/>\n  <link href="/react/css/codemirror.css" rel="stylesheet"/>\n  <link href="/react/css/react.css" rel="stylesheet"/>\n  <script id="facebook-jssdk" src="//connect.facebook.net/en_US/sdk.js#xfbml=1&amp;version=v2.6&amp;appId=623268441017527">\n  </script>\n  <script id="twitter-wjs" src="https://platform.twitter.com/widgets.js">\n  </script>\n  <script async="" src="//www.google-analytics.com/analytics.js">\n  </script>\n  <script src="//use.typekit.net/vqa1hcx.js">\n  </script>\n  <style type="text/css">\n   .tk-proxima-nova{font-family:"proxima-nova",sans-serif;}.tk-source-code-pro{font-family:"source-code-pro",sans-serif;}\n  </style>\n  <style type="text/css">\n   @font-face{font-family:proxima-nova;src:url(https://use.typekit.net/af/6d80a1/00000000000000003b9aefb8/27/l?subset_id=2&amp;fvd=n7&amp;v=3) format("woff2"),url(https://use.typekit.net/af/6d80a1/00000000000000003b9aefb8/27/d?subset_id=2&amp;fvd=n7&amp;v=3) format("woff"),url(https://use.typekit.net/af/6d80a1/00000000000000003b9aefb8/27/a?subset_id=2&amp;fvd=n7&amp;v=3) format("opentype");font-weight:700;font-style:normal;}@font-face{font-family:proxima-nova;src:url(https://use.typekit.net/af/22122e/00000000000000003b9aefb9/27/l?subset_id=2&amp;fvd=i7&amp;v=3) format("woff2"),url(https://use.typekit.net/af/22122e/00000000000000003b9aefb9/27/d?subset_id=2&amp;fvd=i7&amp;v=3) format("woff"),url(https://use.typekit.net/af/22122e/00000000000000003b9aefb9/27/a?subset_id=2&amp;fvd=i7&amp;v=3) format("opentype");font-weight:700;font-style:italic;}@font-face{font-family:proxima-nova;src:url(https://use.typekit.net/af/936fa1/00000000000000003b9aefc0/27/l?subset_id=2&amp;fvd=n4&amp;v=3) format("woff2"),url(https://use.typekit.net/af/936fa1/00000000000000003b9aefc0/27/d?subset_id=2&amp;fvd=n4&amp;v=3) format("woff"),url(https://use.typekit.net/af/936fa1/00000000000000003b9aefc0/27/a?subset_id=2&amp;fvd=n4&amp;v=3) format("opentype");font-weight:400;font-style:normal;}@font-face{font-family:proxima-nova;src:url(https://use.typekit.net/af/de76fc/00000000000000003b9aefc1/27/l?subset_id=2&amp;fvd=i4&amp;v=3) format("woff2"),url(https://use.typekit.net/af/de76fc/00000000000000003b9aefc1/27/d?subset_id=2&amp;fvd=i4&amp;v=3) format("woff"),url(https://use.typekit.net/af/de76fc/00000000000000003b9aefc1/27/a?subset_id=2&amp;fvd=i4&amp;v=3) format("opentype");font-weight:400;font-style:italic;}@font-face{font-family:proxima-nova;src:url(https://use.typekit.net/af/8a67b6/00000000000000003b9aefbc/27/l?subset_id=2&amp;fvd=n3&amp;v=3) format("woff2"),url(https://use.typekit.net/af/8a67b6/00000000000000003b9aefbc/27/d?subset_id=2&amp;fvd=n3&amp;v=3) format("woff"),url(https://use.typekit.net/af/8a67b6/00000000000000003b9aefbc/27/a?subset_id=2&amp;fvd=n3&amp;v=3) format("opentype");font-weight:300;font-style:normal;}@font-face{font-family:proxima-nova;src:url(https://use.typekit.net/af/69ead1/00000000000000003b9aefbd/27/l?subset_id=2&amp;fvd=i3&amp;v=3) format("woff2"),url(https://use.typekit.net/af/69ead1/00000000000000003b9aefbd/27/d?subset_id=2&amp;fvd=i3&amp;v=3) format("woff"),url(https://use.typekit.net/af/69ead1/00000000000000003b9aefbd/27/a?subset_id=2&amp;fvd=i3&amp;v=3) format("opentype");font-weight:300;font-style:italic;}@font-face{font-family:source-code-pro;src:url(https://use.typekit.net/af/269954/0000000000000000000179d5/27/l?subset_id=2&amp;fvd=n7&amp;v=3) format("woff2"),url(https://use.typekit.net/af/269954/0000000000000000000179d5/27/d?subset_id=2&amp;fvd=n7&amp;v=3) format("woff"),url(https://use.typekit.net/af/269954/0000000000000000000179d5/27/a?subset_id=2&amp;fvd=n7&amp;v=3) format("opentype");font-weight:700;font-style:normal;}@font-face{font-family:source-code-pro;src:url(https://use.typekit.net/af/9b5d7b/0000000000000000000179cf/27/l?subset_id=2&amp;fvd=n4&amp;v=3) format("woff2"),url(https://use.typekit.net/af/9b5d7b/0000000000000000000179cf/27/d?subset_id=2&amp;fvd=n4&amp;v=3) format("woff"),url(https://use.typekit.net/af/9b5d7b/0000000000000000000179cf/27/a?subset_id=2&amp;fvd=n4&amp;v=3) format("opentype");font-weight:400;font-style:normal;}\n  </style>\n  <script>\n   try{Typekit.load();}catch(e){}\n  </script>\n  <!--[if lte IE 8]>\n  <script src="/react/js/html5shiv.min.js"></script>\n  <script src="/react/js/es5-shim.min.js"></script>\n  <script src="/react/js/es5-sham.min.js"></script>\n  <![endif]-->\n  <script src="https://cdn.jsdelivr.net/docsearch.js/1/docsearch.min.js" type="text/javascript">\n  </script>\n  <script src="/react/js/codemirror.js">\n  </script>\n  <script src="/react/js/javascript.js">\n  </script>\n  <script src="/react/js/xml.js">\n  </script>\n  <script src="/react/js/jsx.js">\n  </script>\n  <script src="/react/js/react.js">\n  </script>\n  <script src="/react/js/react-dom.js">\n  </script>\n  <script src="/react/js/babel.min.js">\n  </script>\n  <script src="/react/js/live_editor.js">\n  </script>\n  <style type="text/css">\n   .fb_hidden{position:absolute;top:-10000px;z-index:10001}.fb_reposition{overflow:hidden;position:relative}.fb_invisible{display:none}.fb_reset{background:none;border:0;border-spacing:0;color:#000;cursor:auto;direction:ltr;font-family:"lucida grande", tahoma, verdana, arial, sans-serif;font-size:11px;font-style:normal;font-variant:normal;font-weight:normal;letter-spacing:normal;line-height:1;margin:0;overflow:visible;padding:0;text-align:left;text-decoration:none;text-indent:0;text-shadow:none;text-transform:none;visibility:visible;white-space:normal;word-spacing:normal}.fb_reset&gt;div{overflow:hidden}.fb_link img{border:none}@keyframes fb_transform{from{opacity:0;transform:scale(.95)}to{opacity:1;transform:scale(1)}}.fb_animate{animation:fb_transform .3s forwards}\n.fb_dialog{background:rgba(82, 82, 82, .7);position:absolute;top:-10000px;z-index:10001}.fb_reset .fb_dialog_legacy{overflow:visible}.fb_dialog_advanced{padding:10px;-moz-border-radius:8px;-webkit-border-radius:8px;border-radius:8px}.fb_dialog_content{background:#fff;color:#333}.fb_dialog_close_icon{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/yq/r/IE9JII6Z1Ys.png) no-repeat scroll 0 0 transparent;cursor:pointer;display:block;height:15px;position:absolute;right:18px;top:17px;width:15px}.fb_dialog_mobile .fb_dialog_close_icon{top:5px;left:5px;right:auto}.fb_dialog_padding{background-color:transparent;position:absolute;width:1px;z-index:-1}.fb_dialog_close_icon:hover{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/yq/r/IE9JII6Z1Ys.png) no-repeat scroll 0 -15px transparent}.fb_dialog_close_icon:active{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/yq/r/IE9JII6Z1Ys.png) no-repeat scroll 0 -30px transparent}.fb_dialog_loader{background-color:#f6f7f9;border:1px solid #606060;font-size:24px;padding:20px}.fb_dialog_top_left,.fb_dialog_top_right,.fb_dialog_bottom_left,.fb_dialog_bottom_right{height:10px;width:10px;overflow:hidden;position:absolute}.fb_dialog_top_left{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/ye/r/8YeTNIlTZjm.png) no-repeat 0 0;left:-10px;top:-10px}.fb_dialog_top_right{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/ye/r/8YeTNIlTZjm.png) no-repeat 0 -10px;right:-10px;top:-10px}.fb_dialog_bottom_left{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/ye/r/8YeTNIlTZjm.png) no-repeat 0 -20px;bottom:-10px;left:-10px}.fb_dialog_bottom_right{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/ye/r/8YeTNIlTZjm.png) no-repeat 0 -30px;right:-10px;bottom:-10px}.fb_dialog_vert_left,.fb_dialog_vert_right,.fb_dialog_horiz_top,.fb_dialog_horiz_bottom{position:absolute;background:#525252;filter:alpha(opacity=70);opacity:.7}.fb_dialog_vert_left,.fb_dialog_vert_right{width:10px;height:100%}.fb_dialog_vert_left{margin-left:-10px}.fb_dialog_vert_right{right:0;margin-right:-10px}.fb_dialog_horiz_top,.fb_dialog_horiz_bottom{width:100%;height:10px}.fb_dialog_horiz_top{margin-top:-10px}.fb_dialog_horiz_bottom{bottom:0;margin-bottom:-10px}.fb_dialog_iframe{line-height:0}.fb_dialog_content .dialog_title{background:#6d84b4;border:1px solid #365899;color:#fff;font-size:14px;font-weight:bold;margin:0}.fb_dialog_content .dialog_title&gt;span{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/yd/r/Cou7n-nqK52.gif) no-repeat 5px 50%;float:left;padding:5px 0 7px 26px}body.fb_hidden{-webkit-transform:none;height:100%;margin:0;overflow:visible;position:absolute;top:-10000px;left:0;width:100%}.fb_dialog.fb_dialog_mobile.loading{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/ya/r/3rhSv5V8j3o.gif) white no-repeat 50% 50%;min-height:100%;min-width:100%;overflow:hidden;position:absolute;top:0;z-index:10001}.fb_dialog.fb_dialog_mobile.loading.centered{width:auto;height:auto;min-height:initial;min-width:initial;background:none}.fb_dialog.fb_dialog_mobile.loading.centered #fb_dialog_loader_spinner{width:100%}.fb_dialog.fb_dialog_mobile.loading.centered .fb_dialog_content{background:none}.loading.centered #fb_dialog_loader_close{color:#fff;display:block;padding-top:20px;clear:both;font-size:18px}#fb-root #fb_dialog_ipad_overlay{background:rgba(0, 0, 0, .45);position:absolute;bottom:0;left:0;right:0;top:0;width:100%;min-height:100%;z-index:10000}#fb-root #fb_dialog_ipad_overlay.hidden{display:none}.fb_dialog.fb_dialog_mobile.loading iframe{visibility:hidden}.fb_dialog_content .dialog_header{-webkit-box-shadow:white 0 1px 1px -1px inset;background:-webkit-gradient(linear, 0% 0%, 0% 100%, from(#738ABA), to(#2C4987));border-bottom:1px solid;border-color:#1d4088;color:#fff;font:14px Helvetica, sans-serif;font-weight:bold;text-overflow:ellipsis;text-shadow:rgba(0, 30, 84, .296875) 0 -1px 0;vertical-align:middle;white-space:nowrap}.fb_dialog_content .dialog_header table{-webkit-font-smoothing:subpixel-antialiased;height:43px;width:100%}.fb_dialog_content .dialog_header td.header_left{font-size:12px;padding-left:5px;vertical-align:middle;width:60px}.fb_dialog_content .dialog_header td.header_right{font-size:12px;padding-right:5px;vertical-align:middle;width:60px}.fb_dialog_content .touchable_button{background:-webkit-gradient(linear, 0% 0%, 0% 100%, from(#4966A6), color-stop(.5, #355492), to(#2A4887));border:1px solid #29487d;-webkit-background-clip:padding-box;-webkit-border-radius:3px;-webkit-box-shadow:rgba(0, 0, 0, .117188) 0 1px 1px inset, rgba(255, 255, 255, .167969) 0 1px 0;display:inline-block;margin-top:3px;max-width:85px;line-height:18px;padding:4px 12px;position:relative}.fb_dialog_content .dialog_header .touchable_button input{border:none;background:none;color:#fff;font:12px Helvetica, sans-serif;font-weight:bold;margin:2px -12px;padding:2px 6px 3px 6px;text-shadow:rgba(0, 30, 84, .296875) 0 -1px 0}.fb_dialog_content .dialog_header .header_center{color:#fff;font-size:16px;font-weight:bold;line-height:18px;text-align:center;vertical-align:middle}.fb_dialog_content .dialog_content{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/y9/r/jKEcVPZFk-2.gif) no-repeat 50% 50%;border:1px solid #555;border-bottom:0;border-top:0;height:150px}.fb_dialog_content .dialog_footer{background:#f6f7f9;border:1px solid #555;border-top-color:#ccc;height:40px}#fb_dialog_loader_close{float:left}.fb_dialog.fb_dialog_mobile .fb_dialog_close_button{text-shadow:rgba(0, 30, 84, .296875) 0 -1px 0}.fb_dialog.fb_dialog_mobile .fb_dialog_close_icon{visibility:hidden}#fb_dialog_loader_spinner{animation:rotateSpinner 1.2s linear infinite;background-color:transparent;background-image:url(https://static.xx.fbcdn.net/rsrc.php/v3/yD/r/t-wz8gw1xG1.png);background-repeat:no-repeat;background-position:50% 50%;height:24px;width:24px}@keyframes rotateSpinner{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}\n.fb_iframe_widget{display:inline-block;position:relative}.fb_iframe_widget span{display:inline-block;position:relative;text-align:justify}.fb_iframe_widget iframe{position:absolute}.fb_iframe_widget_fluid_desktop,.fb_iframe_widget_fluid_desktop span,.fb_iframe_widget_fluid_desktop iframe{max-width:100%}.fb_iframe_widget_fluid_desktop iframe{min-width:220px;position:relative}.fb_iframe_widget_lift{z-index:1}.fb_hide_iframes iframe{position:relative;left:-10000px}.fb_iframe_widget_loader{position:relative;display:inline-block}.fb_iframe_widget_fluid{display:inline}.fb_iframe_widget_fluid span{width:100%}.fb_iframe_widget_loader iframe{min-height:32px;z-index:2;zoom:1}.fb_iframe_widget_loader .FB_Loader{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/y9/r/jKEcVPZFk-2.gif) no-repeat;height:32px;width:32px;margin-left:-16px;position:absolute;left:50%;z-index:4}\n  </style>\n </head>\n <body>\n  <div class="container">\n   <div class="nav-main">\n    <div class="wrap">\n     <a class="nav-home" href="/react/">\n      <img class="nav-logo" height="36" src="/react/img/logo.svg" width="36"/>\n      React\n     </a>\n     <div class="nav-lists">\n      <ul class="nav-site nav-site-internal">\n       <li>\n        <a href="/react/docs/hello-world.html">\n         Docs\n        </a>\n       </li>\n       <li>\n        <a href="/react/tutorial/tutorial.html">\n         Tutorial\n        </a>\n       </li>\n       <li>\n        <a href="/react/community/support.html">\n         Community\n        </a>\n       </li>\n       <li>\n        <a href="/react/blog/">\n         Blog\n        </a>\n       </li>\n       <li class="nav-site-search">\n        <span class="algolia-autocomplete" style="position: relative; display: inline-block; direction: ltr;">\n         <input aria-autocomplete="list" aria-expanded="false" aria-labelledby="algolia-doc-search" aria-owns="algolia-autocomplete-listbox-0" autocomplete="off" class="aa-input" dir="auto" id="algolia-doc-search" placeholder="Search docs..." role="combobox" spellcheck="false" style="position: relative; vertical-align: top;" type="text"/>\n         <pre aria-hidden="true" style=\'position: absolute; visibility: hidden; white-space: pre; font-family: proxima-nova, "Helvetica Neue", Helvetica, Roboto, Arial, sans-serif; font-size: 16px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; word-spacing: 0px; letter-spacing: normal; text-indent: 0px; text-rendering: auto; text-transform: none;\'></pre>\n         <span class="aa-dropdown-menu" id="algolia-autocomplete-listbox-0" role="listbox" style="position: absolute; top: 100%; z-index: 100; display: none; left: 0px; right: auto;">\n          <div class="aa-dataset-1">\n          </div>\n         </span>\n        </span>\n       </li>\n      </ul>\n      <ul class="nav-site nav-site-external">\n       <li>\n        <a href="https://github.com/facebook/react">\n         GitHub\n        </a>\n       </li>\n       <li>\n        <a href="https://github.com/facebook/react/releases">\n         v15.5.0\n        </a>\n       </li>\n      </ul>\n     </div>\n    </div>\n   </div>\n   <div class="hero">\n    <div class="wrap">\n     <div class="text">\n      <strong>\n       React\n      </strong>\n     </div>\n     <div class="minitext">\n      A JavaScript library for building user interfaces\n     </div>\n     <div class="buttons-unit">\n      <a class="button" href="/react/docs/hello-world.html">\n       Get Started\n      </a>\n      <a class="button" href="/react/tutorial/tutorial.html">\n       Take the Tutorial\n      </a>\n     </div>\n    </div>\n   </div>\n   <section class="content wrap">\n    <section class="light home-section">\n     <div class="marketing-row">\n      <div class="marketing-col">\n       <h3>\n        Declarative\n       </h3>\n       <p>\n        React makes it painless to create interactive UIs. Design simple views for each state in your application, and React will efficiently update and render just the right components when your data changes.\n       </p>\n       <p>\n        Declarative views make your code more predictable and easier to debug.\n       </p>\n      </div>\n      <div class="marketing-col">\n       <h3>\n        Component-Based\n       </h3>\n       <p>\n        Build encapsulated components that manage their own state, then compose them to make complex UIs.\n       </p>\n       <p>\n        Since component logic is written in JavaScript instead of templates, you can easily pass rich data through your app and keep state out of the\xc2\xa0DOM.\n       </p>\n      </div>\n      <div class="marketing-col">\n       <h3>\n        Learn\xc2\xa0Once, Write\xc2\xa0Anywhere\n       </h3>\n       <p>\n        We don\'t make assumptions about the rest of your technology stack, so you can develop new features in React without rewriting existing code.\n       </p>\n       <p>\n        React can also render on the server using Node and power mobile apps using\n        <a href="https://facebook.github.io/react-native/">\n         React Native\n        </a>\n        .\n       </p>\n      </div>\n     </div>\n    </section>\n    <p>\n    </p>\n    <hr class="home-divider"/>\n    <section class="home-section">\n     <div id="examples">\n      <div class="example">\n       <h3>\n        A Simple Component\n       </h3>\n       <p>\n        React components implement a\n        <code>\n         render()\n        </code>\n        method that takes input data and\n        returns what to display. This example uses an XML-like syntax called\n        JSX. Input data that is passed into the component can be accessed by\n        <code>\n         render()\n        </code>\n        via\n        <code>\n         this.props\n        </code>\n        .\n       </p>\n       <p>\n        <strong>\n         JSX is optional and not required to use React.\n        </strong>\n        Try\n        clicking on "Compiled JS" to see the raw JavaScript code produced by\n        the JSX compiler.\n       </p>\n       <div id="helloExample">\n        <div class="playground" data-reactroot="">\n         <div>\n          <div class="playground-tab playground-tab-active">\n           Live JSX Editor\n          </div>\n          <div class="playground-tab">\n           Compiled JS\n          </div>\n         </div>\n         <div class="playgroundCode">\n          <div class="playgroundStage">\n           <textarea style="display: none;">class HelloMessage extends React.Component {\n  render() {\n    return &lt;div&gt;Hello {this.props.name}&lt;/div&gt;;\n  }\n}\n\nReactDOM.render(&lt;HelloMessage name="Jane" /&gt;, mountNode);</textarea>\n           <div class="CodeMirror cm-s-solarized-light CodeMirror-wrap">\n            <div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 14px; left: 14px;">\n             <textarea autocapitalize="off" autocorrect="off" spellcheck="false" style="position: absolute; padding: 0px; width: 1000px; height: 1em; outline: none;" tabindex="0"></textarea>\n            </div>\n            <div class="CodeMirror-vscrollbar" cm-not-content="true" style="width: 18px; pointer-events: none;">\n             <div style="min-width: 1px; height: 0px;">\n             </div>\n            </div>\n            <div class="CodeMirror-hscrollbar" cm-not-content="true" style="height: 18px; pointer-events: none;">\n             <div style="height: 100%; min-height: 1px; width: 0px;">\n             </div>\n            </div>\n            <div class="CodeMirror-scrollbar-filler" cm-not-content="true">\n            </div>\n            <div class="CodeMirror-gutter-filler" cm-not-content="true">\n            </div>\n            <div class="CodeMirror-scroll" tabindex="-1">\n             <div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 30px; min-height: 161px; padding-right: 0px; padding-bottom: 0px;">\n              <div style="position: relative; top: 0px;">\n               <div class="CodeMirror-lines">\n                <div style="position: relative; outline: none;">\n                 <div class="CodeMirror-measure">\n                  <span>\n                   <span>\n                    \xe2\x80\x8b\n                   </span>\n                   x\n                  </span>\n                 </div>\n                 <div class="CodeMirror-measure">\n                 </div>\n                 <div style="position: relative; z-index: 1;">\n                 </div>\n                 <div class="CodeMirror-cursors">\n                  <div class="CodeMirror-cursor" style="left: 14px; top: 0px; height: 19px;">\n                  </div>\n                 </div>\n                 <div class="CodeMirror-code">\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"><span class="cm-keyword">class</span> <span class="cm-def">HelloMessage</span> <span class="cm-keyword">extends</span> <span class="cm-variable">React</span>.<span class="cm-property">Component</span> {</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">  <span class="cm-property">render</span>() {</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0  <span class="cm-keyword">return</span> <span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">div</span><span class="cm-tag cm-bracket">&gt;</span>Hello {<span class="cm-keyword">this</span>.<span class="cm-property">props</span>.<span class="cm-property">name</span>}<span class="cm-tag cm-bracket">&lt;/</span><span class="cm-tag">div</span><span class="cm-tag cm-bracket">&gt;</span>;</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">  }</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">}</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"><span cm-text="">\xe2\x80\x8b</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"><span class="cm-variable">ReactDOM</span>.<span class="cm-property">render</span>(<span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">HelloMessage</span> <span class="cm-attribute">name</span>=<span class="cm-string">"Jane"</span> <span class="cm-tag cm-bracket">/&gt;</span>, <span class="cm-variable">mountNode</span>);</span></pre>\n                 </div>\n                </div>\n               </div>\n              </div>\n             </div>\n             <div style="position: absolute; height: 30px; width: 1px; border-bottom: 0px solid transparent; top: 161px;">\n             </div>\n             <div class="CodeMirror-gutters" style="display: none; height: 191px;">\n             </div>\n            </div>\n           </div>\n          </div>\n         </div>\n         <div class="playgroundPreview">\n          <div>\n           <div data-reactroot="">\n            <!-- react-text: 2 -->\n            Hello\n            <!-- /react-text -->\n            <!-- react-text: 3 -->\n            Jane\n            <!-- /react-text -->\n           </div>\n          </div>\n         </div>\n        </div>\n       </div>\n      </div>\n      <div class="example">\n       <h3>\n        A Stateful Component\n       </h3>\n       <p>\n        In addition to taking input data (accessed via\n        <code>\n         this.props\n        </code>\n        ), a\n        component can maintain internal state data (accessed via\n        <code>\n         this.state\n        </code>\n        ).\n        When a component\'s state data changes, the rendered markup will be\n        updated by re-invoking\n        <code>\n         render()\n        </code>\n        .\n       </p>\n       <div id="timerExample">\n        <div class="playground" data-reactroot="">\n         <div>\n          <div class="playground-tab playground-tab-active">\n           Live JSX Editor\n          </div>\n          <div class="playground-tab">\n           Compiled JS\n          </div>\n         </div>\n         <div class="playgroundCode">\n          <div class="playgroundStage">\n           <textarea style="display: none;">class Timer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {secondsElapsed: 0};\n  }\n\n  tick() {\n    this.setState((prevState) =&gt; ({\n      secondsElapsed: prevState.secondsElapsed + 1\n    }));\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(() =&gt; this.tick(), 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    return (\n      &lt;div&gt;Seconds Elapsed: {this.state.secondsElapsed}&lt;/div&gt;\n    );\n  }\n}\n\nReactDOM.render(&lt;Timer /&gt;, mountNode);</textarea>\n           <div class="CodeMirror cm-s-solarized-light CodeMirror-wrap">\n            <div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 14px; left: 14px;">\n             <textarea autocapitalize="off" autocorrect="off" spellcheck="false" style="position: absolute; padding: 0px; width: 1000px; height: 1em; outline: none;" tabindex="0"></textarea>\n            </div>\n            <div class="CodeMirror-vscrollbar" cm-not-content="true" style="bottom: 0px; width: 18px; pointer-events: none;">\n             <div style="min-width: 1px; height: 0px;">\n             </div>\n            </div>\n            <div class="CodeMirror-hscrollbar" cm-not-content="true" style="height: 18px; pointer-events: none;">\n             <div style="height: 100%; min-height: 1px; width: 0px;">\n             </div>\n            </div>\n            <div class="CodeMirror-scrollbar-filler" cm-not-content="true">\n            </div>\n            <div class="CodeMirror-gutter-filler" cm-not-content="true">\n            </div>\n            <div class="CodeMirror-scroll" tabindex="-1">\n             <div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 30px; min-height: 560px; padding-right: 0px; padding-bottom: 0px;">\n              <div style="position: relative; top: 0px;">\n               <div class="CodeMirror-lines">\n                <div style="position: relative; outline: none;">\n                 <div class="CodeMirror-measure">\n                  <pre><span>xxxxxxxxxx</span></pre>\n                 </div>\n                 <div class="CodeMirror-measure">\n                 </div>\n                 <div style="position: relative; z-index: 1;">\n                 </div>\n                 <div class="CodeMirror-cursors">\n                  <div class="CodeMirror-cursor" style="left: 14px; top: 0px; height: 19px;">\n                  </div>\n                 </div>\n                 <div class="CodeMirror-code">\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"><span class="cm-keyword">class</span> <span class="cm-def">Timer</span> <span class="cm-keyword">extends</span> <span class="cm-variable">React</span>.<span class="cm-property">Component</span> {</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">  <span class="cm-property">constructor</span>(<span class="cm-def">props</span>) {</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0  <span class="cm-keyword">super</span>(<span class="cm-variable-2">props</span>);</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0  <span class="cm-keyword">this</span>.<span class="cm-property">state</span> <span class="cm-operator">=</span> {<span class="cm-property">secondsElapsed</span>: <span class="cm-number">0</span>};</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">  }</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"><span cm-text="">\xe2\x80\x8b</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">  <span class="cm-property">tick</span>() {</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0  <span class="cm-keyword">this</span>.<span class="cm-property">setState</span>((<span class="cm-def">prevState</span>) <span class="cm-operator">=&gt;</span> ({</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0 \xc2\xa0  <span class="cm-property">secondsElapsed</span>: <span class="cm-variable-2">prevState</span>.<span class="cm-property">secondsElapsed</span> <span class="cm-operator">+</span> <span class="cm-number">1</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0  }));</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">  }</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"><span cm-text="">\xe2\x80\x8b</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">  <span class="cm-property">componentDidMount</span>() {</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0  <span class="cm-keyword">this</span>.<span class="cm-property">interval</span> <span class="cm-operator">=</span> <span class="cm-variable">setInterval</span>(() <span class="cm-operator">=&gt;</span> <span class="cm-keyword">this</span>.<span class="cm-property">tick</span>(), <span class="cm-number">1000</span>);</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">  }</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"><span cm-text="">\xe2\x80\x8b</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">  <span class="cm-property">componentWillUnmount</span>() {</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0  <span class="cm-variable">clearInterval</span>(<span class="cm-keyword">this</span>.<span class="cm-property">interval</span>);</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">  }</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"><span cm-text="">\xe2\x80\x8b</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">  <span class="cm-property">render</span>() {</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0  <span class="cm-keyword">return</span> (</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0 \xc2\xa0  <span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">div</span><span class="cm-tag cm-bracket">&gt;</span>Seconds Elapsed: {<span class="cm-keyword">this</span>.<span class="cm-property">state</span>.<span class="cm-property">secondsElapsed</span>}<span class="cm-tag cm-bracket">&lt;/</span><span class="cm-tag">div</span><span class="cm-tag cm-bracket">&gt;</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0  );</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">  }</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">}</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"><span cm-text="">\xe2\x80\x8b</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"><span class="cm-variable">ReactDOM</span>.<span class="cm-property">render</span>(<span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">Timer</span> <span class="cm-tag cm-bracket">/&gt;</span>, <span class="cm-variable">mountNode</span>);</span></pre>\n                 </div>\n                </div>\n               </div>\n              </div>\n             </div>\n             <div style="position: absolute; height: 30px; width: 1px; border-bottom: 0px solid transparent; top: 560px;">\n             </div>\n             <div class="CodeMirror-gutters" style="display: none; height: 590px;">\n             </div>\n            </div>\n           </div>\n          </div>\n         </div>\n         <div class="playgroundPreview">\n          <div>\n           <div data-reactroot="">\n            <!-- react-text: 2 -->\n            Seconds Elapsed:\n            <!-- /react-text -->\n            <!-- react-text: 3 -->\n            2\n            <!-- /react-text -->\n           </div>\n          </div>\n         </div>\n        </div>\n       </div>\n      </div>\n      <div class="example">\n       <h3>\n        An Application\n       </h3>\n       <p>\n        Using\n        <code>\n         props\n        </code>\n        and\n        <code>\n         state\n        </code>\n        , we can put together a small Todo application.\n        This example uses\n        <code>\n         state\n        </code>\n        to track the current list of items as well as\n        the text that the user has entered. Although event handlers appear to be\n        rendered inline, they will be collected and implemented using event\n        delegation.\n       </p>\n       <div id="todoExample">\n        <div class="playground" data-reactroot="">\n         <div>\n          <div class="playground-tab playground-tab-active">\n           Live JSX Editor\n          </div>\n          <div class="playground-tab">\n           Compiled JS\n          </div>\n         </div>\n         <div class="playgroundCode">\n          <div class="playgroundStage">\n           <textarea style="display: none;">class TodoApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.state = {items: [], text: \'\'};\n  }\n\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;h3&gt;TODO&lt;/h3&gt;\n        &lt;TodoList items={this.state.items} /&gt;\n        &lt;form onSubmit={this.handleSubmit}&gt;\n          &lt;input onChange={this.handleChange} value={this.state.text} /&gt;\n          &lt;button&gt;{\'Add #\' + (this.state.items.length + 1)}&lt;/button&gt;\n        &lt;/form&gt;\n      &lt;/div&gt;\n    );\n  }\n\n  handleChange(e) {\n    this.setState({text: e.target.value});\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    var newItem = {\n      text: this.state.text,\n      id: Date.now()\n    };\n    this.setState((prevState) =&gt; ({\n      items: prevState.items.concat(newItem),\n      text: \'\'\n    }));\n  }\n}\n\nclass TodoList extends React.Component {\n  render() {\n    return (\n      &lt;ul&gt;\n        {this.props.items.map(item =&gt; (\n          &lt;li key={item.id}&gt;{item.text}&lt;/li&gt;\n        ))}\n      &lt;/ul&gt;\n    );\n  }\n}\n\nReactDOM.render(&lt;TodoApp /&gt;, mountNode);</textarea>\n           <div class="CodeMirror cm-s-solarized-light CodeMirror-wrap">\n            <div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 14px; left: 14px;">\n             <textarea autocapitalize="off" autocorrect="off" spellcheck="false" style="position: absolute; padding: 0px; width: 1000px; height: 1em; outline: none;" tabindex="0"></textarea>\n            </div>\n            <div class="CodeMirror-vscrollbar" cm-not-content="true" style="bottom: 0px; width: 18px; pointer-events: none;">\n             <div style="min-width: 1px; height: 0px;">\n             </div>\n            </div>\n            <div class="CodeMirror-hscrollbar" cm-not-content="true" style="height: 18px; pointer-events: none;">\n             <div style="height: 100%; min-height: 1px; width: 0px;">\n             </div>\n            </div>\n            <div class="CodeMirror-scrollbar-filler" cm-not-content="true">\n            </div>\n            <div class="CodeMirror-gutter-filler" cm-not-content="true">\n            </div>\n            <div class="CodeMirror-scroll" tabindex="-1">\n             <div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 30px; min-height: 997px; padding-right: 0px; padding-bottom: 0px;">\n              <div style="position: relative; top: 0px;">\n               <div class="CodeMirror-lines">\n                <div style="position: relative; outline: none;">\n                 <div class="CodeMirror-measure">\n                  <pre><span>xxxxxxxxxx</span></pre>\n                 </div>\n                 <div class="CodeMirror-measure">\n                 </div>\n                 <div style="position: relative; z-index: 1;">\n                 </div>\n                 <div class="CodeMirror-cursors">\n                  <div class="CodeMirror-cursor" style="left: 14px; top: 0px; height: 19px;">\n                  </div>\n                 </div>\n                 <div class="CodeMirror-code">\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"><span class="cm-keyword">class</span> <span class="cm-def">TodoApp</span> <span class="cm-keyword">extends</span> <span class="cm-variable">React</span>.<span class="cm-property">Component</span> {</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">  <span class="cm-property">constructor</span>(<span class="cm-def">props</span>) {</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0  <span class="cm-keyword">super</span>(<span class="cm-variable-2">props</span>);</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0  <span class="cm-keyword">this</span>.<span class="cm-property">handleChange</span> <span class="cm-operator">=</span> <span class="cm-keyword">this</span>.<span class="cm-property">handleChange</span>.<span class="cm-property">bind</span>(<span class="cm-keyword">this</span>);</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0  <span class="cm-keyword">this</span>.<span class="cm-property">handleSubmit</span> <span class="cm-operator">=</span> <span class="cm-keyword">this</span>.<span class="cm-property">handleSubmit</span>.<span class="cm-property">bind</span>(<span class="cm-keyword">this</span>);</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0  <span class="cm-keyword">this</span>.<span class="cm-property">state</span> <span class="cm-operator">=</span> {<span class="cm-property">items</span>: [], <span class="cm-property">text</span>: <span class="cm-string">\'\'</span>};</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">  }</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"><span cm-text="">\xe2\x80\x8b</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">  <span class="cm-property">render</span>() {</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0  <span class="cm-keyword">return</span> (</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0 \xc2\xa0  <span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">div</span><span class="cm-tag cm-bracket">&gt;</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0 \xc2\xa0 \xc2\xa0  <span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">h3</span><span class="cm-tag cm-bracket">&gt;</span>TODO<span class="cm-tag cm-bracket">&lt;/</span><span class="cm-tag">h3</span><span class="cm-tag cm-bracket">&gt;</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0 \xc2\xa0 \xc2\xa0  <span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">TodoList</span> <span class="cm-attribute">items</span>={<span class="cm-keyword">this</span>.<span class="cm-property">state</span>.<span class="cm-property">items</span>} <span class="cm-tag cm-bracket">/&gt;</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0 \xc2\xa0 \xc2\xa0  <span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">form</span> <span class="cm-attribute">onSubmit</span>={<span class="cm-keyword">this</span>.<span class="cm-property">handleSubmit</span>}<span class="cm-tag cm-bracket">&gt;</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0  <span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">input</span> <span class="cm-attribute">onChange</span>={<span class="cm-keyword">this</span>.<span class="cm-property">handleChange</span>} <span class="cm-attribute">value</span>={<span class="cm-keyword">this</span>.<span class="cm-property">state</span>.<span class="cm-property">text</span>} <span class="cm-tag cm-bracket">/&gt;</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0  <span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">button</span><span class="cm-tag cm-bracket">&gt;</span>{<span class="cm-string">\'Add #\'</span> <span class="cm-operator">+</span> (<span class="cm-keyword">this</span>.<span class="cm-property">state</span>.<span class="cm-property">items</span>.<span class="cm-property">length</span> <span class="cm-operator">+</span> <span class="cm-number">1</span>)}<span class="cm-tag cm-bracket">&lt;/</span><span class="cm-tag">button</span><span class="cm-tag cm-bracket">&gt;</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0 \xc2\xa0 \xc2\xa0  <span class="cm-tag cm-bracket">&lt;/</span><span class="cm-tag">form</span><span class="cm-tag cm-bracket">&gt;</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0 \xc2\xa0  <span class="cm-tag cm-bracket">&lt;/</span><span class="cm-tag">div</span><span class="cm-tag cm-bracket">&gt;</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0  );</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">  }</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"><span cm-text="">\xe2\x80\x8b</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">  <span class="cm-property">handleChange</span>(<span class="cm-def">e</span>) {</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0  <span class="cm-keyword">this</span>.<span class="cm-property">setState</span>({<span class="cm-property">text</span>: <span class="cm-variable-2">e</span>.<span class="cm-property">target</span>.<span class="cm-property">value</span>});</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">  }</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"><span cm-text="">\xe2\x80\x8b</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">  <span class="cm-property">handleSubmit</span>(<span class="cm-def">e</span>) {</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0  <span class="cm-variable-2">e</span>.<span class="cm-property">preventDefault</span>();</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0  <span class="cm-keyword">var</span> <span class="cm-def">newItem</span> <span class="cm-operator">=</span> {</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0 \xc2\xa0  <span class="cm-property">text</span>: <span class="cm-keyword">this</span>.<span class="cm-property">state</span>.<span class="cm-property">text</span>,</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0 \xc2\xa0  <span class="cm-property">id</span>: <span class="cm-variable">Date</span>.<span class="cm-property">now</span>()</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0  };</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0  <span class="cm-keyword">this</span>.<span class="cm-property">setState</span>((<span class="cm-def">prevState</span>) <span class="cm-operator">=&gt;</span> ({</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0 \xc2\xa0  <span class="cm-property">items</span>: <span class="cm-variable-2">prevState</span>.<span class="cm-property">items</span>.<span class="cm-property">concat</span>(<span class="cm-variable-2">newItem</span>),</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0 \xc2\xa0  <span class="cm-property">text</span>: <span class="cm-string">\'\'</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0  }));</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">  }</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">}</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"><span cm-text="">\xe2\x80\x8b</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"><span class="cm-keyword">class</span> <span class="cm-def">TodoList</span> <span class="cm-keyword">extends</span> <span class="cm-variable">React</span>.<span class="cm-property">Component</span> {</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">  <span class="cm-property">render</span>() {</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0  <span class="cm-keyword">return</span> (</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0 \xc2\xa0  <span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">ul</span><span class="cm-tag cm-bracket">&gt;</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0 \xc2\xa0 \xc2\xa0  {<span class="cm-keyword">this</span>.<span class="cm-property">props</span>.<span class="cm-property">items</span>.<span class="cm-property">map</span>(<span class="cm-variable">item</span> <span class="cm-operator">=&gt;</span> (</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0  <span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">li</span> <span class="cm-attribute">key</span>={<span class="cm-variable">item</span>.<span class="cm-property">id</span>}<span class="cm-tag cm-bracket">&gt;</span>{<span class="cm-variable">item</span>.<span class="cm-property">text</span>}<span class="cm-tag cm-bracket">&lt;/</span><span class="cm-tag">li</span><span class="cm-tag cm-bracket">&gt;</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0 \xc2\xa0 \xc2\xa0  ))}</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0 \xc2\xa0  <span class="cm-tag cm-bracket">&lt;/</span><span class="cm-tag">ul</span><span class="cm-tag cm-bracket">&gt;</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0  );</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">  }</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">}</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"><span cm-text="">\xe2\x80\x8b</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"><span class="cm-variable">ReactDOM</span>.<span class="cm-property">render</span>(<span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">TodoApp</span> <span class="cm-tag cm-bracket">/&gt;</span>, <span class="cm-variable">mountNode</span>);</span></pre>\n                 </div>\n                </div>\n               </div>\n              </div>\n             </div>\n             <div style="position: absolute; height: 30px; width: 1px; border-bottom: 0px solid transparent; top: 997px;">\n             </div>\n             <div class="CodeMirror-gutters" style="display: none; height: 1027px;">\n             </div>\n            </div>\n           </div>\n          </div>\n         </div>\n         <div class="playgroundPreview">\n          <div>\n           <div data-reactroot="">\n            <h3>\n             TODO\n            </h3>\n            <ul>\n            </ul>\n            <form>\n             <input value=""/>\n             <button>\n              Add #1\n             </button>\n            </form>\n           </div>\n          </div>\n         </div>\n        </div>\n       </div>\n      </div>\n      <div class="example">\n       <h3>\n        A Component Using External Plugins\n       </h3>\n       <p>\n        React is flexible and provides hooks that allow you to interface with\n        other libraries and frameworks. This example uses\n        <strong>\n         remarkable\n        </strong>\n        , an\n        external Markdown library, to convert the textarea\'s value in real time.\n       </p>\n       <div id="markdownExample">\n        <div class="playground" data-reactroot="">\n         <div>\n          <div class="playground-tab playground-tab-active">\n           Live JSX Editor\n          </div>\n          <div class="playground-tab">\n           Compiled JS\n          </div>\n         </div>\n         <div class="playgroundCode">\n          <div class="playgroundStage">\n           <textarea style="display: none;">class MarkdownEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.state = {value: \'Type some *markdown* here!\'};\n  }\n\n  handleChange(e) {\n    this.setState({value: e.target.value});\n  }\n\n  getRawMarkup() {\n    var md = new Remarkable();\n    return { __html: md.render(this.state.value) };\n  }\n\n  render() {\n    return (\n      &lt;div className="MarkdownEditor"&gt;\n        &lt;h3&gt;Input&lt;/h3&gt;\n        &lt;textarea\n          onChange={this.handleChange}\n          defaultValue={this.state.value} /&gt;\n        &lt;h3&gt;Output&lt;/h3&gt;\n        &lt;div\n          className="content"\n          dangerouslySetInnerHTML={this.getRawMarkup()}\n        /&gt;\n      &lt;/div&gt;\n    );\n  }\n}\n\nReactDOM.render(&lt;MarkdownEditor /&gt;, mountNode);</textarea>\n           <div class="CodeMirror cm-s-solarized-light CodeMirror-wrap">\n            <div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 14px; left: 14px;">\n             <textarea autocapitalize="off" autocorrect="off" spellcheck="false" style="position: absolute; padding: 0px; width: 1000px; height: 1em; outline: none;" tabindex="0"></textarea>\n            </div>\n            <div class="CodeMirror-vscrollbar" cm-not-content="true" style="bottom: 0px; width: 18px; pointer-events: none;">\n             <div style="min-width: 1px; height: 0px;">\n             </div>\n            </div>\n            <div class="CodeMirror-hscrollbar" cm-not-content="true" style="height: 18px; pointer-events: none;">\n             <div style="height: 100%; min-height: 1px; width: 0px;">\n             </div>\n            </div>\n            <div class="CodeMirror-scrollbar-filler" cm-not-content="true">\n            </div>\n            <div class="CodeMirror-gutter-filler" cm-not-content="true">\n            </div>\n            <div class="CodeMirror-scroll" tabindex="-1">\n             <div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 30px; min-height: 674px; padding-right: 0px; padding-bottom: 0px;">\n              <div style="position: relative; top: 0px;">\n               <div class="CodeMirror-lines">\n                <div style="position: relative; outline: none;">\n                 <div class="CodeMirror-measure">\n                  <pre><span>xxxxxxxxxx</span></pre>\n                 </div>\n                 <div class="CodeMirror-measure">\n                 </div>\n                 <div style="position: relative; z-index: 1;">\n                 </div>\n                 <div class="CodeMirror-cursors">\n                  <div class="CodeMirror-cursor" style="left: 14px; top: 0px; height: 19px;">\n                  </div>\n                 </div>\n                 <div class="CodeMirror-code">\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"><span class="cm-keyword">class</span> <span class="cm-def">MarkdownEditor</span> <span class="cm-keyword">extends</span> <span class="cm-variable">React</span>.<span class="cm-property">Component</span> {</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">  <span class="cm-property">constructor</span>(<span class="cm-def">props</span>) {</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0  <span class="cm-keyword">super</span>(<span class="cm-variable-2">props</span>);</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0  <span class="cm-keyword">this</span>.<span class="cm-property">handleChange</span> <span class="cm-operator">=</span> <span class="cm-keyword">this</span>.<span class="cm-property">handleChange</span>.<span class="cm-property">bind</span>(<span class="cm-keyword">this</span>);</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0  <span class="cm-keyword">this</span>.<span class="cm-property">state</span> <span class="cm-operator">=</span> {<span class="cm-property">value</span>: <span class="cm-string">\'Type some *markdown* here!\'</span>};</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">  }</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"><span cm-text="">\xe2\x80\x8b</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">  <span class="cm-property">handleChange</span>(<span class="cm-def">e</span>) {</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0  <span class="cm-keyword">this</span>.<span class="cm-property">setState</span>({<span class="cm-property">value</span>: <span class="cm-variable-2">e</span>.<span class="cm-property">target</span>.<span class="cm-property">value</span>});</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">  }</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"><span cm-text="">\xe2\x80\x8b</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">  <span class="cm-property">getRawMarkup</span>() {</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0  <span class="cm-keyword">var</span> <span class="cm-def">md</span> <span class="cm-operator">=</span> <span class="cm-keyword">new</span> <span class="cm-variable">Remarkable</span>();</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0  <span class="cm-keyword">return</span> { <span class="cm-property">__html</span>: <span class="cm-variable-2">md</span>.<span class="cm-property">render</span>(<span class="cm-keyword">this</span>.<span class="cm-property">state</span>.<span class="cm-property">value</span>) };</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">  }</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"><span cm-text="">\xe2\x80\x8b</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">  <span class="cm-property">render</span>() {</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0  <span class="cm-keyword">return</span> (</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0 \xc2\xa0  <span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">div</span> <span class="cm-attribute">className</span>=<span class="cm-string">"MarkdownEditor"</span><span class="cm-tag cm-bracket">&gt;</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0 \xc2\xa0 \xc2\xa0  <span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">h3</span><span class="cm-tag cm-bracket">&gt;</span>Input<span class="cm-tag cm-bracket">&lt;/</span><span class="cm-tag">h3</span><span class="cm-tag cm-bracket">&gt;</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0 \xc2\xa0 \xc2\xa0  <span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">textarea</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0  <span class="cm-attribute">onChange</span>={<span class="cm-keyword">this</span>.<span class="cm-property">handleChange</span>}</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0  <span class="cm-attribute">defaultValue</span>={<span class="cm-keyword">this</span>.<span class="cm-property">state</span>.<span class="cm-property">value</span>} <span class="cm-tag cm-bracket">/&gt;</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0 \xc2\xa0 \xc2\xa0  <span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">h3</span><span class="cm-tag cm-bracket">&gt;</span>Output<span class="cm-tag cm-bracket">&lt;/</span><span class="cm-tag">h3</span><span class="cm-tag cm-bracket">&gt;</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0 \xc2\xa0 \xc2\xa0  <span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">div</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0  <span class="cm-attribute">className</span>=<span class="cm-string">"content"</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0  <span class="cm-attribute">dangerouslySetInnerHTML</span>={<span class="cm-keyword">this</span>.<span class="cm-property">getRawMarkup</span>()}</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0 \xc2\xa0 \xc2\xa0  <span class="cm-tag cm-bracket">/&gt;</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0 \xc2\xa0  <span class="cm-tag cm-bracket">&lt;/</span><span class="cm-tag">div</span><span class="cm-tag cm-bracket">&gt;</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0  );</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">  }</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">}</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"><span cm-text="">\xe2\x80\x8b</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"><span class="cm-variable">ReactDOM</span>.<span class="cm-property">render</span>(<span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">MarkdownEditor</span> <span class="cm-tag cm-bracket">/&gt;</span>, <span class="cm-variable">mountNode</span>);</span></pre>\n                 </div>\n                </div>\n               </div>\n              </div>\n             </div>\n             <div style="position: absolute; height: 30px; width: 1px; border-bottom: 0px solid transparent; top: 674px;">\n             </div>\n             <div class="CodeMirror-gutters" style="display: none; height: 704px;">\n             </div>\n            </div>\n           </div>\n          </div>\n         </div>\n         <div class="playgroundPreview">\n          <div>\n           <div class="MarkdownEditor" data-reactroot="">\n            <h3>\n             Input\n            </h3>\n            <textarea>Type some *markdown* here!</textarea>\n            <h3>\n             Output\n            </h3>\n            <div class="content">\n             <p>\n              Type some\n              <em>\n               markdown\n              </em>\n              here!\n             </p>\n            </div>\n           </div>\n          </div>\n         </div>\n        </div>\n       </div>\n      </div>\n     </div>\n     <script src="/react/js/remarkable.min.js">\n     </script>\n     <script src="/react/js/examples/hello.js">\n     </script>\n     <script src="/react/js/examples/timer.js">\n     </script>\n     <script src="/react/js/examples/todo.js">\n     </script>\n     <script src="/react/js/examples/markdown.js">\n     </script>\n    </section>\n    <hr class="home-divider"/>\n    <section class="home-bottom-section">\n     <div class="buttons-unit">\n      <a class="button" href="docs/hello-world.html">\n       Get Started\n      </a>\n      <a class="button" href="tutorial/tutorial.html">\n       Take the Tutorial\n      </a>\n     </div>\n    </section>\n    <p>\n    </p>\n   </section>\n   <footer class="nav-footer">\n    <section class="sitemap">\n     <a class="nav-home" href="/react/">\n     </a>\n     <div>\n      <h5>\n       <a href="/react/docs/">\n        Docs\n       </a>\n      </h5>\n      <a href="/react/docs/hello-world.html">\n       Quick Start\n      </a>\n      <a href="/react/docs/thinking-in-react.html">\n       Thinking in React\n      </a>\n      <a href="/react/tutorial/tutorial.html">\n       Tutorial\n      </a>\n      <a href="/react/docs/jsx-in-depth.html">\n       Advanced Guides\n      </a>\n     </div>\n     <div>\n      <h5>\n       <a href="/react/community/support.html">\n        Community\n       </a>\n      </h5>\n      <a href="http://stackoverflow.com/questions/tagged/reactjs" target="_blank">\n       Stack Overflow\n      </a>\n      <a href="https://discuss.reactjs.org/" target="_blank">\n       Discussion Forum\n      </a>\n      <a href="https://discord.gg/0ZcbPKXt5bZjGY5n" target="_blank">\n       Reactiflux Chat\n      </a>\n      <a href="https://www.facebook.com/react" target="_blank">\n       Facebook\n      </a>\n      <a href="https://twitter.com/reactjs" target="_blank">\n       Twitter\n      </a>\n     </div>\n     <div>\n      <h5>\n       <a href="/react/community/support.html">\n        Resources\n       </a>\n      </h5>\n      <a href="/react/community/conferences.html">\n       Conferences\n      </a>\n      <a href="/react/community/videos.html">\n       Videos\n      </a>\n      <a href="https://github.com/facebook/react/wiki/Examples" target="_blank">\n       Examples\n      </a>\n      <a href="https://github.com/facebook/react/wiki/Complementary-Tools" target="_blank">\n       Complementary Tools\n      </a>\n     </div>\n     <div>\n      <h5>\n       More\n      </h5>\n      <a href="/react/blog/">\n       Blog\n      </a>\n      <a href="https://github.com/facebook/react" target="_blank">\n       GitHub\n      </a>\n      <a href="http://facebook.github.io/react-native/" target="_blank">\n       React Native\n      </a>\n      <a href="/react/acknowledgements.html">\n       Acknowledgements\n      </a>\n     </div>\n    </section>\n    <a class="fbOpenSource" href="https://code.facebook.com/projects/" target="_blank">\n     <img alt="Facebook Open Source" height="45" src="/react/img/oss_logo.png" width="170"/>\n    </a>\n    <section class="copyright">\n     Copyright \xc2\xa9 2017 Facebook Inc.\n    </section>\n   </footer>\n  </div>\n  <div class=" fb_reset" id="fb-root">\n   <div style="position: absolute; top: -10000px; height: 0px; width: 0px;">\n    <div>\n     <iframe allowfullscreen="true" allowtransparency="true" aria-hidden="true" frameborder="0" id="fb_xdm_frame_https" name="fb_xdm_frame_https" scrolling="no" src="https://staticxx.facebook.com/connect/xd_arbiter/r/_dMxoUH0Bax.js?version=42#channel=f3905ba68b5157c&amp;origin=https%3A%2F%2Ffacebook.github.io" style="border: none;" tabindex="-1" title="Facebook Cross Domain Communication Frame">\n     </iframe>\n    </div>\n   </div>\n   <div style="position: absolute; top: -10000px; height: 0px; width: 0px;">\n    <div>\n    </div>\n   </div>\n  </div>\n  <script src="/react/js/anchor-links.js">\n  </script>\n  <script>\n   (function(i,s,o,g,r,a,m){i[\'GoogleAnalyticsObject\']=r;i[r]=i[r]||function(){\n    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n    })(window,document,\'script\',\'//www.google-analytics.com/analytics.js\',\'ga\');\n    ga(\'create\', \'UA-41298772-1\', \'facebook.github.io\');\n    ga(\'send\', \'pageview\');\n\n    !function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="https://platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");\n\n    (function(d, s, id) {\n      var js, fjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) return;\n      js = d.createElement(s); js.id = id;\n      js.src = "//connect.facebook.net/en_US/sdk.js#xfbml=1&amp;version=v2.6&amp;appId=623268441017527";\n      fjs.parentNode.insertBefore(js, fjs);\n    }(document, \'script\', \'facebook-jssdk\'));\n\n    docsearch({\n      apiKey: \'36221914cce388c46d0420343e0bb32e\',\n      indexName: \'react\',\n      inputSelector: \'#algolia-doc-search\'\n    });\n  </script>\n  <iframe allowfullscreen="true" allowtransparency="true" frameborder="0" id="rufous-sandbox" scrolling="no" style="position: absolute; visibility: hidden; display: none; width: 0px; height: 0px; padding: 0px; border: none;" title="Twitter analytics iframe">\n  </iframe>\n </body>\n</html>'b'<!DOCTYPE html>\n<!--[if IE]><![endif]-->\n<html class="wf-proximanova-n7-active wf-proximanova-n4-active wf-proximanova-n3-active wf-sourcecodepro-n4-active wf-proximanova-i4-active wf-proximanova-i7-active wf-proximanova-i3-active wf-sourcecodepro-n7-active wf-active" xmlns="http://www.w3.org/1999/xhtml">\n <head>\n  <meta charset="utf-8"/>\n  <meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"/>\n  <title>\n   A JavaScript library for building user interfaces - React\n  </title>\n  <meta content="width=device-width, initial-scale=1" name="viewport"/>\n  <meta content="A JavaScript library for building user interfaces - React" property="og:title"/>\n  <meta content="website" property="og:type"/>\n  <meta content="https://facebook.github.io/react/" property="og:url"/>\n  <meta content="https://facebook.github.io/react/img/logo_og.png" property="og:image"/>\n  <meta content="A JavaScript library for building user interfaces" property="og:description"/>\n  <meta content="623268441017527" property="fb:app_id"/>\n  <link href="/react/favicon.ico" rel="shortcut icon"/>\n  <link href="https://facebook.github.io/react/feed.xml" rel="alternate" title="React" type="application/rss+xml"/>\n  <link href="https://cdn.jsdelivr.net/docsearch.js/1/docsearch.min.css" rel="stylesheet"/>\n  <link href="/react/css/syntax.css" rel="stylesheet"/>\n  <link href="/react/css/codemirror.css" rel="stylesheet"/>\n  <link href="/react/css/react.css" rel="stylesheet"/>\n  <script id="facebook-jssdk" src="//connect.facebook.net/en_US/sdk.js#xfbml=1&amp;version=v2.6&amp;appId=623268441017527">\n  </script>\n  <script id="twitter-wjs" src="https://platform.twitter.com/widgets.js">\n  </script>\n  <script async="" src="//www.google-analytics.com/analytics.js">\n  </script>\n  <script src="//use.typekit.net/vqa1hcx.js">\n  </script>\n  <style type="text/css">\n   .tk-proxima-nova{font-family:"proxima-nova",sans-serif;}.tk-source-code-pro{font-family:"source-code-pro",sans-serif;}\n  </style>\n  <style type="text/css">\n   @font-face{font-family:proxima-nova;src:url(https://use.typekit.net/af/6d80a1/00000000000000003b9aefb8/27/l?subset_id=2&amp;fvd=n7&amp;v=3) format("woff2"),url(https://use.typekit.net/af/6d80a1/00000000000000003b9aefb8/27/d?subset_id=2&amp;fvd=n7&amp;v=3) format("woff"),url(https://use.typekit.net/af/6d80a1/00000000000000003b9aefb8/27/a?subset_id=2&amp;fvd=n7&amp;v=3) format("opentype");font-weight:700;font-style:normal;}@font-face{font-family:proxima-nova;src:url(https://use.typekit.net/af/22122e/00000000000000003b9aefb9/27/l?subset_id=2&amp;fvd=i7&amp;v=3) format("woff2"),url(https://use.typekit.net/af/22122e/00000000000000003b9aefb9/27/d?subset_id=2&amp;fvd=i7&amp;v=3) format("woff"),url(https://use.typekit.net/af/22122e/00000000000000003b9aefb9/27/a?subset_id=2&amp;fvd=i7&amp;v=3) format("opentype");font-weight:700;font-style:italic;}@font-face{font-family:proxima-nova;src:url(https://use.typekit.net/af/936fa1/00000000000000003b9aefc0/27/l?subset_id=2&amp;fvd=n4&amp;v=3) format("woff2"),url(https://use.typekit.net/af/936fa1/00000000000000003b9aefc0/27/d?subset_id=2&amp;fvd=n4&amp;v=3) format("woff"),url(https://use.typekit.net/af/936fa1/00000000000000003b9aefc0/27/a?subset_id=2&amp;fvd=n4&amp;v=3) format("opentype");font-weight:400;font-style:normal;}@font-face{font-family:proxima-nova;src:url(https://use.typekit.net/af/de76fc/00000000000000003b9aefc1/27/l?subset_id=2&amp;fvd=i4&amp;v=3) format("woff2"),url(https://use.typekit.net/af/de76fc/00000000000000003b9aefc1/27/d?subset_id=2&amp;fvd=i4&amp;v=3) format("woff"),url(https://use.typekit.net/af/de76fc/00000000000000003b9aefc1/27/a?subset_id=2&amp;fvd=i4&amp;v=3) format("opentype");font-weight:400;font-style:italic;}@font-face{font-family:proxima-nova;src:url(https://use.typekit.net/af/8a67b6/00000000000000003b9aefbc/27/l?subset_id=2&amp;fvd=n3&amp;v=3) format("woff2"),url(https://use.typekit.net/af/8a67b6/00000000000000003b9aefbc/27/d?subset_id=2&amp;fvd=n3&amp;v=3) format("woff"),url(https://use.typekit.net/af/8a67b6/00000000000000003b9aefbc/27/a?subset_id=2&amp;fvd=n3&amp;v=3) format("opentype");font-weight:300;font-style:normal;}@font-face{font-family:proxima-nova;src:url(https://use.typekit.net/af/69ead1/00000000000000003b9aefbd/27/l?subset_id=2&amp;fvd=i3&amp;v=3) format("woff2"),url(https://use.typekit.net/af/69ead1/00000000000000003b9aefbd/27/d?subset_id=2&amp;fvd=i3&amp;v=3) format("woff"),url(https://use.typekit.net/af/69ead1/00000000000000003b9aefbd/27/a?subset_id=2&amp;fvd=i3&amp;v=3) format("opentype");font-weight:300;font-style:italic;}@font-face{font-family:source-code-pro;src:url(https://use.typekit.net/af/269954/0000000000000000000179d5/27/l?subset_id=2&amp;fvd=n7&amp;v=3) format("woff2"),url(https://use.typekit.net/af/269954/0000000000000000000179d5/27/d?subset_id=2&amp;fvd=n7&amp;v=3) format("woff"),url(https://use.typekit.net/af/269954/0000000000000000000179d5/27/a?subset_id=2&amp;fvd=n7&amp;v=3) format("opentype");font-weight:700;font-style:normal;}@font-face{font-family:source-code-pro;src:url(https://use.typekit.net/af/9b5d7b/0000000000000000000179cf/27/l?subset_id=2&amp;fvd=n4&amp;v=3) format("woff2"),url(https://use.typekit.net/af/9b5d7b/0000000000000000000179cf/27/d?subset_id=2&amp;fvd=n4&amp;v=3) format("woff"),url(https://use.typekit.net/af/9b5d7b/0000000000000000000179cf/27/a?subset_id=2&amp;fvd=n4&amp;v=3) format("opentype");font-weight:400;font-style:normal;}\n  </style>\n  <script>\n   try{Typekit.load();}catch(e){}\n  </script>\n  <!--[if lte IE 8]>\n  <script src="/react/js/html5shiv.min.js"></script>\n  <script src="/react/js/es5-shim.min.js"></script>\n  <script src="/react/js/es5-sham.min.js"></script>\n  <![endif]-->\n  <script src="https://cdn.jsdelivr.net/docsearch.js/1/docsearch.min.js" type="text/javascript">\n  </script>\n  <script src="/react/js/codemirror.js">\n  </script>\n  <script src="/react/js/javascript.js">\n  </script>\n  <script src="/react/js/xml.js">\n  </script>\n  <script src="/react/js/jsx.js">\n  </script>\n  <script src="/react/js/react.js">\n  </script>\n  <script src="/react/js/react-dom.js">\n  </script>\n  <script src="/react/js/babel.min.js">\n  </script>\n  <script src="/react/js/live_editor.js">\n  </script>\n  <style type="text/css">\n   .fb_hidden{position:absolute;top:-10000px;z-index:10001}.fb_reposition{overflow:hidden;position:relative}.fb_invisible{display:none}.fb_reset{background:none;border:0;border-spacing:0;color:#000;cursor:auto;direction:ltr;font-family:"lucida grande", tahoma, verdana, arial, sans-serif;font-size:11px;font-style:normal;font-variant:normal;font-weight:normal;letter-spacing:normal;line-height:1;margin:0;overflow:visible;padding:0;text-align:left;text-decoration:none;text-indent:0;text-shadow:none;text-transform:none;visibility:visible;white-space:normal;word-spacing:normal}.fb_reset&gt;div{overflow:hidden}.fb_link img{border:none}@keyframes fb_transform{from{opacity:0;transform:scale(.95)}to{opacity:1;transform:scale(1)}}.fb_animate{animation:fb_transform .3s forwards}\n.fb_dialog{background:rgba(82, 82, 82, .7);position:absolute;top:-10000px;z-index:10001}.fb_reset .fb_dialog_legacy{overflow:visible}.fb_dialog_advanced{padding:10px;-moz-border-radius:8px;-webkit-border-radius:8px;border-radius:8px}.fb_dialog_content{background:#fff;color:#333}.fb_dialog_close_icon{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/yq/r/IE9JII6Z1Ys.png) no-repeat scroll 0 0 transparent;cursor:pointer;display:block;height:15px;position:absolute;right:18px;top:17px;width:15px}.fb_dialog_mobile .fb_dialog_close_icon{top:5px;left:5px;right:auto}.fb_dialog_padding{background-color:transparent;position:absolute;width:1px;z-index:-1}.fb_dialog_close_icon:hover{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/yq/r/IE9JII6Z1Ys.png) no-repeat scroll 0 -15px transparent}.fb_dialog_close_icon:active{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/yq/r/IE9JII6Z1Ys.png) no-repeat scroll 0 -30px transparent}.fb_dialog_loader{background-color:#f6f7f9;border:1px solid #606060;font-size:24px;padding:20px}.fb_dialog_top_left,.fb_dialog_top_right,.fb_dialog_bottom_left,.fb_dialog_bottom_right{height:10px;width:10px;overflow:hidden;position:absolute}.fb_dialog_top_left{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/ye/r/8YeTNIlTZjm.png) no-repeat 0 0;left:-10px;top:-10px}.fb_dialog_top_right{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/ye/r/8YeTNIlTZjm.png) no-repeat 0 -10px;right:-10px;top:-10px}.fb_dialog_bottom_left{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/ye/r/8YeTNIlTZjm.png) no-repeat 0 -20px;bottom:-10px;left:-10px}.fb_dialog_bottom_right{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/ye/r/8YeTNIlTZjm.png) no-repeat 0 -30px;right:-10px;bottom:-10px}.fb_dialog_vert_left,.fb_dialog_vert_right,.fb_dialog_horiz_top,.fb_dialog_horiz_bottom{position:absolute;background:#525252;filter:alpha(opacity=70);opacity:.7}.fb_dialog_vert_left,.fb_dialog_vert_right{width:10px;height:100%}.fb_dialog_vert_left{margin-left:-10px}.fb_dialog_vert_right{right:0;margin-right:-10px}.fb_dialog_horiz_top,.fb_dialog_horiz_bottom{width:100%;height:10px}.fb_dialog_horiz_top{margin-top:-10px}.fb_dialog_horiz_bottom{bottom:0;margin-bottom:-10px}.fb_dialog_iframe{line-height:0}.fb_dialog_content .dialog_title{background:#6d84b4;border:1px solid #365899;color:#fff;font-size:14px;font-weight:bold;margin:0}.fb_dialog_content .dialog_title&gt;span{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/yd/r/Cou7n-nqK52.gif) no-repeat 5px 50%;float:left;padding:5px 0 7px 26px}body.fb_hidden{-webkit-transform:none;height:100%;margin:0;overflow:visible;position:absolute;top:-10000px;left:0;width:100%}.fb_dialog.fb_dialog_mobile.loading{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/ya/r/3rhSv5V8j3o.gif) white no-repeat 50% 50%;min-height:100%;min-width:100%;overflow:hidden;position:absolute;top:0;z-index:10001}.fb_dialog.fb_dialog_mobile.loading.centered{width:auto;height:auto;min-height:initial;min-width:initial;background:none}.fb_dialog.fb_dialog_mobile.loading.centered #fb_dialog_loader_spinner{width:100%}.fb_dialog.fb_dialog_mobile.loading.centered .fb_dialog_content{background:none}.loading.centered #fb_dialog_loader_close{color:#fff;display:block;padding-top:20px;clear:both;font-size:18px}#fb-root #fb_dialog_ipad_overlay{background:rgba(0, 0, 0, .45);position:absolute;bottom:0;left:0;right:0;top:0;width:100%;min-height:100%;z-index:10000}#fb-root #fb_dialog_ipad_overlay.hidden{display:none}.fb_dialog.fb_dialog_mobile.loading iframe{visibility:hidden}.fb_dialog_content .dialog_header{-webkit-box-shadow:white 0 1px 1px -1px inset;background:-webkit-gradient(linear, 0% 0%, 0% 100%, from(#738ABA), to(#2C4987));border-bottom:1px solid;border-color:#1d4088;color:#fff;font:14px Helvetica, sans-serif;font-weight:bold;text-overflow:ellipsis;text-shadow:rgba(0, 30, 84, .296875) 0 -1px 0;vertical-align:middle;white-space:nowrap}.fb_dialog_content .dialog_header table{-webkit-font-smoothing:subpixel-antialiased;height:43px;width:100%}.fb_dialog_content .dialog_header td.header_left{font-size:12px;padding-left:5px;vertical-align:middle;width:60px}.fb_dialog_content .dialog_header td.header_right{font-size:12px;padding-right:5px;vertical-align:middle;width:60px}.fb_dialog_content .touchable_button{background:-webkit-gradient(linear, 0% 0%, 0% 100%, from(#4966A6), color-stop(.5, #355492), to(#2A4887));border:1px solid #29487d;-webkit-background-clip:padding-box;-webkit-border-radius:3px;-webkit-box-shadow:rgba(0, 0, 0, .117188) 0 1px 1px inset, rgba(255, 255, 255, .167969) 0 1px 0;display:inline-block;margin-top:3px;max-width:85px;line-height:18px;padding:4px 12px;position:relative}.fb_dialog_content .dialog_header .touchable_button input{border:none;background:none;color:#fff;font:12px Helvetica, sans-serif;font-weight:bold;margin:2px -12px;padding:2px 6px 3px 6px;text-shadow:rgba(0, 30, 84, .296875) 0 -1px 0}.fb_dialog_content .dialog_header .header_center{color:#fff;font-size:16px;font-weight:bold;line-height:18px;text-align:center;vertical-align:middle}.fb_dialog_content .dialog_content{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/y9/r/jKEcVPZFk-2.gif) no-repeat 50% 50%;border:1px solid #555;border-bottom:0;border-top:0;height:150px}.fb_dialog_content .dialog_footer{background:#f6f7f9;border:1px solid #555;border-top-color:#ccc;height:40px}#fb_dialog_loader_close{float:left}.fb_dialog.fb_dialog_mobile .fb_dialog_close_button{text-shadow:rgba(0, 30, 84, .296875) 0 -1px 0}.fb_dialog.fb_dialog_mobile .fb_dialog_close_icon{visibility:hidden}#fb_dialog_loader_spinner{animation:rotateSpinner 1.2s linear infinite;background-color:transparent;background-image:url(https://static.xx.fbcdn.net/rsrc.php/v3/yD/r/t-wz8gw1xG1.png);background-repeat:no-repeat;background-position:50% 50%;height:24px;width:24px}@keyframes rotateSpinner{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}\n.fb_iframe_widget{display:inline-block;position:relative}.fb_iframe_widget span{display:inline-block;position:relative;text-align:justify}.fb_iframe_widget iframe{position:absolute}.fb_iframe_widget_fluid_desktop,.fb_iframe_widget_fluid_desktop span,.fb_iframe_widget_fluid_desktop iframe{max-width:100%}.fb_iframe_widget_fluid_desktop iframe{min-width:220px;position:relative}.fb_iframe_widget_lift{z-index:1}.fb_hide_iframes iframe{position:relative;left:-10000px}.fb_iframe_widget_loader{position:relative;display:inline-block}.fb_iframe_widget_fluid{display:inline}.fb_iframe_widget_fluid span{width:100%}.fb_iframe_widget_loader iframe{min-height:32px;z-index:2;zoom:1}.fb_iframe_widget_loader .FB_Loader{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/y9/r/jKEcVPZFk-2.gif) no-repeat;height:32px;width:32px;margin-left:-16px;position:absolute;left:50%;z-index:4}\n  </style>\n </head>\n <body>\n  <div class="container">\n   <div class="nav-main">\n    <div class="wrap">\n     <a class="nav-home" href="/react/">\n      <img class="nav-logo" height="36" src="/react/img/logo.svg" width="36"/>\n      React\n     </a>\n     <div class="nav-lists">\n      <ul class="nav-site nav-site-internal">\n       <li>\n        <a href="/react/docs/hello-world.html">\n         Docs\n        </a>\n       </li>\n       <li>\n        <a href="/react/tutorial/tutorial.html">\n         Tutorial\n        </a>\n       </li>\n       <li>\n        <a href="/react/community/support.html">\n         Community\n        </a>\n       </li>\n       <li>\n        <a href="/react/blog/">\n         Blog\n        </a>\n       </li>\n       <li class="nav-site-search">\n        <span class="algolia-autocomplete" style="position: relative; display: inline-block; direction: ltr;">\n         <input aria-autocomplete="list" aria-expanded="false" aria-labelledby="algolia-doc-search" aria-owns="algolia-autocomplete-listbox-0" autocomplete="off" class="aa-input" dir="auto" id="algolia-doc-search" placeholder="Search docs..." role="combobox" spellcheck="false" style="position: relative; vertical-align: top;" type="text"/>\n         <pre aria-hidden="true" style=\'position: absolute; visibility: hidden; white-space: pre; font-family: proxima-nova, "Helvetica Neue", Helvetica, Roboto, Arial, sans-serif; font-size: 16px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; word-spacing: 0px; letter-spacing: normal; text-indent: 0px; text-rendering: auto; text-transform: none;\'></pre>\n         <span class="aa-dropdown-menu" id="algolia-autocomplete-listbox-0" role="listbox" style="position: absolute; top: 100%; z-index: 100; display: none; left: 0px; right: auto;">\n          <div class="aa-dataset-1">\n          </div>\n         </span>\n        </span>\n       </li>\n      </ul>\n      <ul class="nav-site nav-site-external">\n       <li>\n        <a href="https://github.com/facebook/react">\n         GitHub\n        </a>\n       </li>\n       <li>\n        <a href="https://github.com/facebook/react/releases">\n         v15.5.0\n        </a>\n       </li>\n      </ul>\n     </div>\n    </div>\n   </div>\n   <div class="hero">\n    <div class="wrap">\n     <div class="text">\n      <strong>\n       React\n      </strong>\n     </div>\n     <div class="minitext">\n      A JavaScript library for building user interfaces\n     </div>\n     <div class="buttons-unit">\n      <a class="button" href="/react/docs/hello-world.html">\n       Get Started\n      </a>\n      <a class="button" href="/react/tutorial/tutorial.html">\n       Take the Tutorial\n      </a>\n     </div>\n    </div>\n   </div>\n   <section class="content wrap">\n    <section class="light home-section">\n     <div class="marketing-row">\n      <div class="marketing-col">\n       <h3>\n        Declarative\n       </h3>\n       <p>\n        React makes it painless to create interactive UIs. Design simple views for each state in your application, and React will efficiently update and render just the right components when your data changes.\n       </p>\n       <p>\n        Declarative views make your code more predictable and easier to debug.\n       </p>\n      </div>\n      <div class="marketing-col">\n       <h3>\n        Component-Based\n       </h3>\n       <p>\n        Build encapsulated components that manage their own state, then compose them to make complex UIs.\n       </p>\n       <p>\n        Since component logic is written in JavaScript instead of templates, you can easily pass rich data through your app and keep state out of the\xc2\xa0DOM.\n       </p>\n      </div>\n      <div class="marketing-col">\n       <h3>\n        Learn\xc2\xa0Once, Write\xc2\xa0Anywhere\n       </h3>\n       <p>\n        We don\'t make assumptions about the rest of your technology stack, so you can develop new features in React without rewriting existing code.\n       </p>\n       <p>\n        React can also render on the server using Node and power mobile apps using\n        <a href="https://facebook.github.io/react-native/">\n         React Native\n        </a>\n        .\n       </p>\n      </div>\n     </div>\n    </section>\n    <p>\n    </p>\n    <hr class="home-divider"/>\n    <section class="home-section">\n     <div id="examples">\n      <div class="example">\n       <h3>\n        A Simple Component\n       </h3>\n       <p>\n        React components implement a\n        <code>\n         render()\n        </code>\n        method that takes input data and\n        returns what to display. This example uses an XML-like syntax called\n        JSX. Input data that is passed into the component can be accessed by\n        <code>\n         render()\n        </code>\n        via\n        <code>\n         this.props\n        </code>\n        .\n       </p>\n       <p>\n        <strong>\n         JSX is optional and not required to use React.\n        </strong>\n        Try\n        clicking on "Compiled JS" to see the raw JavaScript code produced by\n        the JSX compiler.\n       </p>\n       <div id="helloExample">\n        <div class="playground" data-reactroot="">\n         <div>\n          <div class="playground-tab playground-tab-active">\n           Live JSX Editor\n          </div>\n          <div class="playground-tab">\n           Compiled JS\n          </div>\n         </div>\n         <div class="playgroundCode">\n          <div class="playgroundStage">\n           <textarea style="display: none;">class HelloMessage extends React.Component {\n  render() {\n    return &lt;div&gt;Hello {this.props.name}&lt;/div&gt;;\n  }\n}\n\nReactDOM.render(&lt;HelloMessage name="Jane" /&gt;, mountNode);</textarea>\n           <div class="CodeMirror cm-s-solarized-light CodeMirror-wrap">\n            <div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 14px; left: 14px;">\n             <textarea autocapitalize="off" autocorrect="off" spellcheck="false" style="position: absolute; padding: 0px; width: 1000px; height: 1em; outline: none;" tabindex="0"></textarea>\n            </div>\n            <div class="CodeMirror-vscrollbar" cm-not-content="true" style="width: 18px; pointer-events: none;">\n             <div style="min-width: 1px; height: 0px;">\n             </div>\n            </div>\n            <div class="CodeMirror-hscrollbar" cm-not-content="true" style="height: 18px; pointer-events: none;">\n             <div style="height: 100%; min-height: 1px; width: 0px;">\n             </div>\n            </div>\n            <div class="CodeMirror-scrollbar-filler" cm-not-content="true">\n            </div>\n            <div class="CodeMirror-gutter-filler" cm-not-content="true">\n            </div>\n            <div class="CodeMirror-scroll" tabindex="-1">\n             <div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 30px; min-height: 161px; padding-right: 0px; padding-bottom: 0px;">\n              <div style="position: relative; top: 0px;">\n               <div class="CodeMirror-lines">\n                <div style="position: relative; outline: none;">\n                 <div class="CodeMirror-measure">\n                  <span>\n                   <span>\n                    \xe2\x80\x8b\n                   </span>\n                   x\n                  </span>\n                 </div>\n                 <div class="CodeMirror-measure">\n                 </div>\n                 <div style="position: relative; z-index: 1;">\n                 </div>\n                 <div class="CodeMirror-cursors">\n                  <div class="CodeMirror-cursor" style="left: 14px; top: 0px; height: 19px;">\n                  </div>\n                 </div>\n                 <div class="CodeMirror-code">\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"><span class="cm-keyword">class</span> <span class="cm-def">HelloMessage</span> <span class="cm-keyword">extends</span> <span class="cm-variable">React</span>.<span class="cm-property">Component</span> {</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">  <span class="cm-property">render</span>() {</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0  <span class="cm-keyword">return</span> <span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">div</span><span class="cm-tag cm-bracket">&gt;</span>Hello {<span class="cm-keyword">this</span>.<span class="cm-property">props</span>.<span class="cm-property">name</span>}<span class="cm-tag cm-bracket">&lt;/</span><span class="cm-tag">div</span><span class="cm-tag cm-bracket">&gt;</span>;</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">  }</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">}</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"><span cm-text="">\xe2\x80\x8b</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"><span class="cm-variable">ReactDOM</span>.<span class="cm-property">render</span>(<span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">HelloMessage</span> <span class="cm-attribute">name</span>=<span class="cm-string">"Jane"</span> <span class="cm-tag cm-bracket">/&gt;</span>, <span class="cm-variable">mountNode</span>);</span></pre>\n                 </div>\n                </div>\n               </div>\n              </div>\n             </div>\n             <div style="position: absolute; height: 30px; width: 1px; border-bottom: 0px solid transparent; top: 161px;">\n             </div>\n             <div class="CodeMirror-gutters" style="display: none; height: 191px;">\n             </div>\n            </div>\n           </div>\n          </div>\n         </div>\n         <div class="playgroundPreview">\n          <div>\n           <div data-reactroot="">\n            <!-- react-text: 2 -->\n            Hello\n            <!-- /react-text -->\n            <!-- react-text: 3 -->\n            Jane\n            <!-- /react-text -->\n           </div>\n          </div>\n         </div>\n        </div>\n       </div>\n      </div>\n      <div class="example">\n       <h3>\n        A Stateful Component\n       </h3>\n       <p>\n        In addition to taking input data (accessed via\n        <code>\n         this.props\n        </code>\n        ), a\n        component can maintain internal state data (accessed via\n        <code>\n         this.state\n        </code>\n        ).\n        When a component\'s state data changes, the rendered markup will be\n        updated by re-invoking\n        <code>\n         render()\n        </code>\n        .\n       </p>\n       <div id="timerExample">\n        <div class="playground" data-reactroot="">\n         <div>\n          <div class="playground-tab playground-tab-active">\n           Live JSX Editor\n          </div>\n          <div class="playground-tab">\n           Compiled JS\n          </div>\n         </div>\n         <div class="playgroundCode">\n          <div class="playgroundStage">\n           <textarea style="display: none;">class Timer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {secondsElapsed: 0};\n  }\n\n  tick() {\n    this.setState((prevState) =&gt; ({\n      secondsElapsed: prevState.secondsElapsed + 1\n    }));\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(() =&gt; this.tick(), 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    return (\n      &lt;div&gt;Seconds Elapsed: {this.state.secondsElapsed}&lt;/div&gt;\n    );\n  }\n}\n\nReactDOM.render(&lt;Timer /&gt;, mountNode);</textarea>\n           <div class="CodeMirror cm-s-solarized-light CodeMirror-wrap">\n            <div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 14px; left: 14px;">\n             <textarea autocapitalize="off" autocorrect="off" spellcheck="false" style="position: absolute; padding: 0px; width: 1000px; height: 1em; outline: none;" tabindex="0"></textarea>\n            </div>\n            <div class="CodeMirror-vscrollbar" cm-not-content="true" style="bottom: 0px; width: 18px; pointer-events: none;">\n             <div style="min-width: 1px; height: 0px;">\n             </div>\n            </div>\n            <div class="CodeMirror-hscrollbar" cm-not-content="true" style="height: 18px; pointer-events: none;">\n             <div style="height: 100%; min-height: 1px; width: 0px;">\n             </div>\n            </div>\n            <div class="CodeMirror-scrollbar-filler" cm-not-content="true">\n            </div>\n            <div class="CodeMirror-gutter-filler" cm-not-content="true">\n            </div>\n            <div class="CodeMirror-scroll" tabindex="-1">\n             <div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 30px; min-height: 560px; padding-right: 0px; padding-bottom: 0px;">\n              <div style="position: relative; top: 0px;">\n               <div class="CodeMirror-lines">\n                <div style="position: relative; outline: none;">\n                 <div class="CodeMirror-measure">\n                  <pre><span>xxxxxxxxxx</span></pre>\n                 </div>\n                 <div class="CodeMirror-measure">\n                 </div>\n                 <div style="position: relative; z-index: 1;">\n                 </div>\n                 <div class="CodeMirror-cursors">\n                  <div class="CodeMirror-cursor" style="left: 14px; top: 0px; height: 19px;">\n                  </div>\n                 </div>\n                 <div class="CodeMirror-code">\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"><span class="cm-keyword">class</span> <span class="cm-def">Timer</span> <span class="cm-keyword">extends</span> <span class="cm-variable">React</span>.<span class="cm-property">Component</span> {</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">  <span class="cm-property">constructor</span>(<span class="cm-def">props</span>) {</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0  <span class="cm-keyword">super</span>(<span class="cm-variable-2">props</span>);</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0  <span class="cm-keyword">this</span>.<span class="cm-property">state</span> <span class="cm-operator">=</span> {<span class="cm-property">secondsElapsed</span>: <span class="cm-number">0</span>};</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">  }</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"><span cm-text="">\xe2\x80\x8b</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">  <span class="cm-property">tick</span>() {</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0  <span class="cm-keyword">this</span>.<span class="cm-property">setState</span>((<span class="cm-def">prevState</span>) <span class="cm-operator">=&gt;</span> ({</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0 \xc2\xa0  <span class="cm-property">secondsElapsed</span>: <span class="cm-variable-2">prevState</span>.<span class="cm-property">secondsElapsed</span> <span class="cm-operator">+</span> <span class="cm-number">1</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0  }));</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">  }</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"><span cm-text="">\xe2\x80\x8b</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">  <span class="cm-property">componentDidMount</span>() {</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0  <span class="cm-keyword">this</span>.<span class="cm-property">interval</span> <span class="cm-operator">=</span> <span class="cm-variable">setInterval</span>(() <span class="cm-operator">=&gt;</span> <span class="cm-keyword">this</span>.<span class="cm-property">tick</span>(), <span class="cm-number">1000</span>);</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">  }</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"><span cm-text="">\xe2\x80\x8b</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">  <span class="cm-property">componentWillUnmount</span>() {</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0  <span class="cm-variable">clearInterval</span>(<span class="cm-keyword">this</span>.<span class="cm-property">interval</span>);</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">  }</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"><span cm-text="">\xe2\x80\x8b</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">  <span class="cm-property">render</span>() {</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0  <span class="cm-keyword">return</span> (</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0 \xc2\xa0  <span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">div</span><span class="cm-tag cm-bracket">&gt;</span>Seconds Elapsed: {<span class="cm-keyword">this</span>.<span class="cm-property">state</span>.<span class="cm-property">secondsElapsed</span>}<span class="cm-tag cm-bracket">&lt;/</span><span class="cm-tag">div</span><span class="cm-tag cm-bracket">&gt;</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0  );</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">  }</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">}</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"><span cm-text="">\xe2\x80\x8b</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"><span class="cm-variable">ReactDOM</span>.<span class="cm-property">render</span>(<span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">Timer</span> <span class="cm-tag cm-bracket">/&gt;</span>, <span class="cm-variable">mountNode</span>);</span></pre>\n                 </div>\n                </div>\n               </div>\n              </div>\n             </div>\n             <div style="position: absolute; height: 30px; width: 1px; border-bottom: 0px solid transparent; top: 560px;">\n             </div>\n             <div class="CodeMirror-gutters" style="display: none; height: 590px;">\n             </div>\n            </div>\n           </div>\n          </div>\n         </div>\n         <div class="playgroundPreview">\n          <div>\n           <div data-reactroot="">\n            <!-- react-text: 2 -->\n            Seconds Elapsed:\n            <!-- /react-text -->\n            <!-- react-text: 3 -->\n            2\n            <!-- /react-text -->\n           </div>\n          </div>\n         </div>\n        </div>\n       </div>\n      </div>\n      <div class="example">\n       <h3>\n        An Application\n       </h3>\n       <p>\n        Using\n        <code>\n         props\n        </code>\n        and\n        <code>\n         state\n        </code>\n        , we can put together a small Todo application.\n        This example uses\n        <code>\n         state\n        </code>\n        to track the current list of items as well as\n        the text that the user has entered. Although event handlers appear to be\n        rendered inline, they will be collected and implemented using event\n        delegation.\n       </p>\n       <div id="todoExample">\n        <div class="playground" data-reactroot="">\n         <div>\n          <div class="playground-tab playground-tab-active">\n           Live JSX Editor\n          </div>\n          <div class="playground-tab">\n           Compiled JS\n          </div>\n         </div>\n         <div class="playgroundCode">\n          <div class="playgroundStage">\n           <textarea style="display: none;">class TodoApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.state = {items: [], text: \'\'};\n  }\n\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;h3&gt;TODO&lt;/h3&gt;\n        &lt;TodoList items={this.state.items} /&gt;\n        &lt;form onSubmit={this.handleSubmit}&gt;\n          &lt;input onChange={this.handleChange} value={this.state.text} /&gt;\n          &lt;button&gt;{\'Add #\' + (this.state.items.length + 1)}&lt;/button&gt;\n        &lt;/form&gt;\n      &lt;/div&gt;\n    );\n  }\n\n  handleChange(e) {\n    this.setState({text: e.target.value});\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    var newItem = {\n      text: this.state.text,\n      id: Date.now()\n    };\n    this.setState((prevState) =&gt; ({\n      items: prevState.items.concat(newItem),\n      text: \'\'\n    }));\n  }\n}\n\nclass TodoList extends React.Component {\n  render() {\n    return (\n      &lt;ul&gt;\n        {this.props.items.map(item =&gt; (\n          &lt;li key={item.id}&gt;{item.text}&lt;/li&gt;\n        ))}\n      &lt;/ul&gt;\n    );\n  }\n}\n\nReactDOM.render(&lt;TodoApp /&gt;, mountNode);</textarea>\n           <div class="CodeMirror cm-s-solarized-light CodeMirror-wrap">\n            <div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 14px; left: 14px;">\n             <textarea autocapitalize="off" autocorrect="off" spellcheck="false" style="position: absolute; padding: 0px; width: 1000px; height: 1em; outline: none;" tabindex="0"></textarea>\n            </div>\n            <div class="CodeMirror-vscrollbar" cm-not-content="true" style="bottom: 0px; width: 18px; pointer-events: none;">\n             <div style="min-width: 1px; height: 0px;">\n             </div>\n            </div>\n            <div class="CodeMirror-hscrollbar" cm-not-content="true" style="height: 18px; pointer-events: none;">\n             <div style="height: 100%; min-height: 1px; width: 0px;">\n             </div>\n            </div>\n            <div class="CodeMirror-scrollbar-filler" cm-not-content="true">\n            </div>\n            <div class="CodeMirror-gutter-filler" cm-not-content="true">\n            </div>\n            <div class="CodeMirror-scroll" tabindex="-1">\n             <div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 30px; min-height: 997px; padding-right: 0px; padding-bottom: 0px;">\n              <div style="position: relative; top: 0px;">\n               <div class="CodeMirror-lines">\n                <div style="position: relative; outline: none;">\n                 <div class="CodeMirror-measure">\n                  <pre><span>xxxxxxxxxx</span></pre>\n                 </div>\n                 <div class="CodeMirror-measure">\n                 </div>\n                 <div style="position: relative; z-index: 1;">\n                 </div>\n                 <div class="CodeMirror-cursors">\n                  <div class="CodeMirror-cursor" style="left: 14px; top: 0px; height: 19px;">\n                  </div>\n                 </div>\n                 <div class="CodeMirror-code">\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"><span class="cm-keyword">class</span> <span class="cm-def">TodoApp</span> <span class="cm-keyword">extends</span> <span class="cm-variable">React</span>.<span class="cm-property">Component</span> {</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">  <span class="cm-property">constructor</span>(<span class="cm-def">props</span>) {</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0  <span class="cm-keyword">super</span>(<span class="cm-variable-2">props</span>);</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0  <span class="cm-keyword">this</span>.<span class="cm-property">handleChange</span> <span class="cm-operator">=</span> <span class="cm-keyword">this</span>.<span class="cm-property">handleChange</span>.<span class="cm-property">bind</span>(<span class="cm-keyword">this</span>);</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0  <span class="cm-keyword">this</span>.<span class="cm-property">handleSubmit</span> <span class="cm-operator">=</span> <span class="cm-keyword">this</span>.<span class="cm-property">handleSubmit</span>.<span class="cm-property">bind</span>(<span class="cm-keyword">this</span>);</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0  <span class="cm-keyword">this</span>.<span class="cm-property">state</span> <span class="cm-operator">=</span> {<span class="cm-property">items</span>: [], <span class="cm-property">text</span>: <span class="cm-string">\'\'</span>};</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">  }</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"><span cm-text="">\xe2\x80\x8b</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">  <span class="cm-property">render</span>() {</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0  <span class="cm-keyword">return</span> (</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0 \xc2\xa0  <span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">div</span><span class="cm-tag cm-bracket">&gt;</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0 \xc2\xa0 \xc2\xa0  <span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">h3</span><span class="cm-tag cm-bracket">&gt;</span>TODO<span class="cm-tag cm-bracket">&lt;/</span><span class="cm-tag">h3</span><span class="cm-tag cm-bracket">&gt;</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0 \xc2\xa0 \xc2\xa0  <span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">TodoList</span> <span class="cm-attribute">items</span>={<span class="cm-keyword">this</span>.<span class="cm-property">state</span>.<span class="cm-property">items</span>} <span class="cm-tag cm-bracket">/&gt;</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0 \xc2\xa0 \xc2\xa0  <span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">form</span> <span class="cm-attribute">onSubmit</span>={<span class="cm-keyword">this</span>.<span class="cm-property">handleSubmit</span>}<span class="cm-tag cm-bracket">&gt;</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0  <span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">input</span> <span class="cm-attribute">onChange</span>={<span class="cm-keyword">this</span>.<span class="cm-property">handleChange</span>} <span class="cm-attribute">value</span>={<span class="cm-keyword">this</span>.<span class="cm-property">state</span>.<span class="cm-property">text</span>} <span class="cm-tag cm-bracket">/&gt;</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0  <span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">button</span><span class="cm-tag cm-bracket">&gt;</span>{<span class="cm-string">\'Add #\'</span> <span class="cm-operator">+</span> (<span class="cm-keyword">this</span>.<span class="cm-property">state</span>.<span class="cm-property">items</span>.<span class="cm-property">length</span> <span class="cm-operator">+</span> <span class="cm-number">1</span>)}<span class="cm-tag cm-bracket">&lt;/</span><span class="cm-tag">button</span><span class="cm-tag cm-bracket">&gt;</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0 \xc2\xa0 \xc2\xa0  <span class="cm-tag cm-bracket">&lt;/</span><span class="cm-tag">form</span><span class="cm-tag cm-bracket">&gt;</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0 \xc2\xa0  <span class="cm-tag cm-bracket">&lt;/</span><span class="cm-tag">div</span><span class="cm-tag cm-bracket">&gt;</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0  );</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">  }</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"><span cm-text="">\xe2\x80\x8b</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">  <span class="cm-property">handleChange</span>(<span class="cm-def">e</span>) {</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0  <span class="cm-keyword">this</span>.<span class="cm-property">setState</span>({<span class="cm-property">text</span>: <span class="cm-variable-2">e</span>.<span class="cm-property">target</span>.<span class="cm-property">value</span>});</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">  }</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"><span cm-text="">\xe2\x80\x8b</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">  <span class="cm-property">handleSubmit</span>(<span class="cm-def">e</span>) {</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0  <span class="cm-variable-2">e</span>.<span class="cm-property">preventDefault</span>();</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0  <span class="cm-keyword">var</span> <span class="cm-def">newItem</span> <span class="cm-operator">=</span> {</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0 \xc2\xa0  <span class="cm-property">text</span>: <span class="cm-keyword">this</span>.<span class="cm-property">state</span>.<span class="cm-property">text</span>,</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0 \xc2\xa0  <span class="cm-property">id</span>: <span class="cm-variable">Date</span>.<span class="cm-property">now</span>()</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0  };</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0  <span class="cm-keyword">this</span>.<span class="cm-property">setState</span>((<span class="cm-def">prevState</span>) <span class="cm-operator">=&gt;</span> ({</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0 \xc2\xa0  <span class="cm-property">items</span>: <span class="cm-variable-2">prevState</span>.<span class="cm-property">items</span>.<span class="cm-property">concat</span>(<span class="cm-variable-2">newItem</span>),</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0 \xc2\xa0  <span class="cm-property">text</span>: <span class="cm-string">\'\'</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0  }));</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">  }</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">}</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"><span cm-text="">\xe2\x80\x8b</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"><span class="cm-keyword">class</span> <span class="cm-def">TodoList</span> <span class="cm-keyword">extends</span> <span class="cm-variable">React</span>.<span class="cm-property">Component</span> {</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">  <span class="cm-property">render</span>() {</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0  <span class="cm-keyword">return</span> (</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0 \xc2\xa0  <span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">ul</span><span class="cm-tag cm-bracket">&gt;</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0 \xc2\xa0 \xc2\xa0  {<span class="cm-keyword">this</span>.<span class="cm-property">props</span>.<span class="cm-property">items</span>.<span class="cm-property">map</span>(<span class="cm-variable">item</span> <span class="cm-operator">=&gt;</span> (</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0  <span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">li</span> <span class="cm-attribute">key</span>={<span class="cm-variable">item</span>.<span class="cm-property">id</span>}<span class="cm-tag cm-bracket">&gt;</span>{<span class="cm-variable">item</span>.<span class="cm-property">text</span>}<span class="cm-tag cm-bracket">&lt;/</span><span class="cm-tag">li</span><span class="cm-tag cm-bracket">&gt;</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0 \xc2\xa0 \xc2\xa0  ))}</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0 \xc2\xa0  <span class="cm-tag cm-bracket">&lt;/</span><span class="cm-tag">ul</span><span class="cm-tag cm-bracket">&gt;</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0  );</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">  }</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">}</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"><span cm-text="">\xe2\x80\x8b</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"><span class="cm-variable">ReactDOM</span>.<span class="cm-property">render</span>(<span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">TodoApp</span> <span class="cm-tag cm-bracket">/&gt;</span>, <span class="cm-variable">mountNode</span>);</span></pre>\n                 </div>\n                </div>\n               </div>\n              </div>\n             </div>\n             <div style="position: absolute; height: 30px; width: 1px; border-bottom: 0px solid transparent; top: 997px;">\n             </div>\n             <div class="CodeMirror-gutters" style="display: none; height: 1027px;">\n             </div>\n            </div>\n           </div>\n          </div>\n         </div>\n         <div class="playgroundPreview">\n          <div>\n           <div data-reactroot="">\n            <h3>\n             TODO\n            </h3>\n            <ul>\n            </ul>\n            <form>\n             <input value=""/>\n             <button>\n              Add #1\n             </button>\n            </form>\n           </div>\n          </div>\n         </div>\n        </div>\n       </div>\n      </div>\n      <div class="example">\n       <h3>\n        A Component Using External Plugins\n       </h3>\n       <p>\n        React is flexible and provides hooks that allow you to interface with\n        other libraries and frameworks. This example uses\n        <strong>\n         remarkable\n        </strong>\n        , an\n        external Markdown library, to convert the textarea\'s value in real time.\n       </p>\n       <div id="markdownExample">\n        <div class="playground" data-reactroot="">\n         <div>\n          <div class="playground-tab playground-tab-active">\n           Live JSX Editor\n          </div>\n          <div class="playground-tab">\n           Compiled JS\n          </div>\n         </div>\n         <div class="playgroundCode">\n          <div class="playgroundStage">\n           <textarea style="display: none;">class MarkdownEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.state = {value: \'Type some *markdown* here!\'};\n  }\n\n  handleChange(e) {\n    this.setState({value: e.target.value});\n  }\n\n  getRawMarkup() {\n    var md = new Remarkable();\n    return { __html: md.render(this.state.value) };\n  }\n\n  render() {\n    return (\n      &lt;div className="MarkdownEditor"&gt;\n        &lt;h3&gt;Input&lt;/h3&gt;\n        &lt;textarea\n          onChange={this.handleChange}\n          defaultValue={this.state.value} /&gt;\n        &lt;h3&gt;Output&lt;/h3&gt;\n        &lt;div\n          className="content"\n          dangerouslySetInnerHTML={this.getRawMarkup()}\n        /&gt;\n      &lt;/div&gt;\n    );\n  }\n}\n\nReactDOM.render(&lt;MarkdownEditor /&gt;, mountNode);</textarea>\n           <div class="CodeMirror cm-s-solarized-light CodeMirror-wrap">\n            <div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 14px; left: 14px;">\n             <textarea autocapitalize="off" autocorrect="off" spellcheck="false" style="position: absolute; padding: 0px; width: 1000px; height: 1em; outline: none;" tabindex="0"></textarea>\n            </div>\n            <div class="CodeMirror-vscrollbar" cm-not-content="true" style="bottom: 0px; width: 18px; pointer-events: none;">\n             <div style="min-width: 1px; height: 0px;">\n             </div>\n            </div>\n            <div class="CodeMirror-hscrollbar" cm-not-content="true" style="height: 18px; pointer-events: none;">\n             <div style="height: 100%; min-height: 1px; width: 0px;">\n             </div>\n            </div>\n            <div class="CodeMirror-scrollbar-filler" cm-not-content="true">\n            </div>\n            <div class="CodeMirror-gutter-filler" cm-not-content="true">\n            </div>\n            <div class="CodeMirror-scroll" tabindex="-1">\n             <div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 30px; min-height: 674px; padding-right: 0px; padding-bottom: 0px;">\n              <div style="position: relative; top: 0px;">\n               <div class="CodeMirror-lines">\n                <div style="position: relative; outline: none;">\n                 <div class="CodeMirror-measure">\n                  <pre><span>xxxxxxxxxx</span></pre>\n                 </div>\n                 <div class="CodeMirror-measure">\n                 </div>\n                 <div style="position: relative; z-index: 1;">\n                 </div>\n                 <div class="CodeMirror-cursors">\n                  <div class="CodeMirror-cursor" style="left: 14px; top: 0px; height: 19px;">\n                  </div>\n                 </div>\n                 <div class="CodeMirror-code">\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"><span class="cm-keyword">class</span> <span class="cm-def">MarkdownEditor</span> <span class="cm-keyword">extends</span> <span class="cm-variable">React</span>.<span class="cm-property">Component</span> {</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">  <span class="cm-property">constructor</span>(<span class="cm-def">props</span>) {</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0  <span class="cm-keyword">super</span>(<span class="cm-variable-2">props</span>);</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0  <span class="cm-keyword">this</span>.<span class="cm-property">handleChange</span> <span class="cm-operator">=</span> <span class="cm-keyword">this</span>.<span class="cm-property">handleChange</span>.<span class="cm-property">bind</span>(<span class="cm-keyword">this</span>);</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0  <span class="cm-keyword">this</span>.<span class="cm-property">state</span> <span class="cm-operator">=</span> {<span class="cm-property">value</span>: <span class="cm-string">\'Type some *markdown* here!\'</span>};</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">  }</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"><span cm-text="">\xe2\x80\x8b</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">  <span class="cm-property">handleChange</span>(<span class="cm-def">e</span>) {</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0  <span class="cm-keyword">this</span>.<span class="cm-property">setState</span>({<span class="cm-property">value</span>: <span class="cm-variable-2">e</span>.<span class="cm-property">target</span>.<span class="cm-property">value</span>});</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">  }</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"><span cm-text="">\xe2\x80\x8b</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">  <span class="cm-property">getRawMarkup</span>() {</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0  <span class="cm-keyword">var</span> <span class="cm-def">md</span> <span class="cm-operator">=</span> <span class="cm-keyword">new</span> <span class="cm-variable">Remarkable</span>();</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0  <span class="cm-keyword">return</span> { <span class="cm-property">__html</span>: <span class="cm-variable-2">md</span>.<span class="cm-property">render</span>(<span class="cm-keyword">this</span>.<span class="cm-property">state</span>.<span class="cm-property">value</span>) };</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">  }</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"><span cm-text="">\xe2\x80\x8b</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">  <span class="cm-property">render</span>() {</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0  <span class="cm-keyword">return</span> (</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0 \xc2\xa0  <span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">div</span> <span class="cm-attribute">className</span>=<span class="cm-string">"MarkdownEditor"</span><span class="cm-tag cm-bracket">&gt;</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0 \xc2\xa0 \xc2\xa0  <span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">h3</span><span class="cm-tag cm-bracket">&gt;</span>Input<span class="cm-tag cm-bracket">&lt;/</span><span class="cm-tag">h3</span><span class="cm-tag cm-bracket">&gt;</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0 \xc2\xa0 \xc2\xa0  <span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">textarea</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0  <span class="cm-attribute">onChange</span>={<span class="cm-keyword">this</span>.<span class="cm-property">handleChange</span>}</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0  <span class="cm-attribute">defaultValue</span>={<span class="cm-keyword">this</span>.<span class="cm-property">state</span>.<span class="cm-property">value</span>} <span class="cm-tag cm-bracket">/&gt;</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0 \xc2\xa0 \xc2\xa0  <span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">h3</span><span class="cm-tag cm-bracket">&gt;</span>Output<span class="cm-tag cm-bracket">&lt;/</span><span class="cm-tag">h3</span><span class="cm-tag cm-bracket">&gt;</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0 \xc2\xa0 \xc2\xa0  <span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">div</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0  <span class="cm-attribute">className</span>=<span class="cm-string">"content"</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0  <span class="cm-attribute">dangerouslySetInnerHTML</span>={<span class="cm-keyword">this</span>.<span class="cm-property">getRawMarkup</span>()}</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0 \xc2\xa0 \xc2\xa0  <span class="cm-tag cm-bracket">/&gt;</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0 \xc2\xa0  <span class="cm-tag cm-bracket">&lt;/</span><span class="cm-tag">div</span><span class="cm-tag cm-bracket">&gt;</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"> \xc2\xa0  );</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">  }</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;">}</span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"><span cm-text="">\xe2\x80\x8b</span></span></pre>\n                  <pre class=" CodeMirror-line "><span style="padding-right: 0.1px;"><span class="cm-variable">ReactDOM</span>.<span class="cm-property">render</span>(<span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">MarkdownEditor</span> <span class="cm-tag cm-bracket">/&gt;</span>, <span class="cm-variable">mountNode</span>);</span></pre>\n                 </div>\n                </div>\n               </div>\n              </div>\n             </div>\n             <div style="position: absolute; height: 30px; width: 1px; border-bottom: 0px solid transparent; top: 674px;">\n             </div>\n             <div class="CodeMirror-gutters" style="display: none; height: 704px;">\n             </div>\n            </div>\n           </div>\n          </div>\n         </div>\n         <div class="playgroundPreview">\n          <div>\n           <div class="MarkdownEditor" data-reactroot="">\n            <h3>\n             Input\n            </h3>\n            <textarea>Type some *markdown* here!</textarea>\n            <h3>\n             Output\n            </h3>\n            <div class="content">\n             <p>\n              Type some\n              <em>\n               markdown\n              </em>\n              here!\n             </p>\n            </div>\n           </div>\n          </div>\n         </div>\n        </div>\n       </div>\n      </div>\n     </div>\n     <script src="/react/js/remarkable.min.js">\n     </script>\n     <script src="/react/js/examples/hello.js">\n     </script>\n     <script src="/react/js/examples/timer.js">\n     </script>\n     <script src="/react/js/examples/todo.js">\n     </script>\n     <script src="/react/js/examples/markdown.js">\n     </script>\n    </section>\n    <hr class="home-divider"/>\n    <section class="home-bottom-section">\n     <div class="buttons-unit">\n      <a class="button" href="docs/hello-world.html">\n       Get Started\n      </a>\n      <a class="button" href="tutorial/tutorial.html">\n       Take the Tutorial\n      </a>\n     </div>\n    </section>\n    <p>\n    </p>\n   </section>\n   <footer class="nav-footer">\n    <section class="sitemap">\n     <a class="nav-home" href="/react/">\n     </a>\n     <div>\n      <h5>\n       <a href="/react/docs/">\n        Docs\n       </a>\n      </h5>\n      <a href="/react/docs/hello-world.html">\n       Quick Start\n      </a>\n      <a href="/react/docs/thinking-in-react.html">\n       Thinking in React\n      </a>\n      <a href="/react/tutorial/tutorial.html">\n       Tutorial\n      </a>\n      <a href="/react/docs/jsx-in-depth.html">\n       Advanced Guides\n      </a>\n     </div>\n     <div>\n      <h5>\n       <a href="/react/community/support.html">\n        Community\n       </a>\n      </h5>\n      <a href="http://stackoverflow.com/questions/tagged/reactjs" target="_blank">\n       Stack Overflow\n      </a>\n      <a href="https://discuss.reactjs.org/" target="_blank">\n       Discussion Forum\n      </a>\n      <a href="https://discord.gg/0ZcbPKXt5bZjGY5n" target="_blank">\n       Reactiflux Chat\n      </a>\n      <a href="https://www.facebook.com/react" target="_blank">\n       Facebook\n      </a>\n      <a href="https://twitter.com/reactjs" target="_blank">\n       Twitter\n      </a>\n     </div>\n     <div>\n      <h5>\n       <a href="/react/community/support.html">\n        Resources\n       </a>\n      </h5>\n      <a href="/react/community/conferences.html">\n       Conferences\n      </a>\n      <a href="/react/community/videos.html">\n       Videos\n      </a>\n      <a href="https://github.com/facebook/react/wiki/Examples" target="_blank">\n       Examples\n      </a>\n      <a href="https://github.com/facebook/react/wiki/Complementary-Tools" target="_blank">\n       Complementary Tools\n      </a>\n     </div>\n     <div>\n      <h5>\n       More\n      </h5>\n      <a href="/react/blog/">\n       Blog\n      </a>\n      <a href="https://github.com/facebook/react" target="_blank">\n       GitHub\n      </a>\n      <a href="http://facebook.github.io/react-native/" target="_blank">\n       React Native\n      </a>\n      <a href="/react/acknowledgements.html">\n       Acknowledgements\n      </a>\n     </div>\n    </section>\n    <a class="fbOpenSource" href="https://code.facebook.com/projects/" target="_blank">\n     <img alt="Facebook Open Source" height="45" src="/react/img/oss_logo.png" width="170"/>\n    </a>\n    <section class="copyright">\n     Copyright \xc2\xa9 2017 Facebook Inc.\n    </section>\n   </footer>\n  </div>\n  <div class=" fb_reset" id="fb-root">\n   <div style="position: absolute; top: -10000px; height: 0px; width: 0px;">\n    <div>\n     <iframe allowfullscreen="true" allowtransparency="true" aria-hidden="true" frameborder="0" id="fb_xdm_frame_https" name="fb_xdm_frame_https" scrolling="no" src="https://staticxx.facebook.com/connect/xd_arbiter/r/_dMxoUH0Bax.js?version=42#channel=f3b51ef40b42b&amp;origin=https%3A%2F%2Ffacebook.github.io" style="border: none;" tabindex="-1" title="Facebook Cross Domain Communication Frame">\n     </iframe>\n    </div>\n   </div>\n   <div style="position: absolute; top: -10000px; height: 0px; width: 0px;">\n    <div>\n    </div>\n   </div>\n  </div>\n  <script src="/react/js/anchor-links.js">\n  </script>\n  <script>\n   (function(i,s,o,g,r,a,m){i[\'GoogleAnalyticsObject\']=r;i[r]=i[r]||function(){\n    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n    })(window,document,\'script\',\'//www.google-analytics.com/analytics.js\',\'ga\');\n    ga(\'create\', \'UA-41298772-1\', \'facebook.github.io\');\n    ga(\'send\', \'pageview\');\n\n    !function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="https://platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");\n\n    (function(d, s, id) {\n      var js, fjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) return;\n      js = d.createElement(s); js.id = id;\n      js.src = "//connect.facebook.net/en_US/sdk.js#xfbml=1&amp;version=v2.6&amp;appId=623268441017527";\n      fjs.parentNode.insertBefore(js, fjs);\n    }(document, \'script\', \'facebook-jssdk\'));\n\n    docsearch({\n      apiKey: \'36221914cce388c46d0420343e0bb32e\',\n      indexName: \'react\',\n      inputSelector: \'#algolia-doc-search\'\n    });\n  </script>\n  <iframe allowfullscreen="true" allowtransparency="true" frameborder="0" id="rufous-sandbox" scrolling="no" style="position: absolute; visibility: hidden; display: none; width: 0px; height: 0px; padding: 0px; border: none;" title="Twitter analytics iframe">\n  </iframe>\n </body>\n</html>'