b'<html class="ng-scope" ng-app="jcs-demo">\n <head>\n  <style type="text/css">\n   @charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide{display:none !important;}ng\\:form{display:block;}.ng-animate-block-transitions{transition:0s all!important;-webkit-transition:0s all!important;}\n  </style>\n  <meta charset="utf-8"/>\n  <meta content="IE=edge" http-equiv="X-UA-Compatible"/>\n  <meta content="width=device-width, initial-scale=1, maximum-scale=1" name="viewport"/>\n  <link href="https://fonts.googleapis.com/css?family=Architects+Daughter" rel="stylesheet" type="text/css"/>\n  <link href="stylesheets/stylesheet.css" media="screen" rel="stylesheet" type="text/css"/>\n  <link href="stylesheets/print.css" media="print" rel="stylesheet" type="text/css"/>\n  <link href="//maxcdn.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css" rel="stylesheet" type="text/css"/>\n  <link href="http://prismjs.com/themes/prism.css" rel="stylesheet" type="text/css"/>\n  <link href="http://fonts.googleapis.com/css?family=Raleway:400,200" rel="stylesheet" type="text/css"/>\n  <!--[if lt IE 9]>\n    <script src="//html5shiv.googlecode.com/svn/trunk/html5.js"></script>\n    <![endif]-->\n  <title>\n   Angular-auto-validate by jonsamwell\n  </title>\n </head>\n <body>\n  <header>\n   <div class="inner">\n    <h1>\n     Angular-auto-validate\n    </h1>\n    <h2>\n     An automatic validation module for AngularJS which gets rid of excess html in favour of dynamic element modification to notify the user of validation errors\n    </h2>\n    <a class="button" href="https://github.com/jonsamwell/angular-auto-validate">\n     <small>\n      View project on\n     </small>\n     GitHub\n    </a>\n   </div>\n  </header>\n  <div id="content-wrapper">\n   <div class="inner clearfix">\n    <section id="main-content">\n     <h3 id="demo">\n      Demo.\n     </h3>\n     <p>\n      The below demo shows the functionality of this module.  Start typing into the inout boxes to see the validation.\n     </p>\n     <div class="ng-scope" ng-controller="demoCtrl">\n      <p>\n       <button class="btn btn-primary" ng-click="toggleBS3Icons();" type="button">\n        Toggle Validation State Icons\n       </button>\n      </p>\n      <form class="ng-pristine ng-invalid ng-invalid-required ng-invalid-mustcontainword" ng-submit="submit()" novalidate="novalidate" role="form">\n       <div class="form-group">\n        <label class="control-label">\n         Name\n        </label>\n        <input class="form-control ng-pristine ng-invalid ng-invalid-required" ng-model="user.name" placeholder="Enter Name" required="required" required-err-type="nameRequired" type="text"/>\n       </div>\n       <div class="form-group">\n        <label class="control-label">\n         Email address -\n         <small>\n          Element with a custom element modifier (see source code)\n         </small>\n        </label>\n        <input class="form-control ng-pristine ng-invalid ng-invalid-required ng-valid-email" element-modifier="myCustomModifierKey" ng-model="user.email" placeholder="Enter email" required="required" type="email"/>\n       </div>\n       <div class="form-group">\n        <label class="control-label">\n         Password -\n         <small>\n          Element with validation happening on blur rather than change\n         </small>\n        </label>\n        <input class="form-control ng-pristine ng-invalid ng-invalid-required ng-valid-minlength" ng-minlength="6" ng-model="user.password" ng-model-options="{updateOn: \'blur\'}" placeholder="Password" required="required" type="password"/>\n       </div>\n       <div class="form-group">\n        <label class="control-label">\n         Robot Test: Please spell Angular. -\n         <small>\n          Custom validation\n         </small>\n        </label>\n        <input class="form-control ng-pristine ng-invalid ng-invalid-mustcontainword" mustcontainword="angular" ng-model="user.iq" placeholder="Enter The Word Angular" type="text"/>\n       </div>\n       <div class="form-group">\n        <label class="control-label">\n         Valid Visual Styling Disabled At Element Level\n        </label>\n        <input class="form-control ng-pristine ng-invalid ng-invalid-required" disable-valid-styling="true" ng-model="user.somePropertyA" placeholder="Please enter a value - this is required" required="" type="text"/>\n       </div>\n       <button class="btn btn-primary" type="submit">\n        Submit\n       </button>\n       <button class="btn btn-default" type="reset">\n        Reset\n       </button>\n      </form>\n     </div>\n     <h3 id="getting_started">\n      Getting Started.\n     </h3>\n     <div class="callout">\n      <p>\n       For the best overview of the module and module architecture see my\n       <a href="http://jonsamwell.com/dynamic-angularjs-validation/">\n        original blog post here\n       </a>\n       .\n      </p>\n     </div>\n     <p>\n      Install and manage angular-auto-validate with\n      <a href="http://bower.io">\n       Bower\n      </a>\n      .\n     </p>\n     <pre class="language-javascript"><code class="language-javascript">$ bower install angular<span class="token operator">-</span>auto<span class="token operator">-</span>validate <span class="token operator">--</span>save</code></pre>\n     <p>\n      Load the required javascript libraries\n     </p>\n     <pre class="language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bower_components/angular-auto-validate/dist/jcs-auto-validate.min.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></code></pre>\n     <p>\n      Inject the jcs-auto-validate into your application\n     </p>\n     <pre class="language-javascript"><code class="language-javascript">angular<span class="token punctuation">.</span><span class="token function">module</span><span class="token punctuation">(</span><span class="token string">\'my-app\'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">\'jcs-autoValidate\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n     <p>\n      If you are using bootstrap 3 that\'s it, unless you wish the valid and invalid states of your controls to be\n                indicated via icons, otherwise auto-validate is setup!\n     </p>\n     <pre class="language-javascript"><code class="language-javascript">angular<span class="token punctuation">.</span><span class="token function">module</span><span class="token punctuation">(</span><span class="token string">\'my-app\'</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n        <span class="token string">\'bootstrap3ElementModifier\'</span><span class="token punctuation">,</span>\n        <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">bootstrap3ElementModifier</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              bootstrap3ElementModifier<span class="token punctuation">.</span><span class="token function">enableValidationStateIcons</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n       <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n     <p>\n      if you are using Foundation 5 you will need to set the Foundation 5 element modifier as the default one\n     </p>\n     <pre class="language-javascript"><code class="language-javascript">angular<span class="token punctuation">.</span><span class="token function">module</span><span class="token punctuation">(</span><span class="token string">\'my-app\'</span><span class="token punctuation">)</span>\n       <span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n       <span class="token string">\'validator\'</span><span class="token punctuation">,</span>\n       <span class="token string">\'foundation5ElementModifier\'</span><span class="token punctuation">,</span>\n       <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">validator<span class="token punctuation">,</span> foundation5ElementModifier</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n           validator<span class="token punctuation">.</span><span class="token function">setDefaultElementModifier</span><span class="token punctuation">(</span>foundation5ElementModifier<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n       <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n     <p>\n      If you are not using Bootstrap3 or Foundation5 you will need to create a custom element modifier so\n      <a href="custom_dom_modifiers">\n       see the below section\n      </a>\n     </p>\n     <h3 id="your_form">\n      Your Form\n     </h3>\n     <p>\n      Now that you are using auto-validate you haven\'t got to worry about putting your error messages in you html\n            or using any angular expressions to show or hide them depending on the validation state.  So now your form markup remains\n            clean and maintainable\n     </p>\n     <pre class="language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>signupFrm<span class="token punctuation">"</span></span> <span class="token attr-name">novalidate</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>novalidate<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-row<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">&gt;</span></span>Username:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span>\n            <span class="token attr-name">ng-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>model.username<span class="token punctuation">"</span></span>\n            <span class="token attr-name">ng-minlength</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span>\n            <span class="token attr-name">ng-maxlength</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span>\n            <span class="token attr-name">required</span><span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-row<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">&gt;</span></span>Password:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span>\n            <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span>\n            <span class="token attr-name">ng-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>model.password<span class="token punctuation">"</span></span>\n            <span class="token attr-name">ng-minlength</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span>\n            <span class="token attr-name">ng-maxlength</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span>\n            <span class="token attr-name">required</span><span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>\n</code></pre>\n     <h4>\n      Form Resetting\n     </h4>\n     <p>\n      Auto-Validate automatically hooks into your form reset and clears all the validation error states from the input controls.  To enable this\n            simply add a button of type reset within your form element (just like you would a submit button).  Using the $setPristine method on the ngModel\n            controller will also return the element to its default visual state and clear and validation errors or success styling.\n     </p>\n     <pre class="language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Reset<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span></code></pre>\n     <br/>\n     <h4 id="enabl-disable-styling">\n      Enable / Disable Visual Styling\n     </h4>\n     <p>\n      If you want to globally disable visual styling of elements you can call the below methods on the validator provider.  You might for instance\n            not want valid elements styled.  By default elements will be styled in all validation states.\n     </p>\n     <pre class="language-javascript"><code class="language-javascript">angular<span class="token punctuation">.</span><span class="token function">module</span><span class="token punctuation">(</span><span class="token string">\'my-app\'</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n                <span class="token string">\'validator\'</span><span class="token punctuation">,</span>\n                <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">validator</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    validator<span class="token punctuation">.</span><span class="token function">setValidElementStyling</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    validator<span class="token punctuation">.</span><span class="token function">setInvalidElementStyling</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n     <br/>\n     <p>\n      You can disable visual validation states at an element level as well by adding the attributes\n      <code>\n       disable-valid-styling="true"\n      </code>\n      to disable the valid state element styling and\n      <code>\n       disable-invalid-styling="true"\n      </code>\n      to disable the invalid state visual styling.\n     </p>\n     <pre class="language-markup"><code class="language-markup"><span class="token comment">&lt;!-- auto-validate will not style the element when it is in a valid state --&gt;</span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>\n                <span class="token attr-name">ng-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>model.firstname<span class="token punctuation">"</span></span>\n                <span class="token attr-name">required</span>\n                <span class="token attr-name">disable-valid-styling</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>\n\n            <span class="token comment">&lt;!-- auto-validate will not style the element when it is in an invalid state --&gt;</span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>\n                <span class="token attr-name">ng-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>model.surname<span class="token punctuation">"</span></span>\n                <span class="token attr-name">ng-minlength</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span>\n                <span class="token attr-name">disable-invalid-styling</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>\n            </code></pre>\n     <br/>\n     <br/>\n     <h4 id="disable-error-message">\n      Disable Validation Messages\n     </h4>\n     <p>\n      You can disable the validation message appearing for a particular element by adding the attribute\n      <code>\n       disable-validation-message=""\n      </code>\n      to the element.\n     </p>\n     <pre class="language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> auto<span class="token operator">-</span>validate will not add the error message to the element when it is <span class="token keyword">in</span> an invalid state <span class="token operator">--</span><span class="token operator">&gt;</span>\n                <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span>\n                ng<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"model.surname"</span>\n                ng<span class="token operator">-</span>minlength<span class="token operator">=</span><span class="token string">"2"</span>\n                disable<span class="token operator">-</span>validation<span class="token operator">-</span>message<span class="token operator">=</span><span class="token string">""</span><span class="token operator">/</span><span class="token operator">&gt;</span></code></pre>\n     <br/>\n     <h4 id="overriding_error_message">\n      Overriding Error Messages\n     </h4>\n     <p>\n      By default this module ships with error messages for all the supported validation types in angular.  However, if any default error message is\n                not quite what you want for a particular element you can override the errorType that is used for a particular validation type by\n                adding the attribute\n      <code>\n       *-err-type="errorTypeKey"\n      </code>\n      where \'*\' is the validation type you want to override to the specific element you want changed.\n     </p>\n     <pre class="language-markup"><code class="language-markup"><span class="token comment">&lt;!-- auto-validate will try and find a error message with a key of \'firstNameRequired\' --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>\n    <span class="token attr-name">ng-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>model.firstname<span class="token punctuation">"</span></span>\n    <span class="token attr-name">required</span>\n    <span class="token attr-name">required-err-type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>firstNameRequired<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>\n\n<span class="token comment">&lt;!-- auto-validate will try and find a error message with a key of \'surnameMinLength\' --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>\n    <span class="token attr-name">ng-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>model.surname<span class="token punctuation">"</span></span>\n    <span class="token attr-name">ng-minlength</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span>\n    <span class="token attr-name">ng-minlength-err-type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>surnameMinLength<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>\n</code></pre>\n     <br/>\n     <h4>\n      Changing Element States\n     </h4>\n     <p>\n      If you want a certain element to appear differently to other elemenets when it is valid/invalid you can still do that by just specifying which element modifier\n                should be used to modify the elements visual state. This can be achieve by using the attribute\n      <code>\n       element-modifier="elementModifierKey"\n      </code>\n      .\n     </p>\n     <pre class="language-markup"><code class="language-markup"><span class="token comment">&lt;!-- auto-validate will use the default element modifier --&gt;</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>\n    <span class="token attr-name">ng-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>model.firstname<span class="token punctuation">"</span></span>\n    <span class="token attr-name">required</span>\n    <span class="token attr-name">ng-minlength</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>\n\n    <span class="token comment">&lt;!-- auto-validate will try to find a custom modifier with the key \'myCustomModifier\' --&gt;</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>\n    <span class="token attr-name">ng-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>model.middlename<span class="token punctuation">"</span></span>\n    <span class="token attr-name">required</span>\n    <span class="token attr-name">ng-minlength</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span>\n    <span class="token attr-name">element-modifier</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myCustomModifier<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>\n\n    <span class="token comment">&lt;!-- auto-validate will try to find a custom modifier with the key \'myOtherCustomModifier\' --&gt;</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>\n    <span class="token attr-name">ng-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>model.surname<span class="token punctuation">"</span></span>\n    <span class="token attr-name">required</span>\n    <span class="token attr-name">ng-minlength</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span>\n    <span class="token attr-name">element-modifier</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myOtherCustomModifier<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>\n</code></pre>\n     <h3 id="ngmodeloptions">\n      NgModelOptions Support\n     </h3>\n     <p>\n      By default AngularJS triggers validation on change, while this is great for illustrating the power of Angular\n                it can be somewhat annoying to the user if they are typing their name in and after the first letter it tells\n                them their name must be more than 3 characters. Now Angular 1.3+ has the support for ngModelOptions which\n                lets us specify when Angular should update the bound model and fire the validation process. We can\n                now easily specify it should be on blur rather than on change. However, those of us who need to support\n                older browsers (IE8) cannot use this newer version as it does not officially support them. So, I have\n                added very rudimentary support for the updateOn option of ngModelOptions even for Angular 1.2 and below!\n                Simply add the ngModelOption directive as usual and you can easily change the trigger event of the element.\n     </p>\n     <pre class="language-markup"><code class="language-markup">\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>\n       <span class="token attr-name">ng-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>model.name<span class="token punctuation">"</span></span>\n       <span class="token attr-name">ng-model-options</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{updateOn: \'blur\'}<span class="token punctuation">"</span></span>\n       <span class="token attr-name">required</span>\n       <span class="token attr-name">ng-minlength</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>\n            </code></pre>\n     <h3 id="ngsubmit">\n      ngSubmit\n     </h3>\n     <p>\n      The typical way to test if a form is valid before submitting is to pass the form into the ngSubmit method\n            you define on your scope.  This isn\'t ideal as you are passing in a psuedo UI element into your controller.  I would prefer\n            that the ngSubmit function you defined is simply not called if the form is invalid.  Luckily, this is exactly what happens\n            in auto-validate.  When the user clicks on the submit button the form is validated and the child UI elements have their\n            validation states applied so the user can see what is valid/invalid.  Only if the whole form is valid will the ngSubmit method\n            be called.  Of course, it you would prefer it is called even if the form is invalid you can use the ngSubmitForce attribute shown below.\n     </p>\n     <pre class="language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>signupFrm<span class="token punctuation">"</span></span> <span class="token attr-name">novalidate</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>novalidate<span class="token punctuation">"</span></span> <span class="token attr-name">ng-submit</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit();<span class="token punctuation">"</span></span> <span class="token attr-name">ng-submit-force</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-row<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">&gt;</span></span>Username:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span>\n        <span class="token attr-name">ng-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>model.username<span class="token punctuation">"</span></span>\n        <span class="token attr-name">ng-minlength</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span>\n        <span class="token attr-name">ng-maxlength</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span>\n        <span class="token attr-name">required</span><span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-row<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">&gt;</span></span>Password:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span>\n        <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span>\n        <span class="token attr-name">ng-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>model.username<span class="token punctuation">"</span></span>\n        <span class="token attr-name">ng-minlength</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span>\n        <span class="token attr-name">ng-maxlength</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span>\n        <span class="token attr-name">required</span><span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>\n</code></pre>\n     <h3 id="error_message_resolver">\n      Error Message Resolver\n     </h3>\n     <p>\n      An error message resolver is an object that turns a validation error type (required, minlength etc) into an actual validation message\n                that can be displayed to the user to help them rectify the validation error.  By default auto-validate has one built in that contains\n            English error messages for all the default angular validation types.  However if you have custom validation filters you will need to add them\n            to the default error message resolver in order to provide a custom error message when that validation type if triggered.\n     </p>\n     <pre class="language-javascript"><code class="language-javascript">angular<span class="token punctuation">.</span><span class="token function">module</span><span class="token punctuation">(</span><span class="token string">\'jcs-autoValidate\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n    <span class="token string">\'defaultErrorMessageResolver\'</span><span class="token punctuation">,</span>\n    <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">defaultErrorMessageResolver</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// passing a culture into getErrorMessages(\'fr-fr\') will get the culture specific messages</span>\n        <span class="token comment">// otherwise the current default culture is returned.</span>\n        defaultErrorMessageResolver<span class="token punctuation">.</span><span class="token function">getErrorMessages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">errorMessages</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          errorMessages<span class="token punctuation">[</span><span class="token string">\'myCustomError\'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">\'My custom error message\'</span><span class="token punctuation">;</span>\n          errorMessages<span class="token punctuation">[</span><span class="token string">\'anotherErrorMessage\'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">\'An error message with the attribute value {0}\'</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            </code></pre>\n     <h3 id="i18n">\n      i18n\n     </h3>\n     The default error message resolver that is enabled out of the box now has i18n support!  While this is fairly basic support\n            it gives enough to not have to implement a custom error message resolver to do complex translations.  The default culture is\n            \'en-GB\' which is basically \'en-US\'.\n     <h5>\n      Setting a Culture\n     </h5>\n     The default culture for error messages is \'en-GB\' this can be changed by simply setting the correct culture on the defaultErrorMessageResolver.\n            This will automatically go off and fetch the correct culture resource file from the server.  By default the library will request the file from\n            \'{js/angular-auto-validate/dist/lang}/jcs-auto-validate_##-##.json\'.  However, if the culture files are in a different location you can set the\n            root path for the culture files (the part of the above url in brackets {js/angular-auto-validate/dist/lang}) by calling\n     <code>\n      setI18nFileRootPath(\'some/path)\n     </code>\n     <pre class="language-javascript"><code class="language-javascript">angular<span class="token punctuation">.</span><span class="token function">module</span><span class="token punctuation">(</span><span class="token string">\'jcs-autoValidate\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n    <span class="token string">\'defaultErrorMessageResolver\'</span><span class="token punctuation">,</span>\n    <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">defaultErrorMessageResolver</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// To change the root resource file path</span>\n        <span class="token comment">//defaultErrorMessageResolver.setI18nFileRootPath(\'some/path);</span>\n        defaultErrorMessageResolver<span class="token punctuation">.</span><span class="token function">setCulture</span><span class="token punctuation">(</span><span class="token string">\'fr-FR\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            </code></pre>\n     Alternatively, you can provide your own loading function to the setCulture method that should return a promise and resolve that promise with the object\n            structure expected in a resource file.\n     <pre class="language-javascript"><code class="language-javascript">angular<span class="token punctuation">.</span><span class="token function">module</span><span class="token punctuation">(</span><span class="token string">\'jcs-autoValidate\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n    <span class="token string">\'$q\'</span><span class="token punctuation">,</span>\n    <span class="token string">\'defaultErrorMessageResolver\'</span><span class="token punctuation">,</span>\n    <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">$q<span class="token punctuation">,</span> defaultErrorMessageResolver</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n        defaultErrorMessageResolver<span class="token punctuation">.</span><span class="token function">setCulture</span><span class="token punctuation">(</span><span class="token string">\'fr-FR\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">var</span> defer <span class="token operator">=</span> $q<span class="token punctuation">.</span><span class="token function">defer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token comment">// you can get the error messages however you want and resolve the promise when they are loaded</span>\n            <span class="token comment">// defer.resolve(errorMessagesRetreivedBySomeMethod);</span>\n            <span class="token keyword">return</span> defer<span class="token punctuation">.</span>promise<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            </code></pre>\n     <h5>\n      Small Caveat\n     </h5>\n     <p>\n      While I might know lots of programming languages I do not know many (well only one) actual language.  So at the moment we only have English\n                and French translations. If you can translate the default \'angular-auto-validate_en-GB.json\' into any other language that would be great!  PR the repo\n                or email me it as that would be awesome!\n     </p>\n     <br/>\n     <h4 id="custom_error_resolver">\n      Custom Error Message Resolver\n     </h4>\n     <p>\n      If you need more fined grained control over how a validation error type is converted into an error message you may wish to create a\n            custom error message resolver.  This is really simple and you can do anything you like to resolve an error type into a error message.  You might\n            for instance need to provide a custom translation into the user\'s language or go to the server etc.\n     </p>\n     <pre class="language-javascript"><code class="language-javascript">\nangular<span class="token punctuation">.</span><span class="token function">module</span><span class="token punctuation">(</span><span class="token string">\'my-app\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">factory</span><span class="token punctuation">(</span><span class="token string">\'myCustomErrorMessageResolver\'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>\n    <span class="token string">\'$q\'</span><span class="token punctuation">,</span>\n    <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">$q</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">/**\n        * @ngdoc function\n        * @name defaultErrorMessageResolver#resolve\n        * @methodOf defaultErrorMessageResolver\n        *\n        * @description\n        * Resolves a validate error type into a user validation error message\n        *\n        * @param {String} errorType - The type of validation error that has occurred.\n        * @param {Element} el - The input element that is the source of the validation error.\n        * @returns {Promise} A promise that is resolved when the validation message has been produced.\n        */</span>\n        <span class="token keyword">var</span> <span class="token function-variable function">resolve</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">errorType<span class="token punctuation">,</span> el</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">var</span> defer <span class="token operator">=</span> $q<span class="token punctuation">.</span><span class="token function">defer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">// do something to get the error message</span>\n            <span class="token comment">// then resolve the promise defer.resolve(\'some error message\');</span>\n            <span class="token keyword">return</span> defer<span class="token punctuation">.</span>promise<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">return</span> <span class="token punctuation">{</span>\n            resolve<span class="token punctuation">:</span> resolve\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// now set the custom error resolver as the module\'s default one.</span>\nangular<span class="token punctuation">.</span><span class="token function">module</span><span class="token punctuation">(</span><span class="token string">\'my-app\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n    <span class="token string">\'validator\'</span><span class="token punctuation">,</span>\n    <span class="token string">\'myCustomErrorMessageResolver\'</span><span class="token punctuation">,</span>\n    <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">validator<span class="token punctuation">,</span> myCustomErrorMessageResolver</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        validator<span class="token punctuation">.</span><span class="token function">setErrorMessageResolver</span><span class="token punctuation">(</span>myCustomErrorMessageResolver<span class="token punctuation">.</span>resolve<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n     <h3 id="custom_dom_modifiers">\n      Custom Element Modifier\n     </h3>\n     <p>\n      If you are not using Bootstrap3 or Foundation5 CSS libraries you will need to create a custom element modifier\n                which takes care of updating the visual state of an element, don\'t worry this is really easy! You can see a few example\n            of what to put in them\n      <a href="" target="_blank">\n       here\n      </a>\n      and\n      <a href="" target="_blank">\n       here\n      </a>\n      .\n     </p>\n     <pre class="language-javascript"><code class="language-javascript">angular<span class="token punctuation">.</span><span class="token function">module</span><span class="token punctuation">(</span><span class="token string">\'my-app\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">factory</span><span class="token punctuation">(</span><span class="token string">\'myCustomElementModifier\'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>\n        <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">var</span> <span class="token comment">/**\n            * @ngdoc function\n            * @name myCustomElementModifier#makeValid\n            * @methodOf myCustomElementModifier\n            *\n            * @description\n            * Makes an element appear valid by apply custom styles and child elements.\n            *\n            * @param {Element} el - The input control element that is the target of the validation.\n            */</span>\n            <span class="token function-variable function">makeValid</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// do some code here...</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n            <span class="token comment">/**\n            * @ngdoc function\n            * @name myCustomElementModifier#makeInvalid\n            * @methodOf myCustomElementModifier\n            *\n            * @description\n            * Makes an element appear invalid by apply custom styles and child elements.\n            *\n            * @param {Element} el - The input control element that is the target of the validation.\n            * @param {String} errorMsg - The validation error message to display to the user.\n            */</span>\n            <span class="token function-variable function">makeInvalid</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> errorMsg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// do some code here...</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n\n            <span class="token comment">/**\n            * @ngdoc function\n            * @name myCustomElementModifier#makeDefault\n            * @methodOf myCustomElementModifier\n            *\n            * @description\n            * Makes an element appear in its default visual state.\n            *\n            * @param {Element} el - The input control element that is the target of the validation.\n            */</span>\n            <span class="token function-variable function">makeDefault</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token comment">// return the element to a default visual state i.e. before any form of validation was applied</span>\n            <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n            <span class="token keyword">return</span> <span class="token punctuation">{</span>\n                makeValid<span class="token punctuation">:</span> makeValid<span class="token punctuation">,</span>\n                makeInvalid<span class="token punctuation">:</span> makeInvalid<span class="token punctuation">,</span>\n                makeDefault<span class="token punctuation">:</span> makeDefault<span class="token punctuation">,</span>\n                key<span class="token punctuation">:</span> <span class="token string">\'myCustomModifierKey\'</span>\n            <span class="token punctuation">}</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// now register the custom element modifier with the auto-validate module and set it as the default one for all elements</span>\nangular<span class="token punctuation">.</span><span class="token function">module</span><span class="token punctuation">(</span><span class="token string">\'my-app\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n    <span class="token string">\'validator\'</span><span class="token punctuation">,</span>\n    <span class="token string">\'myCustomElementModifier\'</span><span class="token punctuation">,</span>\n    <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">validator<span class="token punctuation">,</span> myCustomElementModifier</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        validator<span class="token punctuation">.</span><span class="token function">registerDomModifier</span><span class="token punctuation">(</span>myCustomElementModifier<span class="token punctuation">.</span>key<span class="token punctuation">,</span> myCustomElementModifier<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        validator<span class="token punctuation">.</span><span class="token function">setDefaultElementModifier</span><span class="token punctuation">(</span>myCustomElementModifier<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n</code></pre>\n     <h3 id="author">\n      <a class="anchor" href="#authors-and-contributors" name="authors-and-contributors">\n       <span class="octicon octicon-link">\n       </span>\n      </a>\n      Authors and Contributors\n     </h3>\n     <p>\n      Originally authored by\n      <a href="http://www.jonsamwell.com" target="_blank">\n       Jon Samwell\n      </a>\n      .\n     </p>\n     <p>\n      Contributions from\n      <a href="https://github.com/DanielBodnar" target="_blank">\n       @DanielBodnar\n      </a>\n      ,\n      <a href="https://github.com/jgoux" target="_blank">\n       @jgoux\n      </a>\n      ,\n      <a href="http://stackoverflow.com/users/3584541/vonwolf" target="_blank">\n       @vonwolf\n      </a>\n      &amp;\n      <a href="https://github.com/miseeger" target="_blank">\n       @miseeger\n      </a>\n     </p>\n     <h3 id="issues">\n      <a class="anchor" href="#support-or-contact" name="support-or-contact">\n       <span class="octicon octicon-link">\n       </span>\n      </a>\n      Support or Contact\n     </h3>\n     <p>\n      Add all issues and feature ideas to the\n      <a href="https://github.com/jonsamwell/angular-auto-validate">\n       github repo\n      </a>\n     </p>\n    </section>\n    <aside id="sidebar">\n     <h3>\n      Menu\n     </h3>\n     <ul>\n      <li>\n       <a href="#getting_started">\n        Getting Started\n       </a>\n      </li>\n      <li>\n       <a href="#demo">\n        Demo\n       </a>\n      </li>\n      <li>\n       <a href="#your_form">\n        Your Form\n       </a>\n      </li>\n      <li>\n       <a href="#enabl-disable-styling">\n        Enable / Disable Visual Styling\n       </a>\n      </li>\n      <li>\n       <a href="#disable-error-message">\n        Disable Error Messages\n       </a>\n      </li>\n      <li>\n       <a href="#overriding_error_message">\n        Overriding Error Messages\n       </a>\n      </li>\n      <li>\n       <a href="#ngmodeloptions">\n        NgModelOptions Support\n       </a>\n      </li>\n      <li>\n       <a href="#ngsubmit">\n        ngSubmit\n       </a>\n      </li>\n      <li>\n       <a href="#error_message_resolver">\n        Error Message Resolver\n       </a>\n      </li>\n      <li>\n       <a href="#i18n">\n        i18n\n       </a>\n      </li>\n      <li>\n       <a href="#custom_dom_modifiers">\n        Custom Dom Modifiers\n       </a>\n      </li>\n      <li>\n       <a href="#author">\n        Author and Contributors\n       </a>\n      </li>\n      <li>\n       <a href="#issues">\n        Issues and Feature Requests\n       </a>\n      </li>\n     </ul>\n     <a class="button" href="https://github.com/jonsamwell/angular-auto-validate/zipball/master">\n      <small>\n       Download\n      </small>\n      .zip file\n     </a>\n     <a class="button" href="https://github.com/jonsamwell/angular-auto-validate/tarball/master">\n      <small>\n       Download\n      </small>\n      .tar.gz file\n     </a>\n     <p class="repo-owner">\n      <a href="https://github.com/jonsamwell/angular-auto-validate">\n      </a>\n      is maintained by\n      <a href="https://github.com/jonsamwell">\n       jonsamwell\n      </a>\n      .\n     </p>\n     <p>\n      This page was generated by\n      <a href="https://pages.github.com">\n       GitHub Pages\n      </a>\n      using the Architect theme by\n      <a href="https://twitter.com/jasonlong">\n       Jason Long\n      </a>\n      .\n     </p>\n    </aside>\n   </div>\n  </div>\n  <script src="http://prismjs.com/prism.js" type="text/javascript">\n  </script>\n  <script src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/2.4.1/lodash.min.js">\n  </script>\n  <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.2.16/angular.min.js">\n  </script>\n  <script src="javascripts/angular-auto-validate/dist/jcs-auto-validate.min.js">\n  </script>\n  <script type="text/javascript">\n   (function (angular) {\n            var app = angular.module(\'jcs-demo\', [\'jcs-autoValidate\']);\n\n            app.controller(\'demoCtrl\', [\n                \'$scope\',\n                \'bootstrap3ElementModifier\',\n                function ($scope, bootstrap3ElementModifier) {\n                    $scope.user = {};\n                    $scope.bs3Icons = false;\n\n                    $scope.toggleBS3Icons = function () {\n                        $scope.bs3Icons = !$scope.bs3Icons;\n                        bootstrap3ElementModifier.enableValidationStateIcons($scope.bs3Icons);\n                    }\n\n                    $scope.toggleBS3Icons();\n\n                    $scope.submit = function () {\n                        alert(\'Form is valid and submitted\');\n                    }\n                }\n            ]);\n\n            app.directive(\'mustcontainword\', [\n                function() {\n                    return {\n                        restrict: \'A\',\n                        require: \'ngModel\',\n                        link: function(scope, elm, attrs, ctrl) {\n                            var validateFn = function (viewValue) {\n                                if (ctrl.$isEmpty(viewValue) || viewValue.toLowerCase().indexOf(attrs.mustcontainword.toLowerCase()) === -1) {\n                                    ctrl.$setValidity(\'mustcontainword\', false);\n                                    return undefined;\n                                } else {\n                                    ctrl.$setValidity(\'mustcontainword\', true);\n                                    return viewValue;\n                                }\n                            };\n\n                            ctrl.$parsers.push(validateFn);\n                            ctrl.$formatters.push(validateFn);\n                        }\n                    }\n            }]);\n\n            app.factory(\'myCustomElementModifier\', [\n                function () {\n                    var /**\n                             * @ngdoc function\n                             * @name myCustomElementModifier#makeValid\n                             * @methodOf myCustomElementModifier\n                             *\n                             * @description\n                             * Makes an element appear valid by apply custom styles and child elements.\n                             *\n                             * @param {Element} el - The input control element that is the target of the validation.\n                             */\n                            makeValid = function (el) {\n                                el.removeClass(\'bg-red\');\n                                el.addClass(\'bg-green\');\n                            },\n\n                            /**\n                             * @ngdoc function\n                             * @name myCustomElementModifier#makeInvalid\n                             * @methodOf myCustomElementModifier\n                             *\n                             * @description\n                             * Makes an element appear invalid by apply custom styles and child elements.\n                             *\n                             * @param {Element} el - The input control element that is the target of the validation.\n                             * @param {String} errorMsg - The validation error message to display to the user.\n                             */\n                            makeInvalid = function (el, errorMsg) {\n                                el.removeClass(\'bg-green\');\n                                el.addClass(\'bg-red\');\n                            },\n\n                            /**\n                             * @ngdoc function\n                             * @name myCustomElementModifier#makeDefault\n                             * @methodOf myCustomElementModifier\n                             *\n                             * @description\n                             * Makes an element appear in it default state.\n                             *\n                             * @param {Element} el - The input control element that is the target of the validation.\n                             */\n                            makeDefault = function (el) {\n                                el.removeClass(\'bg-green\');\n                                el.removeClass(\'bg-red\');\n                            };\n\n                    return {\n                        makeValid: makeValid,\n                        makeInvalid: makeInvalid,\n                        makeDefault: makeDefault,\n                        key: \'myCustomModifierKey\'\n                    };\n                }\n            ]);\n\n            // now register the custom element modifier with the auto-validate module and set it as the default one for all elements\n            app.run([\n                \'validator\',\n                \'myCustomElementModifier\',\n                 \'defaultErrorMessageResolver\',\n                function (validator, myCustomElementModifier, defaultErrorMessageResolver) {\n                    validator.registerDomModifier(myCustomElementModifier.key, myCustomElementModifier);\n                    defaultErrorMessageResolver.getErrorMessages().then(function (errorMessages) {\n                        errorMessages[\'mustcontainword\'] = \'Please enter the word "{0}"\';\n                        errorMessages[\'nameRequired\'] = \'Please enter your name :-)\';\n                    });\n                }\n            ]);\n        }(angular));\n  </script>\n </body>\n</html>'